"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return fn(new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))); } };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, "", "", null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, "", "", null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $dummyGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [], canBlock: false };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $goroutine.canBlock = true;
  $schedule($goroutine, direct);
};

var $scheduled = [], $schedulerActive = false;
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
    $schedulerActive = false;
  } finally {
    if ($schedulerActive) {
      setTimeout($runScheduled, 0);
    }
  }
};
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerActive) {
    $schedulerActive = true;
    setTimeout($runScheduled, 0);
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if (!$curGoroutine.canBlock) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var $ptr, key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var $ptr, key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var $ptr, key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var $ptr, i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var $ptr, i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var $ptr, args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var $ptr, args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var $ptr, args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var $ptr, o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var $ptr, o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var $ptr, o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var $ptr, o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var $ptr, o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var $ptr, err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var $ptr, e;
		e = new Error.ptr(null);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, Error, TypeAssertionError, errorString, ptrType$4, init, Caller, Goexit, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var $ptr, e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var $ptr, msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
	};
	Caller = function(skip) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		var $ptr;
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var $ptr, f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
		var $ptr;
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var $ptr, e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var $ptr, e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var $ptr, text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var $ptr, addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var $ptr, addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var $ptr, addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
		var $ptr;
	};
	$pkg.Disable = Disable;
	Enable = function() {
		var $ptr;
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var $ptr, addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var $ptr, addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	AddInt32 = function(addr, delta) {
		var $ptr, addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint32 = function(addr) {
		var $ptr, addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	StoreUint32 = function(addr, val) {
		var $ptr, addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, race, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$4, ptrType$6, sliceType$3, ptrType$7, ptrType$8, funcType, ptrType$12, funcType$1, ptrType$13, arrayType$1, semWaiters, allPools, runtime_Syncsemcheck, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_canSpin, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$3.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$3.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			this.pad = arrayType$1.zero();
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
		this.pad = pad_;
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$4 = $ptrType($Int32);
	ptrType$6 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$7 = $ptrType(rlocker);
	ptrType$8 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$12 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$13 = $ptrType(Once);
	arrayType$1 = $arrayType($Uint8, 128);
	runtime_Syncsemcheck = function(size) {
		var $ptr, size;
	};
	Pool.ptr.prototype.Get = function() {
		var $ptr, _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return _r;
			/* } */ case 4:
			return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var $ptr, p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var $ptr, cleanup;
	};
	runtime_Semacquire = function(s) {
		var $ptr, _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var $ptr, _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_canSpin = function(i) {
		var $ptr, i;
		return false;
	};
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, awoke, iter, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; awoke = $f.awoke; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire(m);
			}
			return;
		}
		awoke = false;
		iter = 0;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			/* */ if (!(((old & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((old & 1) === 0))) { */ case 3:
				if (runtime_canSpin(iter)) {
					if (!awoke && ((old & 2) === 0) && !(((old >> 2 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
						awoke = true;
					}
					runtime_doSpin();
					iter = iter + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
				new$1 = old + 4 >> 0;
			/* } */ case 4:
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				awoke = true;
				iter = 0;
			/* } */ case 6:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire(m);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.awoke = awoke; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			race.Release(m);
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$4(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 3:
				$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		var $ptr;
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var $ptr, i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	init$1 = function() {
		var $ptr, s;
		s = new syncSema.ptr(0, 0, 0);
		runtime_Syncsemcheck(12);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.$ptr = $ptr; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.ReleaseMerge((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$4(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Acquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			race.Release((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))));
			race.Release((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$4(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var $ptr, rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$7);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var $ptr, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = $pointerOfStructConversion(r, ptrType$8).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.$ptr = $ptr; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$6], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$6], false)}];
	ptrType$12.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$8.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$7.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init([{prop: "m", name: "m", pkg: "sync", typ: Mutex, tag: ""}, {prop: "done", name: "done", pkg: "sync", typ: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType$1, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = race.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReadCloser, ReaderFrom, WriterTo, RuneReader, sliceType, errWhence, errOffset, ReadAtLeast, ReadFull, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	ReadCloser = $pkg.ReadCloser = $newType(8, $kindInterface, "io.ReadCloser", "ReadCloser", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", "WriterTo", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	sliceType = $sliceType($Uint8);
	ReadAtLeast = function(r, buf, min) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var $ptr, _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Copy = function(dst, src) {
		var $ptr, _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, dst, er, err, ew, nr, nw, ok, ok$1, rt, src, written, wt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; rt = $f.rt; src = $f.src; written = $f.written; wt = $f.wt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			/* */ $s = 4; case 4:
			return [written, err];
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$1 = rt.ReadFrom(src); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			/* */ $s = 8; case 8:
			return [written, err];
		/* } */ case 6:
		if (buf === sliceType.nil) {
			buf = $makeSlice(sliceType, 32768);
		}
		/* while (true) { */ case 9:
			_r$2 = src.Read(buf); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			nr = _tuple$4[0];
			er = _tuple$4[1];
			/* */ if (nr > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (nr > 0) { */ case 12:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$5 = _r$3;
				nw = _tuple$5[0];
				ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new $Int64(0, nw), new $Int64(written.$high + x.$high, written.$low + x.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 10; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 10; continue;
				}
			/* } */ case 13:
			if ($interfaceIsEqual(er, $pkg.EOF)) {
				/* break; */ $s = 10; continue;
			}
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				err = er;
				/* break; */ $s = 10; continue;
			}
		/* } */ $s = 9; continue; case 10:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.rt = rt; $f.src = src; $f.written = written; $f.wt = wt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReadCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, arrayType, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, _L, _Lu, _M, _N, _Nd, _P, _S, _Zs, _White_Space, _CaseRanges, properties, to, IsDigit, IsGraphic, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, IsUpper, To, ToUpper, ToLower;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var $ptr, _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + ((((((r - (cr.Lo >> 0) >> 0)) & ~1) >> 0) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var $ptr, r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsGraphic = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 144) >>> 0) === 0));
		}
		return In(r, $pkg.GraphicRanges);
	};
	$pkg.IsGraphic = IsGraphic;
	IsPrint = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var $ptr, _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	IsSpace = function(r) {
		var $ptr, _1, r;
		if ((r >>> 0) <= 255) {
			_1 = r;
			if ((_1 === 9) || (_1 === 10) || (_1 === 11) || (_1 === 12) || (_1 === 13) || (_1 === 32) || (_1 === 133) || (_1 === 160)) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	$pkg.IsSpace = IsSpace;
	is16 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var $ptr, _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var $ptr, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var $ptr, off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	IsUpper = function(r) {
		var $ptr, r, x;
		if ((r >>> 0) <= 255) {
			return (((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 32;
		}
		return isExcludingLatin($pkg.Upper, r);
	};
	$pkg.IsUpper = IsUpper;
	To = function(_case, r) {
		var $ptr, _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var $ptr, r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3423, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42925, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Lu = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 461, 3), new Range16.ptr(463, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 500, 3), new Range16.ptr(502, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(880, 882, 2), new Range16.ptr(886, 895, 9), new Range16.ptr(902, 904, 2), new Range16.ptr(905, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 978, 3), new Range16.ptr(979, 980, 1), new Range16.ptr(984, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8120, 8123, 1), new Range16.ptr(8136, 8139, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8187, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8459, 8461, 1), new Range16.ptr(8464, 8466, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8496, 8499, 1), new Range16.ptr(8510, 8511, 1), new Range16.ptr(8517, 8579, 62), new Range16.ptr(11264, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42925, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(119808, 119833, 1), new Range32.ptr(119860, 119885, 1), new Range32.ptr(119912, 119937, 1), new Range32.ptr(119964, 119966, 2), new Range32.ptr(119967, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119989, 1), new Range32.ptr(120016, 120041, 1), new Range32.ptr(120068, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120120, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120172, 120197, 1), new Range32.ptr(120224, 120249, 1), new Range32.ptr(120276, 120301, 1), new Range32.ptr(120328, 120353, 1), new Range32.ptr(120380, 120405, 1), new Range32.ptr(120432, 120457, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120546, 120570, 1), new Range32.ptr(120604, 120628, 1), new Range32.ptr(120662, 120686, 1), new Range32.ptr(120720, 120744, 1), new Range32.ptr(120778, 120778, 1)]), 3);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7676, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43204, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70367, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3445, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1)]), 1);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11842, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70854, 541), new Range32.ptr(71105, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3449, 250), new Range16.ptr(3647, 3841, 194), new Range16.ptr(3842, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9210, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65936, 4), new Range32.ptr(65937, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127386, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127546, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128377, 1), new Range32.ptr(128379, 128419, 1), new Range32.ptr(128421, 128720, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128755, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129304, 1), new Range32.ptr(129408, 129412, 1), new Range32.ptr(129472, 129472, 1)]), 10);
		_Zs = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		$pkg.Upper = _Lu;
		$pkg.Zs = _Zs;
		$pkg.GraphicRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S, $pkg.Zs]);
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", "acceptRange", "unicode/utf8", function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var $ptr, accept, c, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? $throwRuntimeError("index out of range") : first[x]));
		if (n >= (((x$1 & 7) >>> 0) >> 0)) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$2])), acceptRange);
		if (n > 1) {
			c = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
			if (c < accept.lo || accept.hi < c) {
				return true;
			} else if (n > 2 && ((2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]))) {
				return true;
			}
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? $throwRuntimeError("index out of range") : first[p0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((p0 & 31) >>> 0) >> 0) << 6 >> 0) | (((b1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((p0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((p0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((b1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((b2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((b3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? $throwRuntimeError("index out of range") : first[s0]);
		if (x >= 240) {
			mask = ((x >> 0) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((s.charCodeAt(0) >> 0) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
		if (n < (sz >> 0)) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = ((((s0 & 31) >>> 0) >> 0) << 6 >> 0) | (((s1 & 63) >>> 0) >> 0);
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = (((((s0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s2 & 63) >>> 0) >> 0);
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = ((((((s0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((s1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((s2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((s3 & 63) >>> 0) >> 0);
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var $ptr, r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var $ptr, i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = ((240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0));
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = ((128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = ((128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = ((128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var $ptr, accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? $throwRuntimeError("index out of range") : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = (((x & 7) >>> 0) >> 0);
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? $throwRuntimeError("index out of range") : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var $ptr, b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	acceptRange.init([{prop: "lo", name: "lo", pkg: "unicode/utf8", typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", pkg: "unicode/utf8", typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBuffer, LastIndex, HasPrefix, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, TrimSpace;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.runeBytes = arrayType.zero();
			this.bootstrap = arrayType$1.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.runeBytes = runeBytes_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = function(s, c) {
		var $ptr, _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var $ptr, _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var $ptr, b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var $ptr, b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var $ptr, b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if ((n === 0)) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var $ptr, b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var $ptr, _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var $ptr, b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, m, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $ptr, n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
		/* } */ case 2:
		b.Truncate(0);
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var $ptr, b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var $ptr, b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1;
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = io.EOF;
			c = _tmp;
			err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c;
		_tmp$3 = $ifaceNil;
		c = _tmp$2;
		err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0);
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var $ptr, _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off));
			n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var $ptr, b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var $ptr, _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var $ptr, _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = $bytesToString(slice);
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var $ptr, buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	LastIndex = function(s, sep) {
		var $ptr, c, i, n, s, sep;
		n = sep.$length;
		if (n === 0) {
			return s.$length;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		i = s.$length - n >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === c) && ((n === 1) || Equal($subslice(s, i, (i + n >> 0)), sep))) {
				return i;
			}
			i = i - (1) >> 0;
		}
		return -1;
	};
	$pkg.LastIndex = LastIndex;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			return sliceType.nil;
		}
		return $subslice(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return $subslice(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.$length)) { break; } */ if(!(start < s.$length)) { $s = 2; continue; }
			wid = 1;
			r = (((start < 0 || start >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + start]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = ((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) >> 0);
			_tmp$1 = 1;
			r = _tmp;
			size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, Writer, Scanner, SplitFunc, sliceType, ptrType, sliceType$1, ptrType$1, ptrType$2, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader, NewWriterSize, NewWriter, NewScanner, dropCR, ScanLines;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", "Writer", "bufio", function(err_, buf_, n_, wr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			this.buf = sliceType.nil;
			this.n = 0;
			this.wr = $ifaceNil;
			return;
		}
		this.err = err_;
		this.buf = buf_;
		this.n = n_;
		this.wr = wr_;
	});
	Scanner = $pkg.Scanner = $newType(0, $kindStruct, "bufio.Scanner", "Scanner", "bufio", function(r_, split_, maxTokenSize_, token_, buf_, start_, end_, err_, empties_, scanCalled_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.split = $throwNilPointerError;
			this.maxTokenSize = 0;
			this.token = sliceType.nil;
			this.buf = sliceType.nil;
			this.start = 0;
			this.end = 0;
			this.err = $ifaceNil;
			this.empties = 0;
			this.scanCalled = false;
			this.done = false;
			return;
		}
		this.r = r_;
		this.split = split_;
		this.maxTokenSize = maxTokenSize_;
		this.token = token_;
		this.buf = buf_;
		this.start = start_;
		this.end = end_;
		this.err = err_;
		this.empties = empties_;
		this.scanCalled = scanCalled_;
		this.done = done_;
	});
	SplitFunc = $pkg.SplitFunc = $newType(4, $kindFunc, "bufio.SplitFunc", "SplitFunc", "bufio", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	ptrType$1 = $ptrType(Writer);
	ptrType$2 = $ptrType(Scanner);
	NewReaderSize = function(rd, size) {
		var $ptr, _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var $ptr, rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var $ptr, b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var $ptr, _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				return;
			}
			if (n > 0) {
				return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var $ptr, b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var $ptr, avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		if (n > b.buf.$length) {
			return [sliceType.nil, $pkg.ErrBufferFull];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.$ptr = $ptr; $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			return [discarded, err];
		}
		if (n === 0) {
			return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				return [n, err];
			/* } */ case 4:
			$r = b.fill(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (b.r === b.w) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				return [n, err];
			}
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, b, c, err, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; b = $f.b; c = $f.c; err = $f.err; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = 0;
		err = $ifaceNil;
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = b.readErr();
				c = _tmp;
				err = _tmp$1;
				return [c, err];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		_tmp$2 = c;
		_tmp$3 = $ifaceNil;
		c = _tmp$2;
		err = _tmp$3;
		return [c, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.b = b; $f.c = c; $f.err = err; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var $ptr, b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0);
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var $ptr, b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var $ptr, b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.$ptr = $ptr; $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, line, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; line = $f.line; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		_tmp = buf$1;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, bytes$1, delim, err, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = "";
		err = $ifaceNil;
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		line = $bytesToString(bytes$1);
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var $ptr, _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		return [new $Int64(0, n), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	NewWriterSize = function(w, size) {
		var $ptr, _tuple, b, ok, size, w;
		_tuple = $assertType(w, ptrType$1, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size <= 0) {
			size = 4096;
		}
		return new Writer.ptr($ifaceNil, $makeSlice(sliceType, size), 0, w);
	};
	$pkg.NewWriterSize = NewWriterSize;
	NewWriter = function(w) {
		var $ptr, w;
		return NewWriterSize(w, 4096);
	};
	$pkg.NewWriter = NewWriter;
	Writer.ptr.prototype.Reset = function(w) {
		var $ptr, b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.flush(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.flush = function() {
		var $ptr, _r, _tuple, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.n === 0) {
			return $ifaceNil;
		}
		_r = b.wr.Write($subslice(b.buf, 0, b.n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			return err;
		}
		b.n = 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.ptr.prototype.Available = function() {
		var $ptr, b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var $ptr, b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, n$1, nn, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; n$1 = $f.n$1; nn = $f.nn; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nn = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = 0;
			/* */ if (b.Buffered() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.Buffered() === 0) { */ case 3:
				_r = b.wr.Write(p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				$s = 5; continue;
			/* } else { */ case 4:
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				_r$1 = b.flush(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 5:
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn;
			_tmp$1 = b.err;
			nn = _tmp;
			err = _tmp$1;
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn;
		_tmp$3 = $ifaceNil;
		nn = _tmp$2;
		err = _tmp$3;
		return [nn, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var $ptr, _r, _v, b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (!(b.Available() <= 0)) { _v = false; $s = 3; continue s; }
		_r = b.flush(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !($interfaceIsEqual(_r, $ifaceNil)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			return b.err;
		/* } */ case 2:
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteByte }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err, n, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		size = 0;
		err = $ifaceNil;
		b = this;
		/* */ if (r < 128) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 128) { */ case 1:
			_r = b.WriteByte((r << 24 >>> 24)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				size = _tmp;
				err = _tmp$1;
				return [size, err];
			}
			_tmp$2 = 1;
			_tmp$3 = $ifaceNil;
			size = _tmp$2;
			err = _tmp$3;
			return [size, err];
		/* } */ case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0;
			_tmp$5 = b.err;
			size = _tmp$4;
			err = _tmp$5;
			return [size, err];
		}
		n = b.Available();
		/* */ if (n < 4) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (n < 4) { */ case 4:
			_r$1 = b.flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0;
				_tmp$7 = b.err;
				size = _tmp$6;
				err = _tmp$7;
				return [size, err];
			}
			n = b.Available();
			/* */ if (n < 4) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (n < 4) { */ case 7:
				_r$2 = b.WriteString($encodeRune(r)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				size = _tuple[0];
				err = _tuple[1];
				/* */ $s = 10; case 10:
				return [size, err];
			/* } */ case 8:
		/* } */ case 5:
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size;
		_tmp$9 = $ifaceNil;
		size = _tmp$8;
		err = _tmp$9;
		return [size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteRune }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, b, n, n$1, nn, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; n = $f.n; n$1 = $f.n$1; nn = $f.nn; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		nn = 0;
		/* while (true) { */ case 1:
			/* if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = s.substring(n);
			_r = b.flush(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ $s = 1; continue; case 2:
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		return [nn, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.n = n; $f.n$1 = n$1; $f.nn = nn; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err, err1, m, n, nr, ok, r, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err1 = $f.err1; m = $f.m; n = $f.n; nr = $f.nr; ok = $f.ok; r = $f.r; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		/* */ if (b.Buffered() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.Buffered() === 0) { */ case 1:
			_tuple = $assertType(b.wr, io.ReaderFrom, true);
			w = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = w.ReadFrom(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				n = _tuple$1[0];
				err = _tuple$1[1];
				/* */ $s = 6; case 6:
				return [n, err];
			/* } */ case 4:
		/* } */ case 2:
		m = 0;
		/* while (true) { */ case 7:
			/* */ if (b.Available() === 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (b.Available() === 0) { */ case 9:
				_r$1 = b.flush(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err1 = _r$1;
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err1;
					n = _tmp;
					err = _tmp$1;
					return [n, err];
				}
			/* } */ case 10:
			nr = 0;
			/* while (true) { */ case 12:
				/* if (!(nr < 100)) { break; } */ if(!(nr < 100)) { $s = 13; continue; }
				_r$2 = r.Read($subslice(b.buf, b.n)); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				m = _tuple$2[0];
				err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 13; continue;
				}
				nr = nr + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			if (nr === 100) {
				_tmp$2 = n;
				_tmp$3 = io.ErrNoProgress;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* break; */ $s = 8; continue;
			}
		/* } */ $s = 7; continue; case 8:
		/* */ if ($interfaceIsEqual(err, io.EOF)) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if ($interfaceIsEqual(err, io.EOF)) { */ case 15:
			/* */ if (b.Available() === 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (b.Available() === 0) { */ case 17:
				_r$3 = b.flush(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 19; continue;
			/* } else { */ case 18:
				err = $ifaceNil;
			/* } */ case 19:
		/* } */ case 16:
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.ReadFrom }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err1 = err1; $f.m = m; $f.n = n; $f.nr = nr; $f.ok = ok; $f.r = r; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	NewScanner = function(r) {
		var $ptr, r;
		return new Scanner.ptr(r, ScanLines, 65536, sliceType.nil, sliceType.nil, 0, 0, $ifaceNil, 0, false, false);
	};
	$pkg.NewScanner = NewScanner;
	Scanner.ptr.prototype.Err = function() {
		var $ptr, s;
		s = this;
		if ($interfaceIsEqual(s.err, io.EOF)) {
			return $ifaceNil;
		}
		return s.err;
	};
	Scanner.prototype.Err = function() { return this.$val.Err(); };
	Scanner.ptr.prototype.Bytes = function() {
		var $ptr, s;
		s = this;
		return s.token;
	};
	Scanner.prototype.Bytes = function() { return this.$val.Bytes(); };
	Scanner.ptr.prototype.Text = function() {
		var $ptr, s;
		s = this;
		return $bytesToString(s.token);
	};
	Scanner.prototype.Text = function() { return this.$val.Text(); };
	Scanner.ptr.prototype.Scan = function() {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, advance, err, err$1, loop, n, newBuf, newSize, s, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; advance = $f.advance; err = $f.err; err$1 = $f.err$1; loop = $f.loop; n = $f.n; newBuf = $f.newBuf; newSize = $f.newSize; s = $f.s; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (s.done) {
			return false;
		}
		s.scanCalled = true;
		/* while (true) { */ case 1:
			/* */ if (s.end > s.start || !($interfaceIsEqual(s.err, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (s.end > s.start || !($interfaceIsEqual(s.err, $ifaceNil))) { */ case 3:
				_r = s.split($subslice(s.buf, s.start, s.end), !($interfaceIsEqual(s.err, $ifaceNil))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				advance = _tuple[0];
				token = _tuple[1];
				err = _tuple[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					if ($interfaceIsEqual(err, $pkg.ErrFinalToken)) {
						s.token = token;
						s.done = true;
						return true;
					}
					s.setErr(err);
					return false;
				}
				if (!s.advance(advance)) {
					return false;
				}
				s.token = token;
				if (!(token === sliceType.nil)) {
					if ($interfaceIsEqual(s.err, $ifaceNil) || advance > 0) {
						s.empties = 0;
					} else {
						s.empties = s.empties + (1) >> 0;
						if (s.empties > 100) {
							$panic(new $String("bufio.Scan: 100 empty tokens without progressing"));
						}
					}
					return true;
				}
			/* } */ case 4:
			if (!($interfaceIsEqual(s.err, $ifaceNil))) {
				s.start = 0;
				s.end = 0;
				return false;
			}
			if (s.start > 0 && ((s.end === s.buf.$length) || s.start > (_q = s.buf.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) {
				$copySlice(s.buf, $subslice(s.buf, s.start, s.end));
				s.end = s.end - (s.start) >> 0;
				s.start = 0;
			}
			/* */ if (s.end === s.buf.$length) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (s.end === s.buf.$length) { */ case 6:
				if (s.buf.$length >= s.maxTokenSize || s.buf.$length > 1073741823) {
					s.setErr($pkg.ErrTooLong);
					return false;
				}
				newSize = $imul(s.buf.$length, 2);
				if (newSize === 0) {
					newSize = 4096;
				}
				if (newSize > s.maxTokenSize) {
					newSize = s.maxTokenSize;
				}
				newBuf = $makeSlice(sliceType, newSize);
				$copySlice(newBuf, $subslice(s.buf, s.start, s.end));
				s.buf = newBuf;
				s.end = s.end - (s.start) >> 0;
				s.start = 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 7:
			loop = 0;
			/* while (true) { */ case 8:
				_r$1 = s.r.Read($subslice(s.buf, s.end, s.buf.$length)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				n = _tuple$1[0];
				err$1 = _tuple$1[1];
				s.end = s.end + (n) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					s.setErr(err$1);
					/* break; */ $s = 9; continue;
				}
				if (n > 0) {
					s.empties = 0;
					/* break; */ $s = 9; continue;
				}
				loop = loop + (1) >> 0;
				if (loop > 100) {
					s.setErr(io.ErrNoProgress);
					/* break; */ $s = 9; continue;
				}
			/* } */ $s = 8; continue; case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.Scan }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.advance = advance; $f.err = err; $f.err$1 = err$1; $f.loop = loop; $f.n = n; $f.newBuf = newBuf; $f.newSize = newSize; $f.s = s; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.Scan = function() { return this.$val.Scan(); };
	Scanner.ptr.prototype.advance = function(n) {
		var $ptr, n, s;
		s = this;
		if (n < 0) {
			s.setErr($pkg.ErrNegativeAdvance);
			return false;
		}
		if (n > (s.end - s.start >> 0)) {
			s.setErr($pkg.ErrAdvanceTooFar);
			return false;
		}
		s.start = s.start + (n) >> 0;
		return true;
	};
	Scanner.prototype.advance = function(n) { return this.$val.advance(n); };
	Scanner.ptr.prototype.setErr = function(err) {
		var $ptr, err, s;
		s = this;
		if ($interfaceIsEqual(s.err, $ifaceNil) || $interfaceIsEqual(s.err, io.EOF)) {
			s.err = err;
		}
	};
	Scanner.prototype.setErr = function(err) { return this.$val.setErr(err); };
	Scanner.ptr.prototype.Buffer = function(buf, max) {
		var $ptr, buf, max, s;
		s = this;
		if (s.scanCalled) {
			$panic(new $String("Buffer called after Scan"));
		}
		s.buf = $subslice(buf, 0, buf.$capacity);
		s.maxTokenSize = max;
	};
	Scanner.prototype.Buffer = function(buf, max) { return this.$val.Buffer(buf, max); };
	Scanner.ptr.prototype.Split = function(split) {
		var $ptr, s, split;
		s = this;
		if (s.scanCalled) {
			$panic(new $String("Split called after Scan"));
		}
		s.split = split;
	};
	Scanner.prototype.Split = function(split) { return this.$val.Split(split); };
	dropCR = function(data) {
		var $ptr, data, x;
		if (data.$length > 0 && ((x = data.$length - 1 >> 0, ((x < 0 || x >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x])) === 13)) {
			return $subslice(data, 0, (data.$length - 1 >> 0));
		}
		return data;
	};
	ScanLines = function(data, atEOF) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, advance, atEOF, data, err, i, token;
		advance = 0;
		token = sliceType.nil;
		err = $ifaceNil;
		if (atEOF && (data.$length === 0)) {
			_tmp = 0;
			_tmp$1 = sliceType.nil;
			_tmp$2 = $ifaceNil;
			advance = _tmp;
			token = _tmp$1;
			err = _tmp$2;
			return [advance, token, err];
		}
		i = bytes.IndexByte(data, 10);
		if (i >= 0) {
			_tmp$3 = i + 1 >> 0;
			_tmp$4 = dropCR($subslice(data, 0, i));
			_tmp$5 = $ifaceNil;
			advance = _tmp$3;
			token = _tmp$4;
			err = _tmp$5;
			return [advance, token, err];
		}
		if (atEOF) {
			_tmp$6 = data.$length;
			_tmp$7 = dropCR(data);
			_tmp$8 = $ifaceNil;
			advance = _tmp$6;
			token = _tmp$7;
			err = _tmp$8;
			return [advance, token, err];
		}
		_tmp$9 = 0;
		_tmp$10 = sliceType.nil;
		_tmp$11 = $ifaceNil;
		advance = _tmp$9;
		token = _tmp$10;
		err = _tmp$11;
		return [advance, token, err];
	};
	$pkg.ScanLines = ScanLines;
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flush", name: "flush", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	ptrType$2.methods = [{prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "advance", name: "advance", pkg: "bufio", typ: $funcType([$Int], [$Bool], false)}, {prop: "setErr", name: "setErr", pkg: "bufio", typ: $funcType([$error], [], false)}, {prop: "Buffer", name: "Buffer", pkg: "", typ: $funcType([sliceType, $Int], [], false)}, {prop: "Split", name: "Split", pkg: "", typ: $funcType([SplitFunc], [], false)}];
	Reader.init([{prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "rd", name: "rd", pkg: "bufio", typ: io.Reader, tag: ""}, {prop: "r", name: "r", pkg: "bufio", typ: $Int, tag: ""}, {prop: "w", name: "w", pkg: "bufio", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", pkg: "bufio", typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", pkg: "bufio", typ: $Int, tag: ""}]);
	Writer.init([{prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "n", name: "n", pkg: "bufio", typ: $Int, tag: ""}, {prop: "wr", name: "wr", pkg: "bufio", typ: io.Writer, tag: ""}]);
	Scanner.init([{prop: "r", name: "r", pkg: "bufio", typ: io.Reader, tag: ""}, {prop: "split", name: "split", pkg: "bufio", typ: SplitFunc, tag: ""}, {prop: "maxTokenSize", name: "maxTokenSize", pkg: "bufio", typ: $Int, tag: ""}, {prop: "token", name: "token", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "buf", name: "buf", pkg: "bufio", typ: sliceType, tag: ""}, {prop: "start", name: "start", pkg: "bufio", typ: $Int, tag: ""}, {prop: "end", name: "end", pkg: "bufio", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "empties", name: "empties", pkg: "bufio", typ: $Int, tag: ""}, {prop: "scanCalled", name: "scanCalled", pkg: "bufio", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "bufio", typ: $Bool, tag: ""}]);
	SplitFunc.init([sliceType, $Bool], [$Int, sliceType, $error], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, Inf, IsInf, Ldexp, NaN, init, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	Inf = function(sign) {
		var $ptr, sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var $ptr, f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	Ldexp = function(frac, exp$1) {
		var $ptr, exp$1, frac;
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	$pkg.Ldexp = Ldexp;
	NaN = function() {
		var $ptr;
		return nan;
	};
	$pkg.NaN = NaN;
	init = function() {
		var $ptr, ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var $ptr, f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var $ptr, f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var $ptr, b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	init$1 = function() {
		var $ptr, _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, bytes, errors, js, race, runtime, sync, mmapper, Errno, _C_int, Timespec, Stat_t, Dirent, sliceType, sliceType$1, ptrType$2, arrayType$1, sliceType$5, ptrType$12, arrayType$10, arrayType$13, arrayType$14, arrayType$15, structType, ptrType$20, ptrType$27, mapType, funcType, funcType$1, ptrType$31, arrayType$17, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, CloseOnExec, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ByteSliceFromString, ReadDirent, Sysctl, nametomib, ParseDirent, errnoErr, Read, Write, sysctl, fcntl, Chmod, Close, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Open, Pread, Pwrite, read, Seek, Stat, write, mmap, munmap;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	_C_int = $pkg._C_int = $newType(4, $kindInt32, "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$17.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ino = new $Uint64(0, 0);
			this.Seekoff = new $Uint64(0, 0);
			this.Reclen = 0;
			this.Namlen = 0;
			this.Type = 0;
			this.Name = arrayType$14.zero();
			this.Pad_cgo_0 = arrayType$15.zero();
			return;
		}
		this.Ino = Ino_;
		this.Seekoff = Seekoff_;
		this.Reclen = Reclen_;
		this.Namlen = Namlen_;
		this.Type = Type_;
		this.Name = Name_;
		this.Pad_cgo_0 = Pad_cgo_0_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType$1 = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(_C_int);
	ptrType$12 = $ptrType($Uintptr);
	arrayType$10 = $arrayType($Uint8, 32);
	arrayType$13 = $arrayType(_C_int, 14);
	arrayType$14 = $arrayType($Int8, 1024);
	arrayType$15 = $arrayType($Uint8, 3);
	structType = $structType([{prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}, {prop: "len", name: "len", pkg: "syscall", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "syscall", typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType($Int64);
	ptrType$27 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$31 = $ptrType(Timespec);
	arrayType$17 = $arrayType($Int64, 2);
	init = function() {
		var $ptr;
		$flushConsole = (function() {
			var $ptr;
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		var $ptr;
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var $ptr, b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var $ptr, p;
	};
	runtime_envs = function() {
		var $ptr, envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $ptr, name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			var $ptr;
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0);
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0);
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0);
			_tmp$1 = (($parseInt(r[1]) >> 0) >>> 0);
			_tmp$2 = (($parseInt(r[2]) >> 0) >>> 0);
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0);
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var $ptr, _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	copyenv = function() {
		var $ptr, _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = {};
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
					ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = function(key) {
		var $ptr, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found, i, i$1, key, ok, s, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; found = $f.found; i = $f.i; i$1 = $f.i$1; key = $f.key; ok = $f.ok; s = $f.s; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		value = "";
		found = false;
		$r = envOnce.Do(copyenv); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (key.length === 0) {
			_tmp = "";
			_tmp$1 = false;
			value = _tmp;
			found = _tmp$1;
			return [value, found];
		}
		$r = envLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		i = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			_tmp$2 = "";
			_tmp$3 = false;
			value = _tmp$2;
			found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0));
				_tmp$5 = true;
				value = _tmp$4;
				found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = "";
		_tmp$7 = false;
		value = _tmp$6;
		found = _tmp$7;
		return [value, found];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [value, found]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._entry = _entry; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.found = found; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.ok = ok; $f.s = s; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.Getenv = Getenv;
	CloseOnExec = function(fd) {
		var $ptr, fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	msanRead = function(addr, len) {
		var $ptr, addr, len;
	};
	msanWrite = function(addr, len) {
		var $ptr, addr, len;
	};
	rsaAlignOf = function(salen) {
		var $ptr, salen, salign;
		salign = 8;
		if (true) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var $ptr, val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var $ptr, _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = function(s) {
		var $ptr, a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	$pkg.ByteSliceFromString = ByteSliceFromString;
	Timespec.ptr.prototype.Unix = function() {
		var $ptr, _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = ts.Sec;
		_tmp$1 = ts.Nsec;
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var $ptr, ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var $ptr, _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	Sysctl = function(name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, buf, err, mib, n, n$24ptr, name, value, x;
		value = "";
		err = $ifaceNil;
		_tuple = nametomib(name);
		mib = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = "";
			_tmp$1 = err;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ptrType$2.nil, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = "";
			_tmp$3 = err;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = "";
			_tmp$5 = $ifaceNil;
			value = _tmp$4;
			err = _tmp$5;
			return [value, err];
		}
		buf = $makeSlice(sliceType, n);
		err = sysctl(mib, $indexPtr(buf.$array, buf.$offset + 0, ptrType$2), (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), ptrType$2.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = "";
			_tmp$7 = err;
			value = _tmp$6;
			err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n));
		_tmp$9 = $ifaceNil;
		value = _tmp$8;
		err = _tmp$9;
		return [value, err];
	};
	$pkg.Sysctl = Sysctl;
	nametomib = function(name) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, bytes$1, err, mib, n, n$24ptr, name, p;
		mib = sliceType$5.nil;
		err = $ifaceNil;
		buf = arrayType$13.zero();
		n = 48;
		p = $sliceToArray(new sliceType(buf));
		_tuple = ByteSliceFromString(name);
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType$5.nil;
			_tmp$1 = err;
			mib = _tmp;
			err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new sliceType$5([0, 3]), p, (n$24ptr || (n$24ptr = new ptrType$12(function() { return n; }, function($v) { n = $v; }))), $indexPtr(bytes$1.$array, bytes$1.$offset + 0, ptrType$2), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$5.nil;
			_tmp$3 = err;
			mib = _tmp$2;
			err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new sliceType$5(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")));
		_tmp$5 = $ifaceNil;
		mib = _tmp$4;
		err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = function(buf, max, names) {
		var $ptr, _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed, count, dirent, max, name, names, newnames, origlen, x;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(new $Uint64(0, 0), new $Uint64(0, 0), 0, 0, 0, arrayType$14.zero(), arrayType$15.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent.Reclen === 0) {
				buf = sliceType.nil;
				break;
			}
			buf = $subslice(buf, dirent.Reclen);
			if ((x = dirent.Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new sliceType(dirent.Name));
			name = $bytesToString($subslice(new sliceType(bytes$1), 0, dirent.Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0;
		_tmp$1 = count;
		_tmp$2 = names;
		consumed = _tmp;
		count = _tmp$1;
		newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var $ptr, _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			return [data, err];
		}
		_r = m.mmap(0, (length >>> 0), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var $ptr, _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			return err;
		}
		_r = m.munmap($sliceToArray(b), (b.$length >>> 0)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var $ptr, e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var $ptr, e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var $ptr, _1, e;
		_1 = e;
		if (_1 === 0) {
			return $ifaceNil;
		} else if (_1 === 35) {
			return errEAGAIN;
		} else if (_1 === 22) {
			return errEINVAL;
		} else if (_1 === 2) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange($sliceToArray(p), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; }))));
			}
		}
		if (false && n > 0) {
			msanWrite($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var $ptr, _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; }))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange($sliceToArray(p), n);
		}
		if (false && n > 0) {
			msanRead($sliceToArray(p), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var $ptr, _p0, _tuple, e1, err, mib, new$1, newlen, old, oldlen;
		err = $ifaceNil;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	fcntl = function(fd, cmd, arg) {
		var $ptr, _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Chmod = function(path, mode) {
		var $ptr, _p0, _tuple, _tuple$1, e1, err, mode, path;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(15, _p0, (mode >>> 0), 0);
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Chmod = Chmod;
	Close = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Exit = function(code) {
		var $ptr, code;
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	$pkg.Exit = Exit;
	Fchdir = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var $ptr, _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var $ptr, _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var $ptr, _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var $ptr, _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, (fd >>> 0), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var $ptr, _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var $ptr, _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Open = function(path, mode, perm) {
		var $ptr, _p0, _tuple, _tuple$1, e1, err, fd, mode, path, perm, r0;
		fd = 0;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0));
		r0 = _tuple$1[0];
		e1 = _tuple$1[2];
		use(_p0);
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	$pkg.Open = Open;
	Pread = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var $ptr, _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var $ptr, _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	Stat = function(path, stat) {
		var $ptr, _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		use(_p0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Stat = Stat;
	write = function(fd, p) {
		var $ptr, _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var $ptr, _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var $ptr, _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, addr, length, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$27.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$31.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init([{prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", pkg: "syscall", typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", pkg: "syscall", typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", pkg: "syscall", typ: funcType$1, tag: ""}]);
	Timespec.init([{prop: "Sec", name: "Sec", pkg: "", typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", pkg: "", typ: $Int64, tag: ""}]);
	Stat_t.init([{prop: "Dev", name: "Dev", pkg: "", typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", pkg: "", typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", pkg: "", typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", pkg: "", typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", pkg: "", typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", pkg: "", typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", pkg: "", typ: arrayType$17, tag: ""}]);
	Dirent.init([{prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Seekoff", name: "Seekoff", pkg: "", typ: $Uint64, tag: ""}, {prop: "Reclen", name: "Reclen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Namlen", name: "Namlen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: arrayType$14, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$15, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		envLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		env = false;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, RWMutex, Once, ptrType, ptrType$1, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", "Mutex", "github.com/gopherjs/gopherjs/nosync", function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", "RWMutex", "github.com/gopherjs/gopherjs/nosync", function(writeLocked_, readLockCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writeLocked = false;
			this.readLockCounter = 0;
			return;
		}
		this.writeLocked = writeLocked_;
		this.readLockCounter = readLockCounter_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType = $ptrType(Mutex);
	ptrType$1 = $ptrType(RWMutex);
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var $ptr, m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var $ptr, m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var $ptr, rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var $ptr, rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var $ptr, rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	Once.ptr.prototype.Do = function(f) {
		var $ptr, f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			var $ptr;
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.$ptr = $ptr; $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Mutex.init([{prop: "locked", name: "locked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	RWMutex.init([{prop: "writeLocked", name: "writeLocked", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Int, tag: ""}]);
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Replacer, replacer, trieNode, genericReplacer, appendSliceWriter, stringWriterIface, stringWriter, singleStringReplacer, byteReplacer, byteStringReplacer, stringFinder, arrayType, ptrType, sliceType, arrayType$1, ptrType$1, ptrType$2, sliceType$1, ptrType$3, ptrType$4, arrayType$2, sliceType$2, sliceType$3, ptrType$6, ptrType$7, ptrType$8, IndexByte, Index, LastIndex, Count, NewReplacer, makeGenericReplacer, getStringWriter, makeSingleStringReplacer, makeStringFinder, longestCommonSuffix, max, explode, Contains, ContainsAny, ContainsRune, IndexRune, IndexAny, genSplit, SplitN, Split, Fields, FieldsFunc, Join, HasPrefix, HasSuffix, Map, Repeat, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, IndexFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, TrimSuffix, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Replacer = $pkg.Replacer = $newType(0, $kindStruct, "strings.Replacer", "Replacer", "strings", function(r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			return;
		}
		this.r = r_;
	});
	replacer = $pkg.replacer = $newType(8, $kindInterface, "strings.replacer", "replacer", "strings", null);
	trieNode = $pkg.trieNode = $newType(0, $kindStruct, "strings.trieNode", "trieNode", "strings", function(value_, priority_, prefix_, next_, table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = "";
			this.priority = 0;
			this.prefix = "";
			this.next = ptrType$2.nil;
			this.table = sliceType$1.nil;
			return;
		}
		this.value = value_;
		this.priority = priority_;
		this.prefix = prefix_;
		this.next = next_;
		this.table = table_;
	});
	genericReplacer = $pkg.genericReplacer = $newType(0, $kindStruct, "strings.genericReplacer", "genericReplacer", "strings", function(root_, tableSize_, mapping_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			this.tableSize = 0;
			this.mapping = arrayType.zero();
			return;
		}
		this.root = root_;
		this.tableSize = tableSize_;
		this.mapping = mapping_;
	});
	appendSliceWriter = $pkg.appendSliceWriter = $newType(12, $kindSlice, "strings.appendSliceWriter", "appendSliceWriter", "strings", null);
	stringWriterIface = $pkg.stringWriterIface = $newType(8, $kindInterface, "strings.stringWriterIface", "stringWriterIface", "strings", null);
	stringWriter = $pkg.stringWriter = $newType(0, $kindStruct, "strings.stringWriter", "stringWriter", "strings", function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	singleStringReplacer = $pkg.singleStringReplacer = $newType(0, $kindStruct, "strings.singleStringReplacer", "singleStringReplacer", "strings", function(finder_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.finder = ptrType$4.nil;
			this.value = "";
			return;
		}
		this.finder = finder_;
		this.value = value_;
	});
	byteReplacer = $pkg.byteReplacer = $newType(256, $kindArray, "strings.byteReplacer", "byteReplacer", "strings", null);
	byteStringReplacer = $pkg.byteStringReplacer = $newType(4092, $kindArray, "strings.byteStringReplacer", "byteStringReplacer", "strings", null);
	stringFinder = $pkg.stringFinder = $newType(0, $kindStruct, "strings.stringFinder", "stringFinder", "strings", function(pattern_, badCharSkip_, goodSuffixSkip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pattern = "";
			this.badCharSkip = arrayType$2.zero();
			this.goodSuffixSkip = sliceType$2.nil;
			return;
		}
		this.pattern = pattern_;
		this.badCharSkip = badCharSkip_;
		this.goodSuffixSkip = goodSuffixSkip_;
	});
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(byteReplacer);
	sliceType = $sliceType($Uint8);
	arrayType$1 = $arrayType(sliceType, 256);
	ptrType$1 = $ptrType(byteStringReplacer);
	ptrType$2 = $ptrType(trieNode);
	sliceType$1 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(appendSliceWriter);
	ptrType$4 = $ptrType(stringFinder);
	arrayType$2 = $arrayType($Int, 256);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	ptrType$6 = $ptrType(Replacer);
	ptrType$7 = $ptrType(genericReplacer);
	ptrType$8 = $ptrType(singleStringReplacer);
	IndexByte = function(s, c) {
		var $ptr, c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	LastIndex = function(s, sep) {
		var $ptr, s, sep;
		return $parseInt(s.lastIndexOf(sep)) >> 0;
	};
	$pkg.LastIndex = LastIndex;
	Count = function(s, sep) {
		var $ptr, n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = s.substring((pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	NewReplacer = function(oldnew) {
		var $ptr, _i, _r, _ref, allNewBytes, i, i$1, i$2, i$3, n, n$1, o, o$1, oldnew, r, r$1, x, x$1, x$2;
		if ((_r = oldnew.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			$panic(new $String("strings.NewReplacer: odd argument count"));
		}
		if ((oldnew.$length === 2) && (0 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]).length > 1) {
			return new Replacer.ptr(makeSingleStringReplacer((0 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]), (1 >= oldnew.$length ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 1])));
		}
		allNewBytes = true;
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			if (!((((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]).length === 1))) {
				return new Replacer.ptr(makeGenericReplacer(oldnew));
			}
			if (!(((x = i + 1 >> 0, ((x < 0 || x >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x])).length === 1))) {
				allNewBytes = false;
			}
			i = i + (2) >> 0;
		}
		if (allNewBytes) {
			r = arrayType.zero();
			_ref = r;
			_i = 0;
			while (true) {
				if (!(_i < 256)) { break; }
				i$1 = _i;
				((i$1 < 0 || i$1 >= r.length) ? $throwRuntimeError("index out of range") : r[i$1] = (i$1 << 24 >>> 24));
				_i++;
			}
			i$2 = oldnew.$length - 2 >> 0;
			while (true) {
				if (!(i$2 >= 0)) { break; }
				o = ((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]).charCodeAt(0);
				n = (x$1 = i$2 + 1 >> 0, ((x$1 < 0 || x$1 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$1])).charCodeAt(0);
				((o < 0 || o >= r.length) ? $throwRuntimeError("index out of range") : r[o] = n);
				i$2 = i$2 - (2) >> 0;
			}
			return new Replacer.ptr(new ptrType(r));
		}
		r$1 = arrayType$1.zero();
		i$3 = oldnew.$length - 2 >> 0;
		while (true) {
			if (!(i$3 >= 0)) { break; }
			o$1 = ((i$3 < 0 || i$3 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$3]).charCodeAt(0);
			n$1 = (x$2 = i$3 + 1 >> 0, ((x$2 < 0 || x$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$2]));
			((o$1 < 0 || o$1 >= r$1.length) ? $throwRuntimeError("index out of range") : r$1[o$1] = new sliceType($stringToBytes(n$1)));
			i$3 = i$3 - (2) >> 0;
		}
		return new Replacer.ptr(new ptrType$1(r$1));
	};
	$pkg.NewReplacer = NewReplacer;
	Replacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.r.Replace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	Replacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _tuple, err, n, r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; r = $f.r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_r = r.r.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	trieNode.ptr.prototype.add = function(key, val, priority, r) {
		var $ptr, key, keyNode, m, n, next, prefixNode, priority, r, t, val, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (key === "") {
			if (t.priority === 0) {
				t.value = val;
				t.priority = priority;
			}
			return;
		}
		if (!(t.prefix === "")) {
			n = 0;
			while (true) {
				if (!(n < t.prefix.length && n < key.length)) { break; }
				if (!((t.prefix.charCodeAt(n) === key.charCodeAt(n)))) {
					break;
				}
				n = n + (1) >> 0;
			}
			if (n === t.prefix.length) {
				t.next.add(key.substring(n), val, priority, r);
			} else if (n === 0) {
				prefixNode = ptrType$2.nil;
				if (t.prefix.length === 1) {
					prefixNode = t.next;
				} else {
					prefixNode = new trieNode.ptr("", 0, t.prefix.substring(1), t.next, sliceType$1.nil);
				}
				keyNode = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
				t.table = $makeSlice(sliceType$1, r.tableSize);
				(x = t.table, x$1 = (x$2 = r.mapping, x$3 = t.prefix.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = prefixNode));
				(x$4 = t.table, x$5 = (x$6 = r.mapping, x$7 = key.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7])), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = keyNode));
				t.prefix = "";
				t.next = ptrType$2.nil;
				keyNode.add(key.substring(1), val, priority, r);
			} else {
				next = new trieNode.ptr("", 0, t.prefix.substring(n), t.next, sliceType$1.nil);
				t.prefix = t.prefix.substring(0, n);
				t.next = next;
				next.add(key.substring(n), val, priority, r);
			}
		} else if (!(t.table === sliceType$1.nil)) {
			m = (x$8 = r.mapping, x$9 = key.charCodeAt(0), ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9]));
			if ((x$10 = t.table, ((m < 0 || m >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + m])) === ptrType$2.nil) {
				(x$11 = t.table, ((m < 0 || m >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + m] = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil)));
			}
			(x$12 = t.table, ((m < 0 || m >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + m])).add(key.substring(1), val, priority, r);
		} else {
			t.prefix = key;
			t.next = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			t.next.add("", val, priority, r);
		}
	};
	trieNode.prototype.add = function(key, val, priority, r) { return this.$val.add(key, val, priority, r); };
	genericReplacer.ptr.prototype.lookup = function(s, ignoreRoot) {
		var $ptr, bestPriority, found, ignoreRoot, index, keylen, n, node, r, s, val, x, x$1, x$2;
		val = "";
		keylen = 0;
		found = false;
		r = this;
		bestPriority = 0;
		node = r.root;
		n = 0;
		while (true) {
			if (!(!(node === ptrType$2.nil))) { break; }
			if (node.priority > bestPriority && !(ignoreRoot && node === r.root)) {
				bestPriority = node.priority;
				val = node.value;
				keylen = n;
				found = true;
			}
			if (s === "") {
				break;
			}
			if (!(node.table === sliceType$1.nil)) {
				index = (x = r.mapping, x$1 = s.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
				if ((index >> 0) === r.tableSize) {
					break;
				}
				node = (x$2 = node.table, ((index < 0 || index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + index]));
				s = s.substring(1);
				n = n + (1) >> 0;
			} else if (!(node.prefix === "") && HasPrefix(s, node.prefix)) {
				n = n + (node.prefix.length) >> 0;
				s = s.substring(node.prefix.length);
				node = node.next;
			} else {
				break;
			}
		}
		return [val, keylen, found];
	};
	genericReplacer.prototype.lookup = function(s, ignoreRoot) { return this.$val.lookup(s, ignoreRoot); };
	makeGenericReplacer = function(oldnew) {
		var $ptr, _i, _i$1, _ref, _ref$1, b, b$1, i, i$1, i$2, index, j, key, oldnew, r, x, x$1, x$2, x$3, x$4;
		r = new genericReplacer.ptr(new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil), 0, arrayType.zero());
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			key = ((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]);
			j = 0;
			while (true) {
				if (!(j < key.length)) { break; }
				(x = r.mapping, x$1 = key.charCodeAt(j), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = 1));
				j = j + (1) >> 0;
			}
			i = i + (2) >> 0;
		}
		_ref = r.mapping;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			r.tableSize = r.tableSize + ((b >> 0)) >> 0;
			_i++;
		}
		index = 0;
		_ref$1 = r.mapping;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1[_i$1]);
			if (b$1 === 0) {
				(x$2 = r.mapping, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = (r.tableSize << 24 >>> 24)));
			} else {
				(x$3 = r.mapping, ((i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i$1] = index));
				index = index + (1) << 24 >>> 24;
			}
			_i$1++;
		}
		r.root.table = $makeSlice(sliceType$1, r.tableSize);
		i$2 = 0;
		while (true) {
			if (!(i$2 < oldnew.$length)) { break; }
			r.root.add(((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]), (x$4 = i$2 + 1 >> 0, ((x$4 < 0 || x$4 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$4])), oldnew.$length - i$2 >> 0, r);
			i$2 = i$2 + (2) >> 0;
		}
		return r;
	};
	$ptrType(appendSliceWriter).prototype.Write = function(p) {
		var $ptr, p, w;
		w = this;
		w.$set($appendSlice(w.$get(), p));
		return [p.$length, $ifaceNil];
	};
	$ptrType(appendSliceWriter).prototype.WriteString = function(s) {
		var $ptr, s, w;
		w = this;
		w.$set($appendSlice(w.$get(), s));
		return [s.length, $ifaceNil];
	};
	stringWriter.ptr.prototype.WriteString = function(s) {
		var $ptr, _r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = $clone(this, stringWriter);
		_r = w.w.Write(new sliceType($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringWriter.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	getStringWriter = function(w) {
		var $ptr, _tuple, ok, sw, w, x;
		_tuple = $assertType(w, stringWriterIface, true);
		sw = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			sw = (x = new stringWriter.ptr(w), new x.constructor.elem(x));
		}
		return sw;
	};
	genericReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _r, buf, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buf = $f.buf; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		r = this;
		buf[0] = $makeSlice(appendSliceWriter, 0, s.length);
		_r = r.WriteString((buf.$ptr || (buf.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, buf))), s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		return $bytesToString(buf[0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.Replace }; } $f.$ptr = $ptr; $f._r = _r; $f.buf = buf; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	genericReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, err, i, index, keylen, last, match, n, prevMatchEmpty, r, s, sw, val, w, wn, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; i = $f.i; index = $f.index; keylen = $f.keylen; last = $f.last; match = $f.match; n = $f.n; prevMatchEmpty = $f.prevMatchEmpty; r = $f.r; s = $f.s; sw = $f.sw; val = $f.val; w = $f.w; wn = $f.wn; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		last = _tmp;
		wn = _tmp$1;
		prevMatchEmpty = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= s.length)) { break; } */ if(!(i <= s.length)) { $s = 2; continue; }
			/* */ if (!((i === s.length)) && (r.root.priority === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === s.length)) && (r.root.priority === 0)) { */ case 3:
				index = ((x = r.mapping, x$1 = s.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) >> 0);
				if ((index === r.tableSize) || (x$2 = r.root.table, ((index < 0 || index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + index])) === ptrType$2.nil) {
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_tuple = r.lookup(s.substring(i), prevMatchEmpty);
			val = _tuple[0];
			keylen = _tuple[1];
			match = _tuple[2];
			prevMatchEmpty = match && (keylen === 0);
			/* */ if (match) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (match) { */ case 5:
				_r = sw.WriteString(s.substring(last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				wn = _tuple$1[0];
				err = _tuple$1[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [n, err];
				}
				_r$1 = sw.WriteString(val); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				wn = _tuple$2[0];
				err = _tuple$2[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [n, err];
				}
				i = i + (keylen) >> 0;
				last = i;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			_r$2 = sw.WriteString(s.substring(last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			wn = _tuple$3[0];
			err = _tuple$3[1];
			n = n + (wn) >> 0;
		/* } */ case 10:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.i = i; $f.index = index; $f.keylen = keylen; $f.last = last; $f.match = match; $f.n = n; $f.prevMatchEmpty = prevMatchEmpty; $f.r = r; $f.s = s; $f.sw = sw; $f.val = val; $f.w = w; $f.wn = wn; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeSingleStringReplacer = function(pattern, value) {
		var $ptr, pattern, value;
		return new singleStringReplacer.ptr(makeStringFinder(pattern), value);
	};
	singleStringReplacer.ptr.prototype.Replace = function(s) {
		var $ptr, _tmp, _tmp$1, buf, i, match, matched, r, s;
		r = this;
		buf = sliceType.nil;
		_tmp = 0;
		_tmp$1 = false;
		i = _tmp;
		matched = _tmp$1;
		while (true) {
			match = r.finder.next(s.substring(i));
			if (match === -1) {
				break;
			}
			matched = true;
			buf = $appendSlice(buf, s.substring(i, (i + match >> 0)));
			buf = $appendSlice(buf, r.value);
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		if (!matched) {
			return s;
		}
		buf = $appendSlice(buf, s.substring(i));
		return $bytesToString(buf);
	};
	singleStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	singleStringReplacer.ptr.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, err, i, match, n, r, s, sw, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; i = $f.i; match = $f.match; n = $f.n; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		wn = _tmp$1;
		/* while (true) { */ case 1:
			match = r.finder.next(s.substring(i));
			if (match === -1) {
				/* break; */ $s = 2; continue;
			}
			_r = sw.WriteString(s.substring(i, (i + match >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			_r$1 = sw.WriteString(r.value); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			wn = _tuple$1[0];
			err = _tuple$1[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = sw.WriteString(s.substring(i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		wn = _tuple$2[0];
		err = _tuple$2[1];
		n = n + (wn) >> 0;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: singleStringReplacer.ptr.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.i = i; $f.match = match; $f.n = n; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	singleStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteReplacer.prototype.Replace = function(s) {
		var $ptr, b, buf, i, r, s;
		r = this.$val;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!(((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === b))) {
				if (buf === sliceType.nil) {
					buf = new sliceType($stringToBytes(s));
				}
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])));
			}
			i = i + (1) >> 0;
		}
		if (buf === sliceType.nil) {
			return s;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteReplacer).prototype.Replace = function(s) { return (new byteReplacer(this.$get())).Replace(s); };
	byteReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, buf, bufsize, err, err$1, i, n, ncopy, r, s, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; buf = $f.buf; bufsize = $f.bufsize; err = $f.err; err$1 = $f.err$1; i = $f.i; n = $f.n; ncopy = $f.ncopy; r = $f.r; s = $f.s; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = $makeSlice(sliceType, bufsize);
		/* while (true) { */ case 1:
			/* if (!(s.length > 0)) { break; } */ if(!(s.length > 0)) { $s = 2; continue; }
			ncopy = $copyString(buf, s);
			s = s.substring(ncopy);
			_ref = $subslice(buf, 0, ncopy);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])));
				_i++;
			}
			_r = w.Write($subslice(buf, 0, ncopy)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err$1 = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.bufsize = bufsize; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.n = n; $f.ncopy = ncopy; $f.r = r; $f.s = s; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteReplacer).prototype.WriteString = function(w, s) { return (new byteReplacer(this.$get())).WriteString(w, s); };
	byteStringReplacer.prototype.Replace = function(s) {
		var $ptr, anyChanges, b, b$1, bi, buf, i, i$1, n, newSize, r, s;
		r = this.$val;
		newSize = s.length;
		anyChanges = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil)) {
				anyChanges = true;
				newSize = newSize + (((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])).$length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (!anyChanges) {
			return s;
		}
		buf = $makeSlice(sliceType, newSize);
		bi = buf;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			b$1 = s.charCodeAt(i$1);
			if (!((r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? $throwRuntimeError("index out of range") : r[b$1])) === sliceType.nil)) {
				n = $copySlice(bi, (r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? $throwRuntimeError("index out of range") : r[b$1])));
				bi = $subslice(bi, n);
			} else {
				(0 >= bi.$length ? $throwRuntimeError("index out of range") : bi.$array[bi.$offset + 0] = b$1);
				bi = $subslice(bi, 1);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(buf);
	};
	$ptrType(byteStringReplacer).prototype.Replace = function(s) { return (new byteStringReplacer(this.$get())).Replace(s); };
	byteStringReplacer.prototype.WriteString = function(w, s) {
		var $ptr, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, b, err, err$1, err$2, i, last, n, nw, nw$1, nw$2, r, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; last = $f.last; n = $f.n; nw = $f.nw; nw$1 = $f.nw$1; nw$2 = $f.nw$2; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		sw = getStringWriter(w);
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			b = s.charCodeAt(i);
			/* */ if ((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b])) === sliceType.nil) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (!((last === i))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((last === i))) { */ case 5:
				_r = sw.WriteString(s.substring(last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				nw = _tuple[0];
				err$1 = _tuple[1];
				n = n + (nw) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err$1;
					n = _tmp;
					err = _tmp$1;
					return [n, err];
				}
			/* } */ case 6:
			last = i + 1 >> 0;
			_r$1 = w.Write((r.nilCheck, ((b < 0 || b >= r.length) ? $throwRuntimeError("index out of range") : r[b]))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			nw$1 = _tuple$1[0];
			err$2 = _tuple$1[1];
			n = n + (nw$1) >> 0;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = err$2;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			nw$2 = 0;
			_r$2 = sw.WriteString(s.substring(last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			nw$2 = _tuple$2[0];
			err = _tuple$2[1];
			n = n + (nw$2) >> 0;
		/* } */ case 10:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteStringReplacer.prototype.WriteString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.last = last; $f.n = n; $f.nw = nw; $f.nw$1 = nw$1; $f.nw$2 = nw$2; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteStringReplacer).prototype.WriteString = function(w, s) { return (new byteStringReplacer(this.$get())).WriteString(w, s); };
	makeStringFinder = function(pattern) {
		var $ptr, _i, _ref, f, i, i$1, i$2, i$3, last, lastPrefix, lenSuffix, pattern, x, x$1, x$2, x$3, x$4, x$5;
		f = new stringFinder.ptr(pattern, arrayType$2.zero(), $makeSlice(sliceType$2, pattern.length));
		last = pattern.length - 1 >> 0;
		_ref = f.badCharSkip;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			i = _i;
			(x = f.badCharSkip, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = pattern.length));
			_i++;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < last)) { break; }
			(x$1 = f.badCharSkip, x$2 = pattern.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (last - i$1 >> 0)));
			i$1 = i$1 + (1) >> 0;
		}
		lastPrefix = last;
		i$2 = last;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (HasPrefix(pattern, pattern.substring((i$2 + 1 >> 0)))) {
				lastPrefix = i$2 + 1 >> 0;
			}
			(x$3 = f.goodSuffixSkip, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2] = ((lastPrefix + last >> 0) - i$2 >> 0)));
			i$2 = i$2 - (1) >> 0;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < last)) { break; }
			lenSuffix = longestCommonSuffix(pattern, pattern.substring(1, (i$3 + 1 >> 0)));
			if (!((pattern.charCodeAt((i$3 - lenSuffix >> 0)) === pattern.charCodeAt((last - lenSuffix >> 0))))) {
				(x$4 = f.goodSuffixSkip, x$5 = last - lenSuffix >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = ((lenSuffix + last >> 0) - i$3 >> 0)));
			}
			i$3 = i$3 + (1) >> 0;
		}
		return f;
	};
	longestCommonSuffix = function(a, b) {
		var $ptr, a, b, i;
		i = 0;
		while (true) {
			if (!(i < a.length && i < b.length)) { break; }
			if (!((a.charCodeAt(((a.length - 1 >> 0) - i >> 0)) === b.charCodeAt(((b.length - 1 >> 0) - i >> 0))))) {
				break;
			}
			i = i + (1) >> 0;
		}
		return i;
	};
	stringFinder.ptr.prototype.next = function(text) {
		var $ptr, f, i, j, text, x, x$1, x$2;
		f = this;
		i = f.pattern.length - 1 >> 0;
		while (true) {
			if (!(i < text.length)) { break; }
			j = f.pattern.length - 1 >> 0;
			while (true) {
				if (!(j >= 0 && (text.charCodeAt(i) === f.pattern.charCodeAt(j)))) { break; }
				i = i - (1) >> 0;
				j = j - (1) >> 0;
			}
			if (j < 0) {
				return i + 1 >> 0;
			}
			i = i + (max((x = f.badCharSkip, x$1 = text.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])), (x$2 = f.goodSuffixSkip, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) >> 0;
		}
		return -1;
	};
	stringFinder.prototype.next = function(text) { return this.$val.next(text); };
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	explode = function(s, n) {
		var $ptr, _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		size = 0;
		ch = 0;
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur));
			ch = _tuple[0];
			size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	Contains = function(s, substr) {
		var $ptr, s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsAny = function(s, chars) {
		var $ptr, chars, s;
		return IndexAny(s, chars) >= 0;
	};
	$pkg.ContainsAny = ContainsAny;
	ContainsRune = function(s, r) {
		var $ptr, r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexRune = IndexRune;
	IndexAny = function(s, chars) {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, chars, i, m, s;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.length)) { break; }
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	$pkg.IndexAny = IndexAny;
	genSplit = function(s, sep, sepSave, n) {
		var $ptr, a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$3, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	SplitN = function(s, sep, n) {
		var $ptr, n, s, sep;
		return genSplit(s, sep, 0, n);
	};
	$pkg.SplitN = SplitN;
	Split = function(s, sep) {
		var $ptr, s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Fields = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = FieldsFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fields }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fields = Fields;
	FieldsFunc = function(s, f) {
		var $ptr, _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, a, f, fieldStart, i, inField, n, na, rune, rune$1, s, wasInField, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _rune$1 = $f._rune$1; a = $f.a; f = $f.f; fieldStart = $f.fieldStart; i = $f.i; inField = $f.inField; n = $f.n; na = $f.na; rune = $f.rune; rune$1 = $f.rune$1; s = $f.s; wasInField = $f.wasInField; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		inField = false;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			rune = _rune[0];
			wasInField = inField;
			_r = f(rune); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			inField = !_r;
			if (inField && !wasInField) {
				n = n + (1) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		a = $makeSlice(sliceType$3, n);
		na = 0;
		fieldStart = -1;
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i = _i$1;
			rune$1 = _rune$1[0];
			_r$1 = f(rune$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 6; continue; }
			/* */ if (fieldStart === -1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_r$1) { */ case 6:
				if (fieldStart >= 0) {
					((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(fieldStart, i));
					na = na + (1) >> 0;
					fieldStart = -1;
				}
				$s = 8; continue;
			/* } else if (fieldStart === -1) { */ case 7:
				fieldStart = i;
			/* } */ case 8:
			_i$1 += _rune$1[1];
		/* } */ $s = 4; continue; case 5:
		if (fieldStart >= 0) {
			((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(fieldStart));
		}
		return a;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FieldsFunc }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._rune$1 = _rune$1; $f.a = a; $f.f = f; $f.fieldStart = fieldStart; $f.i = i; $f.inField = inField; $f.n = n; $f.na = na; $f.rune = rune; $f.rune$1 = rune$1; $f.s = s; $f.wasInField = wasInField; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FieldsFunc = FieldsFunc;
	Join = function(a, sep) {
		var $ptr, _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var $ptr, prefix, s;
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	HasSuffix = function(s, suffix) {
		var $ptr, s, suffix;
		return s.length >= suffix.length && s.substring((s.length - suffix.length >> 0)) === suffix;
	};
	$pkg.HasSuffix = HasSuffix;
	Map = function(mapping, s) {
		var $ptr, _i, _r, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; b = $f.b; c = $f.c; i = $f.i; mapping = $f.mapping; maxbytes = $f.maxbytes; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					/* continue; */ $s = 1; continue;
				}
				b = $makeSlice(sliceType, maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ($imul(maxbytes, 2)) + 4 >> 0;
					nb = $makeSlice(sliceType, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f.b = b; $f.c = c; $f.i = i; $f.mapping = mapping; $f.maxbytes = maxbytes; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	Repeat = function(s, count) {
		var $ptr, b, bp, count, s;
		b = $makeSlice(sliceType, ($imul(s.length, count)));
		bp = $copyString(b, s);
		while (true) {
			if (!(bp < b.$length)) { break; }
			$copySlice($subslice(b, bp), $subslice(b, 0, bp));
			bp = $imul(bp, (2));
		}
		return $bytesToString(b);
	};
	$pkg.Repeat = Repeat;
	ToUpper = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	TrimLeftFunc = function(s, f) {
		var $ptr, _r, f, i, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; i = $f.i; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i === -1) {
			return "";
		}
		return s.substring(i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeftFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.i = i; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeftFunc = TrimLeftFunc;
	TrimRightFunc = function(s, f) {
		var $ptr, _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return s.substring(0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	TrimFunc = function(s, f) {
		var $ptr, _r, _r$1, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimLeftFunc(s, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = TrimRightFunc(_r, f); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimFunc = TrimFunc;
	IndexFunc = function(s, f) {
		var $ptr, _r, f, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = indexFunc(s, f, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IndexFunc = IndexFunc;
	indexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, r, s, start, truth, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; r = $f.r; s = $f.s; start = $f.start; truth = $f.truth; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		start = 0;
		/* while (true) { */ case 1:
			/* if (!(start < s.length)) { break; } */ if(!(start < s.length)) { $s = 2; continue; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start));
				r = _tuple[0];
				wid = _tuple[1];
			}
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return start;
			/* } */ case 4:
			start = start + (wid) >> 0;
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: indexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.r = r; $f.s = s; $f.start = start; $f.truth = truth; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	lastIndexFunc = function(s, f, truth) {
		var $ptr, _r, _tuple, f, i, r, s, size, truth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i));
			r = _tuple[0];
			size = _tuple[1];
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeCutsetFunc = function(cutset) {
		var $ptr, cutset;
		return (function(r) {
			var $ptr, r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	TrimLeft = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimLeftFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimLeft }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimLeft = TrimLeft;
	TrimRight = function(s, cutset) {
		var $ptr, _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "" || cutset === "") {
			return s;
		}
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	TrimSpace = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimSpace = TrimSpace;
	TrimSuffix = function(s, suffix) {
		var $ptr, s, suffix;
		if (HasSuffix(s, suffix)) {
			return s.substring(0, (s.length - suffix.length >> 0));
		}
		return s;
	};
	$pkg.TrimSuffix = TrimSuffix;
	Replace = function(s, old, new$1, n) {
		var $ptr, _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), s.substring(start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), s.substring(start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.Replace = Replace;
	ptrType$6.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$2.methods = [{prop: "add", name: "add", pkg: "strings", typ: $funcType([$String, $String, $Int, ptrType$7], [], false)}];
	ptrType$7.methods = [{prop: "lookup", name: "lookup", pkg: "strings", typ: $funcType([$String, $Bool], [$String, $Int, $Bool], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$3.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	stringWriter.methods = [{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$8.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$4.methods = [{prop: "next", name: "next", pkg: "strings", typ: $funcType([$String], [$Int], false)}];
	Replacer.init([{prop: "r", name: "r", pkg: "strings", typ: replacer, tag: ""}]);
	replacer.init([{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}]);
	trieNode.init([{prop: "value", name: "value", pkg: "strings", typ: $String, tag: ""}, {prop: "priority", name: "priority", pkg: "strings", typ: $Int, tag: ""}, {prop: "prefix", name: "prefix", pkg: "strings", typ: $String, tag: ""}, {prop: "next", name: "next", pkg: "strings", typ: ptrType$2, tag: ""}, {prop: "table", name: "table", pkg: "strings", typ: sliceType$1, tag: ""}]);
	genericReplacer.init([{prop: "root", name: "root", pkg: "strings", typ: trieNode, tag: ""}, {prop: "tableSize", name: "tableSize", pkg: "strings", typ: $Int, tag: ""}, {prop: "mapping", name: "mapping", pkg: "strings", typ: arrayType, tag: ""}]);
	appendSliceWriter.init($Uint8);
	stringWriterIface.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	stringWriter.init([{prop: "w", name: "w", pkg: "strings", typ: io.Writer, tag: ""}]);
	singleStringReplacer.init([{prop: "finder", name: "finder", pkg: "strings", typ: ptrType$4, tag: ""}, {prop: "value", name: "value", pkg: "strings", typ: $String, tag: ""}]);
	byteReplacer.init($Uint8, 256);
	byteStringReplacer.init(sliceType, 256);
	stringFinder.init([{prop: "pattern", name: "pattern", pkg: "strings", typ: $String, tag: ""}, {prop: "badCharSkip", name: "badCharSkip", pkg: "strings", typ: arrayType$2, tag: ""}, {prop: "goodSuffixSkip", name: "goodSuffixSkip", pkg: "strings", typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$1, arrayType$4, ptrType$3, ptrType$6, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, zoneinfo, badData, _tuple, _r, init, initLocal, runtimeNano, now, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sec = new $Int64(0, 0);
			this.nsec = 0;
			this.loc = ptrType$1.nil;
			return;
		}
		this.sec = sec_;
		this.nsec = nsec_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$3 = $ptrType(ParseError);
	ptrType$6 = $ptrType(Time);
	init = function() {
		var $ptr;
		Unix(new $Int64(0, 0), new $Int64(0, 0));
	};
	initLocal = function() {
		var $ptr, d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		var $ptr;
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var $ptr, _tmp, _tmp$1, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var $ptr, c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_1 = c;
			if (_1 === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i);
						_tmp$1 = 257;
						_tmp$2 = layout.substring((i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i);
						_tmp$4 = 258;
						_tmp$5 = layout.substring((i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i);
							_tmp$7 = 261;
							_tmp$8 = layout.substring((i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i);
							_tmp$10 = 262;
							_tmp$11 = layout.substring((i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i);
						_tmp$13 = 21;
						_tmp$14 = layout.substring((i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x]));
					_tmp$17 = layout.substring((i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i);
					_tmp$19 = 522;
					_tmp$20 = layout.substring((i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i);
				_tmp$22 = 259;
				_tmp$23 = layout.substring((i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i);
					_tmp$25 = 273;
					_tmp$26 = layout.substring((i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i);
				_tmp$28 = 263;
				_tmp$29 = layout.substring((i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && layout.substring((i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = layout.substring(0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = layout.substring((i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = layout.substring(0, i);
					_tmp$34 = 264;
					_tmp$35 = layout.substring((i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === 51) {
				_tmp$36 = layout.substring(0, i);
				_tmp$37 = 523;
				_tmp$38 = layout.substring((i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === 52) {
				_tmp$39 = layout.substring(0, i);
				_tmp$40 = 525;
				_tmp$41 = layout.substring((i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === 53) {
				_tmp$42 = layout.substring(0, i);
				_tmp$43 = 527;
				_tmp$44 = layout.substring((i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = layout.substring(0, i);
					_tmp$46 = 531;
					_tmp$47 = layout.substring((i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = layout.substring(0, i);
					_tmp$49 = 532;
					_tmp$50 = layout.substring((i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = layout.substring(0, i);
					_tmp$52 = 28;
					_tmp$53 = layout.substring((i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = layout.substring(0, i);
					_tmp$55 = 31;
					_tmp$56 = layout.substring((i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = layout.substring(0, i);
					_tmp$58 = 27;
					_tmp$59 = layout.substring((i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = layout.substring(0, i);
					_tmp$61 = 30;
					_tmp$62 = layout.substring((i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = layout.substring(0, i);
					_tmp$64 = 29;
					_tmp$65 = layout.substring((i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = layout.substring(0, i);
					_tmp$67 = 23;
					_tmp$68 = layout.substring((i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = layout.substring(0, i);
					_tmp$70 = 26;
					_tmp$71 = layout.substring((i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = layout.substring(0, i);
					_tmp$73 = 22;
					_tmp$74 = layout.substring((i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = layout.substring(0, i);
					_tmp$76 = 25;
					_tmp$77 = layout.substring((i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = layout.substring(0, i);
					_tmp$79 = 24;
					_tmp$80 = layout.substring((i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = layout.substring(0, i);
						_tmp$82 = std$1;
						_tmp$83 = layout.substring(j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var $ptr, _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var $ptr, _q, b, buf, i, q, u, w, width, x;
		u = (x >>> 0);
		if (x < 0) {
			b = $append(b, 45);
			u = (-x >>> 0);
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((48 + u >>> 0) << 24 >>> 24));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s);
		q = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var $ptr, _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var $ptr, _r$1, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r$1 = t.AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		return $bytesToString(b);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var $ptr, _2, _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout);
			prefix = _tuple$2[0];
			std = _tuple$2[1];
			suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true);
				year = _tuple$3[0];
				month = _tuple$3[1];
				day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs);
				hour = _tuple$4[0];
				min = _tuple$4[1];
				sec = _tuple$4[2];
			}
			switch (0) { default:
				_2 = std & 65535;
				if (_2 === 274) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$2 = y % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_2 === 273) {
					b = appendInt(b, year, 4);
				} else if (_2 === 258) {
					b = $appendSlice(b, new Month(month).String().substring(0, 3));
				} else if (_2 === 257) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_2 === 259) {
					b = appendInt(b, (month >> 0), 0);
				} else if (_2 === 260) {
					b = appendInt(b, (month >> 0), 2);
				} else if (_2 === 262) {
					b = $appendSlice(b, new Weekday(absWeekday(abs)).String().substring(0, 3));
				} else if (_2 === 261) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_2 === 263) {
					b = appendInt(b, day, 0);
				} else if (_2 === 264) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_2 === 265) {
					b = appendInt(b, day, 2);
				} else if (_2 === 522) {
					b = appendInt(b, hour, 2);
				} else if (_2 === 523) {
					hr = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_2 === 524) {
					hr$1 = (_r$4 = hour % 12, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_2 === 525) {
					b = appendInt(b, min, 0);
				} else if (_2 === 526) {
					b = appendInt(b, min, 2);
				} else if (_2 === 527) {
					b = appendInt(b, sec, 0);
				} else if (_2 === 528) {
					b = appendInt(b, sec, 2);
				} else if (_2 === 531) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_2 === 532) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_2 === 22) || (_2 === 25) || (_2 === 23) || (_2 === 24) || (_2 === 26) || (_2 === 27) || (_2 === 30) || (_2 === 28) || (_2 === 29) || (_2 === 31)) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$5 = zone$1 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$6 = absoffset % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_2 === 21) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$7 = zone$2 % 60, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_2 === 32) || (_2 === 33)) {
					b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f.$ptr = $ptr; $f._2 = _2; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var $ptr, s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var $ptr, c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var $ptr, fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [($imul(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), 10)) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var $ptr, s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var $ptr, prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var $ptr, _r$1, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$1 = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var $ptr, _3, _4, _5, _6, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$25 = $f._tuple$25; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix);
			value = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_3 = std & 65535;
				if (_3 === 274) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = value.substring(0, 2);
					_tmp$3 = value.substring(2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_3 === 273) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = value.substring(0, 4);
					_tmp$5 = value.substring(4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$4 = atoi(p);
					year = _tuple$4[0];
					err = _tuple$4[1];
				} else if (_3 === 258) {
					_tuple$5 = lookup(shortMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if (_3 === 257) {
					_tuple$6 = lookup(longMonthNames, value);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
				} else if ((_3 === 259) || (_3 === 260)) {
					_tuple$7 = getnum(value, std === 260);
					month = _tuple$7[0];
					value = _tuple$7[1];
					err = _tuple$7[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_3 === 262) {
					_tuple$8 = lookup(shortDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if (_3 === 261) {
					_tuple$9 = lookup(longDayNames, value);
					value = _tuple$9[1];
					err = _tuple$9[2];
				} else if ((_3 === 263) || (_3 === 264) || (_3 === 265)) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = value.substring(1);
					}
					_tuple$10 = getnum(value, std === 265);
					day = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_3 === 522) {
					_tuple$11 = getnum(value, false);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_3 === 523) || (_3 === 524)) {
					_tuple$12 = getnum(value, std === 524);
					hour = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_3 === 525) || (_3 === 526)) {
					_tuple$13 = getnum(value, std === 526);
					min = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_3 === 527) || (_3 === 528)) {
					_tuple$14 = getnum(value, std === 528);
					sec = _tuple$14[0];
					value = _tuple$14[1];
					err = _tuple$14[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$15 = nextStdChunk(layout);
						std = _tuple$15[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$16 = parseNanoseconds(value, n);
						nsec = _tuple$16[0];
						rangeErrString = _tuple$16[1];
						err = _tuple$16[2];
						value = value.substring(n);
					}
				} else if (_3 === 531) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = value.substring(0, 2);
					_tmp$7 = value.substring(2);
					p = _tmp$6;
					value = _tmp$7;
					_4 = p;
					if (_4 === "PM") {
						pmSet = true;
					} else if (_4 === "AM") {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_3 === 532) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = value.substring(0, 2);
					_tmp$9 = value.substring(2);
					p = _tmp$8;
					value = _tmp$9;
					_5 = p;
					if (_5 === "pm") {
						pmSet = true;
					} else if (_5 === "am") {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_3 === 22) || (_3 === 25) || (_3 === 23) || (_3 === 24) || (_3 === 26) || (_3 === 27) || (_3 === 29) || (_3 === 30) || (_3 === 28) || (_3 === 31)) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = value.substring(1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = value.substring(0, 1);
						_tmp$15 = value.substring(1, 3);
						_tmp$16 = value.substring(4, 6);
						_tmp$17 = "00";
						_tmp$18 = value.substring(6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = value.substring(0, 1);
						_tmp$20 = value.substring(1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = value.substring(3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = value.substring(0, 1);
						_tmp$25 = value.substring(1, 3);
						_tmp$26 = value.substring(4, 6);
						_tmp$27 = value.substring(7, 9);
						_tmp$28 = value.substring(9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = value.substring(0, 1);
						_tmp$30 = value.substring(1, 3);
						_tmp$31 = value.substring(3, 5);
						_tmp$32 = value.substring(5, 7);
						_tmp$33 = value.substring(7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = value.substring(0, 1);
						_tmp$35 = value.substring(1, 3);
						_tmp$36 = value.substring(3, 5);
						_tmp$37 = "00";
						_tmp$38 = value.substring(5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$17 = atoi(hour$1);
					hr = _tuple$17[0];
					err = _tuple$17[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(min$1);
						mm = _tuple$18[0];
						err = _tuple$18[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$19 = atoi(seconds);
						ss = _tuple$19[0];
						err = _tuple$19[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_6 = sign.charCodeAt(0);
					if (_6 === 43) {
					} else if (_6 === 45) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_3 === 21) {
					if (value.length >= 3 && value.substring(0, 3) === "UTC") {
						z = $pkg.UTC;
						value = value.substring(3);
						break;
					}
					_tuple$20 = parseTimeZone(value);
					n$1 = _tuple$20[0];
					ok = _tuple$20[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = value.substring(0, n$1);
					_tmp$43 = value.substring(n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_3 === 32) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$21 = parseNanoseconds(value, ndigit);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = value.substring(ndigit);
				} else if (_3 === 33) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$22 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$22[0];
					rangeErrString = _tuple$22[1];
					err = _tuple$22[2];
					value = value.substring((1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day > daysIn((month >> 0), year)) {
			return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$1.nil)) { */ case 1:
			_r$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r$1, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((zoneOffset === -1))) { */ case 5:
			_r$2 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			t = $clone(_r$2, Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_r$3 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$23 = _r$3;
			name = _tuple$23[0];
			offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		/* } */ case 6:
		/* */ if (!(zoneName === "")) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(zoneName === "")) { */ case 9:
			_r$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			t$1 = $clone(_r$4, Time);
			_r$5 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$24 = _r$5;
			offset$1 = _tuple$24[0];
			ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3));
				offset$1 = _tuple$25[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		/* } */ case 10:
		_r$6 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ $s = 14; case 14:
		return [_r$6, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$25 = _tuple$25; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var $ptr, _7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_7 = nUpper;
		if ((_7 === 0) || (_7 === 1) || (_7 === 2) || (_7 === 6)) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_7 === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_7 === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_7 === 3) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var $ptr, _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1));
		x = _tuple$1[0];
		rem = _tuple$1[1];
		err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var $ptr, _tuple$1, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes));
		ns = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = s.substring(i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	ParseDuration = function(s) {
		var $ptr, _entry, _tmp, _tmp$1, _tuple$1, _tuple$2, _tuple$3, c, c$1, d, err, f, i, n, neg, ok, orig, pl, pl$1, post, pre, s, scale, u, unit, v, x, x$1, x$2;
		orig = s;
		d = new $Int64(0, 0);
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (true) {
			if (!(!(s === ""))) { break; }
			_tmp = new $Int64(0, 0);
			_tmp$1 = new $Int64(0, 0);
			v = _tmp;
			f = _tmp$1;
			scale = 1;
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s);
			v = _tuple$1[0];
			s = _tuple$1[1];
			err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s);
				f = _tuple$2[0];
				s = _tuple$2[1];
				err = _tuple$2[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				n = pl$1 - s.length >> 0;
				while (true) {
					if (!(n > 0)) { break; }
					scale = scale * (10);
					n = n - (1) >> 0;
				}
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || 48 <= c$1 && c$1 <= 57) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[$String.keyFor(u)], _entry !== undefined ? [_entry.v, true] : [new $Int64(0, 0), false]);
			unit = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			if ((x = $div64(new $Int64(2147483647, 4294967295), unit, false), (v.$high > x.$high || (v.$high === x.$high && v.$low > x.$low)))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			v = $mul64(v, (unit));
			if ((f.$high > 0 || (f.$high === 0 && f.$low > 0))) {
				v = (x$1 = new $Int64(0, $flatten64(f) * ($flatten64(unit) / scale)), new $Int64(v.$high + x$1.$high, v.$low + x$1.$low));
				if ((v.$high < 0 || (v.$high === 0 && v.$low < 0))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
			}
			d = (x$2 = v, new $Int64(d.$high + x$2.$high, d.$low + x$2.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
		}
		if (neg) {
			d = new $Int64(-d.$high, -d.$low);
		}
		return [new Duration(d.$high, d.$low), $ifaceNil];
	};
	$pkg.ParseDuration = ParseDuration;
	Time.ptr.prototype.After = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var $ptr, t, u, x, x$1, x$2, x$3;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var $ptr, t, u, x, x$1;
		u = $clone(u, Time);
		t = $clone(this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var $ptr, m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var $ptr, d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 6:
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			/* } */ case 8:
		/* } */ case 5:
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var $ptr, _r$1, _r$2, _tuple$1, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = $clone(this, Time);
		l = t.loc;
		/* */ if (l === ptrType$1.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$1.nil || l === localLoc) { */ case 1:
			_r$1 = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			l = _r$1;
		/* } */ case 2:
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				name = _tuple$1[0];
				offset = _tuple$1[1];
			/* } */ case 9:
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var $ptr, _r$1, _tuple$1, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var $ptr, _r$1, _tuple$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var $ptr, _r$1, _tuple$1, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		month = _tuple$1[1];
		return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var $ptr, _r$1, _tuple$1, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		day = _tuple$1[2];
		return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var $ptr, _r$1, _r$2, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absWeekday(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var $ptr, _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var $ptr, _q, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple$1 = $f._tuple$1; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = $clone(this, Time);
		_r$1 = t.date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		_r$3 = t.Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		wday = (_r$2 = ((_r$3 + 6 >> 0) >> 0) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$4 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$5 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple$1 = _tuple$1; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var $ptr, _r$1, _r$2, _tuple$1, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absClock(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		/* */ $s = 3; case 3:
		return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var $ptr, _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var $ptr, _q, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return (_q = ($div64(_r$1, new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ($div64(_r$1, new $Uint64(0, 60), true).$low >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var $ptr, t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var $ptr, _r$1, _tuple$1, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		yday = _tuple$1[3];
		return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var $ptr, _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$2[0];
			u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var $ptr, _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ((digit.$low << 24 >>> 24) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var $ptr, buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var $ptr, d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var $ptr, d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var $ptr, d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var $ptr, d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var $ptr, d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var $ptr, d, t, u, x, x$1, x$2, x$3, x$4;
		u = $clone(u, Time);
		t = $clone(this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		_r$2 = t.Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		hour = _tuple$2[0];
		min = _tuple$2[1];
		sec = _tuple$2[2];
		_r$3 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var $ptr, _r$1, _r$2, _tuple$1, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = $clone(this, Time);
		_r$1 = t.abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = absDate(_r$1, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		year = _tuple$1[0];
		month = _tuple$1[1];
		day = _tuple$1[2];
		yday = _tuple$1[3];
		/* */ $s = 3; case 3:
		return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var $ptr, _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var $ptr, m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((((m < 0 || m >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x])) >> 0) >> 0);
	};
	Now = function() {
		var $ptr, _tuple$1, nsec, sec;
		_tuple$1 = now();
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	$pkg.Now = Now;
	Time.ptr.prototype.UTC = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var $ptr, t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var $ptr, loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var $ptr, l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var $ptr, _r$1, _tuple$1, name, offset, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; name = $f.name; offset = $f.offset; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = $clone(this, Time);
		_r$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		name = _tuple$1[0];
		offset = _tuple$1[1];
		return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.name = name; $f.offset = offset; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var $ptr, t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var $ptr, t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var $ptr, _q, _r$1, _r$2, _tuple$1, enc, offset, offsetMin, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple$1 = $f._tuple$1; enc = $f.enc; offset = $f.offset; offsetMin = $f.offsetMin; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		offsetMin = 0;
		/* */ if (t.Location() === utcLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Location() === utcLoc) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = t.Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			offset = _tuple$1[1];
			if (!(((_r$2 = offset % 60, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		/* } */ case 3:
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple$1 = _tuple$1; $f.enc = enc; $f.offset = offset; $f.offsetMin = offsetMin; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var $ptr, _r$1, _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; offset = $f.offset; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), 60);
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.loc = utcLoc;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		/* } */ case 3:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.offset = offset; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var $ptr, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var $ptr, _r$1, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$1 = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		b = _r$2;
		b = $append(b, 34);
		return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var $ptr, _r$1, _r$2, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(this, Time);
		_r$1 = t.Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		y = _r$1;
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$2 = t.AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return [_r$2, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var $ptr, _r$1, _tuple$1, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _tuple$1 = $f._tuple$1; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		t = this;
		_r$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		Time.copy(t, _tuple$1[0]);
		err = _tuple$1[1];
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._tuple$1 = _tuple$1; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var $ptr, n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var $ptr, _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var $ptr, _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var $ptr, _r$1, _r$2, _r$3, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12);
		year = _tuple$1[0];
		m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000);
		sec = _tuple$2[0];
		nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60);
		min = _tuple$3[0];
		sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60);
		hour = _tuple$4[0];
		min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24);
		day = _tuple$5[0];
		hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r$1 = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$6 = _r$1;
		offset = _tuple$6[1];
		start = _tuple$6[3];
		end = _tuple$6[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$2 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$3 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$8 = _r$3;
					offset = _tuple$8[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var $ptr, _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var $ptr, _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d);
		r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var $ptr, _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var $ptr, _r$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$1.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var $ptr, l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var $ptr, _q, _r$1, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r$1 = $f._r$1; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f.$ptr = $ptr; $f._q = _q; $f._r$1 = _r$1; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var $ptr, _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var $ptr, _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var $ptr, _i, _i$1, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple$1 = $f._tuple$1; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r$1 = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		l = _r$1;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$2 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				nam = _tuple$1[0];
				offset$1 = _tuple$1[1];
				isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple$1 = _tuple$1; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$1], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$6.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$1.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		unitMap = $makeMap($String.keyFor, [{ k: "ns", v: new $Int64(0, 1) }, { k: "us", v: new $Int64(0, 1000) }, { k: "\xC2\xB5s", v: new $Int64(0, 1000) }, { k: "\xCE\xBCs", v: new $Int64(0, 1000) }, { k: "ms", v: new $Int64(0, 1000000) }, { k: "s", v: new $Int64(0, 1000000000) }, { k: "m", v: new $Int64(13, 4165425152) }, { k: "h", v: new $Int64(838, 817405952) }]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO"); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, sliceType$2, ptrType$1, ptrType$2, ptrType$3, ptrType$4, arrayType, ptrType$12, funcType$1, ptrType$13, arrayType$2, arrayType$5, ptrType$15, errFinished, lstat, useSyscallwd, supportsCloseOnExec, runtime_args, init, runtime_beforeExit, Getenv, NewSyscallError, IsNotExist, isNotExist, Open, fixCount, sigpipe, syscallMode, Chmod, NewFile, epipecheck, OpenFile, Stat, Lstat, basename, init$1, useSyscallwdDarwin, IsPathSeparator, init$2, Exit, fillFileStatFromSys, timespecToTime, init$3;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$12.nil;
			return;
		}
		this.file = file_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fd = 0;
			this.name = "";
			this.dirinfo = ptrType.nil;
			return;
		}
		this.fd = fd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$1.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(File);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	arrayType = $arrayType($Uint8, 4);
	ptrType$12 = $ptrType(file);
	funcType$1 = $funcType([ptrType$12], [$error], false);
	ptrType$13 = $ptrType(time.Location);
	arrayType$2 = $arrayType($Int64, 2);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$15 = $ptrType(fileStat);
	runtime_args = function() {
		var $ptr;
		return $pkg.Args;
	};
	init = function() {
		var $ptr, argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
		var $ptr;
	};
	File.ptr.prototype.readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err, errno, f, n, names, nb, nc, size;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$1.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$1, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = NewSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$2[0];
			nc = _tuple$2[1];
			names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, err, f, fi, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; fi = $f.fi; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType$2.nil;
			_tmp$1 = $pkg.ErrInvalid;
			fi = _tmp;
			err = _tmp$1;
			return [fi, err];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fi = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.fi = fi; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, names;
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	Getenv = function(key) {
		var $ptr, _r, _tuple, key, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; key = $f.key; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = syscall.Getenv(key); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Getenv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.key = key; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Getenv = Getenv;
	PathError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var $ptr, err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var $ptr, err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	isNotExist = function(err) {
		var $ptr, _ref, err, pe, pe$1, pe$2, pe$3;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			pe$1 = _ref.$val;
			err = pe$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			pe$2 = _ref.$val;
			err = pe$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			pe$3 = _ref.$val;
			err = pe$3.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b);
		n = _tuple[0];
		e = _tuple[1];
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n;
		_tmp$5 = err;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n;
				_tmp$3 = io.EOF;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b);
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var $ptr, _tmp, _tmp$1, _tuple, b, e, err, f, m, n, off, x;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off);
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, f, offset, r, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $pkg.ErrInvalid;
			ret = _tmp;
			err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence);
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = new PathError.ptr("seek", f.file.name, e);
			ret = _tmp$2;
			err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, f, n, s;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrInvalid;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		_tuple = f.Write(new sliceType$1($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = function(name) {
		var $ptr, name;
		return OpenFile(name, 0, 0);
	};
	$pkg.Open = Open;
	fixCount = function(n, err) {
		var $ptr, err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var $ptr, i, o;
		o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	Chmod = function(name, mode) {
		var $ptr, e, mode, name;
		e = syscall.Chmod(name, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", name, e);
		}
		return $ifaceNil;
	};
	$pkg.Chmod = Chmod;
	File.ptr.prototype.Chmod = function(mode) {
		var $ptr, e, f, mode;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var $ptr, e, f, gid, uid;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var $ptr, e, f, size;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var $ptr, e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return NewSyscallError("fsync", e);
		}
		return $ifaceNil;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var $ptr, f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$1.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$12, "close")));
		return f;
	};
	$pkg.NewFile = NewFile;
	epipecheck = function(file$1, e) {
		var $ptr, e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.fd === 1) || (file$1.file.fd === 2))) {
			sigpipe();
		}
	};
	OpenFile = function(name, flag, perm) {
		var $ptr, _tuple, _tuple$1, chmod, e, err, flag, name, perm, r;
		chmod = false;
		if (true && !(((flag & 512) === 0)) && !((((perm & 1048576) >>> 0) === 0))) {
			_tuple = Stat(name);
			err = _tuple[1];
			if (IsNotExist(err)) {
				chmod = true;
			}
		}
		r = 0;
		while (true) {
			e = $ifaceNil;
			_tuple$1 = syscall.Open(name, flag | 16777216, syscallMode(perm));
			r = _tuple$1[0];
			e = _tuple$1[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (true && $interfaceIsEqual(e, new syscall.Errno(4))) {
				continue;
			}
			return [ptrType$1.nil, new PathError.ptr("open", name, e)];
		}
		if (chmod) {
			Chmod(name, perm);
		}
		if (!supportsCloseOnExec) {
			syscall.CloseOnExec(r);
		}
		return [NewFile((r >>> 0), name), $ifaceNil];
	};
	$pkg.OpenFile = OpenFile;
	File.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var $ptr, e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$12.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var $ptr, err, f, fs;
		f = this;
		if (f === ptrType$1.nil) {
			return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero()));
		err = syscall.Fstat(f.file.fd, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs, f.file.name);
		return [fs, $ifaceNil];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero()));
		err = syscall.Stat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("stat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Stat = Stat;
	Lstat = function(name) {
		var $ptr, err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Int64(0, 0), 0, ptrType$13.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$2.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	File.ptr.prototype.readdir = function(n) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$2.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n);
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$2, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = lstat(dirname + "/" + filename); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var $ptr, _tuple, _tuple$1, b, err, f, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var $ptr, _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err, err$1, f, m, n;
		n = 0;
		err = $ifaceNil;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
			m = _tuple[0];
			err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $ptr, _tuple, _tuple$1, b, err, f, n, off;
		n = 0;
		err = $ifaceNil;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $ptr, _tuple, err, f, offset, ret, whence;
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var $ptr, i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		var $ptr;
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var $ptr, err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = function(c) {
		var $ptr, c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	init$2 = function() {
		var $ptr;
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var $ptr, code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	fillFileStatFromSys = function(fs, name) {
		var $ptr, _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime(fs.sys.Mtimespec));
		fs.mode = (((fs.sys.Mode & 511) >>> 0) >>> 0);
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if ((_1 === 24576) || (_1 === 57344)) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === 32768) {
		} else if (_1 === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var $ptr, ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$3 = function() {
		var $ptr, _i, _ref, _rune, _tuple, err, i, osver;
		_tuple = syscall.Sysctl("kern.osrelease");
		osver = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var $ptr, _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$1(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var $ptr, m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var $ptr, m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var $ptr, m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var $ptr, fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var $ptr, fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var $ptr, fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var $ptr, fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var $ptr, fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var $ptr, fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$2, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$12.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$15.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	LinkError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Old", name: "Old", pkg: "", typ: $String, tag: ""}, {prop: "New", name: "New", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$12, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType, tag: ""}]);
	dirInfo.init([{prop: "buf", name: "buf", pkg: "os", typ: sliceType$1, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "os", typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", pkg: "os", typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "os", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "os", typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "os", typ: time.Time, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function(param) {
			var $ptr, param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		init$3();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	ParseBool = function(str) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err, str, value;
		value = false;
		err = $ifaceNil;
		_1 = str;
		if (_1 === "1" || _1 === "t" || _1 === "T" || _1 === "true" || _1 === "TRUE" || _1 === "True") {
			_tmp = true;
			_tmp$1 = $ifaceNil;
			value = _tmp;
			err = _tmp$1;
			return [value, err];
		} else if (_1 === "0" || _1 === "f" || _1 === "F" || _1 === "false" || _1 === "FALSE" || _1 === "False") {
			_tmp$2 = false;
			_tmp$3 = $ifaceNil;
			value = _tmp$2;
			err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false;
		_tmp$5 = syntaxError("ParseBool", str);
		value = _tmp$4;
		err = _tmp$5;
		return [value, err];
	};
	$pkg.ParseBool = ParseBool;
	equalIgnoreCase = function(s1, s2) {
		var $ptr, c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_1 = s.charCodeAt(0);
		if (_1 === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_1 === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if ((_1 === 110) || (_1 === 78)) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if ((_1 === 105) || (_1 === 73)) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var $ptr, b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var $ptr, _2, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_2 = true;
			if (_2 === ((c === 46))) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_2 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $ptr, _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val);
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err, err1, err1$1, f, f1, f1$1, s;
		f = 0;
		err = $ifaceNil;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f1 = _tuple[0];
			err1 = _tuple[1];
			_tmp = f1;
			_tmp$1 = err1;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s);
		f1$1 = _tuple$1[0];
		err1$1 = _tuple$1[1];
		_tmp$2 = f1$1;
		_tmp$3 = err1$1;
		f = _tmp$2;
		err = _tmp$3;
		return [f, err];
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var $ptr, fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === 10) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === 16) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= (base << 24 >>> 24)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= (base << 24 >>> 24)) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$2 = new $Uint64(0, v), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
		/* Error: */ case 7:
		_tmp$4 = n;
		_tmp$5 = new NumError.ptr("ParseUint", s, err);
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
		/* */ $s = -1; case -1: } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var $ptr, _tmp, _tmp$1, _tuple, err, i, i64, s;
		i = 0;
		err = $ifaceNil;
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0);
		_tmp$1 = err;
		i = _tmp;
		err = _tmp$1;
		return [i, err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var $ptr, a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var $ptr, _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var $ptr, a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var $ptr, a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var $ptr, a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0);
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >>> 0);
			dig = (y$2 = k, y$2 < 32 ? (n >>> y$2) : 0) >>> 0;
			n = n - (((y$3 = k, y$3 < 32 ? (dig << y$3) : 0) >>> 0)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >>> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = n - (((y$5 = k, y$5 < 32 ? (dig$1 << y$5) : 0) >>> 0)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >>> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var $ptr, b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var $ptr, _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >>> 0) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >>> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var $ptr, a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var $ptr, _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var $ptr, a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var $ptr, a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var $ptr, a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var $ptr, bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var $ptr, _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = $clone(g, extFloat);
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = new $Uint64(0, (f.mant.$low >>> 0));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = new $Uint64(0, (g.mant.$low >>> 0));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var $ptr, _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var $ptr, _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var $ptr, _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, $ptr, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, (pow10.$low >>> 0)) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, $ptr, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var $ptr, _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - (($imul(digit, (pow$1.$low >>> 0)) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var $ptr, _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var $ptr, bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var $ptr, bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var $ptr, _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_1 === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === 101) || (_3 === 69)) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === 103) || (_3 === 71)) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === 101) || (_4 === 69)) {
				digits = digits + (1) >> 0;
			} else if ((_4 === 103) || (_4 === 71)) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var $ptr, _5, _6, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_5 = fmt;
			if ((_5 === 101) || (_5 === 69)) {
				prec = digs.nd - 1 >> 0;
			} else if (_5 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_5 === 103) || (_5 === 71)) {
				prec = digs.nd;
			}
		} else {
			_6 = fmt;
			if ((_6 === 101) || (_6 === 69)) {
				d.Round(prec + 1 >> 0);
			} else if (_6 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if ((_6 === 103) || (_6 === 71)) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var $ptr, _7, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_7 = fmt;
		if ((_7 === 101) || (_7 === 69)) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_7 === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if ((_7 === 103) || (_7 === 71)) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var $ptr, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - (flt.mantbits >> 0) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, (exp << 24 >>> 24) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, ((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, ((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, ((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24, (_r$1 = ((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, ((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var $ptr, ch, d, dst, i, j, m, neg, prec, x;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var $ptr, _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, new $Uint64(0, exp), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var $ptr, a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var $ptr, a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var $ptr, _tuple, base, i, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var $ptr, i;
		return FormatInt(new $Int64(0, i), 10);
	};
	$pkg.Itoa = Itoa;
	formatBits = function(dst, u, base, neg, append_) {
		var $ptr, _q, _q$1, a, append_, b, b$1, base, d, dst, i, j, m, neg, q, q$1, q$2, qs, s, s$1, u, us, us$1, x, x$1;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low > 4294967295)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = ((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
					j = 9;
					while (true) {
						if (!(j > 0)) { break; }
						i = i - (1) >> 0;
						qs = (_q = us / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us - ($imul(qs, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
						us = qs;
						j = j - (1) >> 0;
					}
					u = q;
				}
			}
			us$1 = (u.$low >>> 0);
			while (true) {
				if (!(us$1 >= 10)) { break; }
				i = i - (1) >> 0;
				q$1 = (_q$1 = us$1 / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = (((us$1 - ($imul(q$1, 10) >>> 0) >>> 0) + 48 >>> 0) << 24 >>> 24));
				us$1 = q$1;
			}
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = ((us$1 + 48 >>> 0) << 24 >>> 24));
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$2 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = $mul64(q$2, b$1), new $Uint64(u.$high - x$1.$high, u.$low - x$1.$low)).$low >>> 0)));
					u = q$2;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var $ptr, ASCIIonly, _1, _q, _tuple, buf, graphicOnly, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_1 = r;
			if (_1 === 7) {
				buf = $appendSlice(buf, "\\a");
			} else if (_1 === 8) {
				buf = $appendSlice(buf, "\\b");
			} else if (_1 === 12) {
				buf = $appendSlice(buf, "\\f");
			} else if (_1 === 10) {
				buf = $appendSlice(buf, "\\n");
			} else if (_1 === 13) {
				buf = $appendSlice(buf, "\\r");
			} else if (_1 === 9) {
				buf = $appendSlice(buf, "\\t");
			} else if (_1 === 11) {
				buf = $appendSlice(buf, "\\v");
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, "\\x");
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, "\\u");
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, "\\U");
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	QuoteToASCII = function(s) {
		var $ptr, s;
		return quoteWith(s, 34, true, false);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	QuoteRune = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, false, false);
	};
	$pkg.QuoteRune = QuoteRune;
	AppendQuoteRune = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRune(r));
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	QuoteRuneToASCII = function(r) {
		var $ptr, r;
		return quoteWith($encodeRune(r), 39, true, false);
	};
	$pkg.QuoteRuneToASCII = QuoteRuneToASCII;
	AppendQuoteRuneToASCII = function(dst, r) {
		var $ptr, dst, r;
		return $appendSlice(dst, QuoteRuneToASCII(r));
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var $ptr, _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var $ptr, _2, _3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = s.substring(size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0);
			_tmp$5 = false;
			_tmp$6 = s.substring(1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		switch (0) { default:
			_2 = c$1;
			if (_2 === 97) {
				value = 7;
			} else if (_2 === 98) {
				value = 8;
			} else if (_2 === 102) {
				value = 12;
			} else if (_2 === 110) {
				value = 10;
			} else if (_2 === 114) {
				value = 13;
			} else if (_2 === 116) {
				value = 9;
			} else if (_2 === 118) {
				value = 11;
			} else if ((_2 === 120) || (_2 === 117) || (_2 === 85)) {
				n = 0;
				_3 = c$1;
				if (_3 === 120) {
					n = 2;
				} else if (_3 === 117) {
					n = 4;
				} else if (_3 === 85) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = s.substring(n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_2 === 48) || (_2 === 49) || (_2 === 50) || (_2 === 51) || (_2 === 52) || (_2 === 53) || (_2 === 54) || (_2 === 55)) {
				v$1 = (c$1 >> 0) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = s.substring(2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_2 === 92) {
				value = 92;
			} else if ((_2 === 39) || (_2 === 34)) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = (c$1 >> 0);
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var $ptr, _4, _q, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t;
		t = "";
		err = $ifaceNil;
		n = s.length;
		if (n < 2) {
			_tmp = "";
			_tmp$1 = $pkg.ErrSyntax;
			t = _tmp;
			err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = "";
			_tmp$3 = $pkg.ErrSyntax;
			t = _tmp$2;
			err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = "";
				_tmp$5 = $pkg.ErrSyntax;
				t = _tmp$4;
				err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s;
			_tmp$7 = $ifaceNil;
			t = _tmp$6;
			err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = "";
			_tmp$9 = $pkg.ErrSyntax;
			t = _tmp$8;
			err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = "";
			_tmp$11 = $pkg.ErrSyntax;
			t = _tmp$10;
			err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_4 = quote;
			if (_4 === 34) {
				_tmp$12 = s;
				_tmp$13 = $ifaceNil;
				t = _tmp$12;
				err = _tmp$13;
				return [t, err];
			} else if (_4 === 39) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s;
					_tmp$15 = $ifaceNil;
					t = _tmp$14;
					err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = "";
				_tmp$17 = err$1;
				t = _tmp$16;
				err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = "";
				_tmp$19 = $pkg.ErrSyntax;
				t = _tmp$18;
				err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf);
		_tmp$21 = $ifaceNil;
		t = _tmp$20;
		err = _tmp$21;
		return [t, err];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var $ptr, c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16);
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0);
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var $ptr, i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = (r << 16 >>> 16);
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? $throwRuntimeError("index out of range") : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2228, 2275, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3423, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70205, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 128720, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129304, 129408, 129412, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62842, 62884]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, sliceType$1, sliceType$2, ptrType$3, funcType$1, sliceType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, sliceType$5, sliceType$6, structType$6, sliceType$7, sliceType$8, ptrType$8, arrayType$1, structType$7, ptrType$9, sliceType$9, arrayType$2, sliceType$10, ptrType$10, ptrType$11, ptrType$12, sliceType$11, sliceType$12, ptrType$13, sliceType$13, ptrType$18, sliceType$15, funcType$3, funcType$4, funcType$5, arrayType$3, ptrType$20, initialized, stringPtrMap, callHelper, jsObjectPtr, selectHelper, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, DeepEqual, deepValueEqualJs, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, grow, Append, MakeMap, Indirect, New, NewAt, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, ptrdata_, hash_, _$3_, align_, fieldAlign_, kind_, alg_, gcdata_, string_, uncommonType_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this._$3 = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$4.nil;
			this.gcdata = ptrType$5.nil;
			this.string = ptrType$6.nil;
			this.uncommonType = ptrType$7.nil;
			this.ptrToThis = ptrType$1.nil;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this._$3 = _$3_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.string = string_;
		this.uncommonType = uncommonType_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.mtyp = ptrType$1.nil;
			this.typ = ptrType$1.nil;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.mtyp = mtyp_;
		this.typ = typ_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.methods = sliceType$4.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.dotdotdot = false;
			this.in$2 = sliceType$1.nil;
			this.out = sliceType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.dotdotdot = dotdotdot_;
		this.in$2 = in$2_;
		this.out = out_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.methods = sliceType$5.nil;
			return;
		}
		this.rtype = rtype_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = ptrType$6.nil;
			this.pkgPath = ptrType$6.nil;
			this.typ = ptrType$1.nil;
			this.tag = ptrType$6.nil;
			this.offset = 0;
			return;
		}
		this.name = name_;
		this.pkgPath = pkgPath_;
		this.typ = typ_;
		this.tag = tag_;
		this.offset = offset_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
			this.fields = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$11.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$13.nil;
			this.index = sliceType$11.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.itab = ptrType$9.nil;
			this.word = 0;
			return;
		}
		this.itab = itab_;
		this.word = word_;
	});
	ptrType$1 = $ptrType(rtype);
	sliceType$1 = $sliceType(ptrType$1);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$2], [ptrType$3], true);
	sliceType$3 = $sliceType($String);
	ptrType$4 = $ptrType(typeAlg);
	ptrType$5 = $ptrType($Uint8);
	ptrType$6 = $ptrType($String);
	ptrType$7 = $ptrType(uncommonType);
	sliceType$4 = $sliceType(method);
	sliceType$5 = $sliceType(imethod);
	sliceType$6 = $sliceType(structField);
	structType$6 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	sliceType$7 = $sliceType(ptrType$3);
	sliceType$8 = $sliceType(Value);
	ptrType$8 = $ptrType(nonEmptyInterface);
	arrayType$1 = $arrayType($UnsafePointer, 100000);
	structType$7 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$1, tag: ""}]);
	ptrType$9 = $ptrType(structType$7);
	sliceType$9 = $sliceType(sliceType$7);
	arrayType$2 = $arrayType($UnsafePointer, 2);
	sliceType$10 = $sliceType(arrayType$2);
	ptrType$10 = $ptrType(method);
	ptrType$11 = $ptrType(interfaceType);
	ptrType$12 = $ptrType(imethod);
	sliceType$11 = $sliceType($Int);
	sliceType$12 = $sliceType(fieldScan);
	ptrType$13 = $ptrType(structType);
	sliceType$13 = $sliceType($Uint8);
	ptrType$18 = $ptrType($UnsafePointer);
	sliceType$15 = $sliceType($Int32);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	arrayType$3 = $arrayType($Uintptr, 2);
	ptrType$20 = $ptrType(ValueError);
	init = function() {
		var $ptr, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var $ptr, i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(ptrType$6.nil, ptrType$6.nil, sliceType$4.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), false, sliceType$1.nil, sliceType$1.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), sliceType$5.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), sliceType$6.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(ptrType$6.nil, ptrType$6.nil, ptrType$1.nil, ptrType$6.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: init }; } $f.$ptr = $ptr; $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var $ptr, typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$4.nil, ptrType$5.nil, newStringPtr(typ.string), ptrType$7.nil, ptrType$1.nil);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$4, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					method.copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0));
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem), ptrType$1.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem), (dir >>> 0)));
			} else if (_1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$1, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$1, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$5, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem)));
			} else if (_1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil), reflectType(typ.elem)));
			} else if (_1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$6, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var $ptr, kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var $ptr, _entry, _key, _tuple, c, ok, ptr, str, str$24ptr, strObj;
		c = new structType$6.ptr("");
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$6.nil;
		}
		_tuple = (_entry = stringPtrMap[$String.keyFor(str)], _entry !== undefined ? [_entry.v, true] : [ptrType$6.nil, false]);
		ptr = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			ptr = (str$24ptr || (str$24ptr = new ptrType$6(function() { return str; }, function($v) { str = $v; })));
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var $ptr, typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var $ptr, dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return new Value.ptr(rt, v, (fl | (_r$4 >>> 0)) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (_r$5 >>> 0)) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var $ptr, _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var $ptr, _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 3; case 3:
			return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var $ptr, i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$4.nil, ptrType$5.nil, ptrType$6.nil, ptrType$7.nil, ptrType$1.nil);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var $ptr, _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	rtype.ptr.prototype.ptrTo = function() {
		var $ptr, t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var $ptr, t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var $ptr, _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f.$ptr = $ptr; $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var $ptr, _3, typ;
		_3 = typ.Kind();
		if (_3 === 25) {
			return new (jsType(typ).ptr)();
		} else if (_3 === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var $ptr, _4, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_4 = typ.Kind();
		if (_4 === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_4 === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if ((_4 === 2) || (_4 === 5)) {
			ptr.$set((bits.$low >> 0));
		} else if (_4 === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_4 === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_4 === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if ((_4 === 7) || (_4 === 10) || (_4 === 12)) {
			ptr.$set((bits.$low >>> 0));
		} else if (_4 === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f.$ptr = $ptr; $f._4 = _4; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var $ptr, dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t) {
		var $ptr, m, t;
		m = 0;
		m = new ($global.Object)();
		return m;
	};
	keyFor = function(t, key) {
		var $ptr, k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var $ptr, _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var $ptr, _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var $ptr, _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var $ptr, m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var $ptr, _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = it;
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2);
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var $ptr, it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var $ptr, m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var $ptr, _6, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		srcVal = v.object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_6 = k;
			/* */ if (_6 === 23) { $s = 7; continue; }
			/* */ if (_6 === 22) { $s = 8; continue; }
			/* */ if (_6 === 25) { $s = 9; continue; }
			/* */ if ((_6 === 17) || (_6 === 1) || (_6 === 18) || (_6 === 19) || (_6 === 20) || (_6 === 21) || (_6 === 24)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_6 === 23) { */ case 7:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 12; continue;
			/* } else if (_6 === 22) { */ case 8:
				_r$2 = typ.Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$3 === 25) { */ case 13:
					_r$4 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 17:
						val = srcVal;
						/* break; */ $s = 5; continue;
					/* } */ case 18:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 5; continue;
				/* } */ case 14:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 12; continue;
			/* } else if (_6 === 25) { */ case 9:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 12; continue;
			/* } else if ((_6 === 17) || (_6 === 1) || (_6 === 18) || (_6 === 19) || (_6 === 20) || (_6 === 21) || (_6 === 24)) { */ case 10:
				val = v.ptr;
				$s = 12; continue;
			/* } else { */ case 11:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 12:
		case 5:
		_r$6 = typ.common(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 24; case 24:
		return new Value.ptr(_r$6, val, (((v.flag & 224) >>> 0) | (_r$7 >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f.$ptr = $ptr; $f._6 = _6; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var $ptr, dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.$ptr = $ptr; $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var $ptr, fn, i, iface, m, m$1, op, prop, rcvr, rcvrtype, t, tt, ut, v, x, x$1;
		rcvrtype = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(m.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$8);
			if (iface.itab === ptrType$9.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$7.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(m$1.pkgPath === ptrType$6.nil)) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		var $ptr, _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f.$ptr = $ptr; $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var $ptr, dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		var $ptr;
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var $ptr, _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		v = v;
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = v.object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = $makeFunc((function(fn, rcvr) { return function(arguments$1) {
			var $ptr, arguments$1;
			return fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$7));
		}; })(fn, rcvr));
		_r = v.Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new Value.ptr(_r, fv, (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var $ptr, _7, t;
		t = this;
		_7 = t.Kind();
		if ((_7 === 22) || (_7 === 21) || (_7 === 18) || (_7 === 19) || (_7 === 25) || (_7 === 17)) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var $ptr, _8, _r, _r$1, _r$2, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_8 = t.Kind();
			/* */ if ((_8 === 19) || (_8 === 23) || (_8 === 21)) { $s = 2; continue; }
			/* */ if (_8 === 17) { $s = 3; continue; }
			/* */ if (_8 === 25) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_8 === 19) || (_8 === 23) || (_8 === 21)) { */ case 2:
				return false;
			/* } else if (_8 === 17) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r;
			/* } else if (_8 === 25) { */ case 4:
				i = 0;
				/* while (true) { */ case 8:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 9; continue; }
					_r$1 = t.Field(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Type.Comparable(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (!_r$2) { */ case 10:
						return false;
					/* } */ case 11:
					i = i + (1) >> 0;
				/* } */ $s = 8; continue; case 9:
			/* } */ case 5:
		case 1:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f.$ptr = $ptr; $f._8 = _8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var $ptr, fl, fn, i, m, mt, p, prop, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t === ptrType$7.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!(p.name === ptrType$6.nil)) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = $makeFunc((function(arguments$1) {
			var $ptr, arguments$1, rcvr;
			rcvr = (0 >= arguments$1.$length ? $throwRuntimeError("index out of range") : arguments$1.$array[arguments$1.$offset + 0]);
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$7));
		}));
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var $ptr, _9, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_9 = v.typ.Kind();
					if ((_9 === 11) || (_9 === 6)) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_9 === 15) || (_9 === 16)) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_9 === 23) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var $ptr, _10, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = slice.Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = _r$8.Set(x$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$8, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = arg.assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = _r$10.object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$2([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_10 = nout;
			/* */ if (_10 === 0) { $s = 29; continue; }
			/* */ if (_10 === 1) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_10 === 0) { */ case 29:
				return sliceType$8.nil;
			/* } else if (_10 === 1) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return new sliceType$8([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$8, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 35:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 36; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 35; continue; case 36:
				return ret;
			/* } */ case 32:
		case 28:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f.$ptr = $ptr; $f._10 = _10; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var $ptr, _11, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_11 = k;
		if (_11 === 17) {
			return v.typ.Len();
		} else if ((_11 === 18) || (_11 === 23)) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var $ptr, typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var $ptr, _12, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _12 = $f._12; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_12 = k;
			/* */ if (_12 === 20) { $s = 2; continue; }
			/* */ if (_12 === 22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_12 === 20) { */ case 2:
				val = v.object();
				if (val === $ifaceNil) {
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r;
			/* } else if (_12 === 22) { */ case 3:
				if (v.IsNil()) {
					return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = v.object();
				tt = v.typ.kindType;
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
				return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f.$ptr = $ptr; $f._12 = _12; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | (typ[0].Kind() >>> 0)) >>> 0;
		if (!(field.pkgPath === ptrType$6.nil)) {
			if (field.name === ptrType$6.nil) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = (x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).tag;
		/* */ if (!(tag === ptrType$6.nil) && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === ptrType$6.nil) && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag.$get());
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = v.Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = v.object().object;
						return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							var $ptr;
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var $ptr, x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ)), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = v.Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				var $ptr;
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var $ptr, x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ)), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 16; case 16:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var $ptr, _tuple, i, name, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (name === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var $ptr, _13, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _13 = $f._13; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_13 = k;
			/* */ if (_13 === 17) { $s = 2; continue; }
			/* */ if (_13 === 23) { $s = 3; continue; }
			/* */ if (_13 === 24) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_13 === 17) { */ case 2:
				tt = v.typ.kindType;
				if (i[0] < 0 || i[0] > (tt.len >> 0)) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					return new Value.ptr(typ[0], new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 10; case 10:
				return _r;
			/* } else if (_13 === 23) { */ case 3:
				s = v.object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = v.typ.kindType;
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 11:
					return new Value.ptr(typ$1[0], new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						var $ptr;
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var $ptr, x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1)), fl$1);
				/* } */ case 12:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 14; case 14:
				return _r$1;
			/* } else if (_13 === 24) { */ case 4:
				str = v.ptr.$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				return new Value.ptr(uint8Type, (c.$ptr || (c.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f.$ptr = $ptr; $f._13 = _13; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var $ptr, v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var $ptr, _14, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_14 = k;
		if ((_14 === 22) || (_14 === 23)) {
			return v.object() === jsType(v.typ).nil;
		} else if (_14 === 18) {
			return v.object() === $chanNil;
		} else if (_14 === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_14 === 21) {
			return v.object() === false;
		} else if (_14 === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var $ptr, _15, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_15 = k;
		if ((_15 === 17) || (_15 === 24)) {
			return $parseInt(v.object().length);
		} else if (_15 === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_15 === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_15 === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var $ptr, _16, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_16 = k;
		if ((_16 === 18) || (_16 === 21) || (_16 === 22) || (_16 === 26)) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_16 === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_16 === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var $ptr, _17, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _17 = $f._17; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_17 = v.typ.Kind();
				/* */ if (_17 === 17) { $s = 5; continue; }
				/* */ if (_17 === 20) { $s = 6; continue; }
				/* */ if (_17 === 25) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_17 === 17) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_17 === 20) { */ case 6:
					_r$1 = valueInterface(x, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_17 === 25) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set(x.object());
				/* } */ case 9:
			case 4:
			return;
		/* } */ case 3:
		v.ptr = x.ptr;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._17 = _17; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var $ptr, _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var $ptr, n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var $ptr, _18, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _18 = $f._18; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_18 = kind;
			/* */ if (_18 === 17) { $s = 2; continue; }
			/* */ if (_18 === 23) { $s = 3; continue; }
			/* */ if (_18 === 24) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_18 === 17) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = v.typ.kindType;
				cap = (tt.len >> 0);
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))(v.object());
				$s = 6; continue;
			/* } else if (_18 === 23) { */ case 3:
				typ = v.typ;
				s = v.object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_18 === 24) { */ case 4:
				str = v.ptr.$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String(str.substring(i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f.$ptr = $ptr; $f._18 = _18; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var $ptr, _19, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _19 = $f._19; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_19 = kind;
		if (_19 === 17) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_19 === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f.$ptr = $ptr; $f._19 = _19; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(t, ch, nb, val) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$9([new sliceType$7([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$7([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(t, ch, val, nb) {
		var $ptr, _r, ch, comms, nb, selectRes, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$9([new sliceType$7([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$7([]));
		}
		_r = selectHelper(new sliceType$2([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			return false;
		}
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeepEqual = function(a1, a2) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, a1, a2, i1, i2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; a1 = $f.a1; a2 = $f.a2; i1 = $f.i1; i2 = $f.i2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i1 = a1;
		i2 = a2;
		if (i1 === i2) {
			return true;
		}
		if (i1 === null || i2 === null || !(i1.constructor === i2.constructor)) {
			return false;
		}
		_r = ValueOf(a1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = ValueOf(a2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$1 = _r$1;
		_arg$2 = sliceType$10.nil;
		_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeepEqual }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.a1 = a1; $f.a2 = a2; $f.i1 = i1; $f.i2 = i2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DeepEqual = DeepEqual;
	deepValueEqualJs = function(v1, v2, visited) {
		var $ptr, _21, _22, _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, entry, i, i$1, k, keys, n, n$1, v1, v2, val1, val2, visited, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _21 = $f._21; _22 = $f._22; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; entry = $f.entry; i = $f.i; i$1 = $f.i$1; k = $f.k; keys = $f.keys; n = $f.n; n$1 = $f.n$1; v1 = $f.v1; v2 = $f.v2; val1 = $f.val1; val2 = $f.val2; visited = $f.visited; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v2 = v2;
		v1 = v1;
		if (!v1.IsValid() || !v2.IsValid()) {
			return !v1.IsValid() && !v2.IsValid();
		}
		if (!($interfaceIsEqual(v1.Type(), v2.Type()))) {
			return false;
		}
		_21 = v1.Kind();
		if ((_21 === 17) || (_21 === 21) || (_21 === 23) || (_21 === 25)) {
			_ref = visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				entry = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$2);
				if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
					return true;
				}
				_i++;
			}
			visited = $append(visited, $toNativeArray($kindUnsafePointer, [v1.ptr, v2.ptr]));
		}
			_22 = v1.Kind();
			/* */ if ((_22 === 17) || (_22 === 23)) { $s = 2; continue; }
			/* */ if (_22 === 20) { $s = 3; continue; }
			/* */ if (_22 === 22) { $s = 4; continue; }
			/* */ if (_22 === 25) { $s = 5; continue; }
			/* */ if (_22 === 21) { $s = 6; continue; }
			/* */ if (_22 === 19) { $s = 7; continue; }
			/* */ if (_22 === 26) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_22 === 17) || (_22 === 23)) { */ case 2:
				if (v1.Kind() === 23) {
					if (!(v1.IsNil() === v2.IsNil())) {
						return false;
					}
					if (v1.object() === v2.object()) {
						return true;
					}
				}
				n = v1.Len();
				if (!((n === v2.Len()))) {
					return false;
				}
				i = 0;
				/* while (true) { */ case 10:
					/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 11; continue; }
					_r = v1.Index(i); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg = _r;
					_r$1 = v2.Index(i); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg$1 = _r$1;
					_arg$2 = visited;
					_r$2 = deepValueEqualJs(_arg, _arg$1, _arg$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!_r$2) { */ case 12:
						return false;
					/* } */ case 13:
					i = i + (1) >> 0;
				/* } */ $s = 10; continue; case 11:
				return true;
			/* } else if (_22 === 20) { */ case 3:
				if (v1.IsNil() || v2.IsNil()) {
					return v1.IsNil() && v2.IsNil();
				}
				_r$3 = v1.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$3 = _r$3;
				_r$4 = v2.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$4 = _r$4;
				_arg$5 = visited;
				_r$5 = deepValueEqualJs(_arg$3, _arg$4, _arg$5); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 20; case 20:
				return _r$5;
			/* } else if (_22 === 22) { */ case 4:
				_r$6 = v1.Elem(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$6 = _r$6;
				_r$7 = v2.Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$7 = _r$7;
				_arg$8 = visited;
				_r$8 = deepValueEqualJs(_arg$6, _arg$7, _arg$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ $s = 24; case 24:
				return _r$8;
			/* } else if (_22 === 25) { */ case 5:
				n$1 = v1.NumField();
				i$1 = 0;
				/* while (true) { */ case 25:
					/* if (!(i$1 < n$1)) { break; } */ if(!(i$1 < n$1)) { $s = 26; continue; }
					_r$9 = v1.Field(i$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$9 = _r$9;
					_r$10 = v2.Field(i$1); /* */ $s = 30; case 30: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_arg$10 = _r$10;
					_arg$11 = visited;
					_r$11 = deepValueEqualJs(_arg$9, _arg$10, _arg$11); /* */ $s = 31; case 31: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					/* */ if (!_r$11) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!_r$11) { */ case 27:
						return false;
					/* } */ case 28:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 25; continue; case 26:
				return true;
			/* } else if (_22 === 21) { */ case 6:
				if (!(v1.IsNil() === v2.IsNil())) {
					return false;
				}
				if (v1.object() === v2.object()) {
					return true;
				}
				_r$12 = v1.MapKeys(); /* */ $s = 32; case 32: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				keys = _r$12;
				if (!((keys.$length === v2.Len()))) {
					return false;
				}
				_ref$1 = keys;
				_i$1 = 0;
				/* while (true) { */ case 33:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 34; continue; }
					k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					_r$13 = v1.MapIndex(k); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					val1 = _r$13;
					_r$14 = v2.MapIndex(k); /* */ $s = 36; case 36: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					val2 = _r$14;
					if (!val1.IsValid() || !val2.IsValid()) { _v = true; $s = 39; continue s; }
					_r$15 = deepValueEqualJs(val1, val2, visited); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_v = !_r$15; case 39:
					/* */ if (_v) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if (_v) { */ case 37:
						return false;
					/* } */ case 38:
					_i$1++;
				/* } */ $s = 33; continue; case 34:
				return true;
			/* } else if (_22 === 19) { */ case 7:
				return v1.IsNil() && v2.IsNil();
			/* } else if (_22 === 26) { */ case 8:
				return v1.object() === v2.object();
			/* } */ case 9:
		case 1:
		_r$16 = valueInterface(v1, false); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$17 = valueInterface(v2, false); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		/* */ $s = 43; case 43:
		return !!($interfaceIsEqual(_r$16, _r$17));
		/* */ } return; } if ($f === undefined) { $f = { $blk: deepValueEqualJs }; } $f.$ptr = $ptr; $f._21 = _21; $f._22 = _22; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.entry = entry; $f.i = i; $f.i$1 = i$1; $f.k = k; $f.keys = keys; $f.n = n; $f.n$1 = n$1; $f.v1 = v1; $f.v2 = v2; $f.val1 = val1; $f.val2 = val2; $f.visited = visited; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.prototype.String = function() {
		var $ptr, k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.pkgPath === ptrType$6.nil) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil || t.name === ptrType$6.nil) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var $ptr, t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var $ptr, t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var $ptr, k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul((t.size >> 0), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var $ptr, t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var $ptr, t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var $ptr, t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var $ptr, t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		if (t === ptrType$7.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$10.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!(p.name === ptrType$6.nil) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var $ptr, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var $ptr, i, m, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			Method.copy(m, tt.Method(i));
			return m;
		}
		Method.copy(m, t.uncommonType.Method(i));
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, _tuple$1, m, name, ok, t, tt;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name);
		Method.copy(m, _tuple$1[0]);
		ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var $ptr, _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_1 === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_1 === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_1 === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_1 === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var $ptr, _r, i, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, name, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var $ptr, t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var $ptr, i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var $ptr, _2, d;
		d = this.$val;
		_2 = d;
		if (_2 === 2) {
			return "chan<-";
		} else if (_2 === 1) {
			return "<-chan";
		} else if (_2 === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var $ptr, i, m, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!(p.pkgPath === ptrType$6.nil)) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var $ptr, t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var $ptr, _i, _ref, _tmp, _tmp$1, i, m, name, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$11.nil) {
			return [m, ok];
		}
		p = ptrType$12.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var $ptr, _tuple, err, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var $ptr, _r, _r$1, _r$2, f, i, p, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; i = $f.i; p = $f.p; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		/* */ if (!(p.name === ptrType$6.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(p.name === ptrType$6.nil)) { */ case 1:
			f.Name = p.name.$get();
			$s = 3; continue;
		/* } else { */ case 2:
			t$1 = f.Type;
			_r = t$1.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 22) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === 22) { */ case 4:
				_r$1 = t$1.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				t$1 = _r$1;
			/* } */ case 5:
			_r$2 = t$1.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			f.Name = _r$2;
			f.Anonymous = true;
		/* } */ case 3:
		if (!(p.pkgPath === ptrType$6.nil)) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!(p.tag === ptrType$6.nil)) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$11([i]);
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.Field }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.i = i; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		ok = false;
		t = this;
		current = new sliceType$12([]);
		next = new sliceType$12([new fieldScan.ptr(t, sliceType$11.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$13.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$13.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					/* */ if (!(f.name === ptrType$6.nil)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!(f.name === ptrType$6.nil)) { */ case 9:
						fname = f.name.$get();
						$s = 11; continue;
					/* } else { */ case 10:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if (ntyp.Kind() === 22) { */ case 12:
							_r = ntyp.Elem().common(); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 13:
						fname = ntyp.Name();
					/* } */ case 11:
					_r$1 = match(fname); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (_r$1) { */ case 15:
						if ((_entry$1 = count[ptrType$13.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							return [result, ok];
						}
						_r$2 = t$1.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						StructField.copy(result, _r$2);
						result.Index = sliceType$11.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 16:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[ptrType$13.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$13.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$13.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$13.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$11.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var $ptr, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name = $f.name; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = [name];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$11.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		/* */ if (!(name[0] === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(name[0] === "")) { */ case 1:
			_ref = t.fields;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				/* */ if (tf.name === ptrType$6.nil) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (tf.name === ptrType$6.nil) { */ case 5:
					hasAnon = true;
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				/* */ if (tf.name.$get() === name[0]) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (tf.name.$get() === name[0]) { */ case 7:
					_r = t.Field(i); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp = $clone(_r, StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					/* */ $s = 10; case 10:
					return [f, present];
				/* } */ case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (!hasAnon) {
			return [f, present];
		}
		_r$1 = t.FieldByNameFunc((function(name) { return function(s) {
			var $ptr, s;
			return s === name[0];
		}; })(name)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		/* */ $s = 12; case 12:
		return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name = name; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = function(t) {
		var $ptr, t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var $ptr, _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var $ptr, t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var $ptr, _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var $ptr, T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if (vm.name.$get() === tm.name.$get() && vm.pkgPath === tm.pkgPath && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$7.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if (vm$1.name.$get() === tm$1.name.$get() && vm$1.pkgPath === tm$1.pkgPath && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var $ptr, T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var $ptr, T, V, _3, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_3 = kind;
		if (_3 === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_3 === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_3 === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$1 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_3 === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_3 === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if ((_3 === 22) || (_3 === 23)) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_3 === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$2 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!(tf.name === vf.name) && (tf.name === ptrType$6.nil || vf.name === ptrType$6.nil || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!(tf.pkgPath === vf.pkgPath) && (tf.pkgPath === ptrType$6.nil || vf.pkgPath === ptrType$6.nil || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(tf.tag === vf.tag) && (tf.tag === ptrType$6.nil || vf.tag === ptrType$6.nil || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var $ptr, t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var $ptr, t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var $ptr, f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var $ptr, v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var $ptr, expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var $ptr, f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var $ptr, v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var $ptr, v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		return v.ptr.$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var $ptr, v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var $ptr, v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var $ptr, _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = v.call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f.$ptr = $ptr; $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var $ptr, _2, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_2 = k;
		if (_2 === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_2 === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (i > 0) { */ case 7:
				if (!(v.Kind() === 22)) { _v = false; $s = 11; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = v.Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 10:
			/* } */ case 8:
			_r$3 = v.Field(x); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 5; continue; case 6:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var $ptr, _r, _r$1, _tuple, f, name, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name = $f.name; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name = name; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var $ptr, _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = v.FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 3:
		return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var $ptr, _4, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_4 = k;
		if (_4 === 13) {
			return v.ptr.$get();
		} else if (_4 === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var $ptr, _6, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_6 = k;
		if (_6 === 2) {
			return new $Int64(0, p.$get());
		} else if (_6 === 3) {
			return new $Int64(0, p.$get());
		} else if (_6 === 4) {
			return new $Int64(0, p.$get());
		} else if (_6 === 5) {
			return new $Int64(0, p.$get());
		} else if (_6 === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var $ptr, v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var $ptr, _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface(v, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		/* */ $s = 2; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f.$ptr = $ptr; $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var $ptr, v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var $ptr, v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var $ptr, _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var $ptr, _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$8, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var $ptr, fl, i, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var $ptr, _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name);
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var $ptr, tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var $ptr, _9, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_9 = k;
		if (_9 === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_9 === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var $ptr, _10, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_10 = k;
		if (_10 === 13) {
			return overflowFloat32(x);
		} else if (_10 === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var $ptr, x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var $ptr, _11, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_11 = k;
		if ((_11 === 2) || (_11 === 3) || (_11 === 4) || (_11 === 5) || (_11 === 6)) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var $ptr, _12, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_12 = k;
		if ((_12 === 7) || (_12 === 12) || (_12 === 8) || (_12 === 9) || (_12 === 10) || (_12 === 11)) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var $ptr, _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, (t.Kind() >>> 0));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		_r = chanrecv(v.typ, v.pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var $ptr, _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		x = x;
		v = this;
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = x.assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = (x.$ptr_ptr || (x.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x)));
		}
		_r$1 = chansend(v.typ, v.pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		/* */ $s = 3; case 3:
		return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		v.ptr.$set(x);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var $ptr, _14, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_14 = k;
		if (_14 === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_14 === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var $ptr, _15, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_15 = k;
		if (_15 === 13) {
			v.ptr.$set($fround(x));
		} else if (_15 === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var $ptr, _16, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_16 = k;
		if (_16 === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_16 === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_16 === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_16 === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_16 === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var $ptr, _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		key = key;
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		_r = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = (key.$ptr_ptr || (key.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key)));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = (val.$ptr_ptr || (val.$ptr_ptr = new ptrType$18(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val)));
		}
		$r = mapassign(v.typ, v.pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var $ptr, _17, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_17 = k;
		if (_17 === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_17 === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_17 === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_17 === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_17 === 11) {
			v.ptr.$set(x);
		} else if (_17 === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var $ptr, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var $ptr, _20, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _20 = $f._20; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_20 = k;
		if (_20 === 0) {
			return "<invalid Value>";
		} else if (_20 === 24) {
			return v.ptr.$get();
		}
		_r = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f.$ptr = $ptr; $f._20 = _20; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var $ptr, _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 2; case 2:
		return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var $ptr, _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = x;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = v.send(x, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var $ptr, f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$7.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var $ptr, _21, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_21 = k;
		if (_21 === 7) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 8) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 9) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 10) {
			return new $Uint64(0, p.$get());
		} else if (_21 === 11) {
			return p.$get();
		} else if (_21 === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var $ptr, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var $ptr, _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	grow = function(s, extra) {
		var $ptr, _q, _r, _r$1, _r$2, extra, i0, i1, m, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; extra = $f.extra; i0 = $f.i0; i1 = $f.i1; m = $f.m; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = s;
		i0 = s.Len();
		i1 = i0 + extra >> 0;
		if (i1 < i0) {
			$panic(new $String("reflect.Append: slice overflow"));
		}
		m = s.Cap();
		/* */ if (i1 <= m) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i1 <= m) { */ case 1:
			_r = s.Slice(0, i1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [_r, i0, i1];
		/* } */ case 2:
		if (m === 0) {
			m = extra;
		} else {
			while (true) {
				if (!(m < i1)) { break; }
				if (i0 < 1024) {
					m = m + (m) >> 0;
				} else {
					m = m + ((_q = m / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
				}
			}
		}
		_r$1 = MakeSlice(s.Type(), i1, m); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		t = _r$1;
		_r$2 = Copy(t, s); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return [t, i0, i1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: grow }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.extra = extra; $f.i0 = i0; $f.i1 = i1; $f.m = m; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Append = function(s, x) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i0, i1, j, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i0 = $f.i0; i1 = $f.i1; j = $f.j; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = s;
		new flag(s.flag).mustBe(23);
		_r = grow(s, x.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		s = _tuple[0];
		i0 = _tuple[1];
		i1 = _tuple[2];
		_tmp = i0;
		_tmp$1 = 0;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 2:
			/* if (!(i < i1)) { break; } */ if(!(i < i1)) { $s = 3; continue; }
			_r$1 = s.Index(i); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = _r$1.Set(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tmp$2 = i + 1 >> 0;
			_tmp$3 = j + 1 >> 0;
			i = _tmp$2;
			j = _tmp$3;
		/* } */ $s = 2; continue; case 3:
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Append }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.j = j; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Append = Append;
	MakeMap = function(typ) {
		var $ptr, _r, _r$1, m, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; m = $f.m; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMap of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1));
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMap = MakeMap;
	Indirect = function(v) {
		var $ptr, _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		if (!((v.Kind() === 22))) {
			return v;
		}
		_r = v.Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f.$ptr = $ptr; $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Indirect = Indirect;
	New = function(typ) {
		var $ptr, _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	NewAt = function(typ, p) {
		var $ptr, _r, _r$1, fl, p, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return new Value.ptr(_r$1, p, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewAt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewAt = NewAt;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var $ptr, _r, _r$1, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			/* */ if (directlyAssignable(dst, v.typ)) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (directlyAssignable(dst, v.typ)) { */ case 5:
				v.typ = dst;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
				return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$1 = valueInterface(v, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				if (dst.NumMethod() === 0) {
					target.$set(x);
				} else {
					ifaceE2I(dst, x, target);
				}
				return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op(v, t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var $ptr, _23, _24, _25, _26, _27, _28, _29, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _23 = $f._23; _24 = $f._24; _25 = $f._25; _26 = $f._26; _27 = $f._27; _28 = $f._28; _29 = $f._29; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_23 = src.Kind();
			/* */ if ((_23 === 2) || (_23 === 3) || (_23 === 4) || (_23 === 5) || (_23 === 6)) { $s = 2; continue; }
			/* */ if ((_23 === 7) || (_23 === 8) || (_23 === 9) || (_23 === 10) || (_23 === 11) || (_23 === 12)) { $s = 3; continue; }
			/* */ if ((_23 === 13) || (_23 === 14)) { $s = 4; continue; }
			/* */ if ((_23 === 15) || (_23 === 16)) { $s = 5; continue; }
			/* */ if (_23 === 24) { $s = 6; continue; }
			/* */ if (_23 === 23) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_23 === 2) || (_23 === 3) || (_23 === 4) || (_23 === 5) || (_23 === 6)) { */ case 2:
				_24 = dst.Kind();
				if ((_24 === 2) || (_24 === 3) || (_24 === 4) || (_24 === 5) || (_24 === 6) || (_24 === 7) || (_24 === 8) || (_24 === 9) || (_24 === 10) || (_24 === 11) || (_24 === 12)) {
					return cvtInt;
				} else if ((_24 === 13) || (_24 === 14)) {
					return cvtIntFloat;
				} else if (_24 === 24) {
					return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_23 === 7) || (_23 === 8) || (_23 === 9) || (_23 === 10) || (_23 === 11) || (_23 === 12)) { */ case 3:
				_25 = dst.Kind();
				if ((_25 === 2) || (_25 === 3) || (_25 === 4) || (_25 === 5) || (_25 === 6) || (_25 === 7) || (_25 === 8) || (_25 === 9) || (_25 === 10) || (_25 === 11) || (_25 === 12)) {
					return cvtUint;
				} else if ((_25 === 13) || (_25 === 14)) {
					return cvtUintFloat;
				} else if (_25 === 24) {
					return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_23 === 13) || (_23 === 14)) { */ case 4:
				_26 = dst.Kind();
				if ((_26 === 2) || (_26 === 3) || (_26 === 4) || (_26 === 5) || (_26 === 6)) {
					return cvtFloatInt;
				} else if ((_26 === 7) || (_26 === 8) || (_26 === 9) || (_26 === 10) || (_26 === 11) || (_26 === 12)) {
					return cvtFloatUint;
				} else if ((_26 === 13) || (_26 === 14)) {
					return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_23 === 15) || (_23 === 16)) { */ case 5:
				_27 = dst.Kind();
				if ((_27 === 15) || (_27 === 16)) {
					return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_23 === 24) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_28 = _r$1;
						if (_28 === 8) {
							return cvtStringBytes;
						} else if (_28 === 5) {
							return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_23 === 23) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_29 = _r$3;
						if (_29 === 8) {
							return cvtBytesString;
						} else if (_29 === 5) {
							return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 23; continue s; }
		_r$4 = dst.Elem().common(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = src.Elem().common(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$2 = _r$6; case 23:
		/* */ if (_v$2) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_v$2) { */ case 21:
			return cvtDirect;
		/* } */ case 22:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f.$ptr = $ptr; $f._23 = _23; $f._24 = _24; $f._25 = _25; $f._26 = _26; $f._27 = _27; $f._28 = _28; $f._29 = _29; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var $ptr, _31, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _31 = $f._31; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_31 = typ.size;
		if (_31 === 4) {
			ptr.$set($fround(v));
		} else if (_31 === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f.$ptr = $ptr; $f._31 = _31; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var $ptr, _32, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _32 = $f._32; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_32 = typ.size;
		if (_32 === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_32 === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f.$ptr = $ptr; $f._32 = _32; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		ret.SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var $ptr, _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = ret.setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, v.Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var $ptr, _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeInt((v.flag & 96) >>> 0, new $Uint64(0, v.Float()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Int()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, $flatten64(v.Uint()), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeFloat((v.flag & 96) >>> 0, v.Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeComplex((v.flag & 96) >>> 0, v.Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Int().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var $ptr, _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = makeString((v.flag & 96) >>> 0, $encodeRune(v.Uint().$low), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $bytesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$13($stringToBytes(_r));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = $runesToString(_r);
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_arg = (v.flag & 96) >>> 0;
		_r = v.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new sliceType$15($stringToRunes(_r));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface(v, false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			target.$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var $ptr, _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			return ret;
		/* } */ case 2:
		_r$1 = v.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I(_r$1, typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$13.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$3], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$8], [sliceType$8], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$3], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$13], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$13], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$15], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$8], [sliceType$8], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$15], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$3, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$11], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$7], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$3", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$4, tag: ""}, {prop: "gcdata", name: "gcdata", pkg: "reflect", typ: ptrType$5, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$7, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$5, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$4, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$1, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$1, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", pkg: "reflect", typ: $Bool, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$11, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$9, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = false;
		stringPtrMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		kindNames = new sliceType$3(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		jsObjectPtr = reflectType($jsObjectPtr);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, ScanState, Scanner, stringReader, scanError, ss, ssave, readRune, sliceType, sliceType$1, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, sliceType$2, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, funcType, ptrType$26, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, _r, _r$1, init, doPrec, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Print, Sprint, Fprintln, Println, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, Sscan, Fscan, isSpace, notSpace, newScanState, indexRune, hexDigit, errorHandler;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.unicode = false;
			this.uniQuote = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.unicode = unicode_;
		this.uniQuote = uniQuote_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.intbuf = arrayType$1.zero();
			this.buf = ptrType$1.nil;
			this.wid = 0;
			this.prec = 0;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false);
			return;
		}
		this.intbuf = intbuf_;
		this.buf = buf_;
		this.wid = wid_;
		this.prec = prec_;
		this.fmtFlags = fmtFlags_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.n = 0;
			this.panicking = false;
			this.erroring = false;
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.reordered = false;
			this.goodArgNum = false;
			this.runeBuf = arrayType.zero();
			this.fmt = new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
			return;
		}
		this.n = n_;
		this.panicking = panicking_;
		this.erroring = erroring_;
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.runeBuf = runeBuf_;
		this.fmt = fmt_;
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", "ScanState", "fmt", null);
	Scanner = $pkg.Scanner = $newType(8, $kindInterface, "fmt.Scanner", "Scanner", "fmt", null);
	stringReader = $pkg.stringReader = $newType(8, $kindString, "fmt.stringReader", "stringReader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rr = $ifaceNil;
			this.buf = buffer.nil;
			this.peekRune = 0;
			this.prevRune = 0;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rr = rr_;
		this.buf = buf_;
		this.peekRune = peekRune_;
		this.prevRune = prevRune_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	readRune = $pkg.readRune = $newType(0, $kindStruct, "fmt.readRune", "readRune", "fmt", function(reader_, buf_, pending_, pendBuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.reader = $ifaceNil;
			this.buf = arrayType.zero();
			this.pending = 0;
			this.pendBuf = arrayType.zero();
			return;
		}
		this.reader = reader_;
		this.buf = buf_;
		this.pending = pending_;
		this.pendBuf = pendBuf_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 65);
	ptrType$1 = $ptrType(buffer);
	arrayType$2 = $arrayType($Uint16, 2);
	sliceType$2 = $sliceType(arrayType$2);
	ptrType$2 = $ptrType(pp);
	ptrType$3 = $ptrType(stringReader);
	ptrType$4 = $ptrType($String);
	ptrType$5 = $ptrType(ss);
	ptrType$6 = $ptrType(strconv.NumError);
	ptrType$7 = $ptrType($Bool);
	ptrType$8 = $ptrType($Complex64);
	ptrType$9 = $ptrType($Complex128);
	ptrType$10 = $ptrType($Int);
	ptrType$11 = $ptrType($Int8);
	ptrType$12 = $ptrType($Int16);
	ptrType$13 = $ptrType($Int32);
	ptrType$14 = $ptrType($Int64);
	ptrType$15 = $ptrType($Uint);
	ptrType$16 = $ptrType($Uint8);
	ptrType$17 = $ptrType($Uint16);
	ptrType$18 = $ptrType($Uint32);
	ptrType$19 = $ptrType($Uint64);
	ptrType$20 = $ptrType($Uintptr);
	ptrType$21 = $ptrType($Float32);
	ptrType$22 = $ptrType($Float64);
	ptrType$23 = $ptrType(sliceType);
	ptrType$24 = $ptrType($error);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	ptrType$26 = $ptrType(readRune);
	init = function() {
		var $ptr, i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var $ptr, f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var $ptr, buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth, padding, rightWidth, w, width;
		padding = sliceType.nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes;
				_tmp$1 = w;
				_tmp$2 = 0;
				padding = _tmp;
				leftWidth = _tmp$1;
				rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes;
				_tmp$4 = w;
				_tmp$5 = 0;
				padding = _tmp$3;
				leftWidth = _tmp$4;
				rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes;
				_tmp$7 = 0;
				_tmp$8 = w;
				padding = _tmp$6;
				leftWidth = _tmp$7;
				rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var $ptr, f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var $ptr, _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var $ptr, _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s));
		padding = _tuple[0];
		left = _tuple[1];
		right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var $ptr, f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var $ptr, _1, _2, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		negative = signedness && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent || f.fmtFlags.plus || f.fmtFlags.space) {
			width = f.wid + f.prec >> 0;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (f.fmtFlags.unicode) {
				width = width + (2) >> 0;
				if (f.fmtFlags.uniQuote) {
					width = width + (7) >> 0;
				}
			}
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				width = width + (1) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_1 = base;
		if ((_1.$high === 0 && _1.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_1.$high === 0 && _1.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_1.$high === 0 && _1.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_1.$high === 0 && _1.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if ((_2.$high === 0 && _2.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_2.$high === 0 && _2.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var $ptr, _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var $ptr, f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var $ptr, b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var $ptr, digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var $ptr, b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var $ptr, f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var $ptr, c, f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var $ptr, def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $ptr, f, n, num, prec, v, verb, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					var $ptr;
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var $ptr, f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var $ptr, f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var $ptr, _3, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_3 = verb;
			if (_3 === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_3 === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_3 === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if ((_3 === 102) || (_3 === 70)) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_3 === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_3 === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var $ptr, _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var $ptr, _tmp, _tmp$1, b, err, n, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.$set($appendSlice(b.$get(), s));
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var $ptr, b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var $ptr, b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var $ptr, _r$2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = $assertType(_r$2, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var $ptr, p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var $ptr, _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var $ptr, _1, b, p;
		p = this;
		_1 = b;
		if (_1 === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_1 === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_1 === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var $ptr, c, p;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var $ptr, _tuple, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		_tuple = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		ret = _tuple[0];
		err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var $ptr, _r$2, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var $ptr, _r$2, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var $ptr, _r$2, _r$3, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = errors.New(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Print = function(a) {
		var $ptr, _r$2, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Print }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Print = Print;
	Sprint = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, false, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Fprintln = function(w, a) {
		var $ptr, _r$2, _r$3, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var $ptr, _r$2, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Sprintln = function(a) {
		var $ptr, _r$2, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$2 = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		p = _r$2;
		$r = p.doPrint(a, true, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = $bytesToString(p.buf);
		p.free();
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var $ptr, _r$2, _r$3, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		_r$2 = v.Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		val = _r$2;
		/* */ if ((val.Kind() === 20) && !val.IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((val.Kind() === 20) && !val.IsNil()) { */ case 2:
			_r$3 = val.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
		/* } */ case 3:
		return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var $ptr, x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var $ptr, _r$2, _r$3, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		p = this;
		if (!v.IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r$2 = v.Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if (p.value.IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r$2 = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				p.add(61);
				_r$4 = p.printArg(p.arg, 118, 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = 5; continue;
			/* } else if (p.value.IsValid()) { */ case 3:
				_r$5 = p.value.Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				p.add(61);
				_r$7 = p.printValue(p.value, 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			/* } */ case 5:
		case 1:
		p.add(41);
		p.erroring = false;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var $ptr, _2, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_2 = verb;
			/* */ if ((_2 === 116) || (_2 === 118)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_2 === 116) || (_2 === 118)) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f.$ptr = $ptr; $f._2 = _2; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var $ptr, c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var $ptr, _3, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_3 = verb;
			/* */ if (_3 === 98) { $s = 2; continue; }
			/* */ if (_3 === 99) { $s = 3; continue; }
			/* */ if ((_3 === 100) || (_3 === 118)) { $s = 4; continue; }
			/* */ if (_3 === 111) { $s = 5; continue; }
			/* */ if (_3 === 113) { $s = 6; continue; }
			/* */ if (_3 === 120) { $s = 7; continue; }
			/* */ if (_3 === 85) { $s = 8; continue; }
			/* */ if (_3 === 88) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_3 === 98) { */ case 2:
				p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 99) { */ case 3:
				p.fmtC(v);
				$s = 11; continue;
			/* } else if ((_3 === 100) || (_3 === 118)) { */ case 4:
				p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 111) { */ case 5:
				p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 113) { */ case 6:
				/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 12:
					p.fmt.fmt_qc(v);
					$s = 14; continue;
				/* } else { */ case 13:
					$r = p.badVerb(verb); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_3 === 120) { */ case 7:
				p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
				$s = 11; continue;
			/* } else if (_3 === 85) { */ case 8:
				p.fmtUnicode(v);
				$s = 11; continue;
			/* } else if (_3 === 88) { */ case 9:
				p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInt64 }; } $f.$ptr = $ptr; $f._3 = _3; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var $ptr, leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var $ptr, p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var $ptr, _4, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_4 = verb;
			/* */ if (_4 === 98) { $s = 2; continue; }
			/* */ if (_4 === 99) { $s = 3; continue; }
			/* */ if (_4 === 100) { $s = 4; continue; }
			/* */ if (_4 === 118) { $s = 5; continue; }
			/* */ if (_4 === 111) { $s = 6; continue; }
			/* */ if (_4 === 113) { $s = 7; continue; }
			/* */ if (_4 === 120) { $s = 8; continue; }
			/* */ if (_4 === 88) { $s = 9; continue; }
			/* */ if (_4 === 85) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_4 === 98) { */ case 2:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 99) { */ case 3:
				p.fmtC(new $Int64(v.$high, v.$low));
				$s = 12; continue;
			/* } else if (_4 === 100) { */ case 4:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 118) { */ case 5:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
				}
				$s = 12; continue;
			/* } else if (_4 === 111) { */ case 6:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 113) { */ case 7:
				/* */ if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_4 === 120) { */ case 8:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
				$s = 12; continue;
			/* } else if (_4 === 88) { */ case 9:
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
				$s = 12; continue;
			/* } else if (_4 === 85) { */ case 10:
				p.fmtUnicode(new $Int64(v.$high, v.$low));
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtUint64 }; } $f.$ptr = $ptr; $f._4 = _4; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var $ptr, _5, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_5 = verb;
			/* */ if (_5 === 98) { $s = 2; continue; }
			/* */ if (_5 === 101) { $s = 3; continue; }
			/* */ if (_5 === 69) { $s = 4; continue; }
			/* */ if ((_5 === 102) || (_5 === 70)) { $s = 5; continue; }
			/* */ if ((_5 === 103) || (_5 === 118)) { $s = 6; continue; }
			/* */ if (_5 === 71) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_5 === 98) { */ case 2:
				p.fmt.fmt_fb32(v);
				$s = 9; continue;
			/* } else if (_5 === 101) { */ case 3:
				p.fmt.fmt_e32(v);
				$s = 9; continue;
			/* } else if (_5 === 69) { */ case 4:
				p.fmt.fmt_E32(v);
				$s = 9; continue;
			/* } else if ((_5 === 102) || (_5 === 70)) { */ case 5:
				p.fmt.fmt_f32(v);
				$s = 9; continue;
			/* } else if ((_5 === 103) || (_5 === 118)) { */ case 6:
				p.fmt.fmt_g32(v);
				$s = 9; continue;
			/* } else if (_5 === 71) { */ case 7:
				p.fmt.fmt_G32(v);
				$s = 9; continue;
			/* } else { */ case 8:
				$r = p.badVerb(verb); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat32 }; } $f.$ptr = $ptr; $f._5 = _5; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var $ptr, _6, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_6 = verb;
			/* */ if (_6 === 98) { $s = 2; continue; }
			/* */ if (_6 === 101) { $s = 3; continue; }
			/* */ if (_6 === 69) { $s = 4; continue; }
			/* */ if ((_6 === 102) || (_6 === 70)) { $s = 5; continue; }
			/* */ if ((_6 === 103) || (_6 === 118)) { $s = 6; continue; }
			/* */ if (_6 === 71) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_6 === 98) { */ case 2:
				p.fmt.fmt_fb64(v);
				$s = 9; continue;
			/* } else if (_6 === 101) { */ case 3:
				p.fmt.fmt_e64(v);
				$s = 9; continue;
			/* } else if (_6 === 69) { */ case 4:
				p.fmt.fmt_E64(v);
				$s = 9; continue;
			/* } else if ((_6 === 102) || (_6 === 70)) { */ case 5:
				p.fmt.fmt_f64(v);
				$s = 9; continue;
			/* } else if ((_6 === 103) || (_6 === 118)) { */ case 6:
				p.fmt.fmt_g64(v);
				$s = 9; continue;
			/* } else if (_6 === 71) { */ case 7:
				p.fmt.fmt_G64(v);
				$s = 9; continue;
			/* } else { */ case 8:
				$r = p.badVerb(verb); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat64 }; } $f.$ptr = $ptr; $f._6 = _6; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var $ptr, _7, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_7 = verb;
			/* */ if ((_7 === 98) || (_7 === 101) || (_7 === 69) || (_7 === 102) || (_7 === 70) || (_7 === 103) || (_7 === 71)) { $s = 2; continue; }
			/* */ if (_7 === 118) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_7 === 98) || (_7 === 101) || (_7 === 69) || (_7 === 102) || (_7 === 70) || (_7 === 103) || (_7 === 71)) { */ case 2:
				p.fmt.fmt_c64(v, verb);
				$s = 5; continue;
			/* } else if (_7 === 118) { */ case 3:
				p.fmt.fmt_c64(v, 103);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex64 }; } $f.$ptr = $ptr; $f._7 = _7; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var $ptr, _8, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_8 = verb;
			/* */ if ((_8 === 98) || (_8 === 101) || (_8 === 69) || (_8 === 102) || (_8 === 70) || (_8 === 103) || (_8 === 71)) { $s = 2; continue; }
			/* */ if (_8 === 118) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_8 === 98) || (_8 === 101) || (_8 === 69) || (_8 === 102) || (_8 === 70) || (_8 === 103) || (_8 === 71)) { */ case 2:
				p.fmt.fmt_c128(v, verb);
				$s = 5; continue;
			/* } else if (_8 === 118) { */ case 3:
				p.fmt.fmt_c128(v, 103);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex128 }; } $f.$ptr = $ptr; $f._8 = _8; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var $ptr, _9, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _9 = $f._9; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_9 = verb;
			/* */ if (_9 === 118) { $s = 2; continue; }
			/* */ if (_9 === 115) { $s = 3; continue; }
			/* */ if (_9 === 120) { $s = 4; continue; }
			/* */ if (_9 === 88) { $s = 5; continue; }
			/* */ if (_9 === 113) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_9 === 118) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_9 === 115) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_9 === 120) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdef");
				$s = 8; continue;
			/* } else if (_9 === 88) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEF");
				$s = 8; continue;
			/* } else if (_9 === 113) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f.$ptr = $ptr; $f._9 = _9; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var $ptr, _10, _i, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, c, depth, i, p, typ, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _i = $f._i; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; c = $f.c; depth = $f.depth; i = $f.i; p = $f.p; typ = $f.typ; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if ((verb === 118) || (verb === 100)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((verb === 118) || (verb === 100)) { */ case 1:
			/* */ if (p.fmt.fmtFlags.sharpV) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.fmt.fmtFlags.sharpV) { */ case 3:
				/* */ if (v === sliceType.nil) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (v === sliceType.nil) { */ case 6:
					/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 8:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("[]byte(nil)");
						$s = 10; continue;
					/* } else { */ case 9:
						_r$2 = typ.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
					/* } */ case 10:
					return;
				/* } */ case 7:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 13:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(bytesBytes);
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = typ.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				/* } */ case 15:
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
			/* } */ case 5:
			_ref = v;
			_i = 0;
			/* while (true) { */ case 18:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
					} else {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
					}
				}
				_r$6 = p.printArg(new $Uint8(c), 118, depth + 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_i++;
			/* } */ $s = 18; continue; case 19:
			if (p.fmt.fmtFlags.sharpV) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
			} else {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
			}
			return;
		/* } */ case 2:
			_10 = verb;
			/* */ if (_10 === 115) { $s = 22; continue; }
			/* */ if (_10 === 120) { $s = 23; continue; }
			/* */ if (_10 === 88) { $s = 24; continue; }
			/* */ if (_10 === 113) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_10 === 115) { */ case 22:
				p.fmt.fmt_s($bytesToString(v));
				$s = 27; continue;
			/* } else if (_10 === 120) { */ case 23:
				p.fmt.fmt_bx(v, "0123456789abcdef");
				$s = 27; continue;
			/* } else if (_10 === 88) { */ case 24:
				p.fmt.fmt_bx(v, "0123456789ABCDEF");
				$s = 27; continue;
			/* } else if (_10 === 113) { */ case 25:
				p.fmt.fmt_q($bytesToString(v));
				$s = 27; continue;
			/* } else { */ case 26:
				$r = p.badVerb(verb); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 27:
		case 21:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f.$ptr = $ptr; $f._10 = _10; $f._i = _i; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.c = c; $f.depth = depth; $f.i = i; $f.p = p; $f.typ = typ; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var $ptr, _11, _12, _r$2, _r$3, p, u, use0x64, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _11 = $f._11; _12 = $f._12; _r$2 = $f._r$2; _r$3 = $f._r$3; p = $f.p; u = $f.u; use0x64 = $f.use0x64; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		p = this;
		use0x64 = true;
			_11 = verb;
			/* */ if ((_11 === 112) || (_11 === 118)) { $s = 2; continue; }
			/* */ if ((_11 === 98) || (_11 === 100) || (_11 === 111) || (_11 === 120) || (_11 === 88)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_11 === 112) || (_11 === 118)) { */ case 2:
				$s = 5; continue;
			/* } else if ((_11 === 98) || (_11 === 100) || (_11 === 111) || (_11 === 120) || (_11 === 88)) { */ case 3:
				use0x64 = false;
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 5:
		case 1:
		u = 0;
			_12 = value.Kind();
			/* */ if ((_12 === 18) || (_12 === 19) || (_12 === 21) || (_12 === 22) || (_12 === 23) || (_12 === 26)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((_12 === 18) || (_12 === 19) || (_12 === 21) || (_12 === 22) || (_12 === 23) || (_12 === 26)) { */ case 8:
				u = value.Pointer();
				$s = 10; continue;
			/* } else { */ case 9:
				$r = p.badVerb(verb); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 10:
		case 7:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
		/* */ if ((verb === 118) && (u === 0)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
			p.add(40);
			_r$2 = value.Type().String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.add(41);
			p.add(40);
			if (u === 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
			$s = 15; continue;
		/* } else if ((verb === 118) && (u === 0)) { */ case 13:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
			$s = 15; continue;
		/* } else { */ case 14:
			/* */ if (use0x64) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (use0x64) { */ case 18:
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
				$s = 20; continue;
			/* } else { */ case 19:
				$r = p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
		/* } */ case 15:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f.$ptr = $ptr; $f._11 = _11; $f._12 = _12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.p = p; $f.u = u; $f.use0x64 = use0x64; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var $ptr, _r$2, _r$3, arg, err, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; arg = $f.arg; err = $f.err; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r$2 = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
			if ((v.Kind() === 22) && v.IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
			p.add(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(panicBytes);
			p.panicking = true;
			_r$3 = p.printArg(err, 118, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arg = arg; $f.err = err; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var $ptr, p, plusV, sharpV;
		plusV = false;
		sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var $ptr, p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $ptr, _13, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, _tuple$2, depth, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _13 = $f._13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; depth = $f.depth; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$2 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$2[0];
			ok$1 = _tuple$2[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r$2 = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_13 = verb;
				/* */ if ((_13 === 118) || (_13 === 115) || (_13 === 120) || (_13 === 88) || (_13 === 113)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_13 === 118) || (_13 === 115) || (_13 === 120) || (_13 === 88) || (_13 === 113)) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$3 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$4 = p.printArg(new $String(_r$3), verb, depth); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$5 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = p.printArg(new $String(_r$5), verb, depth); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f.$ptr = $ptr; $f._13 = _13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.depth = depth; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var $ptr, _14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, arg, depth, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, handled, p, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _14 = $f._14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; arg = $f.arg; depth = $f.depth; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; handled = $f.handled; p = $f.p; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				p.fmt.pad(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
			_14 = verb;
			/* */ if (_14 === 84) { $s = 8; continue; }
			/* */ if (_14 === 112) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_14 === 84) { */ case 8:
				_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				wasString = false;
				return wasString;
			/* } else if (_14 === 112) { */ case 9:
				_r$4 = reflect.ValueOf(arg); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.fmtPointer(_r$4, verb); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = false;
				return wasString;
			/* } */ case 10:
		case 7:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 15:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 16:
			f$1 = _ref.$val;
			$r = p.fmtFloat32(f$1, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 17:
			f$2 = _ref.$val;
			$r = p.fmtFloat64(f$2, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 18:
			f$3 = _ref.$val;
			$r = p.fmtComplex64(f$3, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 19:
			f$4 = _ref.$val;
			$r = p.fmtComplex128(f$4, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 20:
			f$5 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$5), verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 21:
			f$6 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$6), verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 22:
			f$7 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$7), verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 23:
			f$8 = _ref.$val;
			$r = p.fmtInt64(new $Int64(0, f$8), verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 24:
			f$9 = _ref.$val;
			$r = p.fmtInt64(f$9, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 25:
			f$10 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$10), verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 26:
			f$11 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$11), verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 27:
			f$12 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$12), verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 28:
			f$13 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$13), verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 29:
			f$14 = _ref.$val;
			$r = p.fmtUint64(f$14, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 30:
			f$15 = _ref.$val;
			$r = p.fmtUint64(new $Uint64(0, f$15.constructor === Number ? f$15 : 1), verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 35; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 31:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = (verb === 115) || (verb === 118);
			$s = 35; continue;
		/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 32:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, $ifaceNil, depth); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wasString = verb === 115;
			$s = 35; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 33:
			f$18 = _ref.$val;
			_r$5 = p.printReflectValue(f$18, verb, depth); /* */ $s = 54; case 54: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			wasString = _r$5;
			/* */ $s = 55; case 55:
			return wasString;
		/* } else { */ case 34:
			f$19 = _ref;
			_r$6 = p.handleMethods(verb, depth); /* */ $s = 56; case 56: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			handled = _r$6;
			if (handled) {
				wasString = false;
				return wasString;
			}
			_r$7 = reflect.ValueOf(arg); /* */ $s = 57; case 57: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = p.printReflectValue(_r$7, verb, depth); /* */ $s = 58; case 58: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			wasString = _r$8;
			/* */ $s = 59; case 59:
			return wasString;
		/* } */ case 35:
		p.arg = $ifaceNil;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f.$ptr = $ptr; $f._14 = _14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f.arg = arg; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.handled = handled; $f.p = p; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var $ptr, _15, _r$2, _r$3, _r$4, _r$5, _r$6, depth, handled, p, value, verb, wasString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _15 = $f._15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; depth = $f.depth; handled = $f.handled; p = $f.p; value = $f.value; verb = $f.verb; wasString = $f.wasString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			/* */ if ((verb === 84) || (verb === 118)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((verb === 84) || (verb === 118)) { */ case 3:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
				$s = 5; continue;
			/* } else { */ case 4:
				$r = p.badVerb(verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			wasString = false;
			return wasString;
		/* } */ case 2:
			_15 = verb;
			/* */ if (_15 === 84) { $s = 8; continue; }
			/* */ if (_15 === 112) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_15 === 84) { */ case 8:
				_r$2 = value.Type().String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = p.printArg(new $String(_r$2), 115, 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				wasString = false;
				return wasString;
			/* } else if (_15 === 112) { */ case 9:
				$r = p.fmtPointer(value, verb); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				wasString = false;
				return wasString;
			/* } */ case 10:
		case 7:
		p.arg = $ifaceNil;
		/* */ if (value.CanInterface()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (value.CanInterface()) { */ case 14:
			_r$4 = value.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			p.arg = _r$4;
		/* } */ case 15:
		_r$5 = p.handleMethods(verb, depth); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		handled = _r$5;
		if (handled) {
			wasString = false;
			return wasString;
		}
		_r$6 = p.printReflectValue(value, verb, depth); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		wasString = _r$6;
		/* */ $s = 19; case 19:
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._15 = _15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.depth = depth; $f.handled = handled; $f.p = p; $f.value = value; $f.verb = verb; $f.wasString = wasString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var $ptr, _16, _17, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _v, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _16 = $f._16; _17 = $f._17; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; f$1 = $f.f$1; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; key = $f.key; keys = $f.keys; oldValue = $f.oldValue; p = $f.p; t = $f.t; typ = $f.typ; v = $f.v; v$1 = $f.v$1; value = $f.value; value$1 = $f.value$1; verb = $f.verb; wasString = $f.wasString; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wasString = false;
		value = value;
		p = this;
		oldValue = p.value;
		p.value = value;
			f = value;
			_16 = f.Kind();
			/* */ if (_16 === 0) { $s = 2; continue; }
			/* */ if (_16 === 1) { $s = 3; continue; }
			/* */ if ((_16 === 2) || (_16 === 3) || (_16 === 4) || (_16 === 5) || (_16 === 6)) { $s = 4; continue; }
			/* */ if ((_16 === 7) || (_16 === 8) || (_16 === 9) || (_16 === 10) || (_16 === 11) || (_16 === 12)) { $s = 5; continue; }
			/* */ if ((_16 === 13) || (_16 === 14)) { $s = 6; continue; }
			/* */ if ((_16 === 15) || (_16 === 16)) { $s = 7; continue; }
			/* */ if (_16 === 24) { $s = 8; continue; }
			/* */ if (_16 === 21) { $s = 9; continue; }
			/* */ if (_16 === 25) { $s = 10; continue; }
			/* */ if (_16 === 20) { $s = 11; continue; }
			/* */ if ((_16 === 17) || (_16 === 23)) { $s = 12; continue; }
			/* */ if (_16 === 22) { $s = 13; continue; }
			/* */ if ((_16 === 18) || (_16 === 19) || (_16 === 26)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_16 === 0) { */ case 2:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
				$s = 16; continue;
			/* } else if (_16 === 1) { */ case 3:
				$r = p.fmtBool(f.Bool(), verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 2) || (_16 === 3) || (_16 === 4) || (_16 === 5) || (_16 === 6)) { */ case 4:
				$r = p.fmtInt64(f.Int(), verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 7) || (_16 === 8) || (_16 === 9) || (_16 === 10) || (_16 === 11) || (_16 === 12)) { */ case 5:
				$r = p.fmtUint64(f.Uint(), verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 13) || (_16 === 14)) { */ case 6:
				_r$2 = f.Type().Size(); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2 === 4) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_r$2 === 4) { */ case 20:
					$r = p.fmtFloat32($fround(f.Float()), verb); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					$r = p.fmtFloat64(f.Float(), verb); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 22:
				$s = 16; continue;
			/* } else if ((_16 === 15) || (_16 === 16)) { */ case 7:
				_r$3 = f.Type().Size(); /* */ $s = 29; case 29: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 8) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (_r$3 === 8) { */ case 26:
					$r = p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else { */ case 27:
					$r = p.fmtComplex128(f.Complex(), verb); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 28:
				$s = 16; continue;
			/* } else if (_16 === 24) { */ case 8:
				_r$4 = f.String(); /* */ $s = 32; case 32: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$4, verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if (_16 === 21) { */ case 9:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 34:
					_r$5 = f.Type().String(); /* */ $s = 37; case 37: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 38; case 38: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					if (f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						/* break; */ $s = 1; continue;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 36; continue;
				/* } else { */ case 35:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(mapBytes);
				/* } */ case 36:
				_r$7 = f.MapKeys(); /* */ $s = 39; case 39: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				keys = _r$7;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 40:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 41; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					_r$8 = p.printValue(key, verb, depth + 1 >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$9 = f.MapIndex(key); /* */ $s = 43; case 43: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = p.printValue(_r$9, verb, depth + 1 >> 0); /* */ $s = 44; case 44: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
					_i++;
				/* } */ $s = 40; continue; case 41:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 16; continue;
			/* } else if (_16 === 25) { */ case 10:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 45; continue; }
				/* */ $s = 46; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 45:
					_r$11 = value.Type().String(); /* */ $s = 47; case 47: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$12 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$11); /* */ $s = 48; case 48: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
				/* } */ case 46:
				p.add(123);
				v = f;
				t = v.Type();
				i$1 = 0;
				/* while (true) { */ case 49:
					/* if (!(i$1 < v.NumField())) { break; } */ if(!(i$1 < v.NumField())) { $s = 50; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 51; continue; }
					/* */ $s = 52; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 51:
						_r$13 = t.Field(i$1); /* */ $s = 53; case 53: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						f$1 = $clone(_r$13, reflect.StructField);
						if (!(f$1.Name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(f$1.Name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 52:
					_r$14 = getField(v, i$1); /* */ $s = 54; case 54: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$15 = p.printValue(_r$14, verb, depth + 1 >> 0); /* */ $s = 55; case 55: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$15;
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 49; continue; case 50:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 16; continue;
			/* } else if (_16 === 20) { */ case 11:
				_r$16 = f.Elem(); /* */ $s = 56; case 56: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				value$1 = _r$16;
				/* */ if (!value$1.IsValid()) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (!value$1.IsValid()) { */ case 57:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 60; continue; }
					/* */ $s = 61; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 60:
						_r$17 = f.Type().String(); /* */ $s = 63; case 63: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$18 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$17); /* */ $s = 64; case 64: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$18;
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilParenBytes);
						$s = 62; continue;
					/* } else { */ case 61:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(nilAngleBytes);
					/* } */ case 62:
					$s = 59; continue;
				/* } else { */ case 58:
					_r$19 = p.printValue(value$1, verb, depth + 1 >> 0); /* */ $s = 65; case 65: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					wasString = _r$19;
				/* } */ case 59:
				$s = 16; continue;
			/* } else if ((_16 === 17) || (_16 === 23)) { */ case 12:
				typ = f.Type();
				_r$20 = typ.Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				_r$21 = _r$20.Kind(); /* */ $s = 70; case 70: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				if (!(_r$21 === 8)) { _v = false; $s = 68; continue s; }
				_r$22 = typ.Elem(); /* */ $s = 71; case 71: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_v = $interfaceIsEqual(_r$22, byteType) || (verb === 115) || (verb === 113) || (verb === 120); case 68:
				/* */ if (_v) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (_v) { */ case 66:
					bytes = sliceType.nil;
					/* */ if (f.Kind() === 23) { $s = 72; continue; }
					/* */ if (f.CanAddr()) { $s = 73; continue; }
					/* */ $s = 74; continue;
					/* if (f.Kind() === 23) { */ case 72:
						_r$23 = f.Bytes(); /* */ $s = 76; case 76: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						bytes = _r$23;
						$s = 75; continue;
					/* } else if (f.CanAddr()) { */ case 73:
						_r$24 = f.Slice(0, f.Len()); /* */ $s = 77; case 77: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_r$25 = _r$24.Bytes(); /* */ $s = 78; case 78: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
						bytes = _r$25;
						$s = 75; continue;
					/* } else { */ case 74:
						bytes = $makeSlice(sliceType, f.Len());
						_ref$1 = bytes;
						_i$1 = 0;
						/* while (true) { */ case 79:
							/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 80; continue; }
							i$2 = _i$1;
							_r$26 = f.Index(i$2); /* */ $s = 81; case 81: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							_r$27 = _r$26.Uint(); /* */ $s = 82; case 82: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
							((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (_r$27.$low << 24 >>> 24));
							_i$1++;
						/* } */ $s = 79; continue; case 80:
					/* } */ case 75:
					$r = p.fmtBytes(bytes, verb, typ, depth); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					wasString = verb === 115;
					/* break; */ $s = 1; continue;
				/* } */ case 67:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 84; continue; }
				/* */ $s = 85; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 84:
					_r$28 = value.Type().String(); /* */ $s = 87; case 87: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$29 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$28); /* */ $s = 88; case 88: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
					if ((f.Kind() === 23) && f.IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						/* break; */ $s = 1; continue;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 86; continue;
				/* } else { */ case 85:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
				/* } */ case 86:
				i$3 = 0;
				/* while (true) { */ case 89:
					/* if (!(i$3 < f.Len())) { break; } */ if(!(i$3 < f.Len())) { $s = 90; continue; }
					if (i$3 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					_r$30 = f.Index(i$3); /* */ $s = 91; case 91: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = p.printValue(_r$30, verb, depth + 1 >> 0); /* */ $s = 92; case 92: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					_r$31;
					i$3 = i$3 + (1) >> 0;
				/* } */ $s = 89; continue; case 90:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 16; continue;
			/* } else if (_16 === 22) { */ case 13:
				v$1 = f.Pointer();
				/* */ if (!((v$1 === 0)) && (depth === 0)) { $s = 93; continue; }
				/* */ $s = 94; continue;
				/* if (!((v$1 === 0)) && (depth === 0)) { */ case 93:
						_r$32 = f.Elem(); /* */ $s = 96; case 96: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
						a = _r$32;
						_17 = a.Kind();
						/* */ if ((_17 === 17) || (_17 === 23)) { $s = 97; continue; }
						/* */ if (_17 === 25) { $s = 98; continue; }
						/* */ if (_17 === 21) { $s = 99; continue; }
						/* */ $s = 100; continue;
						/* if ((_17 === 17) || (_17 === 23)) { */ case 97:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$33 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 101; case 101: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
							_r$33;
							/* break BigSwitch; */ $s = 1; continue s;
							$s = 100; continue;
						/* } else if (_17 === 25) { */ case 98:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$34 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
							_r$34;
							/* break BigSwitch; */ $s = 1; continue s;
							$s = 100; continue;
						/* } else if (_17 === 21) { */ case 99:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							_r$35 = p.printValue(a, verb, depth + 1 >> 0); /* */ $s = 103; case 103: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
							_r$35;
							/* break BigSwitch; */ $s = 1; continue s;
						/* } */ case 100:
					case 95:
				/* } */ case 94:
				$r = p.fmtPointer(value, verb); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if ((_16 === 18) || (_16 === 19) || (_16 === 26)) { */ case 14:
				$r = p.fmtPointer(value, verb); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else { */ case 15:
				$r = p.unknownType(f); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
		case 1:
		p.value = oldValue;
		wasString = wasString;
		return wasString;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printReflectValue }; } $f.$ptr = $ptr; $f._16 = _16; $f._17 = _17; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.key = key; $f.keys = keys; $f.oldValue = oldValue; $f.p = p; $f.t = t; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.wasString = wasString; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var $ptr, _18, _r$2, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _18 = $f._18; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r$2 = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
					_18 = v.Kind();
					if ((_18 === 2) || (_18 === 3) || (_18 === 4) || (_18 === 5) || (_18 === 6)) {
						n = v.Int();
						if ((x = new $Int64(0, ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)), (x.$high === n.$high && x.$low === n.$low))) {
							num = ((n.$low + ((n.$high >> 31) * 4294967296)) >> 0);
							isInt = true;
						}
					} else if ((_18 === 7) || (_18 === 8) || (_18 === 9) || (_18 === 10) || (_18 === 11) || (_18 === 12)) {
						n$1 = v.Uint();
						if ((x$1 = new $Int64(n$1.$high, n$1.$low), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = new $Uint64(0, (n$1.$low >> 0)), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = (n$1.$low >> 0);
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f.$ptr = $ptr; $f._18 = _18; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var $ptr, _19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _19 = $f._19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; arg$1 = $f.arg$1; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; lasti = $f.lasti; p = $f.p; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_19 = format.charCodeAt(i);
				if (_19 === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_19 === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_19 === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_19 === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_19 === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 3:
				i = i + (1) >> 0;
				_r$2 = intFromArg(a, argNum); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badWidthBytes);
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
				}
				afterIndex = false;
				$s = 5; continue;
			/* } else { */ case 4:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 5:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 7:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 9:
					i = i + (1) >> 0;
					_r$3 = intFromArg(a, argNum); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$4 = _r$3;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badPrecBytes);
					}
					afterIndex = false;
					$s = 11; continue;
				/* } else { */ case 10:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 11:
			/* } */ case 8:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			/* */ if (i >= end) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (i >= end) { */ case 13:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(noVerbBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 14:
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i));
			c = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
			/* */ if (c === 37) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (c === 37) { */ case 15:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
				/* continue; */ $s = 1; continue;
			/* } */ case 16:
			/* */ if (!p.goodArgNum) { $s = 17; continue; }
			/* */ if (argNum >= a.$length) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!p.goodArgNum) { */ case 17:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(badIndexBytes);
				/* continue; */ $s = 1; continue;
				$s = 19; continue;
			/* } else if (argNum >= a.$length) { */ case 18:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(percentBangBytes);
				p.add(c);
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(missingBytes);
				/* continue; */ $s = 1; continue;
			/* } */ case 19:
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			_r$4 = p.printArg(arg, c, 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 21:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(extraBytes);
			/* while (true) { */ case 23:
				/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 24; continue; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				/* */ if (!($interfaceIsEqual(arg$1, $ifaceNil))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!($interfaceIsEqual(arg$1, $ifaceNil))) { */ case 25:
					_r$5 = reflect.TypeOf(arg$1).String(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$5); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				/* } */ case 26:
				_r$7 = p.printArg(arg$1, 118, 0); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				if ((argNum + 1 >> 0) < a.$length) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			/* } */ $s = 23; continue; case 24:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 22:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f.$ptr = $ptr; $f._19 = _19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.arg$1 = arg$1; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.lasti = lasti; $f.p = p; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var $ptr, _r$2, _r$3, _v, a, addnewline, addspace, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; a = $f.a; addnewline = $f.addnewline; addspace = $f.addspace; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		argNum = 0;
		/* while (true) { */ case 1:
			/* if (!(argNum < a.$length)) { break; } */ if(!(argNum < a.$length)) { $s = 2; continue; }
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			/* */ if (argNum > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (argNum > 0) { */ case 3:
				if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 5; continue s; }
				_r$2 = reflect.TypeOf(arg).Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 24; case 5:
				isString = _v;
				if (addspace || !isString && !prevString) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
				}
			/* } */ case 4:
			_r$3 = p.printArg(arg, 118, 0); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			prevString = _r$3;
			argNum = argNum + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (addnewline) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.a = a; $f.addnewline = addnewline; $f.addspace = addspace; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	$ptrType(stringReader).prototype.Read = function(b) {
		var $ptr, b, err, n, r;
		n = 0;
		err = $ifaceNil;
		r = this;
		n = $copyString(b, r.$get());
		r.$set((r.$get()).substring(n));
		if (n === 0) {
			err = io.EOF;
		}
		return [n, err];
	};
	Sscan = function(str, a) {
		var $ptr, _ptr, _r$2, _tuple, a, err, n, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ptr = $f._ptr; _r$2 = $f._r$2; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		str = [str];
		n = 0;
		err = $ifaceNil;
		_r$2 = Fscan((_ptr = (str.$ptr || (str.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, str))), new ptrType$3(function() { return _ptr.$get(); }, function($v) { _ptr.$set($v); }, _ptr.$target)), a); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		/* */ $s = 2; case 2:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sscan }; } $f.$ptr = $ptr; $f._ptr = _ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sscan = Sscan;
	Fscan = function(r, a) {
		var $ptr, _r$2, _r$3, _tuple, _tuple$1, a, err, n, old, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; err = $f.err; n = $f.n; old = $f.old; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r$2 = newScanState(r, true, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		s = _tuple[0];
		old = $clone(_tuple[1], ssave);
		_r$3 = s.doScan(a); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		n = _tuple$1[0];
		err = _tuple$1[1];
		s.free(old);
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fscan }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.err = err; $f.n = n; $f.old = old; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fscan = Fscan;
	ss.ptr.prototype.Read = function(buf) {
		var $ptr, _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_r$2 = s.rr.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var $ptr, _r$2, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.mustReadRune = function() {
		var $ptr, _r$2, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		if (r === -1) {
			s.error(io.ErrUnexpectedEOF);
		}
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.mustReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.mustReadRune = function() { return this.$val.mustReadRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var $ptr, _r$2, _tuple, ok, s, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; ok = $f.ok; s = $f.s; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true);
		u = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = u.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			s.peekRune = s.prevRune;
		/* } */ case 3:
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.ok = ok; $f.s = s; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $ptr, _r$2, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		tok = _r$2;
		return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var $ptr, _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType$2);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var $ptr, r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	readRune.ptr.prototype.readByte = function() {
		var $ptr, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		err = $ifaceNil;
		r = this;
		if (r.pending > 0) {
			b = r.pendBuf[0];
			$copySlice($subslice(new sliceType(r.pendBuf), 0), $subslice(new sliceType(r.pendBuf), 1));
			r.pending = r.pending - (1) >> 0;
			return [b, err];
		}
		_r$2 = io.ReadFull(r.reader, $subslice(new sliceType(r.pendBuf), 0, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		err = _tuple[1];
		if (!((n === 1))) {
			_tmp = 0;
			_tmp$1 = err;
			b = _tmp;
			err = _tmp$1;
			return [b, err];
		}
		_tmp$2 = r.pendBuf[0];
		_tmp$3 = err;
		b = _tmp$2;
		err = _tmp$3;
		return [b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readRune.ptr.prototype.readByte }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	readRune.prototype.readByte = function() { return this.$val.readByte(); };
	readRune.ptr.prototype.unread = function(buf) {
		var $ptr, buf, r;
		r = this;
		$copySlice($subslice(new sliceType(r.pendBuf), r.pending), buf);
		r.pending = r.pending + (buf.$length) >> 0;
	};
	readRune.prototype.unread = function(buf) { return this.$val.unread(buf); };
	readRune.ptr.prototype.ReadRune = function() {
		var $ptr, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, err, n, r, rr, size, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; r = $f.r; rr = $f.rr; size = $f.size; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rr = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		_r$2 = r.readByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		r.buf[0] = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = err;
			rr = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [rr, size, err];
		}
		if (r.buf[0] < 128) {
			rr = (r.buf[0] >> 0);
			size = 1;
			return [rr, size, err];
		}
		n = 0;
		n = 1;
		/* while (true) { */ case 2:
			/* if (!(!utf8.FullRune($subslice(new sliceType(r.buf), 0, n)))) { break; } */ if(!(!utf8.FullRune($subslice(new sliceType(r.buf), 0, n)))) { $s = 3; continue; }
			_r$3 = r.readByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			(x = r.buf, ((n < 0 || n >= x.length) ? $throwRuntimeError("index out of range") : x[n] = _tuple$1[0]));
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = $ifaceNil;
					/* break; */ $s = 3; continue;
				}
				return [rr, size, err];
			}
			n = n + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		_tuple$2 = utf8.DecodeRune($subslice(new sliceType(r.buf), 0, n));
		rr = _tuple$2[0];
		size = _tuple$2[1];
		if (size < n) {
			r.unread($subslice(new sliceType(r.buf), size, n));
		}
		return [rr, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readRune.ptr.prototype.ReadRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.r = r; $f.rr = rr; $f.size = size; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	readRune.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	newScanState = function(r, nlIsSpace, nlIsEnd) {
		var $ptr, _r$2, _tuple, nlIsEnd, nlIsSpace, ok, old, r, rr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; nlIsEnd = $f.nlIsEnd; nlIsSpace = $f.nlIsSpace; ok = $f.ok; old = $f.old; r = $f.r; rr = $f.rr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = ptrType$5.nil;
		old = new ssave.ptr(false, false, false, 0, 0, 0);
		_r$2 = ssFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s = $assertType(_r$2, ptrType$5);
		_tuple = $assertType(r, io.RuneReader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			s.rr = rr;
		} else {
			s.rr = new readRune.ptr(r, arrayType.zero(), 0, arrayType.zero());
		}
		s.ssave.nlIsSpace = nlIsSpace;
		s.ssave.nlIsEnd = nlIsEnd;
		s.prevRune = -1;
		s.peekRune = -1;
		s.atEOF = false;
		s.ssave.limit = 1073741824;
		s.ssave.argLimit = 1073741824;
		s.ssave.maxWid = 1073741824;
		s.ssave.validSave = true;
		s.count = 0;
		return [s, old];
		/* */ } return; } if ($f === undefined) { $f = { $blk: newScanState }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.nlIsEnd = nlIsEnd; $f.nlIsSpace = nlIsSpace; $f.ok = ok; $f.old = old; $f.r = r; $f.rr = rr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.ptr.prototype.free = function(old) {
		var $ptr, old, s;
		old = $clone(old, ssave);
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var $ptr, _r$2, _r$3, _r$4, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r$2 = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$3 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$4 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var $ptr, _r$2, _r$3, _r$4, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r$2 = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$3 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$3) { */ case 7:
				_r$4 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var $ptr, _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.consume = function(ok, accept) {
		var $ptr, _r$2, _r$3, accept, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; accept = $f.accept; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		if (r === -1) {
			return false;
		}
		if (indexRune(ok, r) >= 0) {
			if (accept) {
				(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
			}
			return true;
		}
		/* */ if (!((r === -1)) && accept) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1)) && accept) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.consume }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.accept = accept; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.consume = function(ok, accept) { return this.$val.consume(ok, accept); };
	ss.ptr.prototype.peek = function(ok) {
		var $ptr, _r$2, _r$3, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 3:
		return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ss.ptr.prototype.notEOF = function() {
		var $ptr, _r$2, _r$3, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = _r$2;
		if (r === -1) {
			$panic(io.EOF);
		}
		_r$3 = s.UnreadRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.notEOF }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.notEOF = function() { return this.$val.notEOF(); };
	ss.ptr.prototype.accept = function(ok) {
		var $ptr, _r$2, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$2 = s.consume(ok, true); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.accept }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.accept = function(ok) { return this.$val.accept(ok); };
	ss.ptr.prototype.okVerb = function(verb, okVerbs, typ) {
		var $ptr, _i, _ref, _rune, okVerbs, s, typ, v, verb;
		s = this;
		_ref = okVerbs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			v = _rune[0];
			if (v === verb) {
				return true;
			}
			_i += _rune[1];
		}
		s.errorString("bad verb '%" + $encodeRune(verb) + "' for " + typ);
		return false;
	};
	ss.prototype.okVerb = function(verb, okVerbs, typ) { return this.$val.okVerb(verb, okVerbs, typ); };
	ss.ptr.prototype.scanBool = function(verb) {
		var $ptr, _1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, _v$4, s, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; s = $f.s; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!s.okVerb(verb, "tv", "boolean")) {
			return false;
		}
			_r$2 = s.getRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_1 = _r$2;
			/* */ if (_1 === 48) { $s = 5; continue; }
			/* */ if (_1 === 49) { $s = 6; continue; }
			/* */ if ((_1 === 116) || (_1 === 84)) { $s = 7; continue; }
			/* */ if ((_1 === 102) || (_1 === 70)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === 48) { */ case 5:
				return false;
			/* } else if (_1 === 49) { */ case 6:
				return true;
			/* } else if ((_1 === 116) || (_1 === 84)) { */ case 7:
				_r$3 = s.accept("rR"); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				if (!(_r$3)) { _v = false; $s = 12; continue s; }
				_r$4 = s.accept("uU"); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				if (!_r$4) { _v$1 = true; $s = 14; continue s; }
				_r$5 = s.accept("eE"); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_v$1 = !_r$5; case 14:
				_v = _v$1; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
					s.error(boolError);
				/* } */ case 11:
				return true;
			/* } else if ((_1 === 102) || (_1 === 70)) { */ case 8:
				_r$6 = s.accept("aA"); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				if (!(_r$6)) { _v$2 = false; $s = 19; continue s; }
				_r$7 = s.accept("lL"); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				if (!_r$7) { _v$4 = true; $s = 22; continue s; }
				_r$8 = s.accept("sS"); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v$4 = !_r$8; case 22:
				if (_v$4) { _v$3 = true; $s = 21; continue s; }
				_r$9 = s.accept("eE"); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_v$3 = !_r$9; case 21:
				_v$2 = _v$3; case 19:
				/* */ if (_v$2) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_v$2) { */ case 17:
					s.error(boolError);
				/* } */ case 18:
				return false;
			/* } */ case 9:
		case 3:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanBool }; } $f.$ptr = $ptr; $f._1 = _1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.s = s; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanBool = function(verb) { return this.$val.scanBool(verb); };
	ss.ptr.prototype.getBase = function(verb) {
		var $ptr, _2, base, digits, s, verb;
		base = 0;
		digits = "";
		s = this;
		s.okVerb(verb, "bdoUxXv", "integer");
		base = 10;
		digits = "0123456789";
		_2 = verb;
		if (_2 === 98) {
			base = 2;
			digits = "01";
		} else if (_2 === 111) {
			base = 8;
			digits = "01234567";
		} else if ((_2 === 120) || (_2 === 88) || (_2 === 85)) {
			base = 16;
			digits = "0123456789aAbBcCdDeEfF";
		}
		return [base, digits];
	};
	ss.prototype.getBase = function(verb) { return this.$val.getBase(verb); };
	ss.ptr.prototype.scanNumber = function(digits, haveDigits) {
		var $ptr, _r$2, _r$3, digits, haveDigits, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; digits = $f.digits; haveDigits = $f.haveDigits; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!haveDigits) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!haveDigits) { */ case 1:
			$r = s.notEOF(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = s.accept(digits); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$2) { */ case 4:
				s.errorString("expected integer");
			/* } */ case 5:
		/* } */ case 2:
		/* while (true) { */ case 7:
			_r$3 = s.accept(digits); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(_r$3)) { break; } */ if(!(_r$3)) { $s = 8; continue; }
		/* } */ $s = 7; continue; case 8:
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanNumber }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.digits = digits; $f.haveDigits = haveDigits; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanNumber = function(digits, haveDigits) { return this.$val.scanNumber(digits, haveDigits); };
	ss.ptr.prototype.scanRune = function(bitSize) {
		var $ptr, _r$2, bitSize, n, r, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; bitSize = $f.bitSize; n = $f.n; r = $f.r; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = s.getRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r = new $Int64(0, _r$2);
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(r, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === r.$high && x.$low === r.$low))) {
			s.errorString("overflow on character value " + $encodeRune(r.$low));
		}
		return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanRune }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f.bitSize = bitSize; $f.n = n; $f.r = r; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanRune = function(bitSize) { return this.$val.scanRune(bitSize); };
	ss.ptr.prototype.scanBasePrefix = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, base, digits, found, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; base = $f.base; digits = $f.digits; found = $f.found; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		base = 0;
		digits = "";
		found = false;
		s = this;
		_r$2 = s.peek("0"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!_r$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$2) { */ case 1:
			_tmp = 10;
			_tmp$1 = "0123456789";
			_tmp$2 = false;
			base = _tmp;
			digits = _tmp$1;
			found = _tmp$2;
			return [base, digits, found];
		/* } */ case 2:
		_r$3 = s.accept("0"); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		found = true;
		_tmp$3 = 8;
		_tmp$4 = "01234567";
		base = _tmp$3;
		digits = _tmp$4;
		_r$4 = s.peek("xX"); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$4) { */ case 5:
			_r$5 = s.consume("xX", false); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_tmp$5 = 16;
			_tmp$6 = "0123456789aAbBcCdDeEfF";
			base = _tmp$5;
			digits = _tmp$6;
		/* } */ case 6:
		return [base, digits, found];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanBasePrefix }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f.base = base; $f.digits = digits; $f.found = found; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanBasePrefix = function() { return this.$val.scanBasePrefix(); };
	ss.ptr.prototype.scanInt = function(verb, bitSize) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, _tuple$1, _tuple$2, _v, base, bitSize, digits, err, haveDigits, i, n, s, tok, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; base = $f.base; bitSize = $f.bitSize; digits = $f.digits; err = $f.err; haveDigits = $f.haveDigits; i = $f.i; n = $f.n; s = $f.s; tok = $f.tok; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (verb === 99) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (verb === 99) { */ case 1:
			_r$2 = s.scanRune(bitSize); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$2;
		/* } */ case 2:
		$r = s.skipSpace(false); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = s.getBase(verb);
		base = _tuple[0];
		digits = _tuple[1];
		haveDigits = false;
		/* */ if (verb === 85) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (verb === 85) { */ case 7:
			_r$3 = s.consume("U", false); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			if (!_r$3) { _v = true; $s = 12; continue s; }
			_r$4 = s.consume("+", false); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = !_r$4; case 12:
			/* */ if (_v) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_v) { */ case 10:
				s.errorString("bad unicode format ");
			/* } */ case 11:
			$s = 9; continue;
		/* } else { */ case 8:
			_r$5 = s.accept("+-"); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			/* */ if (verb === 118) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (verb === 118) { */ case 16:
				_r$6 = s.scanBasePrefix(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				base = _tuple$1[0];
				digits = _tuple$1[1];
				haveDigits = _tuple$1[2];
			/* } */ case 17:
		/* } */ case 9:
		_r$7 = s.scanNumber(digits, haveDigits); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		tok = _r$7;
		_tuple$2 = strconv.ParseInt(tok, base, 64);
		i = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === i.$high && x.$low === i.$low))) {
			s.errorString("integer overflow on token " + tok);
		}
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanInt }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.base = base; $f.bitSize = bitSize; $f.digits = digits; $f.err = err; $f.haveDigits = haveDigits; $f.i = i; $f.n = n; $f.s = s; $f.tok = tok; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanInt = function(verb, bitSize) { return this.$val.scanInt(verb, bitSize); };
	ss.ptr.prototype.scanUint = function(verb, bitSize) {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _v, base, bitSize, digits, err, haveDigits, i, n, s, tok, verb, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; base = $f.base; bitSize = $f.bitSize; digits = $f.digits; err = $f.err; haveDigits = $f.haveDigits; i = $f.i; n = $f.n; s = $f.s; tok = $f.tok; verb = $f.verb; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (verb === 99) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (verb === 99) { */ case 1:
			_r$2 = s.scanRune(bitSize); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return (x = _r$2, new $Uint64(x.$high, x.$low));
		/* } */ case 2:
		$r = s.skipSpace(false); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = s.getBase(verb);
		base = _tuple[0];
		digits = _tuple[1];
		haveDigits = false;
		/* */ if (verb === 85) { $s = 7; continue; }
		/* */ if (verb === 118) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (verb === 85) { */ case 7:
			_r$3 = s.consume("U", false); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			if (!_r$3) { _v = true; $s = 12; continue s; }
			_r$4 = s.consume("+", false); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = !_r$4; case 12:
			/* */ if (_v) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_v) { */ case 10:
				s.errorString("bad unicode format ");
			/* } */ case 11:
			$s = 9; continue;
		/* } else if (verb === 118) { */ case 8:
			_r$5 = s.scanBasePrefix(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			base = _tuple$1[0];
			digits = _tuple$1[1];
			haveDigits = _tuple$1[2];
		/* } */ case 9:
		_r$6 = s.scanNumber(digits, haveDigits); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		tok = _r$6;
		_tuple$2 = strconv.ParseUint(tok, base, 64);
		i = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x$1 = $shiftRightUint64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x$1.$high === i.$high && x$1.$low === i.$low))) {
			s.errorString("unsigned integer overflow on token " + tok);
		}
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanUint }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.base = base; $f.bitSize = bitSize; $f.digits = digits; $f.err = err; $f.haveDigits = haveDigits; $f.i = i; $f.n = n; $f.s = s; $f.tok = tok; $f.verb = verb; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanUint = function(verb, bitSize) { return this.$val.scanUint(verb, bitSize); };
	ss.ptr.prototype.floatToken = function() {
		var $ptr, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, _v$3, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		_r$2 = s.accept("nN"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		if (!(_r$2)) { _v$1 = false; $s = 4; continue s; }
		_r$3 = s.accept("aA"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$3; case 4:
		if (!(_v$1)) { _v = false; $s = 3; continue s; }
		_r$4 = s.accept("nN"); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_v = _r$4; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			return $bytesToString(s.buf);
		/* } */ case 2:
		_r$5 = s.accept("+-"); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = s.accept("iI"); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		if (!(_r$6)) { _v$3 = false; $s = 12; continue s; }
		_r$7 = s.accept("nN"); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$3 = _r$7; case 12:
		if (!(_v$3)) { _v$2 = false; $s = 11; continue s; }
		_r$8 = s.accept("fF"); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_v$2 = _r$8; case 11:
		/* */ if (_v$2) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v$2) { */ case 9:
			return $bytesToString(s.buf);
		/* } */ case 10:
		/* while (true) { */ case 16:
			_r$9 = s.accept("0123456789"); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* if (!(_r$9)) { break; } */ if(!(_r$9)) { $s = 17; continue; }
		/* } */ $s = 16; continue; case 17:
		_r$10 = s.accept("."); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		/* */ if (_r$10) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (_r$10) { */ case 19:
			/* while (true) { */ case 22:
				_r$11 = s.accept("0123456789"); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				/* if (!(_r$11)) { break; } */ if(!(_r$11)) { $s = 23; continue; }
			/* } */ $s = 22; continue; case 23:
		/* } */ case 20:
		_r$12 = s.accept("eEp"); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		/* */ if (_r$12) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (_r$12) { */ case 25:
			_r$13 = s.accept("+-"); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
			/* while (true) { */ case 29:
				_r$14 = s.accept("0123456789"); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				/* if (!(_r$14)) { break; } */ if(!(_r$14)) { $s = 30; continue; }
			/* } */ $s = 29; continue; case 30:
		/* } */ case 26:
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.floatToken }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.floatToken = function() { return this.$val.floatToken(); };
	ss.ptr.prototype.complexTokens = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _v, imag, imagSign, parens, real, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; imag = $f.imag; imagSign = $f.imagSign; parens = $f.parens; real = $f.real; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		real = "";
		imag = "";
		s = this;
		_r$2 = s.accept("("); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		parens = _r$2;
		_r$3 = s.floatToken(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		real = _r$3;
		s.buf = $subslice(s.buf, 0, 0);
		_r$4 = s.accept("+-"); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!_r$4) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!_r$4) { */ case 3:
			s.error(complexError);
		/* } */ case 4:
		imagSign = $bytesToString(s.buf);
		_r$5 = s.floatToken(); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		imag = _r$5;
		_r$6 = s.accept("i"); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!_r$6) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!_r$6) { */ case 7:
			s.error(complexError);
		/* } */ case 8:
		if (!(parens)) { _v = false; $s = 12; continue s; }
		_r$7 = s.accept(")"); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = !_r$7; case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			s.error(complexError);
		/* } */ case 11:
		_tmp = real;
		_tmp$1 = imagSign + imag;
		real = _tmp;
		imag = _tmp$1;
		return [real, imag];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.complexTokens }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f.imag = imag; $f.imagSign = imagSign; $f.parens = parens; $f.real = real; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.complexTokens = function() { return this.$val.complexTokens(); };
	ss.ptr.prototype.convertFloat = function(str, n) {
		var $ptr, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, err, err$1, f, f$1, m, n, ok, ok$1, p, s, str;
		s = this;
		p = indexRune(str, 112);
		if (p >= 0) {
			_tuple = strconv.ParseFloat(str.substring(0, p), n);
			f = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$1 = $assertType(err, ptrType$6, true);
				e = _tuple$1[0];
				ok = _tuple$1[1];
				if (ok) {
					e.Num = str;
				}
				s.error(err);
			}
			_tuple$2 = strconv.Atoi(str.substring((p + 1 >> 0)));
			m = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$3 = $assertType(err, ptrType$6, true);
				e$1 = _tuple$3[0];
				ok$1 = _tuple$3[1];
				if (ok$1) {
					e$1.Num = str;
				}
				s.error(err);
			}
			return math.Ldexp(f, m);
		}
		_tuple$4 = strconv.ParseFloat(str, n);
		f$1 = _tuple$4[0];
		err$1 = _tuple$4[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			s.error(err$1);
		}
		return f$1;
	};
	ss.prototype.convertFloat = function(str, n) { return this.$val.convertFloat(str, n); };
	ss.ptr.prototype.scanComplex = function(verb, n) {
		var $ptr, _q, _q$1, _r$2, _tuple, imag, n, real, s, simag, sreal, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _r$2 = $f._r$2; _tuple = $f._tuple; imag = $f.imag; n = $f.n; real = $f.real; s = $f.s; simag = $f.simag; sreal = $f.sreal; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!s.okVerb(verb, "beEfFgGv", "complex")) {
			return new $Complex128(0, 0);
		}
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = s.complexTokens(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		sreal = _tuple[0];
		simag = _tuple[1];
		real = s.convertFloat(sreal, (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		imag = s.convertFloat(simag, (_q$1 = n / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
		return new $Complex128(real, imag);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanComplex }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.imag = imag; $f.n = n; $f.real = real; $f.s = s; $f.simag = simag; $f.sreal = sreal; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanComplex = function(verb, n) { return this.$val.scanComplex(verb, n); };
	ss.ptr.prototype.convertString = function(verb) {
		var $ptr, _3, _r$2, _r$3, _r$4, s, str, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; s = $f.s; str = $f.str; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		str = "";
		s = this;
		if (!s.okVerb(verb, "svqxX", "string")) {
			str = "";
			return str;
		}
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = s.notEOF(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_3 = verb;
			/* */ if (_3 === 113) { $s = 4; continue; }
			/* */ if ((_3 === 120) || (_3 === 88)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_3 === 113) { */ case 4:
				_r$2 = s.quotedString(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				str = _r$2;
				$s = 7; continue;
			/* } else if ((_3 === 120) || (_3 === 88)) { */ case 5:
				_r$3 = s.hexString(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				str = _r$3;
				$s = 7; continue;
			/* } else { */ case 6:
				_r$4 = s.token(true, notSpace); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				str = $bytesToString(_r$4);
			/* } */ case 7:
		case 3:
		return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.convertString }; } $f.$ptr = $ptr; $f._3 = _3; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.s = s; $f.str = str; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.convertString = function(verb) { return this.$val.convertString(verb); };
	ss.ptr.prototype.quotedString = function() {
		var $ptr, _4, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, err, quote, r, r$1, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; quote = $f.quote; r = $f.r; r$1 = $f.r$1; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = s.getRune(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		quote = _r$2;
			_4 = quote;
			/* */ if (_4 === 96) { $s = 4; continue; }
			/* */ if (_4 === 34) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_4 === 96) { */ case 4:
				/* while (true) { */ case 8:
					_r$3 = s.mustReadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					r = _r$3;
					if (r === quote) {
						/* break; */ $s = 9; continue;
					}
					(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
				/* } */ $s = 8; continue; case 9:
				return $bytesToString(s.buf);
			/* } else if (_4 === 34) { */ case 5:
				(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(quote);
				/* while (true) { */ case 11:
					_r$4 = s.mustReadRune(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					r$1 = _r$4;
					(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r$1);
					/* */ if (r$1 === 92) { $s = 14; continue; }
					/* */ if (r$1 === 34) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (r$1 === 92) { */ case 14:
						_r$5 = s.mustReadRune(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = (s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(_r$5); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						$s = 16; continue;
					/* } else if (r$1 === 34) { */ case 15:
						/* break; */ $s = 12; continue;
					/* } */ case 16:
				/* } */ $s = 11; continue; case 12:
				_tuple = strconv.Unquote($bytesToString(s.buf));
				result = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					s.error(err);
				}
				return result;
			/* } else { */ case 6:
				s.errorString("expected quoted string");
			/* } */ case 7:
		case 3:
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.quotedString }; } $f.$ptr = $ptr; $f._4 = _4; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.quote = quote; $f.r = r; $f.r$1 = r$1; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.quotedString = function() { return this.$val.quotedString(); };
	hexDigit = function(d) {
		var $ptr, _5, d, digit;
		digit = (d >> 0);
		_5 = digit;
		if ((_5 === 48) || (_5 === 49) || (_5 === 50) || (_5 === 51) || (_5 === 52) || (_5 === 53) || (_5 === 54) || (_5 === 55) || (_5 === 56) || (_5 === 57)) {
			return [digit - 48 >> 0, true];
		} else if ((_5 === 97) || (_5 === 98) || (_5 === 99) || (_5 === 100) || (_5 === 101) || (_5 === 102)) {
			return [(10 + digit >> 0) - 97 >> 0, true];
		} else if ((_5 === 65) || (_5 === 66) || (_5 === 67) || (_5 === 68) || (_5 === 69) || (_5 === 70)) {
			return [(10 + digit >> 0) - 65 >> 0, true];
		}
		return [-1, false];
	};
	ss.ptr.prototype.hexByte = function() {
		var $ptr, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tuple, _tuple$1, b, ok, rune1, s, value1, value2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; ok = $f.ok; rune1 = $f.rune1; s = $f.s; value1 = $f.value1; value2 = $f.value2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = 0;
		ok = false;
		s = this;
		_r$2 = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		rune1 = _r$2;
		if (rune1 === -1) {
			return [b, ok];
		}
		_tuple = hexDigit(rune1);
		value1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$3 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			return [b, ok];
		/* } */ case 3:
		_r$4 = s.mustReadRune(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = hexDigit(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$1 = _r$5;
		value2 = _tuple$1[0];
		ok = _tuple$1[1];
		if (!ok) {
			s.errorString("illegal hex digit");
			return [b, ok];
		}
		_tmp = (((value1 << 4 >> 0) | value2) << 24 >>> 24);
		_tmp$1 = true;
		b = _tmp;
		ok = _tmp$1;
		return [b, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.hexByte }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.ok = ok; $f.rune1 = rune1; $f.s = s; $f.value1 = value1; $f.value2 = value2; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.hexByte = function() { return this.$val.hexByte(); };
	ss.ptr.prototype.hexString = function() {
		var $ptr, _r$2, _tuple, b, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$2 = $f._r$2; _tuple = $f._tuple; b = $f.b; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.notEOF(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 2:
			_r$2 = s.hexByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			b = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				/* break; */ $s = 3; continue;
			}
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteByte(b);
		/* } */ $s = 2; continue; case 3:
		if (s.buf.$length === 0) {
			s.errorString("no hex data for %x string");
			return "";
		}
		return $bytesToString(s.buf);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.hexString }; } $f.$ptr = $ptr; $f._r$2 = _r$2; $f._tuple = _tuple; $f.b = b; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.hexString = function() { return this.$val.hexString(); };
	ss.ptr.prototype.scanOne = function(verb, arg) {
		var $ptr, _6, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, arg, err, i, ok, ptr, s, str, typ, v, v$1, v$10, v$11, v$12, v$13, v$14, v$15, v$16, v$17, v$18, v$19, v$2, v$20, v$3, v$4, v$5, v$6, v$7, v$8, v$9, val, verb, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; err = $f.err; i = $f.i; ok = $f.ok; ptr = $f.ptr; s = $f.s; str = $f.str; typ = $f.typ; v = $f.v; v$1 = $f.v$1; v$10 = $f.v$10; v$11 = $f.v$11; v$12 = $f.v$12; v$13 = $f.v$13; v$14 = $f.v$14; v$15 = $f.v$15; v$16 = $f.v$16; v$17 = $f.v$17; v$18 = $f.v$18; v$19 = $f.v$19; v$2 = $f.v$2; v$20 = $f.v$20; v$3 = $f.v$3; v$4 = $f.v$4; v$5 = $f.v$5; v$6 = $f.v$6; v$7 = $f.v$7; v$8 = $f.v$8; v$9 = $f.v$9; val = $f.val; verb = $f.verb; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		err = $ifaceNil;
		_tuple = $assertType(arg, Scanner, true);
		v = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$2 = v.Scan(s, verb); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				s.error(err);
			}
			return;
		/* } */ case 2:
		_ref = arg;
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if ($assertType(_ref, ptrType$7, true)[1]) { */ case 4:
			v$1 = _ref.$val;
			_r$3 = s.scanBool(verb); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v$1.$set(_r$3);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 5:
			v$2 = _ref.$val;
			_r$4 = s.scanComplex(verb, 64); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v$2.$set((x = _r$4, new $Complex64(x.$real, x.$imag)));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 6:
			v$3 = _ref.$val;
			_r$5 = s.scanComplex(verb, 128); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v$3.$set(_r$5);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 7:
			v$4 = _ref.$val;
			_r$6 = s.scanInt(verb, intBits); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			v$4.$set(((x$1 = _r$6, x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 8:
			v$5 = _ref.$val;
			_r$7 = s.scanInt(verb, 8); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			v$5.$set(((x$2 = _r$7, x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 24 >> 24));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 9:
			v$6 = _ref.$val;
			_r$8 = s.scanInt(verb, 16); /* */ $s = 29; case 29: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			v$6.$set(((x$3 = _r$8, x$3.$low + ((x$3.$high >> 31) * 4294967296)) << 16 >> 16));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 10:
			v$7 = _ref.$val;
			_r$9 = s.scanInt(verb, 32); /* */ $s = 30; case 30: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			v$7.$set(((x$4 = _r$9, x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 11:
			v$8 = _ref.$val;
			_r$10 = s.scanInt(verb, 64); /* */ $s = 31; case 31: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			v$8.$set(_r$10);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 12:
			v$9 = _ref.$val;
			_r$11 = s.scanUint(verb, intBits); /* */ $s = 32; case 32: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			v$9.$set((_r$11.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 13:
			v$10 = _ref.$val;
			_r$12 = s.scanUint(verb, 8); /* */ $s = 33; case 33: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			v$10.$set((_r$12.$low << 24 >>> 24));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 14:
			v$11 = _ref.$val;
			_r$13 = s.scanUint(verb, 16); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			v$11.$set((_r$13.$low << 16 >>> 16));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 15:
			v$12 = _ref.$val;
			_r$14 = s.scanUint(verb, 32); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			v$12.$set((_r$14.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 16:
			v$13 = _ref.$val;
			_r$15 = s.scanUint(verb, 64); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			v$13.$set(_r$15);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 17:
			v$14 = _ref.$val;
			_r$16 = s.scanUint(verb, uintptrBits); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			v$14.$set((_r$16.$low >>> 0));
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 18:
			v$15 = _ref.$val;
			/* */ if (s.okVerb(verb, "beEfFgGv", "float32")) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (s.okVerb(verb, "beEfFgGv", "float32")) { */ case 38:
				$r = s.skipSpace(false); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.notEOF(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$17 = s.floatToken(); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = s.convertFloat(_r$17, 32); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				v$15.$set($fround(_r$18));
			/* } */ case 39:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 19:
			v$16 = _ref.$val;
			/* */ if (s.okVerb(verb, "beEfFgGv", "float64")) { $s = 44; continue; }
			/* */ $s = 45; continue;
			/* if (s.okVerb(verb, "beEfFgGv", "float64")) { */ case 44:
				$r = s.skipSpace(false); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.notEOF(); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$19 = s.floatToken(); /* */ $s = 48; case 48: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$20 = s.convertFloat(_r$19, 64); /* */ $s = 49; case 49: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				v$16.$set(_r$20);
			/* } */ case 45:
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 20:
			v$17 = _ref.$val;
			_r$21 = s.convertString(verb); /* */ $s = 50; case 50: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			v$17.$set(_r$21);
			$s = 23; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 21:
			v$18 = _ref.$val;
			_r$22 = s.convertString(verb); /* */ $s = 51; case 51: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			v$18.$set(new sliceType($stringToBytes(_r$22)));
			$s = 23; continue;
		/* } else { */ case 22:
			v$19 = _ref;
			_r$23 = reflect.ValueOf(v$19); /* */ $s = 52; case 52: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			val = _r$23;
			ptr = val;
			/* */ if (!((ptr.Kind() === 22))) { $s = 53; continue; }
			/* */ $s = 54; continue;
			/* if (!((ptr.Kind() === 22))) { */ case 53:
				_r$24 = val.Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$r = s.errorString("type not a pointer: " + _r$24); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 54:
				_r$25 = ptr.Elem(); /* */ $s = 58; case 58: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				v$20 = _r$25;
				_6 = v$20.Kind();
				/* */ if (_6 === 1) { $s = 59; continue; }
				/* */ if ((_6 === 2) || (_6 === 3) || (_6 === 4) || (_6 === 5) || (_6 === 6)) { $s = 60; continue; }
				/* */ if ((_6 === 7) || (_6 === 8) || (_6 === 9) || (_6 === 10) || (_6 === 11) || (_6 === 12)) { $s = 61; continue; }
				/* */ if (_6 === 24) { $s = 62; continue; }
				/* */ if (_6 === 23) { $s = 63; continue; }
				/* */ if ((_6 === 13) || (_6 === 14)) { $s = 64; continue; }
				/* */ if ((_6 === 15) || (_6 === 16)) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (_6 === 1) { */ case 59:
					_r$26 = s.scanBool(verb); /* */ $s = 68; case 68: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					$r = v$20.SetBool(_r$26); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_6 === 2) || (_6 === 3) || (_6 === 4) || (_6 === 5) || (_6 === 6)) { */ case 60:
					_arg = verb;
					_r$27 = v$20.Type().Bits(); /* */ $s = 70; case 70: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_arg$1 = _r$27;
					_r$28 = s.scanInt(_arg, _arg$1); /* */ $s = 71; case 71: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					$r = v$20.SetInt(_r$28); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_6 === 7) || (_6 === 8) || (_6 === 9) || (_6 === 10) || (_6 === 11) || (_6 === 12)) { */ case 61:
					_arg$2 = verb;
					_r$29 = v$20.Type().Bits(); /* */ $s = 73; case 73: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_arg$3 = _r$29;
					_r$30 = s.scanUint(_arg$2, _arg$3); /* */ $s = 74; case 74: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					$r = v$20.SetUint(_r$30); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if (_6 === 24) { */ case 62:
					_r$31 = s.convertString(verb); /* */ $s = 76; case 76: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					$r = v$20.SetString(_r$31); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if (_6 === 23) { */ case 63:
					typ = v$20.Type();
					_r$32 = typ.Elem(); /* */ $s = 80; case 80: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_r$33 = _r$32.Kind(); /* */ $s = 81; case 81: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					/* */ if (!((_r$33 === 8))) { $s = 78; continue; }
					/* */ $s = 79; continue;
					/* if (!((_r$33 === 8))) { */ case 78:
						_r$34 = val.Type().String(); /* */ $s = 82; case 82: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
						$r = s.errorString("can't scan type: " + _r$34); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 79:
					_r$35 = s.convertString(verb); /* */ $s = 84; case 84: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					str = _r$35;
					_r$36 = reflect.MakeSlice(typ, str.length, str.length); /* */ $s = 85; case 85: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					$r = v$20.Set(_r$36); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = 0;
					/* while (true) { */ case 87:
						/* if (!(i < str.length)) { break; } */ if(!(i < str.length)) { $s = 88; continue; }
						_r$37 = v$20.Index(i); /* */ $s = 89; case 89: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						$r = _r$37.SetUint(new $Uint64(0, str.charCodeAt(i))); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i = i + (1) >> 0;
					/* } */ $s = 87; continue; case 88:
					$s = 67; continue;
				/* } else if ((_6 === 13) || (_6 === 14)) { */ case 64:
					$r = s.skipSpace(false); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = s.notEOF(); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$38 = s.floatToken(); /* */ $s = 93; case 93: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_arg$4 = _r$38;
					_r$39 = v$20.Type().Bits(); /* */ $s = 94; case 94: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					_arg$5 = _r$39;
					_r$40 = s.convertFloat(_arg$4, _arg$5); /* */ $s = 95; case 95: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
					$r = v$20.SetFloat(_r$40); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else if ((_6 === 15) || (_6 === 16)) { */ case 65:
					_arg$6 = verb;
					_r$41 = v$20.Type().Bits(); /* */ $s = 97; case 97: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					_arg$7 = _r$41;
					_r$42 = s.scanComplex(_arg$6, _arg$7); /* */ $s = 98; case 98: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					$r = v$20.SetComplex(_r$42); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 67; continue;
				/* } else { */ case 66:
					_r$43 = val.Type().String(); /* */ $s = 100; case 100: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
					$r = s.errorString("can't scan type: " + _r$43); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
			case 57:
		/* } */ case 23:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.scanOne }; } $f.$ptr = $ptr; $f._6 = _6; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.err = err; $f.i = i; $f.ok = ok; $f.ptr = ptr; $f.s = s; $f.str = str; $f.typ = typ; $f.v = v; $f.v$1 = v$1; $f.v$10 = v$10; $f.v$11 = v$11; $f.v$12 = v$12; $f.v$13 = v$13; $f.v$14 = v$14; $f.v$15 = v$15; $f.v$16 = v$16; $f.v$17 = v$17; $f.v$18 = v$18; $f.v$19 = v$19; $f.v$2 = v$2; $f.v$20 = v$20; $f.v$3 = v$3; $f.v$4 = v$4; $f.v$5 = v$5; $f.v$6 = v$6; $f.v$7 = v$7; $f.v$8 = v$8; $f.v$9 = v$9; $f.val = val; $f.verb = verb; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.scanOne = function(verb, arg) { return this.$val.scanOne(verb, arg); };
	errorHandler = function(errp) {
		var $ptr, _tuple, _tuple$1, e, eof, errp, ok, ok$1, se;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, scanError, true);
			se = $clone(_tuple[0], scanError);
			ok = _tuple[1];
			if (ok) {
				errp.$set(se.err);
			} else {
				_tuple$1 = $assertType(e, $error, true);
				eof = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1 && $interfaceIsEqual(eof, io.EOF)) {
					errp.$set(eof);
				} else {
					$panic(e);
				}
			}
		}
	};
	ss.ptr.prototype.doScan = function(a) {
		var $ptr, _i, _r$2, _ref, a, arg, err, numProcessed, r, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$2 = $f._r$2; _ref = $f._ref; a = $f.a; arg = $f.arg; err = $f.err; numProcessed = $f.numProcessed; r = $f.r; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		numProcessed = 0;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([errorHandler, [(err.$ptr || (err.$ptr = new ptrType$24(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = s.scanOne(118, arg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			numProcessed = numProcessed + (1) >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (s.ssave.nlIsEnd) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ssave.nlIsEnd) { */ case 4:
			/* while (true) { */ case 6:
				_r$2 = s.getRune(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				r = _r$2;
				if ((r === 10) || (r === -1)) {
					/* break; */ $s = 7; continue;
				}
				if (!isSpace(r)) {
					s.errorString("expected newline");
					/* break; */ $s = 7; continue;
				}
			/* } */ $s = 6; continue; case 7:
		/* } */ case 5:
		return [numProcessed, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [numProcessed, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.doScan }; } $f.$ptr = $ptr; $f._i = _i; $f._r$2 = _r$2; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.err = err; $f.numProcessed = numProcessed; $f.r = r; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.doScan = function(a) { return this.$val.doScan(a); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$1, $Bool, $Bool], [], false)}];
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$1], [$Int, $error], false)}];
	ptrType$26.methods = [{prop: "readByte", name: "readByte", pkg: "fmt", typ: $funcType([], [$Uint8, $error], false)}, {prop: "unread", name: "unread", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$1, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	Scanner.init([{prop: "Scan", name: "Scan", pkg: "", typ: $funcType([ScanState, $Int32], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	readRune.init([{prop: "reader", name: "reader", pkg: "fmt", typ: io.Reader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: arrayType, tag: ""}, {prop: "pending", name: "pending", pkg: "fmt", typ: $Int, tag: ""}, {prop: "pendBuf", name: "pendBuf", pkg: "fmt", typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType, 65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new pp.ptr(0, false, false, buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), false, false, arrayType.zero(), new fmt.ptr(arrayType$1.zero(), ptrType$1.nil, 0, 0, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false)));
		}));
		_r = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		intBits = _r;
		_r$1 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		uintptrBits = _r$1;
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			var $ptr;
			return new ss.ptr($ifaceNil, buffer.nil, 0, 0, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path"] = (function() {
	var $pkg = {}, $init, errors, strings, utf8, Base;
	errors = $packages["errors"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	Base = function(path) {
		var $ptr, i, path;
		if (path === "") {
			return ".";
		}
		while (true) {
			if (!(path.length > 0 && (path.charCodeAt((path.length - 1 >> 0)) === 47))) { break; }
			path = path.substring(0, (path.length - 1 >> 0));
		}
		i = strings.LastIndex(path, "/");
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "/";
		}
		return path;
	};
	$pkg.Base = Base;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, StringSlice, sliceType$2, Search, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, Strings;
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", "StringSlice", "sort", null);
	sliceType$2 = $sliceType($String);
	Search = function(n, f) {
		var $ptr, _q, _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchStrings = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	StringSlice.prototype.Search = function(x) {
		var $ptr, _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var $ptr, _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var $ptr, _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var $ptr, _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f.$ptr = $ptr; $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var $ptr, _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var $ptr, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(!((a === c)))) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(!((b === c)))) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(!((b === c)))) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b === c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$2 = ((hi - lo >> 0)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(!((a === b)))) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(!((a === b)))) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a === b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth) {
		var $ptr, _r, _r$1, _tuple, a, b, data, i, maxDepth, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 4:
			maxDepth = maxDepth - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var $ptr, _r, data, i, maxDepth, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; i = $f.i; maxDepth = $f.maxDepth; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		maxDepth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = $imul(maxDepth, (2));
		$r = quickSort(data, 0, n, maxDepth); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.i = i; $f.maxDepth = maxDepth; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	StringSlice.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var $ptr, i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = function(a) {
		var $ptr, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.$ptr = $ptr; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Strings = Strings;
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType, sliceType$1, ptrType$1, Match, scanChunk, matchChunk, getEsc, Glob, glob, hasMeta, Clean, FromSlash, Split, Join, Base, VolumeName, IsAbs, volumeNameLen, join;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	Match = function(pattern, name) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, chunk, err, err$1, err$2, i, matched, name, ok, ok$1, pattern, star, t, t$1;
		matched = false;
		err = $ifaceNil;
		Pattern:
		while (true) {
			if (!(pattern.length > 0)) { break; }
			star = false;
			chunk = "";
			_tuple = scanChunk(pattern);
			star = _tuple[0];
			chunk = _tuple[1];
			pattern = _tuple[2];
			if (star && chunk === "") {
				_tmp = strings.Index(name, "/") < 0;
				_tmp$1 = $ifaceNil;
				matched = _tmp;
				err = _tmp$1;
				return [matched, err];
			}
			_tuple$1 = matchChunk(chunk, name);
			t = _tuple$1[0];
			ok = _tuple$1[1];
			err$1 = _tuple$1[2];
			if (ok && ((t.length === 0) || pattern.length > 0)) {
				name = t;
				continue;
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = false;
				_tmp$3 = err$1;
				matched = _tmp$2;
				err = _tmp$3;
				return [matched, err];
			}
			if (star) {
				i = 0;
				while (true) {
					if (!(i < name.length && !((name.charCodeAt(i) === 47)))) { break; }
					_tuple$2 = matchChunk(chunk, name.substring((i + 1 >> 0)));
					t$1 = _tuple$2[0];
					ok$1 = _tuple$2[1];
					err$2 = _tuple$2[2];
					if (ok$1) {
						if ((pattern.length === 0) && t$1.length > 0) {
							i = i + (1) >> 0;
							continue;
						}
						name = t$1;
						continue Pattern;
					}
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						_tmp$4 = false;
						_tmp$5 = err$2;
						matched = _tmp$4;
						err = _tmp$5;
						return [matched, err];
					}
					i = i + (1) >> 0;
				}
			}
			_tmp$6 = false;
			_tmp$7 = $ifaceNil;
			matched = _tmp$6;
			err = _tmp$7;
			return [matched, err];
		}
		_tmp$8 = name.length === 0;
		_tmp$9 = $ifaceNil;
		matched = _tmp$8;
		err = _tmp$9;
		return [matched, err];
	};
	$pkg.Match = Match;
	scanChunk = function(pattern) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, chunk, i, inrange, pattern, rest, star;
		star = false;
		chunk = "";
		rest = "";
		while (true) {
			if (!(pattern.length > 0 && (pattern.charCodeAt(0) === 42))) { break; }
			pattern = pattern.substring(1);
			star = true;
		}
		inrange = false;
		i = 0;
		i = 0;
		Scan:
		while (true) {
			if (!(i < pattern.length)) { break; }
			_1 = pattern.charCodeAt(i);
			if (_1 === 92) {
				if (true) {
					if ((i + 1 >> 0) < pattern.length) {
						i = i + (1) >> 0;
					}
				}
			} else if (_1 === 91) {
				inrange = true;
			} else if (_1 === 93) {
				inrange = false;
			} else if (_1 === 42) {
				if (!inrange) {
					break Scan;
				}
			}
			i = i + (1) >> 0;
		}
		_tmp = star;
		_tmp$1 = pattern.substring(0, i);
		_tmp$2 = pattern.substring(i);
		star = _tmp;
		chunk = _tmp$1;
		rest = _tmp$2;
		return [star, chunk, rest];
	};
	matchChunk = function(chunk, s) {
		var $ptr, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, _tuple$2, _tuple$3, chunk, err, hi, lo, match, n, n$1, negated, nrange, ok, r, rest, s;
		rest = "";
		ok = false;
		err = $ifaceNil;
		while (true) {
			if (!(chunk.length > 0)) { break; }
			if (s.length === 0) {
				return [rest, ok, err];
			}
			_2 = chunk.charCodeAt(0);
			if (_2 === 91) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				n = _tuple[1];
				s = s.substring(n);
				chunk = chunk.substring(1);
				if (chunk.length === 0) {
					err = $pkg.ErrBadPattern;
					return [rest, ok, err];
				}
				negated = chunk.charCodeAt(0) === 94;
				if (negated) {
					chunk = chunk.substring(1);
				}
				match = false;
				nrange = 0;
				while (true) {
					if (chunk.length > 0 && (chunk.charCodeAt(0) === 93) && nrange > 0) {
						chunk = chunk.substring(1);
						break;
					}
					_tmp = 0;
					_tmp$1 = 0;
					lo = _tmp;
					hi = _tmp$1;
					_tuple$1 = getEsc(chunk);
					lo = _tuple$1[0];
					chunk = _tuple$1[1];
					err = _tuple$1[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [rest, ok, err];
					}
					hi = lo;
					if (chunk.charCodeAt(0) === 45) {
						_tuple$2 = getEsc(chunk.substring(1));
						hi = _tuple$2[0];
						chunk = _tuple$2[1];
						err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [rest, ok, err];
						}
					}
					if (lo <= r && r <= hi) {
						match = true;
					}
					nrange = nrange + (1) >> 0;
				}
				if (match === negated) {
					return [rest, ok, err];
				}
			} else if (_2 === 63) {
				if (s.charCodeAt(0) === 47) {
					return [rest, ok, err];
				}
				_tuple$3 = utf8.DecodeRuneInString(s);
				n$1 = _tuple$3[1];
				s = s.substring(n$1);
				chunk = chunk.substring(1);
			} else if (_2 === 92) {
				if (true) {
					chunk = chunk.substring(1);
					if (chunk.length === 0) {
						err = $pkg.ErrBadPattern;
						return [rest, ok, err];
					}
				}
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			} else {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			}
		}
		_tmp$2 = s;
		_tmp$3 = true;
		_tmp$4 = $ifaceNil;
		rest = _tmp$2;
		ok = _tmp$3;
		err = _tmp$4;
		return [rest, ok, err];
	};
	getEsc = function(chunk) {
		var $ptr, _tuple, chunk, err, n, nchunk, r;
		r = 0;
		nchunk = "";
		err = $ifaceNil;
		if ((chunk.length === 0) || (chunk.charCodeAt(0) === 45) || (chunk.charCodeAt(0) === 93)) {
			err = $pkg.ErrBadPattern;
			return [r, nchunk, err];
		}
		if ((chunk.charCodeAt(0) === 92) && true) {
			chunk = chunk.substring(1);
			if (chunk.length === 0) {
				err = $pkg.ErrBadPattern;
				return [r, nchunk, err];
			}
		}
		_tuple = utf8.DecodeRuneInString(chunk);
		r = _tuple[0];
		n = _tuple[1];
		if ((r === 65533) && (n === 1)) {
			err = $pkg.ErrBadPattern;
		}
		nchunk = chunk.substring(n);
		if (nchunk.length === 0) {
			err = $pkg.ErrBadPattern;
		}
		return [r, nchunk, err];
	};
	Glob = function(pattern) {
		var $ptr, _3, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, dir, err, file, m, matches, pattern, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; d = $f.d; dir = $f.dir; err = $f.err; file = $f.file; m = $f.m; matches = $f.matches; pattern = $f.pattern; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		matches = sliceType.nil;
		err = $ifaceNil;
		if (!hasMeta(pattern)) {
			_tuple = os.Lstat(pattern);
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType.nil;
				_tmp$1 = $ifaceNil;
				matches = _tmp;
				err = _tmp$1;
				return [matches, err];
			}
			_tmp$2 = new sliceType([pattern]);
			_tmp$3 = $ifaceNil;
			matches = _tmp$2;
			err = _tmp$3;
			return [matches, err];
		}
		_tuple$1 = Split(pattern);
		dir = _tuple$1[0];
		file = _tuple$1[1];
		_3 = dir;
		if (_3 === "") {
			dir = ".";
		} else if (_3 === "/") {
		} else {
			dir = dir.substring(0, (dir.length - 1 >> 0));
		}
		/* */ if (!hasMeta(dir)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!hasMeta(dir)) { */ case 1:
			_r = glob(dir, file, sliceType.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			matches = _tuple$2[0];
			err = _tuple$2[1];
			/* */ $s = 4; case 4:
			return [matches, err];
		/* } */ case 2:
		m = sliceType.nil;
		_r$1 = Glob(dir); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$3 = _r$1;
		m = _tuple$3[0];
		err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [matches, err];
		}
		_ref = m;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$2 = glob(d, file, matches); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			matches = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [matches, err];
			}
			_i++;
		/* } */ $s = 6; continue; case 7:
		return [matches, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Glob }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.d = d; $f.dir = dir; $f.err = err; $f.file = file; $f.m = m; $f.matches = matches; $f.pattern = pattern; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Glob = Glob;
	glob = function(dir, pattern, matches) {
		var $ptr, _i, _r, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, d, dir, e, err, err$1, fi, m, matched, matches, n, names, pattern, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; d = $f.d; dir = $f.dir; e = $f.e; err = $f.err; err$1 = $f.err$1; fi = $f.fi; m = $f.m; matched = $f.matched; matches = $f.matches; n = $f.n; names = $f.names; pattern = $f.pattern; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		m = sliceType.nil;
		e = $ifaceNil;
		m = matches;
		_tuple = os.Stat(dir);
		fi = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [m, e];
		}
		_r = fi.IsDir(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			return [m, e];
		/* } */ case 2:
		_tuple$1 = os.Open(dir);
		d = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [m, e];
		}
		$deferred.push([$methodVal(d, "Close"), []]);
		_tuple$2 = d.Readdirnames(-1);
		names = _tuple$2[0];
		$r = sort.Strings(names); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = names;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$3 = Match(pattern, n);
			matched = _tuple$3[0];
			err$1 = _tuple$3[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = m;
				_tmp$1 = err$1;
				m = _tmp;
				e = _tmp$1;
				return [m, e];
			}
			if (matched) {
				m = $append(m, Join(new sliceType([dir, n])));
			}
			_i++;
		}
		return [m, e];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [m, e]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: glob }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.d = d; $f.dir = dir; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.fi = fi; $f.m = m; $f.matched = matched; $f.matches = matches; $f.n = n; $f.names = names; $f.pattern = pattern; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	hasMeta = function(path) {
		var $ptr, path;
		return strings.IndexAny(path, "*?[") >= 0;
	};
	lazybuf.ptr.prototype.index = function(i) {
		var $ptr, b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var $ptr, b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, b.path.substring(0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var $ptr, b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var $ptr, path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Split = function(path) {
		var $ptr, _tmp, _tmp$1, dir, file, i, path, vol;
		dir = "";
		file = "";
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		_tmp = path.substring(0, (i + 1 >> 0));
		_tmp$1 = path.substring((i + 1 >> 0));
		dir = _tmp;
		file = _tmp$1;
		return [dir, file];
	};
	$pkg.Split = Split;
	Join = function(elem) {
		var $ptr, elem;
		return join(elem);
	};
	$pkg.Join = Join;
	Base = function(path) {
		var $ptr, i, path;
		if (path === "") {
			return ".";
		}
		while (true) {
			if (!(path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0))))) { break; }
			path = path.substring(0, (path.length - 1 >> 0));
		}
		path = path.substring(VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "/";
		}
		return path;
	};
	$pkg.Base = Base;
	VolumeName = function(path) {
		var $ptr, path;
		return path.substring(0, volumeNameLen(path));
	};
	$pkg.VolumeName = VolumeName;
	IsAbs = function(path) {
		var $ptr, path;
		return strings.HasPrefix(path, "/");
	};
	$pkg.IsAbs = IsAbs;
	volumeNameLen = function(path) {
		var $ptr, path;
		return 0;
	};
	join = function(elem) {
		var $ptr, _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init([{prop: "path", name: "path", pkg: "path/filepath", typ: $String, tag: ""}, {prop: "buf", name: "buf", pkg: "path/filepath", typ: sliceType$1, tag: ""}, {prop: "w", name: "w", pkg: "path/filepath", typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", pkg: "path/filepath", typ: $String, tag: ""}, {prop: "volLen", name: "volLen", pkg: "path/filepath", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/jessevdk/go-flags"] = (function() {
	var $pkg = {}, $init, bufio, bytes, errors, fmt, io, os, path, filepath, reflect, runtime, sort, strconv, strings, syscall, time, utf8, Arg, Command, Commander, Usage, lookup, commandList, Completion, completions, Completer, completion, Marshaler, Unmarshaler, ErrorType, Error, Group, scanHandler, alignmentInfo, multiTag, Option, Parser, SplitArgument, strArgument, Options, parseState, winsize, sliceType, sliceType$1, ptrType, ptrType$1, ptrType$2, sliceType$2, sliceType$3, sliceType$4, ptrType$3, sliceType$5, ptrType$4, ptrType$5, sliceType$6, ptrType$6, sliceType$7, ptrType$7, sliceType$8, sliceType$9, ptrType$8, sliceType$10, arrayType, arrayType$1, ptrType$9, ptrType$11, funcType, structType, funcType$1, funcType$2, ptrType$12, ptrType$13, mapType, mapType$1, ptrType$14, funcType$3, funcType$4, ptrType$16, mapType$3, ptrType$19, ptrType$20, funcType$5, levenshtein, closestChoice, newCommand, getBase, convertMarshal, convertToString, convertUnmarshal, convert, isPrint, quoteIfNeeded, quoteV, unquoteIfPossible, wrapText, newError, newErrorf, wrapError, newGroup, maxCommandLength, manQuote, formatForMan, writeManPageOptions, writeManPageSubcommands, writeManPageCommand, newMultiTag, argumentStartsOption, argumentIsOption, stripOptionPrefix, splitOption, NewParser, NewNamedParser, getTerminalColumns;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	path = $packages["path"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	utf8 = $packages["unicode/utf8"];
	Arg = $pkg.Arg = $newType(0, $kindStruct, "flags.Arg", "Arg", "github.com/jessevdk/go-flags", function(Name_, Description_, value_, tag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Description = "";
			this.value = new reflect.Value.ptr(ptrType$3.nil, 0, 0);
			this.tag = new multiTag.ptr("", false);
			return;
		}
		this.Name = Name_;
		this.Description = Description_;
		this.value = value_;
		this.tag = tag_;
	});
	Command = $pkg.Command = $newType(0, $kindStruct, "flags.Command", "Command", "github.com/jessevdk/go-flags", function(Group_, Name_, Active_, SubcommandsOptional_, Aliases_, ArgsRequired_, commands_, hasBuiltinHelpGroup_, args_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Group = ptrType$1.nil;
			this.Name = "";
			this.Active = ptrType.nil;
			this.SubcommandsOptional = false;
			this.Aliases = sliceType$3.nil;
			this.ArgsRequired = false;
			this.commands = sliceType$4.nil;
			this.hasBuiltinHelpGroup = false;
			this.args = sliceType$2.nil;
			return;
		}
		this.Group = Group_;
		this.Name = Name_;
		this.Active = Active_;
		this.SubcommandsOptional = SubcommandsOptional_;
		this.Aliases = Aliases_;
		this.ArgsRequired = ArgsRequired_;
		this.commands = commands_;
		this.hasBuiltinHelpGroup = hasBuiltinHelpGroup_;
		this.args = args_;
	});
	Commander = $pkg.Commander = $newType(8, $kindInterface, "flags.Commander", "Commander", "github.com/jessevdk/go-flags", null);
	Usage = $pkg.Usage = $newType(8, $kindInterface, "flags.Usage", "Usage", "github.com/jessevdk/go-flags", null);
	lookup = $pkg.lookup = $newType(0, $kindStruct, "flags.lookup", "lookup", "github.com/jessevdk/go-flags", function(shortNames_, longNames_, commands_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.shortNames = false;
			this.longNames = false;
			this.commands = false;
			return;
		}
		this.shortNames = shortNames_;
		this.longNames = longNames_;
		this.commands = commands_;
	});
	commandList = $pkg.commandList = $newType(12, $kindSlice, "flags.commandList", "commandList", "github.com/jessevdk/go-flags", null);
	Completion = $pkg.Completion = $newType(0, $kindStruct, "flags.Completion", "Completion", "github.com/jessevdk/go-flags", function(Item_, Description_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Item = "";
			this.Description = "";
			return;
		}
		this.Item = Item_;
		this.Description = Description_;
	});
	completions = $pkg.completions = $newType(12, $kindSlice, "flags.completions", "completions", "github.com/jessevdk/go-flags", null);
	Completer = $pkg.Completer = $newType(8, $kindInterface, "flags.Completer", "Completer", "github.com/jessevdk/go-flags", null);
	completion = $pkg.completion = $newType(0, $kindStruct, "flags.completion", "completion", "github.com/jessevdk/go-flags", function(parser_, ShowDescriptions_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parser = ptrType$9.nil;
			this.ShowDescriptions = false;
			return;
		}
		this.parser = parser_;
		this.ShowDescriptions = ShowDescriptions_;
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "flags.Marshaler", "Marshaler", "github.com/jessevdk/go-flags", null);
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "flags.Unmarshaler", "Unmarshaler", "github.com/jessevdk/go-flags", null);
	ErrorType = $pkg.ErrorType = $newType(4, $kindUint, "flags.ErrorType", "ErrorType", "github.com/jessevdk/go-flags", null);
	Error = $pkg.Error = $newType(0, $kindStruct, "flags.Error", "Error", "github.com/jessevdk/go-flags", function(Type_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = 0;
			this.Message = "";
			return;
		}
		this.Type = Type_;
		this.Message = Message_;
	});
	Group = $pkg.Group = $newType(0, $kindStruct, "flags.Group", "Group", "github.com/jessevdk/go-flags", function(ShortDescription_, LongDescription_, Namespace_, parent_, options_, groups_, isBuiltinHelp_, data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ShortDescription = "";
			this.LongDescription = "";
			this.Namespace = "";
			this.parent = $ifaceNil;
			this.options = sliceType$8.nil;
			this.groups = sliceType$9.nil;
			this.isBuiltinHelp = false;
			this.data = $ifaceNil;
			return;
		}
		this.ShortDescription = ShortDescription_;
		this.LongDescription = LongDescription_;
		this.Namespace = Namespace_;
		this.parent = parent_;
		this.options = options_;
		this.groups = groups_;
		this.isBuiltinHelp = isBuiltinHelp_;
		this.data = data_;
	});
	scanHandler = $pkg.scanHandler = $newType(4, $kindFunc, "flags.scanHandler", "scanHandler", "github.com/jessevdk/go-flags", null);
	alignmentInfo = $pkg.alignmentInfo = $newType(0, $kindStruct, "flags.alignmentInfo", "alignmentInfo", "github.com/jessevdk/go-flags", function(maxLongLen_, hasShort_, hasValueName_, terminalColumns_, indent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.maxLongLen = 0;
			this.hasShort = false;
			this.hasValueName = false;
			this.terminalColumns = 0;
			this.indent = false;
			return;
		}
		this.maxLongLen = maxLongLen_;
		this.hasShort = hasShort_;
		this.hasValueName = hasValueName_;
		this.terminalColumns = terminalColumns_;
		this.indent = indent_;
	});
	multiTag = $pkg.multiTag = $newType(0, $kindStruct, "flags.multiTag", "multiTag", "github.com/jessevdk/go-flags", function(value_, cache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = "";
			this.cache = false;
			return;
		}
		this.value = value_;
		this.cache = cache_;
	});
	Option = $pkg.Option = $newType(0, $kindStruct, "flags.Option", "Option", "github.com/jessevdk/go-flags", function(Description_, ShortName_, LongName_, Default_, EnvDefaultKey_, EnvDefaultDelim_, OptionalArgument_, OptionalValue_, Required_, ValueName_, DefaultMask_, group_, field_, value_, iniQuote_, tag_, isSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Description = "";
			this.ShortName = 0;
			this.LongName = "";
			this.Default = sliceType$3.nil;
			this.EnvDefaultKey = "";
			this.EnvDefaultDelim = "";
			this.OptionalArgument = false;
			this.OptionalValue = sliceType$3.nil;
			this.Required = false;
			this.ValueName = "";
			this.DefaultMask = "";
			this.group = ptrType$1.nil;
			this.field = new reflect.StructField.ptr("", "", $ifaceNil, "", 0, sliceType.nil, false);
			this.value = new reflect.Value.ptr(ptrType$3.nil, 0, 0);
			this.iniQuote = false;
			this.tag = new multiTag.ptr("", false);
			this.isSet = false;
			return;
		}
		this.Description = Description_;
		this.ShortName = ShortName_;
		this.LongName = LongName_;
		this.Default = Default_;
		this.EnvDefaultKey = EnvDefaultKey_;
		this.EnvDefaultDelim = EnvDefaultDelim_;
		this.OptionalArgument = OptionalArgument_;
		this.OptionalValue = OptionalValue_;
		this.Required = Required_;
		this.ValueName = ValueName_;
		this.DefaultMask = DefaultMask_;
		this.group = group_;
		this.field = field_;
		this.value = value_;
		this.iniQuote = iniQuote_;
		this.tag = tag_;
		this.isSet = isSet_;
	});
	Parser = $pkg.Parser = $newType(0, $kindStruct, "flags.Parser", "Parser", "github.com/jessevdk/go-flags", function(Command_, Usage_, Options_, NamespaceDelimiter_, UnknownOptionHandler_, internalError_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Command = ptrType.nil;
			this.Usage = "";
			this.Options = 0;
			this.NamespaceDelimiter = "";
			this.UnknownOptionHandler = $throwNilPointerError;
			this.internalError = $ifaceNil;
			return;
		}
		this.Command = Command_;
		this.Usage = Usage_;
		this.Options = Options_;
		this.NamespaceDelimiter = NamespaceDelimiter_;
		this.UnknownOptionHandler = UnknownOptionHandler_;
		this.internalError = internalError_;
	});
	SplitArgument = $pkg.SplitArgument = $newType(8, $kindInterface, "flags.SplitArgument", "SplitArgument", "github.com/jessevdk/go-flags", null);
	strArgument = $pkg.strArgument = $newType(0, $kindStruct, "flags.strArgument", "strArgument", "github.com/jessevdk/go-flags", function(value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = ptrType$5.nil;
			return;
		}
		this.value = value_;
	});
	Options = $pkg.Options = $newType(4, $kindUint, "flags.Options", "Options", "github.com/jessevdk/go-flags", null);
	parseState = $pkg.parseState = $newType(0, $kindStruct, "flags.parseState", "parseState", "github.com/jessevdk/go-flags", function(arg_, args_, retargs_, positional_, err_, command_, lookup_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.arg = "";
			this.args = sliceType$3.nil;
			this.retargs = sliceType$3.nil;
			this.positional = sliceType$2.nil;
			this.err = $ifaceNil;
			this.command = ptrType.nil;
			this.lookup = new lookup.ptr(false, false, false);
			return;
		}
		this.arg = arg_;
		this.args = args_;
		this.retargs = retargs_;
		this.positional = positional_;
		this.err = err_;
		this.command = command_;
		this.lookup = lookup_;
	});
	winsize = $pkg.winsize = $newType(0, $kindStruct, "flags.winsize", "winsize", "github.com/jessevdk/go-flags", function(row_, col_, xpixel_, ypixel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.row = 0;
			this.col = 0;
			this.xpixel = 0;
			this.ypixel = 0;
			return;
		}
		this.row = row_;
		this.col = col_;
		this.xpixel = xpixel_;
		this.ypixel = ypixel_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType(sliceType);
	ptrType = $ptrType(Command);
	ptrType$1 = $ptrType(Group);
	ptrType$2 = $ptrType(Arg);
	sliceType$2 = $sliceType(ptrType$2);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType(ptrType);
	ptrType$3 = $ptrType(reflect.rtype);
	sliceType$5 = $sliceType(Completion);
	ptrType$4 = $ptrType(Option);
	ptrType$5 = $ptrType($String);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(time.Duration);
	sliceType$7 = $sliceType(reflect.Value);
	ptrType$7 = $ptrType(Error);
	sliceType$8 = $sliceType(ptrType$4);
	sliceType$9 = $sliceType(ptrType$1);
	ptrType$8 = $ptrType(reflect.StructField);
	sliceType$10 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$9 = $ptrType(Parser);
	ptrType$11 = $ptrType($error);
	funcType = $funcType([], [$error], false);
	structType = $structType([{prop: "ShowHelp", name: "ShowHelp", pkg: "", typ: funcType, tag: "short:\"h\" long:\"help\" description:\"Show this help message\""}]);
	funcType$1 = $funcType([ptrType], [], false);
	funcType$2 = $funcType([ptrType, ptrType$1], [], false);
	ptrType$12 = $ptrType(lookup);
	ptrType$13 = $ptrType(parseState);
	mapType = $mapType($String, ptrType$4);
	mapType$1 = $mapType($String, ptrType);
	ptrType$14 = $ptrType(completion);
	funcType$3 = $funcType([ptrType$4, $String], [$Bool], false);
	funcType$4 = $funcType([ptrType$1], [], false);
	ptrType$16 = $ptrType(alignmentInfo);
	mapType$3 = $mapType($String, sliceType$3);
	ptrType$19 = $ptrType(multiTag);
	ptrType$20 = $ptrType(bufio.Writer);
	funcType$5 = $funcType([$String, SplitArgument, sliceType$3], [sliceType$3, $error], false);
	Arg.ptr.prototype.isRemaining = function() {
		var $ptr, _r, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = a.value.Type().Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r === 23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Arg.ptr.prototype.isRemaining }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	Arg.prototype.isRemaining = function() { return this.$val.isRemaining(); };
	levenshtein = function(s, t) {
		var $ptr, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, _rune, _rune$1, _rune$2, dists, i, i$1, j, j$1, s, sc, t, tc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$4, x$5, x$6, x$7, x$8, x$9;
		if (s.length === 0) {
			return t.length;
		}
		if (t.length === 0) {
			return s.length;
		}
		dists = $makeSlice(sliceType$1, (s.length + 1 >> 0));
		_ref = dists;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i] = $makeSlice(sliceType, (t.length + 1 >> 0)));
			(x = ((i < 0 || i >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i]), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = i));
			_i++;
		}
		_ref$1 = t;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune = $decodeRune(_ref$1, _i$1);
			j = _i$1;
			(x$1 = (0 >= dists.$length ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + 0]), ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j] = j));
			_i$1 += _rune[1];
		}
		_ref$2 = s;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.length)) { break; }
			_rune$1 = $decodeRune(_ref$2, _i$2);
			i$1 = _i$2;
			sc = _rune$1[0];
			_ref$3 = t;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.length)) { break; }
				_rune$2 = $decodeRune(_ref$3, _i$3);
				j$1 = _i$3;
				tc = _rune$2[0];
				if (sc === tc) {
					(x$3 = (x$4 = i$1 + 1 >> 0, ((x$4 < 0 || x$4 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$4])), x$5 = j$1 + 1 >> 0, ((x$5 < 0 || x$5 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$5] = (x$2 = ((i$1 < 0 || i$1 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i$1]), ((j$1 < 0 || j$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j$1]))));
				} else {
					(x$7 = (x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$8])), x$9 = j$1 + 1 >> 0, ((x$9 < 0 || x$9 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$9] = ((x$6 = ((i$1 < 0 || i$1 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i$1]), ((j$1 < 0 || j$1 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + j$1])) + 1 >> 0)));
					if ((x$10 = (x$11 = i$1 + 1 >> 0, ((x$11 < 0 || x$11 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$11])), ((j$1 < 0 || j$1 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + j$1])) < (x$12 = (x$13 = i$1 + 1 >> 0, ((x$13 < 0 || x$13 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$13])), x$14 = j$1 + 1 >> 0, ((x$14 < 0 || x$14 >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + x$14]))) {
						(x$17 = (x$18 = i$1 + 1 >> 0, ((x$18 < 0 || x$18 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$18])), x$19 = j$1 + 1 >> 0, ((x$19 < 0 || x$19 >= x$17.$length) ? $throwRuntimeError("index out of range") : x$17.$array[x$17.$offset + x$19] = ((x$15 = (x$16 = i$1 + 1 >> 0, ((x$16 < 0 || x$16 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$16])), ((j$1 < 0 || j$1 >= x$15.$length) ? $throwRuntimeError("index out of range") : x$15.$array[x$15.$offset + j$1])) + 1 >> 0)));
					}
					if ((x$20 = ((i$1 < 0 || i$1 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i$1]), x$21 = j$1 + 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? $throwRuntimeError("index out of range") : x$20.$array[x$20.$offset + x$21])) < (x$22 = (x$23 = i$1 + 1 >> 0, ((x$23 < 0 || x$23 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$23])), x$24 = j$1 + 1 >> 0, ((x$24 < 0 || x$24 >= x$22.$length) ? $throwRuntimeError("index out of range") : x$22.$array[x$22.$offset + x$24]))) {
						(x$27 = (x$28 = i$1 + 1 >> 0, ((x$28 < 0 || x$28 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$28])), x$29 = j$1 + 1 >> 0, ((x$29 < 0 || x$29 >= x$27.$length) ? $throwRuntimeError("index out of range") : x$27.$array[x$27.$offset + x$29] = ((x$25 = ((i$1 < 0 || i$1 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + i$1]), x$26 = j$1 + 1 >> 0, ((x$26 < 0 || x$26 >= x$25.$length) ? $throwRuntimeError("index out of range") : x$25.$array[x$25.$offset + x$26])) + 1 >> 0)));
					}
				}
				_i$3 += _rune$2[1];
			}
			_i$2 += _rune$1[1];
		}
		return (x$30 = (x$31 = s.length, ((x$31 < 0 || x$31 >= dists.$length) ? $throwRuntimeError("index out of range") : dists.$array[dists.$offset + x$31])), x$32 = t.length, ((x$32 < 0 || x$32 >= x$30.$length) ? $throwRuntimeError("index out of range") : x$30.$array[x$30.$offset + x$32]));
	};
	closestChoice = function(cmd, choices) {
		var $ptr, _i, _ref, c, choices, cmd, i, l, mincmd, mindist;
		if (choices.$length === 0) {
			return ["", 0];
		}
		mincmd = -1;
		mindist = -1;
		_ref = choices;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = levenshtein(cmd, c);
			if (mincmd < 0 || l < mindist) {
				mindist = l;
				mincmd = i;
			}
			_i++;
		}
		return [((mincmd < 0 || mincmd >= choices.$length) ? $throwRuntimeError("index out of range") : choices.$array[choices.$offset + mincmd]), mindist];
	};
	Command.ptr.prototype.AddCommand = function(command, shortDescription, longDescription, data) {
		var $ptr, _r, c, cmd, command, data, err, longDescription, shortDescription, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; cmd = $f.cmd; command = $f.command; data = $f.data; err = $f.err; longDescription = $f.longDescription; shortDescription = $f.shortDescription; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		cmd = newCommand(command, shortDescription, longDescription, data);
		cmd.Group.parent = c;
		_r = cmd.scan(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		c.commands = $append(c.commands, cmd);
		return [cmd, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.AddCommand }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.cmd = cmd; $f.command = command; $f.data = data; $f.err = err; $f.longDescription = longDescription; $f.shortDescription = shortDescription; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.AddCommand = function(command, shortDescription, longDescription, data) { return this.$val.AddCommand(command, shortDescription, longDescription, data); };
	Command.ptr.prototype.AddGroup = function(shortDescription, longDescription, data) {
		var $ptr, _r, c, data, err, group, longDescription, shortDescription, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; data = $f.data; err = $f.err; group = $f.group; longDescription = $f.longDescription; shortDescription = $f.shortDescription; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		group = newGroup(shortDescription, longDescription, data);
		group.parent = c;
		_r = group.scanType(c.scanSubcommandHandler(group)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		c.Group.groups = $append(c.Group.groups, group);
		return [group, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.AddGroup }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.data = data; $f.err = err; $f.group = group; $f.longDescription = longDescription; $f.shortDescription = shortDescription; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.AddGroup = function(shortDescription, longDescription, data) { return this.$val.AddGroup(shortDescription, longDescription, data); };
	Command.ptr.prototype.Commands = function() {
		var $ptr, c;
		c = this;
		return c.commands;
	};
	Command.prototype.Commands = function() { return this.$val.Commands(); };
	Command.ptr.prototype.Find = function(name) {
		var $ptr, _i, _ref, c, cc, name;
		c = this;
		_ref = c.commands;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			cc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (cc.match(name)) {
				return cc;
			}
			_i++;
		}
		return ptrType.nil;
	};
	Command.prototype.Find = function(name) { return this.$val.Find(name); };
	Command.ptr.prototype.Args = function() {
		var $ptr, c, ret;
		c = this;
		ret = $makeSlice(sliceType$2, c.args.$length);
		$copySlice(ret, c.args);
		return ret;
	};
	Command.prototype.Args = function() { return this.$val.Args(); };
	newCommand = function(name, shortDescription, longDescription, data) {
		var $ptr, data, longDescription, name, shortDescription;
		return new Command.ptr(newGroup(shortDescription, longDescription, data), name, ptrType.nil, false, sliceType$3.nil, false, sliceType$4.nil, false, sliceType$2.nil);
	};
	Command.ptr.prototype.scanSubcommandHandler = function(parentg) {
		var $ptr, c, f, parentg;
		c = this;
		f = (function $b(realval, sfield) {
			var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, aliases, arg, err, err$1, err$2, field, i, longDescription, m, mtag, name, positional, ptrval, realval, sfield, shortDescription, stype, subc, subcommand, subcommandsOptional, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; aliases = $f.aliases; arg = $f.arg; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; field = $f.field; i = $f.i; longDescription = $f.longDescription; m = $f.m; mtag = $f.mtag; name = $f.name; positional = $f.positional; ptrval = $f.ptrval; realval = $f.realval; sfield = $f.sfield; shortDescription = $f.shortDescription; stype = $f.stype; subc = $f.subc; subcommand = $f.subcommand; subcommandsOptional = $f.subcommandsOptional; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			realval = realval;
			mtag = $clone(newMultiTag(sfield.Tag), multiTag);
			_r = mtag.Parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [true, err];
			}
			_r$1 = mtag.Get("positional-args"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			positional = _r$1;
			/* */ if (!((positional.length === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((positional.length === 0))) { */ case 3:
				stype = realval.Type();
				i = 0;
				/* while (true) { */ case 5:
					_r$2 = stype.NumField(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* if (!(i < _r$2)) { break; } */ if(!(i < _r$2)) { $s = 6; continue; }
					_r$3 = stype.Field(i); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					field = $clone(_r$3, reflect.StructField);
					m = $clone(newMultiTag(field.Tag), multiTag);
					_r$4 = m.Parse(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err$1 = _r$4;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						return [true, err$1];
					}
					_r$5 = m.Get("positional-arg-name"); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					name = _r$5;
					if (name.length === 0) {
						name = field.Name;
					}
					_r$6 = m.Get("description"); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = realval.Field(i); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					arg = new Arg.ptr(name, _r$6, $clone(_r$7, reflect.Value), $clone(m, multiTag));
					c.args = $append(c.args, arg);
					_r$8 = mtag.Get("required"); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!((_r$8.length === 0))) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (!((_r$8.length === 0))) { */ case 13:
						c.ArgsRequired = true;
					/* } */ case 14:
					i = i + (1) >> 0;
				/* } */ $s = 5; continue; case 6:
				return [true, $ifaceNil];
			/* } */ case 4:
			_r$9 = mtag.Get("command"); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			subcommand = _r$9;
			/* */ if (!((subcommand.length === 0))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!((subcommand.length === 0))) { */ case 17:
				_r$10 = reflect.NewAt(realval.Type(), realval.UnsafeAddr()); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				ptrval = _r$10;
				_r$11 = mtag.Get("description"); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				shortDescription = _r$11;
				_r$12 = mtag.Get("long-description"); /* */ $s = 21; case 21: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				longDescription = _r$12;
				_r$13 = mtag.Get("subcommands-optional"); /* */ $s = 22; case 22: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				subcommandsOptional = _r$13;
				_r$14 = mtag.GetMany("alias"); /* */ $s = 23; case 23: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				aliases = _r$14;
				_arg = subcommand;
				_arg$1 = shortDescription;
				_arg$2 = longDescription;
				_r$15 = ptrval.Interface(); /* */ $s = 24; case 24: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_arg$3 = _r$15;
				_r$16 = c.AddCommand(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 25; case 25: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_tuple = _r$16;
				subc = _tuple[0];
				err$2 = _tuple[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return [true, err$2];
				}
				if (subcommandsOptional.length > 0) {
					subc.SubcommandsOptional = true;
				}
				if (aliases.$length > 0) {
					subc.Aliases = aliases;
				}
				return [true, $ifaceNil];
			/* } */ case 18:
			_r$17 = parentg.scanSubGroupHandler(realval, sfield); /* */ $s = 26; case 26: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ $s = 27; case 27:
			return _r$17;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.aliases = aliases; $f.arg = arg; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.field = field; $f.i = i; $f.longDescription = longDescription; $f.m = m; $f.mtag = mtag; $f.name = name; $f.positional = positional; $f.ptrval = ptrval; $f.realval = realval; $f.sfield = sfield; $f.shortDescription = shortDescription; $f.stype = stype; $f.subc = subc; $f.subcommand = subcommand; $f.subcommandsOptional = subcommandsOptional; $f.$s = $s; $f.$r = $r; return $f;
		});
		return f;
	};
	Command.prototype.scanSubcommandHandler = function(parentg) { return this.$val.scanSubcommandHandler(parentg); };
	Command.ptr.prototype.scan = function() {
		var $ptr, _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.Group.scanType(c.scanSubcommandHandler(c.Group)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.scan = function() { return this.$val.scan(); };
	Command.ptr.prototype.eachCommand = function(f, recurse) {
		var $ptr, _i, _ref, c, cc, f, recurse, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; c = $f.c; cc = $f.cc; f = $f.f; recurse = $f.recurse; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		$r = f(c); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = c.commands;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			cc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (recurse) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (recurse) { */ case 4:
				$r = cc.eachCommand(f, true); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = f(cc); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.eachCommand }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.c = c; $f.cc = cc; $f.f = f; $f.recurse = recurse; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.eachCommand = function(f, recurse) { return this.$val.eachCommand(f, recurse); };
	Command.ptr.prototype.eachActiveGroup = function(f) {
		var $ptr, c, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		f = [f];
		c[0] = this;
		$r = c[0].Group.eachGroup((function(c, f) { return function $b(g) {
			var $ptr, g, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = f[0](c[0], g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
		}; })(c, f)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(c[0].Active === ptrType.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(c[0].Active === ptrType.nil)) { */ case 2:
			$r = c[0].Active.eachActiveGroup(f[0]); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.eachActiveGroup }; } $f.$ptr = $ptr; $f.c = c; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.eachActiveGroup = function(f) { return this.$val.eachActiveGroup(f); };
	Command.ptr.prototype.addHelpGroups = function(showHelp) {
		var $ptr, _i, _r, _ref, c, cc, showHelp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; cc = $f.cc; showHelp = $f.showHelp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		/* */ if (!c.hasBuiltinHelpGroup) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!c.hasBuiltinHelpGroup) { */ case 1:
			_r = c.addHelpGroup(showHelp); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			c.hasBuiltinHelpGroup = true;
		/* } */ case 2:
		_ref = c.commands;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			cc = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = cc.addHelpGroups(showHelp); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.addHelpGroups }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.cc = cc; $f.showHelp = showHelp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.addHelpGroups = function(showHelp) { return this.$val.addHelpGroups(showHelp); };
	Command.ptr.prototype.makeLookup = function() {
		var $ptr, _tuple, _tuple$1, c, cmd, grp, ok, ok$1, parent, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; cmd = $f.cmd; grp = $f.grp; ok = $f.ok; ok$1 = $f.ok$1; parent = $f.parent; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = [ret];
		c = this;
		ret[0] = new lookup.ptr({}, {}, {});
		parent = c.Group.parent;
		/* while (true) { */ case 1:
			/* if (!(!($interfaceIsEqual(parent, $ifaceNil)))) { break; } */ if(!(!($interfaceIsEqual(parent, $ifaceNil)))) { $s = 2; continue; }
			_tuple = $assertType(parent, ptrType, true);
			cmd = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				$r = cmd.fillLookup(ret[0], true); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_tuple$1 = $assertType(parent, ptrType$1, true);
			grp = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (ok$1) {
				parent = grp;
			} else {
				parent = $ifaceNil;
			}
		/* } */ $s = 1; continue; case 2:
		$r = c.fillLookup(ret[0], false); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ret[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.makeLookup }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.cmd = cmd; $f.grp = grp; $f.ok = ok; $f.ok$1 = ok$1; $f.parent = parent; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.makeLookup = function() { return this.$val.makeLookup(); };
	Command.ptr.prototype.fillLookup = function(ret, onlyOptions) {
		var $ptr, _i, _i$1, _key, _key$1, _ref, _ref$1, a, c, onlyOptions, ret, subcommand, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; c = $f.c; onlyOptions = $f.onlyOptions; ret = $f.ret; subcommand = $f.subcommand; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = [ret];
		c = this;
		$r = c.Group.eachGroup((function(ret) { return function(g) {
			var $ptr, _i, _key, _key$1, _ref, g, option;
			_ref = g.options;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (!((option.ShortName === 0))) {
					_key = $encodeRune(option.ShortName); (ret[0].shortNames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: option };
				}
				if (option.LongName.length > 0) {
					_key$1 = option.LongNameWithNamespace(); (ret[0].longNames || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: option };
				}
				_i++;
			}
		}; })(ret)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (onlyOptions) {
			return;
		}
		_ref = c.commands;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			subcommand = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_key = subcommand.Name; (ret[0].commands || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: subcommand };
			_ref$1 = subcommand.Aliases;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				a = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_key$1 = a; (ret[0].commands || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: subcommand };
				_i$1++;
			}
			_i++;
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.fillLookup }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.c = c; $f.onlyOptions = onlyOptions; $f.ret = ret; $f.subcommand = subcommand; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.fillLookup = function(ret, onlyOptions) { return this.$val.fillLookup(ret, onlyOptions); };
	commandList.prototype.Less = function(i, j) {
		var $ptr, c, i, j;
		c = this;
		return ((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i]).Name < ((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j]).Name;
	};
	$ptrType(commandList).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	commandList.prototype.Len = function() {
		var $ptr, c;
		c = this;
		return c.$length;
	};
	$ptrType(commandList).prototype.Len = function() { return this.$get().Len(); };
	commandList.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, c, i, j;
		c = this;
		_tmp = ((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j]);
		_tmp$1 = ((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i]);
		((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i] = _tmp);
		((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j] = _tmp$1);
	};
	$ptrType(commandList).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	Command.ptr.prototype.sortedCommands = function() {
		var $ptr, c, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		ret = $makeSlice(commandList, c.commands.$length);
		$copySlice(ret, c.commands);
		$r = sort.Sort(ret); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return $subslice(new sliceType$4(ret.$array), ret.$offset, ret.$offset + ret.$length);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.sortedCommands }; } $f.$ptr = $ptr; $f.c = c; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.sortedCommands = function() { return this.$val.sortedCommands(); };
	Command.ptr.prototype.match = function(name) {
		var $ptr, _i, _ref, c, name, v;
		c = this;
		if (c.Name === name) {
			return true;
		}
		_ref = c.Aliases;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === name) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Command.prototype.match = function(name) { return this.$val.match(name); };
	Command.ptr.prototype.hasCliOptions = function() {
		var $ptr, c, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = [ret];
		c = this;
		ret[0] = false;
		$r = c.Group.eachGroup((function(ret) { return function(g) {
			var $ptr, _i, _ref, g, opt;
			if (g.isBuiltinHelp) {
				return;
			}
			_ref = g.options;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				opt = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (opt.canCli()) {
					ret[0] = true;
				}
				_i++;
			}
		}; })(ret)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ret[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.hasCliOptions }; } $f.$ptr = $ptr; $f.c = c; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.hasCliOptions = function() { return this.$val.hasCliOptions(); };
	Command.ptr.prototype.fillParseState = function(s) {
		var $ptr, _r, c, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; c = $f.c; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		s.positional = $makeSlice(sliceType$2, c.args.$length);
		$copySlice(s.positional, c.args);
		_r = c.makeLookup(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		lookup.copy(s.lookup, _r);
		s.command = c;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.fillParseState }; } $f.$ptr = $ptr; $f._r = _r; $f.c = c; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.fillParseState = function(s) { return this.$val.fillParseState(s); };
	completions.prototype.Len = function() {
		var $ptr, c;
		c = this;
		return c.$length;
	};
	$ptrType(completions).prototype.Len = function() { return this.$get().Len(); };
	completions.prototype.Less = function(i, j) {
		var $ptr, c, i, j;
		c = this;
		return ((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i]).Item < ((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j]).Item;
	};
	$ptrType(completions).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	completions.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, c, i, j;
		c = this;
		_tmp = $clone(((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j]), Completion);
		_tmp$1 = $clone(((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i]), Completion);
		Completion.copy(((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i]), _tmp);
		Completion.copy(((j < 0 || j >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + j]), _tmp$1);
	};
	$ptrType(completions).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	completion.ptr.prototype.skipPositional = function(s, n) {
		var $ptr, c, n, s;
		c = this;
		if (n >= s.positional.$length) {
			s.positional = sliceType$2.nil;
		} else {
			s.positional = $subslice(s.positional, n);
		}
	};
	completion.prototype.skipPositional = function(s, n) { return this.$val.skipPositional(s, n); };
	completion.ptr.prototype.completeOptionNames = function(names, prefix, match) {
		var $ptr, _entry, _i, _keys, _ref, c, k, match, n, names, opt, prefix;
		c = this;
		n = $makeSlice(sliceType$5, 0, $keys(names).length);
		_ref = names;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			opt = _entry.v;
			if (strings.HasPrefix(k, match)) {
				n = $append(n, new Completion.ptr(prefix + k, opt.Description));
			}
			_i++;
		}
		return n;
	};
	completion.prototype.completeOptionNames = function(names, prefix, match) { return this.$val.completeOptionNames(names, prefix, match); };
	completion.ptr.prototype.completeLongNames = function(s, prefix, match) {
		var $ptr, c, match, prefix, s;
		c = this;
		return c.completeOptionNames(s.lookup.longNames, prefix, match);
	};
	completion.prototype.completeLongNames = function(s, prefix, match) { return this.$val.completeLongNames(s, prefix, match); };
	completion.ptr.prototype.completeShortNames = function(s, prefix, match) {
		var $ptr, c, match, prefix, s;
		c = this;
		if (!((match.length === 0))) {
			return new sliceType$5([new Completion.ptr(prefix + match, "")]);
		}
		return c.completeOptionNames(s.lookup.shortNames, prefix, match);
	};
	completion.prototype.completeShortNames = function(s, prefix, match) { return this.$val.completeShortNames(s, prefix, match); };
	completion.ptr.prototype.completeCommands = function(s, match) {
		var $ptr, _i, _ref, c, cmd, match, n, s;
		c = this;
		n = $makeSlice(sliceType$5, 0, s.command.commands.$length);
		_ref = s.command.commands;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			cmd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!($interfaceIsEqual(cmd.Group.data, c)) && strings.HasPrefix(cmd.Name, match)) {
				n = $append(n, new Completion.ptr(cmd.Name, cmd.Group.ShortDescription));
			}
			_i++;
		}
		return n;
	};
	completion.prototype.completeCommands = function(s, match) { return this.$val.completeCommands(s, match); };
	completion.ptr.prototype.completeValue = function(value, prefix, match) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, c, cmp, i, i$1, match, ok, prefix, ret, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; cmp = $f.cmp; i = $f.i; i$1 = $f.i$1; match = $f.match; ok = $f.ok; prefix = $f.prefix; ret = $f.ret; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		c = this;
		_r = value.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		ret = sliceType$5.nil;
		_tuple = $assertType(i, Completer, true);
		cmp = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ if (value.CanAddr()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (ok) { */ case 2:
			_r$1 = cmp.Complete(match); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ret = _r$1;
			$s = 4; continue;
		/* } else if (value.CanAddr()) { */ case 3:
			_r$2 = value.Addr().Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(_r$2, Completer, true);
			cmp = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok) { */ case 7:
				_r$3 = cmp.Complete(match); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				ret = _r$3;
			/* } */ case 8:
		/* } */ case 4:
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			v = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Completion);
			((i$1 < 0 || i$1 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$1]).Item = prefix + v.Item;
			_i++;
		}
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: completion.ptr.prototype.completeValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.cmp = cmp; $f.i = i; $f.i$1 = i$1; $f.match = match; $f.ok = ok; $f.prefix = prefix; $f.ret = ret; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	completion.prototype.completeValue = function(value, prefix, match) { return this.$val.completeValue(value, prefix, match); };
	completion.ptr.prototype.completeArg = function(arg, prefix, match) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, arg, c, match, prefix, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; arg = $f.arg; c = $f.c; match = $f.match; prefix = $f.prefix; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = arg.isRemaining(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = arg.value.Type().Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = reflect.New(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = c.completeValue(_r$2, prefix, match); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$3;
		/* } */ case 2:
		_r$4 = c.completeValue(arg.value, prefix, match); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: completion.ptr.prototype.completeArg }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.arg = arg; $f.c = c; $f.match = match; $f.prefix = prefix; $f.$s = $s; $f.$r = $r; return $f;
	};
	completion.prototype.completeArg = function(arg, prefix, match) { return this.$val.completeArg(arg, prefix, match); };
	completion.ptr.prototype.complete = function(args) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _rune, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _v, _v$1, _v$2, arg, args, argument, argument$1, c, canarg, cmd, i, islong, islong$1, lastarg, n, o, ok, opt, opt$1, optname, optname$1, prefix, prefix$1, r, ret, rname, s, sname, sname$1, split, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; arg = $f.arg; args = $f.args; argument = $f.argument; argument$1 = $f.argument$1; c = $f.c; canarg = $f.canarg; cmd = $f.cmd; i = $f.i; islong = $f.islong; islong$1 = $f.islong$1; lastarg = $f.lastarg; n = $f.n; o = $f.o; ok = $f.ok; opt = $f.opt; opt$1 = $f.opt$1; optname = $f.optname; optname$1 = $f.optname$1; prefix = $f.prefix; prefix$1 = $f.prefix$1; r = $f.r; ret = $f.ret; rname = $f.rname; s = $f.s; sname = $f.sname; sname$1 = $f.sname$1; split = $f.split; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (args.$length === 0) {
			args = new sliceType$3([""]);
		}
		s = new parseState.ptr("", args, sliceType$3.nil, sliceType$2.nil, $ifaceNil, ptrType.nil, new lookup.ptr(false, false, false));
		$r = c.parser.Command.fillParseState(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		opt = ptrType$4.nil;
		/* while (true) { */ case 2:
			/* if (!(s.args.$length > 1)) { break; } */ if(!(s.args.$length > 1)) { $s = 3; continue; }
			arg = s.pop();
			if (!(((((c.parser.Options & 4) >>> 0)) === 0)) && arg === "--") {
				opt = ptrType$4.nil;
				c.skipPositional(s, s.args.$length - 1 >> 0);
				/* break; */ $s = 3; continue;
			}
			/* */ if (argumentIsOption(arg)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (argumentIsOption(arg)) { */ case 4:
				_tuple = stripOptionPrefix(arg);
				prefix = _tuple[0];
				optname = _tuple[1];
				islong = _tuple[2];
				_tuple$1 = splitOption(prefix, optname, islong);
				optname = _tuple$1[0];
				argument = _tuple$1[2];
				/* */ if (argument === ptrType$5.nil) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (argument === ptrType$5.nil) { */ case 7:
					o = ptrType$4.nil;
					canarg = true;
					/* */ if (islong) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (islong) { */ case 9:
						o = (_entry = s.lookup.longNames[$String.keyFor(optname)], _entry !== undefined ? _entry.v : ptrType$4.nil);
						$s = 11; continue;
					/* } else { */ case 10:
						_ref = optname;
						_i = 0;
						/* while (true) { */ case 12:
							/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 13; continue; }
							_rune = $decodeRune(_ref, _i);
							i = _i;
							r = _rune[0];
							sname = $encodeRune(r);
							o = (_entry$1 = s.lookup.shortNames[$String.keyFor(sname)], _entry$1 !== undefined ? _entry$1.v : ptrType$4.nil);
							if (o === ptrType$4.nil) {
								/* break; */ $s = 13; continue;
							}
							if (!(i === 0)) { _v = false; $s = 16; continue s; }
							_r = o.canArgument(); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							_v = _r; case 16:
							/* */ if (_v && !((optname.length === sname.length))) { $s = 14; continue; }
							/* */ $s = 15; continue;
							/* if (_v && !((optname.length === sname.length))) { */ case 14:
								canarg = false;
								/* break; */ $s = 13; continue;
							/* } */ case 15:
							_i += _rune[1];
						/* } */ $s = 12; continue; case 13:
					/* } */ case 11:
					/* */ if (o === ptrType$4.nil && !(((((c.parser.Options & 32) >>> 0)) === 0))) { $s = 18; continue; }
					if (!(!(o === ptrType$4.nil))) { _v$1 = false; $s = 21; continue s; }
					_r$1 = o.canArgument(); /* */ $s = 22; case 22: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v$1 = _r$1; case 21:
					/* */ if (_v$1 && !o.OptionalArgument && canarg) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (o === ptrType$4.nil && !(((((c.parser.Options & 32) >>> 0)) === 0))) { */ case 18:
						opt = ptrType$4.nil;
						c.skipPositional(s, s.args.$length - 1 >> 0);
						/* break; */ $s = 3; continue;
						$s = 20; continue;
					/* } else if (_v$1 && !o.OptionalArgument && canarg) { */ case 19:
						if (s.args.$length > 1) {
							s.pop();
						} else {
							opt = o;
						}
					/* } */ case 20:
				/* } */ case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				/* */ if (s.positional.$length > 0) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (s.positional.$length > 0) { */ case 23:
					_r$2 = (x = s.positional, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).isRemaining(); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!_r$2) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (!_r$2) { */ case 26:
						s.positional = $subslice(s.positional, 1);
					/* } */ case 27:
					$s = 25; continue;
				/* } else { */ case 24:
					_tuple$2 = (_entry$2 = s.lookup.commands[$String.keyFor(arg)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType.nil, false]);
					cmd = _tuple$2[0];
					ok = _tuple$2[1];
					/* */ if (ok) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (ok) { */ case 29:
						$r = cmd.fillParseState(s); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 30:
				/* } */ case 25:
				opt = ptrType$4.nil;
			/* } */ case 6:
		/* } */ $s = 2; continue; case 3:
		lastarg = (x$1 = s.args, x$2 = s.args.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2]));
		ret = sliceType$5.nil;
		/* */ if (!(opt === ptrType$4.nil)) { $s = 32; continue; }
		/* */ if (argumentStartsOption(lastarg)) { $s = 33; continue; }
		/* */ if (s.positional.$length > 0) { $s = 34; continue; }
		/* */ if (s.command.commands.$length > 0) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!(opt === ptrType$4.nil)) { */ case 32:
			_r$3 = c.completeValue(opt.value, "", lastarg); /* */ $s = 37; case 37: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			ret = _r$3;
			$s = 36; continue;
		/* } else if (argumentStartsOption(lastarg)) { */ case 33:
			_tuple$3 = stripOptionPrefix(lastarg);
			prefix$1 = _tuple$3[0];
			optname$1 = _tuple$3[1];
			islong$1 = _tuple$3[2];
			_tuple$4 = splitOption(prefix$1, optname$1, islong$1);
			optname$1 = _tuple$4[0];
			split = _tuple$4[1];
			argument$1 = _tuple$4[2];
			/* */ if (argument$1 === ptrType$5.nil && !islong$1) { $s = 38; continue; }
			/* */ if (!(argument$1 === ptrType$5.nil)) { $s = 39; continue; }
			/* */ if (islong$1) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (argument$1 === ptrType$5.nil && !islong$1) { */ case 38:
				_tuple$5 = utf8.DecodeRuneInString(optname$1);
				rname = _tuple$5[0];
				n = _tuple$5[1];
				sname$1 = $encodeRune(rname);
				opt$1 = (_entry$3 = s.lookup.shortNames[$String.keyFor(sname$1)], _entry$3 !== undefined ? _entry$3.v : ptrType$4.nil);
				if (!(!(opt$1 === ptrType$4.nil))) { _v$2 = false; $s = 46; continue s; }
				_r$4 = opt$1.canArgument(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_v$2 = _r$4; case 46:
				/* */ if (_v$2) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (_v$2) { */ case 43:
					_r$5 = c.completeValue(opt$1.value, prefix$1 + sname$1, optname$1.substring(n)); /* */ $s = 48; case 48: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					ret = _r$5;
					$s = 45; continue;
				/* } else { */ case 44:
					ret = c.completeShortNames(s, prefix$1, optname$1);
				/* } */ case 45:
				$s = 42; continue;
			/* } else if (!(argument$1 === ptrType$5.nil)) { */ case 39:
				if (islong$1) {
					opt = (_entry$4 = s.lookup.longNames[$String.keyFor(optname$1)], _entry$4 !== undefined ? _entry$4.v : ptrType$4.nil);
				} else {
					opt = (_entry$5 = s.lookup.shortNames[$String.keyFor(optname$1)], _entry$5 !== undefined ? _entry$5.v : ptrType$4.nil);
				}
				/* */ if (!(opt === ptrType$4.nil)) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (!(opt === ptrType$4.nil)) { */ case 49:
					_r$6 = c.completeValue(opt.value, prefix$1 + optname$1 + split, argument$1.$get()); /* */ $s = 51; case 51: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					ret = _r$6;
				/* } */ case 50:
				$s = 42; continue;
			/* } else if (islong$1) { */ case 40:
				ret = c.completeLongNames(s, prefix$1, optname$1);
				$s = 42; continue;
			/* } else { */ case 41:
				ret = c.completeShortNames(s, prefix$1, optname$1);
			/* } */ case 42:
			$s = 36; continue;
		/* } else if (s.positional.$length > 0) { */ case 34:
			_r$7 = c.completeArg((x$3 = s.positional, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])), "", lastarg); /* */ $s = 52; case 52: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			ret = _r$7;
			$s = 36; continue;
		/* } else if (s.command.commands.$length > 0) { */ case 35:
			ret = c.completeCommands(s, lastarg);
		/* } */ case 36:
		$r = sort.Sort($subslice(new completions(ret.$array), ret.$offset, ret.$offset + ret.$length)); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: completion.ptr.prototype.complete }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.arg = arg; $f.args = args; $f.argument = argument; $f.argument$1 = argument$1; $f.c = c; $f.canarg = canarg; $f.cmd = cmd; $f.i = i; $f.islong = islong; $f.islong$1 = islong$1; $f.lastarg = lastarg; $f.n = n; $f.o = o; $f.ok = ok; $f.opt = opt; $f.opt$1 = opt$1; $f.optname = optname; $f.optname$1 = optname$1; $f.prefix = prefix; $f.prefix$1 = prefix$1; $f.r = r; $f.ret = ret; $f.rname = rname; $f.s = s; $f.sname = sname; $f.sname$1 = sname$1; $f.split = split; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	completion.prototype.complete = function(args) { return this.$val.complete(args); };
	completion.ptr.prototype.execute = function(args) {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, args, c, maxl, ret, v, v$1, v$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; args = $f.args; c = $f.c; maxl = $f.maxl; ret = $f.ret; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.complete(args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ret = _r;
		/* */ if (c.ShowDescriptions && ret.$length > 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c.ShowDescriptions && ret.$length > 1) { */ case 2:
			maxl = 0;
			_ref = ret;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				v = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Completion);
				if (v.Item.length > maxl) {
					maxl = v.Item.length;
				}
				_i++;
			}
			_ref$1 = ret;
			_i$1 = 0;
			/* while (true) { */ case 5:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
				v$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Completion);
				_r$1 = fmt.Printf("%s", new sliceType$6([new $String(v$1.Item)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				/* */ if (v$1.Description.length > 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (v$1.Description.length > 0) { */ case 8:
					_r$2 = fmt.Printf("%s  # %s", new sliceType$6([new $String(strings.Repeat(" ", maxl - v$1.Item.length >> 0)), new $String(v$1.Description)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 9:
				_r$3 = fmt.Printf("\n", new sliceType$6([])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_i$1++;
			/* } */ $s = 5; continue; case 6:
			$s = 4; continue;
		/* } else { */ case 3:
			_ref$2 = ret;
			_i$2 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 13; continue; }
				v$2 = $clone(((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]), Completion);
				_r$4 = fmt.Println(new sliceType$6([new $String(v$2.Item)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_i$2++;
			/* } */ $s = 12; continue; case 13:
		/* } */ case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: completion.ptr.prototype.execute }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.args = args; $f.c = c; $f.maxl = maxl; $f.ret = ret; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	completion.prototype.execute = function(args) { return this.$val.execute(args); };
	getBase = function(options, base) {
		var $ptr, _r, _tuple, base, err, ivbase, options, sbase, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; base = $f.base; err = $f.err; ivbase = $f.ivbase; options = $f.options; sbase = $f.sbase; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		options = $clone(options, multiTag);
		_r = options.Get("base"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		sbase = _r;
		err = $ifaceNil;
		ivbase = new $Int64(0, 0);
		if (!(sbase === "")) {
			_tuple = strconv.ParseInt(sbase, 10, 32);
			ivbase = _tuple[0];
			err = _tuple[1];
			base = ((ivbase.$low + ((ivbase.$high >> 31) * 4294967296)) >> 0);
		}
		return [base, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getBase }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.base = base; $f.err = err; $f.ivbase = ivbase; $f.options = options; $f.sbase = sbase; $f.$s = $s; $f.$r = $r; return $f;
	};
	convertMarshal = function(val) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, err, marshaler, ok, ret, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; marshaler = $f.marshaler; ok = $f.ok; ret = $f.ret; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = val;
		_r = val.Type().NumMethod(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r > 0 && val.CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r > 0 && val.CanInterface()) { */ case 1:
			_r$1 = val.Interface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$1, Marshaler, true);
			marshaler = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 5:
				_r$2 = marshaler.MarshalFlag(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				ret = _tuple$1[0];
				err = _tuple$1[1];
				return [true, ret, err];
			/* } */ case 6:
		/* } */ case 2:
		return [false, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertMarshal }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.marshaler = marshaler; $f.ok = ok; $f.ret = ret; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	convertToString = function(val, options) {
		var $ptr, _1, _arg, _arg$1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, base, base$1, err, err$1, err$2, err$3, err$4, i, i$1, item, item$1, key, keyitem, ok, options, ret, ret$1, ret$2, stringer, tp, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; base = $f.base; base$1 = $f.base$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; i$1 = $f.i$1; item = $f.item; item$1 = $f.item$1; key = $f.key; keyitem = $f.keyitem; ok = $f.ok; options = $f.options; ret = $f.ret; ret$1 = $f.ret$1; ret$2 = $f.ret$2; stringer = $f.stringer; tp = $f.tp; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		options = $clone(options, multiTag);
		val = val;
		_r = convertMarshal(val); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ok = _tuple[0];
		ret = _tuple[1];
		err = _tuple[2];
		if (ok) {
			return [ret, err];
		}
		tp = val.Type();
		_r$1 = reflect.TypeOf(ptrType$6.nil).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(tp, _r$1)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(tp, _r$1)) { */ case 2:
			_r$2 = val.Interface(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			stringer = $assertType(_r$2, fmt.Stringer);
			_r$3 = stringer.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return [_r$3, $ifaceNil];
		/* } */ case 3:
			_r$4 = tp.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_1 = _r$4;
			/* */ if (_1 === 24) { $s = 10; continue; }
			/* */ if (_1 === 1) { $s = 11; continue; }
			/* */ if ((_1 === 2) || (_1 === 3) || (_1 === 4) || (_1 === 5) || (_1 === 6)) { $s = 12; continue; }
			/* */ if ((_1 === 7) || (_1 === 8) || (_1 === 9) || (_1 === 10) || (_1 === 11)) { $s = 13; continue; }
			/* */ if ((_1 === 13) || (_1 === 14)) { $s = 14; continue; }
			/* */ if (_1 === 23) { $s = 15; continue; }
			/* */ if (_1 === 21) { $s = 16; continue; }
			/* */ if (_1 === 22) { $s = 17; continue; }
			/* */ if (_1 === 20) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_1 === 24) { */ case 10:
				_r$5 = val.String(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 21; case 21:
				return [_r$5, $ifaceNil];
			/* } else if (_1 === 1) { */ case 11:
				if (val.Bool()) {
					return ["true", $ifaceNil];
				}
				return ["false", $ifaceNil];
			/* } else if ((_1 === 2) || (_1 === 3) || (_1 === 4) || (_1 === 5) || (_1 === 6)) { */ case 12:
				_r$6 = getBase(options, 10); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				base = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return ["", err$1];
				}
				return [strconv.FormatInt(val.Int(), base), $ifaceNil];
			/* } else if ((_1 === 7) || (_1 === 8) || (_1 === 9) || (_1 === 10) || (_1 === 11)) { */ case 13:
				_r$7 = getBase(options, 10); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$2 = _r$7;
				base$1 = _tuple$2[0];
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return ["", err$2];
				}
				return [strconv.FormatUint(val.Uint(), base$1), $ifaceNil];
			/* } else if ((_1 === 13) || (_1 === 14)) { */ case 14:
				_arg = val.Float();
				_r$8 = tp.Bits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_arg$1 = _r$8;
				_r$9 = strconv.FormatFloat(_arg, 103, -1, _arg$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ $s = 26; case 26:
				return [_r$9, $ifaceNil];
			/* } else if (_1 === 23) { */ case 15:
				if (val.Len() === 0) {
					return ["", $ifaceNil];
				}
				ret$1 = "[";
				i = 0;
				/* while (true) { */ case 27:
					/* if (!(i < val.Len())) { break; } */ if(!(i < val.Len())) { $s = 28; continue; }
					if (!((i === 0))) {
						ret$1 = ret$1 + (", ");
					}
					_r$10 = val.Index(i); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = convertToString(_r$10, options); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$3 = _r$11;
					item = _tuple$3[0];
					err$3 = _tuple$3[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						return ["", err$3];
					}
					ret$1 = ret$1 + (item);
					i = i + (1) >> 0;
				/* } */ $s = 27; continue; case 28:
				return [ret$1 + "]", $ifaceNil];
			/* } else if (_1 === 21) { */ case 16:
				ret$2 = "{";
				_r$12 = val.MapKeys(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_ref = _r$12;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$1 = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (!((i$1 === 0))) {
						ret$2 = ret$2 + (", ");
					}
					_r$13 = convertToString(key, options); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$4 = _r$13;
					keyitem = _tuple$4[0];
					err$4 = _tuple$4[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						return ["", err$4];
					}
					_r$14 = val.MapIndex(key); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$15 = convertToString(_r$14, options); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_tuple$5 = _r$15;
					item$1 = _tuple$5[0];
					err$4 = _tuple$5[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						return ["", err$4];
					}
					ret$2 = ret$2 + (keyitem + ":" + item$1);
					_i++;
				/* } */ $s = 32; continue; case 33:
				return [ret$2 + "}", $ifaceNil];
			/* } else if (_1 === 22) { */ case 17:
				_r$16 = reflect.Indirect(val); /* */ $s = 37; case 37: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				_r$17 = convertToString(_r$16, options); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 39; case 39:
				return _r$17;
			/* } else if (_1 === 20) { */ case 18:
				/* */ if (!val.IsNil()) { $s = 40; continue; }
				/* */ $s = 41; continue;
				/* if (!val.IsNil()) { */ case 40:
					_r$18 = val.Elem(); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					_r$19 = convertToString(_r$18, options); /* */ $s = 43; case 43: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					/* */ $s = 44; case 44:
					return _r$19;
				/* } */ case 41:
			/* } */ case 19:
		case 8:
		return ["", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertToString }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.base = base; $f.base$1 = base$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.item$1 = item$1; $f.key = key; $f.keyitem = keyitem; $f.ok = ok; $f.options = options; $f.ret = ret; $f.ret$1 = ret$1; $f.ret$2 = ret$2; $f.stringer = stringer; $f.tp = tp; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	convertUnmarshal = function(val, retval) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, ok, retval, unmarshaler, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; ok = $f.ok; retval = $f.retval; unmarshaler = $f.unmarshaler; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		retval = retval;
		_r = retval.Type().NumMethod(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r > 0 && retval.CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r > 0 && retval.CanInterface()) { */ case 1:
			_r$1 = retval.Interface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = $assertType(_r$1, Unmarshaler, true);
			unmarshaler = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 5:
				_r$2 = unmarshaler.UnmarshalFlag(val); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return [true, _r$2];
			/* } */ case 6:
		/* } */ case 2:
		_r$3 = retval.Type().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 22)) && retval.CanAddr()) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((_r$3 === 22)) && retval.CanAddr()) { */ case 9:
			_r$4 = convertUnmarshal(val, retval.Addr()); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$4;
		/* } */ case 10:
		_r$5 = retval.Type().Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if ((_r$5 === 20) && !retval.IsNil()) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ((_r$5 === 20) && !retval.IsNil()) { */ case 14:
			_arg = val;
			_r$6 = retval.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg$1 = _r$6;
			_r$7 = convertUnmarshal(_arg, _arg$1); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return _r$7;
		/* } */ case 15:
		return [false, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertUnmarshal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.ok = ok; $f.retval = retval; $f.unmarshaler = unmarshaler; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	convert = function(val, retval, options) {
		var $ptr, _2, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, base, base$1, elemtp, elemval, elemvalptr, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, key, keytp, keyval, ok, options, parsed, parsed$1, parsed$2, parsed$3, parts, retval, tp, val, value, valuetp, valueval, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; base = $f.base; base$1 = $f.base$1; elemtp = $f.elemtp; elemval = $f.elemval; elemvalptr = $f.elemvalptr; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; err$8 = $f.err$8; key = $f.key; keytp = $f.keytp; keyval = $f.keyval; ok = $f.ok; options = $f.options; parsed = $f.parsed; parsed$1 = $f.parsed$1; parsed$2 = $f.parsed$2; parsed$3 = $f.parsed$3; parts = $f.parts; retval = $f.retval; tp = $f.tp; val = $f.val; value = $f.value; valuetp = $f.valuetp; valueval = $f.valueval; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		options = $clone(options, multiTag);
		retval = retval;
		_r = convertUnmarshal(val, retval); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ok = _tuple[0];
		err = _tuple[1];
		if (ok) {
			return err;
		}
		tp = retval.Type();
		_r$1 = reflect.TypeOf(ptrType$6.nil).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(tp, _r$1)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(tp, _r$1)) { */ case 2:
			_tuple$1 = time.ParseDuration(val);
			parsed = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			retval.SetInt(new $Int64(parsed.$high, parsed.$low));
			return $ifaceNil;
		/* } */ case 3:
			_r$2 = tp.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_2 = _r$2;
			/* */ if (_2 === 24) { $s = 7; continue; }
			/* */ if (_2 === 1) { $s = 8; continue; }
			/* */ if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { $s = 9; continue; }
			/* */ if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11)) { $s = 10; continue; }
			/* */ if ((_2 === 13) || (_2 === 14)) { $s = 11; continue; }
			/* */ if (_2 === 23) { $s = 12; continue; }
			/* */ if (_2 === 21) { $s = 13; continue; }
			/* */ if (_2 === 22) { $s = 14; continue; }
			/* */ if (_2 === 20) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_2 === 24) { */ case 7:
				retval.SetString(val);
				$s = 16; continue;
			/* } else if (_2 === 1) { */ case 8:
				if (val === "") {
					retval.SetBool(true);
				} else {
					_tuple$2 = strconv.ParseBool(val);
					b = _tuple$2[0];
					err$2 = _tuple$2[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						return err$2;
					}
					retval.SetBool(b);
				}
				$s = 16; continue;
			/* } else if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { */ case 9:
				_r$3 = getBase(options, 10); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				base = _tuple$3[0];
				err$3 = _tuple$3[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					return err$3;
				}
				_arg = val;
				_arg$1 = base;
				_r$4 = tp.Bits(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$2 = _r$4;
				_r$5 = strconv.ParseInt(_arg, _arg$1, _arg$2); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$4 = _r$5;
				parsed$1 = _tuple$4[0];
				err$3 = _tuple$4[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					return err$3;
				}
				retval.SetInt(parsed$1);
				$s = 16; continue;
			/* } else if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11)) { */ case 10:
				_r$6 = getBase(options, 10); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$5 = _r$6;
				base$1 = _tuple$5[0];
				err$4 = _tuple$5[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
				_arg$3 = val;
				_arg$4 = base$1;
				_r$7 = tp.Bits(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$5 = _r$7;
				_r$8 = strconv.ParseUint(_arg$3, _arg$4, _arg$5); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$6 = _r$8;
				parsed$2 = _tuple$6[0];
				err$4 = _tuple$6[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
				retval.SetUint(parsed$2);
				$s = 16; continue;
			/* } else if ((_2 === 13) || (_2 === 14)) { */ case 11:
				_arg$6 = val;
				_r$9 = tp.Bits(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$7 = _r$9;
				_r$10 = strconv.ParseFloat(_arg$6, _arg$7); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_tuple$7 = _r$10;
				parsed$3 = _tuple$7[0];
				err$5 = _tuple$7[1];
				if (!($interfaceIsEqual(err$5, $ifaceNil))) {
					return err$5;
				}
				retval.SetFloat(parsed$3);
				$s = 16; continue;
			/* } else if (_2 === 23) { */ case 12:
				_r$11 = tp.Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				elemtp = _r$11;
				_r$12 = reflect.New(elemtp); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				elemvalptr = _r$12;
				_r$13 = reflect.Indirect(elemvalptr); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				elemval = _r$13;
				_r$14 = convert(val, elemval, options); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				err$6 = _r$14;
				if (!($interfaceIsEqual(err$6, $ifaceNil))) {
					return err$6;
				}
				_r$15 = reflect.Append(retval, new sliceType$7([elemval])); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$r = retval.Set(_r$15); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if (_2 === 21) { */ case 13:
				parts = strings.SplitN(val, ":", 2);
				key = (0 >= parts.$length ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]);
				value = "";
				if (parts.$length === 2) {
					value = (1 >= parts.$length ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 1]);
				}
				_r$16 = tp.Key(); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				keytp = _r$16;
				_r$17 = reflect.New(keytp); /* */ $s = 32; case 32: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				keyval = _r$17;
				_r$18 = convert(key, keyval, options); /* */ $s = 33; case 33: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				err$7 = _r$18;
				if (!($interfaceIsEqual(err$7, $ifaceNil))) {
					return err$7;
				}
				_r$19 = tp.Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				valuetp = _r$19;
				_r$20 = reflect.New(valuetp); /* */ $s = 35; case 35: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				valueval = _r$20;
				_r$21 = convert(value, valueval, options); /* */ $s = 36; case 36: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				err$8 = _r$21;
				if (!($interfaceIsEqual(err$8, $ifaceNil))) {
					return err$8;
				}
				/* */ if (retval.IsNil()) { $s = 37; continue; }
				/* */ $s = 38; continue;
				/* if (retval.IsNil()) { */ case 37:
					_r$22 = reflect.MakeMap(tp); /* */ $s = 39; case 39: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					$r = retval.Set(_r$22); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 38:
				_r$23 = reflect.Indirect(keyval); /* */ $s = 41; case 41: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_arg$8 = _r$23;
				_r$24 = reflect.Indirect(valueval); /* */ $s = 42; case 42: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_arg$9 = _r$24;
				$r = retval.SetMapIndex(_arg$8, _arg$9); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 16; continue;
			/* } else if (_2 === 22) { */ case 14:
				/* */ if (retval.IsNil()) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (retval.IsNil()) { */ case 44:
					_r$25 = retval.Type().Elem(); /* */ $s = 46; case 46: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_r$26 = reflect.New(_r$25); /* */ $s = 47; case 47: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					$r = retval.Set(_r$26); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 45:
				_arg$10 = val;
				_r$27 = reflect.Indirect(retval); /* */ $s = 49; case 49: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_arg$11 = _r$27;
				_arg$12 = options;
				_r$28 = convert(_arg$10, _arg$11, _arg$12); /* */ $s = 50; case 50: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				/* */ $s = 51; case 51:
				return _r$28;
			/* } else if (_2 === 20) { */ case 15:
				/* */ if (!retval.IsNil()) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (!retval.IsNil()) { */ case 52:
					_arg$13 = val;
					_r$29 = retval.Elem(); /* */ $s = 54; case 54: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_arg$14 = _r$29;
					_arg$15 = options;
					_r$30 = convert(_arg$13, _arg$14, _arg$15); /* */ $s = 55; case 55: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					/* */ $s = 56; case 56:
					return _r$30;
				/* } */ case 53:
			/* } */ case 16:
		case 5:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convert }; } $f.$ptr = $ptr; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.base = base; $f.base$1 = base$1; $f.elemtp = elemtp; $f.elemval = elemval; $f.elemvalptr = elemvalptr; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.err$8 = err$8; $f.key = key; $f.keytp = keytp; $f.keyval = keyval; $f.ok = ok; $f.options = options; $f.parsed = parsed; $f.parsed$1 = parsed$1; $f.parsed$2 = parsed$2; $f.parsed$3 = parsed$3; $f.parts = parts; $f.retval = retval; $f.tp = tp; $f.val = val; $f.value = value; $f.valuetp = valuetp; $f.valueval = valueval; $f.$s = $s; $f.$r = $r; return $f;
	};
	isPrint = function(s) {
		var $ptr, _i, _ref, _rune, c, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (!strconv.IsPrint(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	quoteIfNeeded = function(s) {
		var $ptr, s;
		if (!isPrint(s)) {
			return strconv.Quote(s);
		}
		return s;
	};
	quoteV = function(s) {
		var $ptr, _i, _ref, i, ret, s, v;
		ret = $makeSlice(sliceType$3, s.$length);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i] = strconv.Quote(v));
			_i++;
		}
		return ret;
	};
	unquoteIfPossible = function(s) {
		var $ptr, s;
		if ((s.length === 0) || !((s.charCodeAt(0) === 34))) {
			return [s, $ifaceNil];
		}
		return strconv.Unquote(s);
	};
	wrapText = function(s, l, prefix) {
		var $ptr, _r, _r$1, _r$2, l, pos, prefix, ret, s, suffix, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; l = $f.l; pos = $f.pos; prefix = $f.prefix; ret = $f.ret; s = $f.s; suffix = $f.suffix; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = "";
		_r = strings.TrimSpace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		/* while (true) { */ case 2:
			/* if (!(s.length > l)) { break; } */ if(!(s.length > l)) { $s = 3; continue; }
			suffix = "";
			pos = strings.LastIndex(s.substring(0, l), " ");
			if (pos < 0) {
				pos = l - 1 >> 0;
				suffix = "-\n";
			}
			if (!((ret.length === 0))) {
				ret = ret + ("\n" + prefix);
			}
			_r$1 = strings.TrimSpace(s.substring(0, pos)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ret = ret + (_r$1 + suffix);
			_r$2 = strings.TrimSpace(s.substring(pos)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = _r$2;
		/* } */ $s = 2; continue; case 3:
		if (s.length > 0) {
			if (!((ret.length === 0))) {
				ret = ret + ("\n" + prefix);
			}
			return ret + s;
		}
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wrapText }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.l = l; $f.pos = pos; $f.prefix = prefix; $f.ret = ret; $f.s = s; $f.suffix = suffix; $f.$s = $s; $f.$r = $r; return $f;
	};
	ErrorType.prototype.String = function() {
		var $ptr, _1, e;
		e = this.$val;
		_1 = e;
		if (_1 === 0) {
			return "unknown";
		} else if (_1 === 1) {
			return "expected argument";
		} else if (_1 === 2) {
			return "unknown flag";
		} else if (_1 === 3) {
			return "unknown group";
		} else if (_1 === 4) {
			return "marshal";
		} else if (_1 === 5) {
			return "help";
		} else if (_1 === 6) {
			return "no argument for bool";
		} else if (_1 === 7) {
			return "required";
		} else if (_1 === 8) {
			return "short name too long";
		} else if (_1 === 9) {
			return "duplicated flag";
		} else if (_1 === 10) {
			return "tag";
		} else if (_1 === 11) {
			return "command required";
		} else if (_1 === 12) {
			return "unknown command";
		}
		return "unrecognized error type";
	};
	$ptrType(ErrorType).prototype.String = function() { return new ErrorType(this.$get()).String(); };
	Error.ptr.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return e.Message;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	newError = function(tp, message) {
		var $ptr, message, tp;
		return new Error.ptr(tp, message);
	};
	newErrorf = function(tp, format, args) {
		var $ptr, _arg, _arg$1, _r, _r$1, args, format, tp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; args = $f.args; format = $f.format; tp = $f.tp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = tp;
		_r = fmt.Sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = newError(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newErrorf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.format = format; $f.tp = tp; $f.$s = $s; $f.$r = $r; return $f;
	};
	wrapError = function(err) {
		var $ptr, _arg, _r, _r$1, _tuple, err, ok, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ok = $f.ok; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(err, ptrType$7, true);
		ret = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_r = err.Error(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg = _r;
			_r$1 = newError(0, _arg); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 2:
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wrapError }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ok = ok; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.ptr.prototype.AddGroup = function(shortDescription, longDescription, data) {
		var $ptr, _r, data, err, g, group, longDescription, shortDescription, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; err = $f.err; g = $f.g; group = $f.group; longDescription = $f.longDescription; shortDescription = $f.shortDescription; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		group = newGroup(shortDescription, longDescription, data);
		group.parent = g;
		_r = group.scan(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		g.groups = $append(g.groups, group);
		return [group, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.AddGroup }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.err = err; $f.g = g; $f.group = group; $f.longDescription = longDescription; $f.shortDescription = shortDescription; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.AddGroup = function(shortDescription, longDescription, data) { return this.$val.AddGroup(shortDescription, longDescription, data); };
	Group.ptr.prototype.Groups = function() {
		var $ptr, g;
		g = this;
		return g.groups;
	};
	Group.prototype.Groups = function() { return this.$val.Groups(); };
	Group.ptr.prototype.Options = function() {
		var $ptr, g;
		g = this;
		return g.options;
	};
	Group.prototype.Options = function() { return this.$val.Options(); };
	Group.ptr.prototype.Find = function(shortDescription) {
		var $ptr, _r, g, lshortDescription, ret, shortDescription, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; g = $f.g; lshortDescription = $f.lshortDescription; ret = $f.ret; shortDescription = $f.shortDescription; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = [g];
		lshortDescription = [lshortDescription];
		ret = [ret];
		g[0] = this;
		_r = strings.ToLower(shortDescription); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		lshortDescription[0] = _r;
		ret[0] = ptrType$1.nil;
		$r = g[0].eachGroup((function(g, lshortDescription, ret) { return function $b(gg) {
			var $ptr, _r$1, _v, gg, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$1 = $f._r$1; _v = $f._v; gg = $f.gg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!(!(gg === g[0]))) { _v = false; $s = 3; continue s; }
			_r$1 = strings.ToLower(gg.ShortDescription); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 === lshortDescription[0]; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				ret[0] = gg;
			/* } */ case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$1 = _r$1; $f._v = _v; $f.gg = gg; $f.$s = $s; $f.$r = $r; return $f;
		}; })(g, lshortDescription, ret)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ret[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.Find }; } $f.$ptr = $ptr; $f._r = _r; $f.g = g; $f.lshortDescription = lshortDescription; $f.ret = ret; $f.shortDescription = shortDescription; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.Find = function(shortDescription) { return this.$val.Find(shortDescription); };
	newGroup = function(shortDescription, longDescription, data) {
		var $ptr, data, longDescription, shortDescription;
		return new Group.ptr(shortDescription, longDescription, "", $ifaceNil, sliceType$8.nil, sliceType$9.nil, false, data);
	};
	Group.ptr.prototype.eachGroup = function(f) {
		var $ptr, _i, _ref, f, g, gg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; f = $f.f; g = $f.g; gg = $f.gg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$r = f(g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = g.groups;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			gg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = gg.eachGroup(f); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.eachGroup }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.f = f; $f.g = g; $f.gg = gg; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.eachGroup = function(f) { return this.$val.eachGroup(f); };
	Group.ptr.prototype.scanStruct = function(realval, sfield, handler) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, def, defaultMask, description, err, err$1, err$2, err$3, field, fld, g, handler, i, kind, longname, mtag, ok, option, optional, optionalValue, rc, realval, required, sfield, short$1, shortname, stype, valueName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; def = $f.def; defaultMask = $f.defaultMask; description = $f.description; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; field = $f.field; fld = $f.fld; g = $f.g; handler = $f.handler; i = $f.i; kind = $f.kind; longname = $f.longname; mtag = $f.mtag; ok = $f.ok; option = $f.option; optional = $f.optional; optionalValue = $f.optionalValue; rc = $f.rc; realval = $f.realval; required = $f.required; sfield = $f.sfield; short$1 = $f.short$1; shortname = $f.shortname; stype = $f.stype; valueName = $f.valueName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		realval = realval;
		g = this;
		stype = realval.Type();
		/* */ if (!(sfield === ptrType$8.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(sfield === ptrType$8.nil)) { */ case 1:
			_r = handler(realval, sfield); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ok = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			} else if (ok) {
				return $ifaceNil;
			}
		/* } */ case 2:
		i = 0;
		/* while (true) { */ case 4:
			_r$1 = stype.NumField(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* if (!(i < _r$1)) { break; } */ if(!(i < _r$1)) { $s = 5; continue; }
			field = [field];
			_r$2 = stype.Field(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			field[0] = $clone(_r$2, reflect.StructField);
			/* */ if (!(field[0].PkgPath === "")) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!(field[0].PkgPath === "")) { */ case 8:
				i = i + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 9:
			mtag = $clone(newMultiTag(field[0].Tag), multiTag);
			_r$3 = mtag.Parse(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err$1 = _r$3;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			_r$4 = mtag.Get("no-flag"); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!(_r$4 === "")) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!(_r$4 === "")) { */ case 11:
				i = i + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 12:
			_r$5 = field[0].Type.Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			kind = _r$5;
			_r$6 = realval.Field(i); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			fld = _r$6;
			/* */ if (kind === 25) { $s = 16; continue; }
			if (!(kind === 22)) { _v = false; $s = 19; continue s; }
			_r$7 = field[0].Type.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = _r$7.Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v = _r$8 === 25; case 19:
			/* */ if (_v) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (kind === 25) { */ case 16:
				_r$9 = g.scanStruct(fld, field[0], handler); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				err$2 = _r$9;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return err$2;
				}
				$s = 18; continue;
			/* } else if (_v) { */ case 17:
				/* */ if (fld.IsNil()) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (fld.IsNil()) { */ case 23:
					_r$10 = fld.Type().Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = reflect.New(_r$10); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = fld.Set(_r$11); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
				_r$12 = reflect.Indirect(fld); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_r$13 = g.scanStruct(_r$12, field[0], handler); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				err$3 = _r$13;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					return err$3;
				}
			/* } */ case 18:
			_r$14 = mtag.Get("long"); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			longname = _r$14;
			_r$15 = mtag.Get("short"); /* */ $s = 31; case 31: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			shortname = _r$15;
			if (!(longname === "" && shortname === "")) { _v$1 = false; $s = 34; continue s; }
			_r$16 = mtag.Get("ini-name"); /* */ $s = 35; case 35: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_v$1 = _r$16 === ""; case 34:
			/* */ if (_v$1) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (_v$1) { */ case 32:
				i = i + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 33:
			short$1 = 0;
			rc = utf8.RuneCountInString(shortname);
			/* */ if (rc > 1) { $s = 36; continue; }
			/* */ if (rc === 1) { $s = 37; continue; }
			/* */ $s = 38; continue;
			/* if (rc > 1) { */ case 36:
				_r$17 = newErrorf(8, "short names can only be 1 character long, not `%s'", new sliceType$6([new $String(shortname)])); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 40; case 40:
				return _r$17;
			/* } else if (rc === 1) { */ case 37:
				_tuple$1 = utf8.DecodeRuneInString(shortname);
				short$1 = _tuple$1[0];
			/* } */ case 38:
			_r$18 = mtag.Get("description"); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			description = _r$18;
			_r$19 = mtag.GetMany("default"); /* */ $s = 42; case 42: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			def = _r$19;
			_r$20 = mtag.GetMany("optional-value"); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			optionalValue = _r$20;
			_r$21 = mtag.Get("value-name"); /* */ $s = 44; case 44: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			valueName = _r$21;
			_r$22 = mtag.Get("default-mask"); /* */ $s = 45; case 45: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			defaultMask = _r$22;
			_r$23 = mtag.Get("optional"); /* */ $s = 46; case 46: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			optional = !(_r$23 === "");
			_r$24 = mtag.Get("required"); /* */ $s = 47; case 47: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			required = !(_r$24 === "");
			_r$25 = mtag.Get("env"); /* */ $s = 48; case 48: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = mtag.Get("env-delim"); /* */ $s = 49; case 49: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$27 = realval.Field(i); /* */ $s = 50; case 50: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			option = new Option.ptr(description, short$1, longname, def, _r$25, _r$26, optional, optionalValue, required, valueName, defaultMask, g, $clone(field[0], reflect.StructField), $clone(_r$27, reflect.Value), false, $clone(mtag, multiTag), false);
			g.options = $append(g.options, option);
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.scanStruct }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f.def = def; $f.defaultMask = defaultMask; $f.description = description; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.field = field; $f.fld = fld; $f.g = g; $f.handler = handler; $f.i = i; $f.kind = kind; $f.longname = longname; $f.mtag = mtag; $f.ok = ok; $f.option = option; $f.optional = optional; $f.optionalValue = optionalValue; $f.rc = rc; $f.realval = realval; $f.required = required; $f.sfield = sfield; $f.short$1 = short$1; $f.shortname = shortname; $f.stype = stype; $f.valueName = valueName; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.scanStruct = function(realval, sfield, handler) { return this.$val.scanStruct(realval, sfield, handler); };
	Group.ptr.prototype.checkForDuplicateFlags = function() {
		var $ptr, duplicateError, g, longNames, shortNames, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; duplicateError = $f.duplicateError; g = $f.g; longNames = $f.longNames; shortNames = $f.shortNames; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		duplicateError = [duplicateError];
		longNames = [longNames];
		shortNames = [shortNames];
		g = this;
		shortNames[0] = {};
		longNames[0] = {};
		duplicateError[0] = ptrType$7.nil;
		$r = g.eachGroup((function(duplicateError, longNames, shortNames) { return function $b(g$1) {
			var $ptr, _entry, _entry$1, _i, _key, _key$1, _r, _r$1, _ref, _tuple, _tuple$1, g$1, longName, ok, ok$1, option, otherOption, otherOption$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; g$1 = $f.g$1; longName = $f.longName; ok = $f.ok; ok$1 = $f.ok$1; option = $f.option; otherOption = $f.otherOption; otherOption$1 = $f.otherOption$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = g$1.options;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				/* */ if (!(option.LongName === "")) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!(option.LongName === "")) { */ case 3:
					longName = option.LongNameWithNamespace();
					_tuple = (_entry = longNames[0][$String.keyFor(longName)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
					otherOption = _tuple[0];
					ok = _tuple[1];
					/* */ if (ok) { $s = 5; continue; }
					/* */ $s = 6; continue;
					/* if (ok) { */ case 5:
						_r = newErrorf(9, "option `%s' uses the same long name as option `%s'", new sliceType$6([option, otherOption])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						duplicateError[0] = _r;
						return;
					/* } */ case 6:
					_key = longName; (longNames[0] || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: option };
				/* } */ case 4:
				/* */ if (!((option.ShortName === 0))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((option.ShortName === 0))) { */ case 8:
					_tuple$1 = (_entry$1 = shortNames[0][$Int32.keyFor(option.ShortName)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
					otherOption$1 = _tuple$1[0];
					ok$1 = _tuple$1[1];
					/* */ if (ok$1) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (ok$1) { */ case 10:
						_r$1 = newErrorf(9, "option `%s' uses the same short name as option `%s'", new sliceType$6([option, otherOption$1])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						duplicateError[0] = _r$1;
						return;
					/* } */ case 11:
					_key$1 = option.ShortName; (shortNames[0] || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: option };
				/* } */ case 9:
				_i++;
			/* } */ $s = 1; continue; case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.g$1 = g$1; $f.longName = longName; $f.ok = ok; $f.ok$1 = ok$1; $f.option = option; $f.otherOption = otherOption; $f.otherOption$1 = otherOption$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(duplicateError, longNames, shortNames)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return duplicateError[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.checkForDuplicateFlags }; } $f.$ptr = $ptr; $f.duplicateError = duplicateError; $f.g = g; $f.longNames = longNames; $f.shortNames = shortNames; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.checkForDuplicateFlags = function() { return this.$val.checkForDuplicateFlags(); };
	Group.ptr.prototype.scanSubGroupHandler = function(realval, sfield) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, description, err, err$1, g, group, mtag, ptrval, realval, sfield, subgroup, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; description = $f.description; err = $f.err; err$1 = $f.err$1; g = $f.g; group = $f.group; mtag = $f.mtag; ptrval = $f.ptrval; realval = $f.realval; sfield = $f.sfield; subgroup = $f.subgroup; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		realval = realval;
		g = this;
		mtag = $clone(newMultiTag(sfield.Tag), multiTag);
		_r = mtag.Parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [true, err];
		}
		_r$1 = mtag.Get("group"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		subgroup = _r$1;
		/* */ if (!((subgroup.length === 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((subgroup.length === 0))) { */ case 3:
			_r$2 = reflect.NewAt(realval.Type(), realval.UnsafeAddr()); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			ptrval = _r$2;
			_r$3 = mtag.Get("description"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			description = _r$3;
			_arg = subgroup;
			_arg$1 = description;
			_r$4 = ptrval.Interface(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$2 = _r$4;
			_r$5 = g.AddGroup(_arg, _arg$1, _arg$2); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			group = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [true, err$1];
			}
			_r$6 = mtag.Get("namespace"); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			group.Namespace = _r$6;
			return [true, $ifaceNil];
		/* } */ case 4:
		return [false, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.scanSubGroupHandler }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.description = description; $f.err = err; $f.err$1 = err$1; $f.g = g; $f.group = group; $f.mtag = mtag; $f.ptrval = ptrval; $f.realval = realval; $f.sfield = sfield; $f.subgroup = subgroup; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.scanSubGroupHandler = function(realval, sfield) { return this.$val.scanSubGroupHandler(realval, sfield); };
	Group.ptr.prototype.scanType = function(handler) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, err, err$1, g, handler, ptrval, realval, stype, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; err = $f.err; err$1 = $f.err$1; g = $f.g; handler = $f.handler; ptrval = $f.ptrval; realval = $f.realval; stype = $f.stype; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = reflect.ValueOf(g.data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ptrval = _r;
		_r$1 = ptrval.Type().Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!((_r$1 === 22))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((_r$1 === 22))) { */ case 2:
			$panic($pkg.ErrNotPointerToStruct);
		/* } */ case 3:
		_r$2 = ptrval.Type().Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		stype = _r$2;
		_r$3 = stype.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 25))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!((_r$3 === 25))) { */ case 6:
			$panic($pkg.ErrNotPointerToStruct);
		/* } */ case 7:
		_r$4 = reflect.Indirect(ptrval); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		realval = _r$4;
		_r$5 = g.scanStruct(realval, ptrType$8.nil, handler); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		err = _r$5;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r$6 = g.checkForDuplicateFlags(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		err$1 = _r$6;
		if (!(err$1 === ptrType$7.nil)) {
			return err$1;
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.scanType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.err = err; $f.err$1 = err$1; $f.g = g; $f.handler = handler; $f.ptrval = ptrval; $f.realval = realval; $f.stype = stype; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.scanType = function(handler) { return this.$val.scanType(handler); };
	Group.ptr.prototype.scan = function() {
		var $ptr, _r, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.scanType($methodVal(g, "scanSubGroupHandler")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Group.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._r = _r; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	Group.prototype.scan = function() { return this.$val.scan(); };
	alignmentInfo.ptr.prototype.descriptionStart = function() {
		var $ptr, a, ret;
		a = this;
		ret = a.maxLongLen + 2 >> 0;
		if (a.hasShort) {
			ret = ret + (2) >> 0;
		}
		if (a.maxLongLen > 0) {
			ret = ret + (4) >> 0;
		}
		if (a.hasValueName) {
			ret = ret + (3) >> 0;
		}
		return ret;
	};
	alignmentInfo.prototype.descriptionStart = function() { return this.$val.descriptionStart(); };
	alignmentInfo.ptr.prototype.updateLen = function(name, indent) {
		var $ptr, a, indent, l, name;
		a = this;
		l = utf8.RuneCountInString(name);
		if (indent) {
			l = l + 4 >> 0;
		}
		if (l > a.maxLongLen) {
			a.maxLongLen = l;
		}
	};
	alignmentInfo.prototype.updateLen = function(name, indent) { return this.$val.updateLen(name, indent); };
	Parser.ptr.prototype.getAlignmentInfo = function() {
		var $ptr, p, prevcmd, ret, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; prevcmd = $f.prevcmd; ret = $f.ret; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		prevcmd = [prevcmd];
		ret = [ret];
		p[0] = this;
		ret[0] = new alignmentInfo.ptr(0, false, false, getTerminalColumns(), false);
		if (ret[0].terminalColumns <= 0) {
			ret[0].terminalColumns = 80;
		}
		prevcmd[0] = ptrType.nil;
		$r = p[0].Command.eachActiveGroup((function(p, prevcmd, ret) { return function(c, grp) {
			var $ptr, _i, _i$1, _ref, _ref$1, arg, c, grp, info;
			if (!(c === prevcmd[0])) {
				_ref = c.args;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					ret[0].updateLen(arg.Name, !(c === p[0].Command));
					_i++;
				}
			}
			_ref$1 = grp.options;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				info = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!info.canCli()) {
					_i$1++;
					continue;
				}
				if (!((info.ShortName === 0))) {
					ret[0].hasShort = true;
				}
				if (info.ValueName.length > 0) {
					ret[0].hasValueName = true;
				}
				ret[0].updateLen(info.LongNameWithNamespace() + info.ValueName, !(c === p[0].Command));
				_i$1++;
			}
		}; })(p, prevcmd, ret)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ret[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.getAlignmentInfo }; } $f.$ptr = $ptr; $f.p = p; $f.prevcmd = prevcmd; $f.ret = ret; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.getAlignmentInfo = function() { return this.$val.getAlignmentInfo(); };
	Parser.ptr.prototype.writeHelpOption = function(writer, option, info) {
		var $ptr, _1, _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, def, defs, desc, descstart, dw, envDef, envPrintable, i, info, l, line, option, p, prefix, showdef, writer, written, zeroval, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; def = $f.def; defs = $f.defs; desc = $f.desc; descstart = $f.descstart; dw = $f.dw; envDef = $f.envDef; envPrintable = $f.envPrintable; i = $f.i; info = $f.info; l = $f.l; line = $f.line; option = $f.option; p = $f.p; prefix = $f.prefix; showdef = $f.showdef; writer = $f.writer; written = $f.written; zeroval = $f.zeroval; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		info = $clone(info, alignmentInfo);
		p = this;
		line = new bytes.Buffer.ptr(sliceType$10.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		prefix = 2;
		if (info.indent) {
			prefix = prefix + (4) >> 0;
		}
		line.WriteString(strings.Repeat(" ", prefix));
		if (!((option.ShortName === 0))) {
			line.WriteRune(45);
			line.WriteRune(option.ShortName);
		} else if (info.hasShort) {
			line.WriteString("  ");
		}
		descstart = info.descriptionStart() + 2 >> 0;
		if (option.LongName.length > 0) {
			if (!((option.ShortName === 0))) {
				line.WriteString(", ");
			} else if (info.hasShort) {
				line.WriteString("  ");
			}
			line.WriteString("--");
			line.WriteString(option.LongNameWithNamespace());
		}
		_r = option.canArgument(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			line.WriteRune(61);
			if (option.ValueName.length > 0) {
				line.WriteString(option.ValueName);
			}
		/* } */ case 2:
		written = line.Len();
		_r$1 = line.WriteTo(writer); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ if (!(option.Description === "")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(option.Description === "")) { */ case 5:
			dw = descstart - written >> 0;
			_r$2 = writer.WriteString(strings.Repeat(" ", dw)); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			def = "";
			defs = option.Default;
			/* */ if (!((option.DefaultMask.length === 0))) { $s = 8; continue; }
			if (!(defs.$length === 0)) { _v = false; $s = 12; continue s; }
			_r$3 = option.canArgument(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 12:
			/* */ if (_v) { $s = 9; continue; }
			/* */ if (!((defs.$length === 0))) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!((option.DefaultMask.length === 0))) { */ case 8:
				if (!(option.DefaultMask === "-")) {
					def = option.DefaultMask;
				}
				$s = 11; continue;
			/* } else if (_v) { */ case 9:
				showdef = false;
					_r$4 = option.field.Type.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_1 = _r$4;
					/* */ if ((_1 === 19) || (_1 === 22)) { $s = 16; continue; }
					/* */ if ((_1 === 23) || (_1 === 24) || (_1 === 17)) { $s = 17; continue; }
					/* */ if (_1 === 21) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if ((_1 === 19) || (_1 === 22)) { */ case 16:
						showdef = !option.value.IsNil();
						$s = 20; continue;
					/* } else if ((_1 === 23) || (_1 === 24) || (_1 === 17)) { */ case 17:
						showdef = option.value.Len() > 0;
						$s = 20; continue;
					/* } else if (_1 === 21) { */ case 18:
						showdef = !option.value.IsNil() && option.value.Len() > 0;
						$s = 20; continue;
					/* } else { */ case 19:
						_r$5 = reflect.Zero(option.field.Type); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						zeroval = _r$5;
						_r$6 = zeroval.Interface(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_arg = _r$6;
						_r$7 = option.value.Interface(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_arg$1 = _r$7;
						_r$8 = reflect.DeepEqual(_arg, _arg$1); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						showdef = !_r$8;
					/* } */ case 20:
				case 14:
				/* */ if (showdef) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (showdef) { */ case 25:
					_r$9 = convertToString(option.value, option.tag); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple = _r$9;
					def = _tuple[0];
				/* } */ case 26:
				$s = 11; continue;
			/* } else if (!((defs.$length === 0))) { */ case 10:
				l = defs.$length - 1 >> 0;
				i = 0;
				while (true) {
					if (!(i < l)) { break; }
					def = def + (quoteIfNeeded(((i < 0 || i >= defs.$length) ? $throwRuntimeError("index out of range") : defs.$array[defs.$offset + i])) + ", ");
					i = i + (1) >> 0;
				}
				def = def + (quoteIfNeeded(((l < 0 || l >= defs.$length) ? $throwRuntimeError("index out of range") : defs.$array[defs.$offset + l])));
			/* } */ case 11:
			envDef = "";
			/* */ if (!(option.EnvDefaultKey === "")) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!(option.EnvDefaultKey === "")) { */ case 28:
				envPrintable = "";
				if (false) {
					envPrintable = "%" + option.EnvDefaultKey + "%";
				} else {
					envPrintable = "$" + option.EnvDefaultKey;
				}
				_r$10 = fmt.Sprintf(" [%s]", new sliceType$6([new $String(envPrintable)])); /* */ $s = 30; case 30: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				envDef = _r$10;
			/* } */ case 29:
			desc = "";
			/* */ if (!(def === "")) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!(def === "")) { */ case 31:
				_r$11 = fmt.Sprintf("%s (%v)%s", new sliceType$6([new $String(option.Description), new $String(def), new $String(envDef)])); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				desc = _r$11;
				$s = 33; continue;
			/* } else { */ case 32:
				desc = option.Description + envDef;
			/* } */ case 33:
			_r$12 = wrapText(desc, info.terminalColumns - descstart >> 0, strings.Repeat(" ", descstart)); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = writer.WriteString(_r$12); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
		/* } */ case 6:
		_r$14 = writer.WriteString("\n"); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.writeHelpOption }; } $f.$ptr = $ptr; $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f.def = def; $f.defs = defs; $f.desc = desc; $f.descstart = descstart; $f.dw = dw; $f.envDef = envDef; $f.envPrintable = envPrintable; $f.i = i; $f.info = info; $f.l = l; $f.line = line; $f.option = option; $f.p = p; $f.prefix = prefix; $f.showdef = showdef; $f.writer = writer; $f.written = written; $f.zeroval = zeroval; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.writeHelpOption = function(writer, option, info) { return this.$val.writeHelpOption(writer, option, info); };
	maxCommandLength = function(s) {
		var $ptr, _i, _ref, l, ret, s, v;
		if (s.$length === 0) {
			return 0;
		}
		ret = (0 >= s.$length ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]).Name.length;
		_ref = $subslice(s, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			l = v.Name.length;
			if (l > ret) {
				ret = l;
			}
			_i++;
		}
		return ret;
	};
	Parser.ptr.prototype.WriteHelp = function(writer) {
		var $ptr, _i, _i$1, _i$2, _i$3, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, align, aligninfo, allcmd, arg, arg$1, c, c$1, cc, cmd, co, i, i$1, maxlen, maxnamelen, name, names, ok, p, pad, prefix, printcmd, scommands, subc, subcommands, t, us, usage, wr, writer, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; align = $f.align; aligninfo = $f.aligninfo; allcmd = $f.allcmd; arg = $f.arg; arg$1 = $f.arg$1; c = $f.c; c$1 = $f.c$1; cc = $f.cc; cmd = $f.cmd; co = $f.co; i = $f.i; i$1 = $f.i$1; maxlen = $f.maxlen; maxnamelen = $f.maxnamelen; name = $f.name; names = $f.names; ok = $f.ok; p = $f.p; pad = $f.pad; prefix = $f.prefix; printcmd = $f.printcmd; scommands = $f.scommands; subc = $f.subc; subcommands = $f.subcommands; t = $f.t; us = $f.us; usage = $f.usage; wr = $f.wr; writer = $f.writer; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		aligninfo = [aligninfo];
		c = [c];
		cmd = [cmd];
		p = [p];
		wr = [wr];
		p[0] = this;
		if ($interfaceIsEqual(writer, $ifaceNil)) {
			return;
		}
		wr[0] = bufio.NewWriter(writer);
		_r = p[0].getAlignmentInfo(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		aligninfo[0] = $clone(_r, alignmentInfo);
		cmd[0] = p[0].Command;
		while (true) {
			if (!(!(cmd[0].Active === ptrType.nil))) { break; }
			cmd[0] = cmd[0].Active;
		}
		/* */ if (!(p[0].Command.Name === "")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(p[0].Command.Name === "")) { */ case 2:
			_r$1 = wr[0].WriteString("Usage:\n"); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = wr[0].WriteString(" "); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			allcmd = p[0].Command;
			/* while (true) { */ case 6:
				/* if (!(!(allcmd === ptrType.nil))) { break; } */ if(!(!(allcmd === ptrType.nil))) { $s = 7; continue; }
				usage = "";
				/* */ if (allcmd === p[0].Command) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (allcmd === p[0].Command) { */ case 8:
					if (!((p[0].Usage.length === 0))) {
						usage = p[0].Usage;
					} else if (!((((p[0].Options & 2) >>> 0) === 0))) {
						usage = "[OPTIONS]";
					}
					$s = 10; continue;
				/* } else { */ case 9:
					_tuple = $assertType(allcmd.Group.data, Usage, true);
					us = _tuple[0];
					ok = _tuple[1];
					/* */ if (ok) { $s = 11; continue; }
					_r$3 = allcmd.hasCliOptions(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (ok) { */ case 11:
						_r$4 = us.Usage(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						usage = _r$4;
						$s = 13; continue;
					/* } else if (_r$3) { */ case 12:
						_r$5 = fmt.Sprintf("[%s-OPTIONS]", new sliceType$6([new $String(allcmd.Name)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						usage = _r$5;
					/* } */ case 13:
				/* } */ case 10:
				/* */ if (!((usage.length === 0))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!((usage.length === 0))) { */ case 17:
					_r$6 = fmt.Fprintf(wr[0], " %s %s", new sliceType$6([new $String(allcmd.Name), new $String(usage)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$7 = fmt.Fprintf(wr[0], " %s", new sliceType$6([new $String(allcmd.Name)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 19:
				/* */ if (allcmd.args.$length > 0) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (allcmd.args.$length > 0) { */ case 22:
					_r$8 = fmt.Fprintf(wr[0], " ", new sliceType$6([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
				/* } */ case 23:
				_ref = allcmd.args;
				_i = 0;
				/* while (true) { */ case 25:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 26; continue; }
					i = _i;
					arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					/* */ if (!((i === 0))) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!((i === 0))) { */ case 27:
						_r$9 = fmt.Fprintf(wr[0], " ", new sliceType$6([])); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 28:
					name = arg.Name;
					_r$10 = arg.isRemaining(); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					/* */ if (_r$10) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (_r$10) { */ case 30:
						name = name + "...";
					/* } */ case 31:
					/* */ if (!allcmd.ArgsRequired) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if (!allcmd.ArgsRequired) { */ case 33:
						_r$11 = fmt.Fprintf(wr[0], "[%s]", new sliceType$6([new $String(name)])); /* */ $s = 36; case 36: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$11;
						$s = 35; continue;
					/* } else { */ case 34:
						_r$12 = fmt.Fprintf(wr[0], "%s", new sliceType$6([new $String(name)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_r$12;
					/* } */ case 35:
					_i++;
				/* } */ $s = 25; continue; case 26:
				/* */ if (allcmd.Active === ptrType.nil && allcmd.commands.$length > 0) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (allcmd.Active === ptrType.nil && allcmd.commands.$length > 0) { */ case 38:
					_tmp = "";
					_tmp$1 = "";
					co = _tmp;
					cc = _tmp$1;
					if (allcmd.SubcommandsOptional) {
						_tmp$2 = "[";
						_tmp$3 = "]";
						co = _tmp$2;
						cc = _tmp$3;
					} else {
						_tmp$4 = "<";
						_tmp$5 = ">";
						co = _tmp$4;
						cc = _tmp$5;
					}
					/* */ if (allcmd.commands.$length > 3) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (allcmd.commands.$length > 3) { */ case 40:
						_r$13 = fmt.Fprintf(wr[0], " %scommand%s", new sliceType$6([new $String(co), new $String(cc)])); /* */ $s = 43; case 43: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$13;
						$s = 42; continue;
					/* } else { */ case 41:
						_r$14 = allcmd.sortedCommands(); /* */ $s = 44; case 44: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						subcommands = _r$14;
						names = $makeSlice(sliceType$3, subcommands.$length);
						_ref$1 = subcommands;
						_i$1 = 0;
						while (true) {
							if (!(_i$1 < _ref$1.$length)) { break; }
							i$1 = _i$1;
							subc = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
							((i$1 < 0 || i$1 >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + i$1] = subc.Name);
							_i$1++;
						}
						_r$15 = fmt.Fprintf(wr[0], " %s%s%s", new sliceType$6([new $String(co), new $String(strings.Join(names, " | ")), new $String(cc)])); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$15;
					/* } */ case 42:
				/* } */ case 39:
				allcmd = allcmd.Active;
			/* } */ $s = 6; continue; case 7:
			_r$16 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 46; case 46: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$16;
			/* */ if (!((cmd[0].Group.LongDescription.length === 0))) { $s = 47; continue; }
			/* */ $s = 48; continue;
			/* if (!((cmd[0].Group.LongDescription.length === 0))) { */ case 47:
				_r$17 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 49; case 49: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				_r$18 = wrapText(cmd[0].Group.LongDescription, aligninfo[0].terminalColumns, ""); /* */ $s = 50; case 50: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				t = _r$18;
				_r$19 = fmt.Fprintln(wr[0], new sliceType$6([new $String(t)])); /* */ $s = 51; case 51: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				_r$19;
			/* } */ case 48:
		/* } */ case 3:
		c[0] = p[0].Command;
		/* while (true) { */ case 52:
			/* if (!(!(c[0] === ptrType.nil))) { break; } */ if(!(!(c[0] === ptrType.nil))) { $s = 53; continue; }
			printcmd = [printcmd];
			printcmd[0] = !(c[0] === p[0].Command);
			$r = c[0].Group.eachGroup((function(aligninfo, c, cmd, p, printcmd, wr) { return function $b(grp) {
				var $ptr, _i$2, _r$20, _r$21, _r$22, _r$23, _ref$2, first, grp, info, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i$2 = $f._i$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref$2 = $f._ref$2; first = $f.first; grp = $f.grp; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				first = true;
				if (grp.isBuiltinHelp && !(c[0] === p[0].Command)) {
					return;
				}
				_ref$2 = grp.options;
				_i$2 = 0;
				/* while (true) { */ case 1:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 2; continue; }
					info = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					/* */ if (!info.canCli()) { $s = 3; continue; }
					/* */ $s = 4; continue;
					/* if (!info.canCli()) { */ case 3:
						_i$2++;
						/* continue; */ $s = 1; continue;
					/* } */ case 4:
					/* */ if (printcmd[0]) { $s = 5; continue; }
					/* */ $s = 6; continue;
					/* if (printcmd[0]) { */ case 5:
						_r$20 = fmt.Fprintf(wr[0], "\n[%s command options]\n", new sliceType$6([new $String(c[0].Name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						_r$20;
						aligninfo[0].indent = true;
						printcmd[0] = false;
					/* } */ case 6:
					/* */ if (first && !(cmd[0].Group === grp)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (first && !(cmd[0].Group === grp)) { */ case 8:
						_r$21 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 10; case 10: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						_r$21;
						/* */ if (aligninfo[0].indent) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (aligninfo[0].indent) { */ case 11:
							_r$22 = wr[0].WriteString("    "); /* */ $s = 13; case 13: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
							_r$22;
						/* } */ case 12:
						_r$23 = fmt.Fprintf(wr[0], "%s:\n", new sliceType$6([new $String(grp.ShortDescription)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						_r$23;
						first = false;
					/* } */ case 9:
					$r = p[0].writeHelpOption(wr[0], info, aligninfo[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				/* } */ $s = 1; continue; case 2:
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i$2 = _i$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref$2 = _ref$2; $f.first = first; $f.grp = grp; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
			}; })(aligninfo, c, cmd, p, printcmd, wr)); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (c[0].args.$length > 0) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if (c[0].args.$length > 0) { */ case 55:
				/* */ if (c[0] === p[0].Command) { $s = 57; continue; }
				/* */ $s = 58; continue;
				/* if (c[0] === p[0].Command) { */ case 57:
					_r$20 = fmt.Fprintf(wr[0], "\nArguments:\n", new sliceType$6([])); /* */ $s = 60; case 60: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_r$20;
					$s = 59; continue;
				/* } else { */ case 58:
					_r$21 = fmt.Fprintf(wr[0], "\n[%s command arguments]\n", new sliceType$6([new $String(c[0].Name)])); /* */ $s = 61; case 61: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$21;
				/* } */ case 59:
				maxlen = aligninfo[0].descriptionStart();
				_ref$2 = c[0].args;
				_i$2 = 0;
				/* while (true) { */ case 62:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 63; continue; }
					arg$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					prefix = strings.Repeat(" ", 2);
					_r$22 = fmt.Fprintf(wr[0], "%s%s", new sliceType$6([new $String(prefix), new $String(arg$1.Name)])); /* */ $s = 64; case 64: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$22;
					/* */ if (arg$1.Description.length > 0) { $s = 65; continue; }
					/* */ $s = 66; continue;
					/* if (arg$1.Description.length > 0) { */ case 65:
						align = strings.Repeat(" ", (maxlen - arg$1.Name.length >> 0) - 1 >> 0);
						_r$23 = fmt.Fprintf(wr[0], ":%s%s", new sliceType$6([new $String(align), new $String(arg$1.Description)])); /* */ $s = 67; case 67: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						_r$23;
					/* } */ case 66:
					_r$24 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 68; case 68: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$24;
					_i$2++;
				/* } */ $s = 62; continue; case 63:
			/* } */ case 56:
			c[0] = c[0].Active;
		/* } */ $s = 52; continue; case 53:
		_r$25 = cmd[0].sortedCommands(); /* */ $s = 69; case 69: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		scommands = _r$25;
		/* */ if (scommands.$length > 0) { $s = 70; continue; }
		/* */ $s = 71; continue;
		/* if (scommands.$length > 0) { */ case 70:
			maxnamelen = maxCommandLength(scommands);
			_r$26 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 72; case 72: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$26;
			_r$27 = fmt.Fprintln(wr[0], new sliceType$6([new $String("Available commands:")])); /* */ $s = 73; case 73: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_r$27;
			_ref$3 = scommands;
			_i$3 = 0;
			/* while (true) { */ case 74:
				/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 75; continue; }
				c$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				_r$28 = fmt.Fprintf(wr[0], "  %s", new sliceType$6([new $String(c$1.Name)])); /* */ $s = 76; case 76: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$28;
				/* */ if (c$1.Group.ShortDescription.length > 0) { $s = 77; continue; }
				/* */ $s = 78; continue;
				/* if (c$1.Group.ShortDescription.length > 0) { */ case 77:
					pad = strings.Repeat(" ", maxnamelen - c$1.Name.length >> 0);
					_r$29 = fmt.Fprintf(wr[0], "%s  %s", new sliceType$6([new $String(pad), new $String(c$1.Group.ShortDescription)])); /* */ $s = 79; case 79: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_r$29;
					/* */ if (c$1.Aliases.$length > 0) { $s = 80; continue; }
					/* */ $s = 81; continue;
					/* if (c$1.Aliases.$length > 0) { */ case 80:
						_r$30 = fmt.Fprintf(wr[0], " (aliases: %s)", new sliceType$6([new $String(strings.Join(c$1.Aliases, ", "))])); /* */ $s = 82; case 82: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						_r$30;
					/* } */ case 81:
				/* } */ case 78:
				_r$31 = fmt.Fprintln(wr[0], new sliceType$6([])); /* */ $s = 83; case 83: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				_i$3++;
			/* } */ $s = 74; continue; case 75:
		/* } */ case 71:
		_r$32 = wr[0].Flush(); /* */ $s = 84; case 84: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_r$32;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.WriteHelp }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.align = align; $f.aligninfo = aligninfo; $f.allcmd = allcmd; $f.arg = arg; $f.arg$1 = arg$1; $f.c = c; $f.c$1 = c$1; $f.cc = cc; $f.cmd = cmd; $f.co = co; $f.i = i; $f.i$1 = i$1; $f.maxlen = maxlen; $f.maxnamelen = maxnamelen; $f.name = name; $f.names = names; $f.ok = ok; $f.p = p; $f.pad = pad; $f.prefix = prefix; $f.printcmd = printcmd; $f.scommands = scommands; $f.subc = subc; $f.subcommands = subcommands; $f.t = t; $f.us = us; $f.usage = usage; $f.wr = wr; $f.writer = writer; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.WriteHelp = function(writer) { return this.$val.WriteHelp(writer); };
	manQuote = function(s) {
		var $ptr, s;
		return strings.Replace(s, "\\", "\\\\", -1);
	};
	formatForMan = function(wr, s) {
		var $ptr, _r, _r$1, _r$2, _r$3, idx, s, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; idx = $f.idx; s = $f.s; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			idx = strings.IndexRune(s, 96);
			/* */ if (idx < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (idx < 0) { */ case 3:
				_r = fmt.Fprintf(wr, "%s", new sliceType$6([new $String(manQuote(s))])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_r$1 = fmt.Fprintf(wr, "%s", new sliceType$6([new $String(manQuote(s.substring(0, idx)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			s = s.substring((idx + 1 >> 0));
			idx = strings.IndexRune(s, 39);
			/* */ if (idx < 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (idx < 0) { */ case 7:
				_r$2 = fmt.Fprintf(wr, "%s", new sliceType$6([new $String(manQuote(s))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 8:
			_r$3 = fmt.Fprintf(wr, "\\fB%s\\fP", new sliceType$6([new $String(manQuote(s.substring(0, idx)))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			s = s.substring((idx + 1 >> 0));
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: formatForMan }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.idx = idx; $f.s = s; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeManPageOptions = function(wr, grp) {
		var $ptr, grp, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; grp = $f.grp; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wr = [wr];
		$r = grp.eachGroup((function(wr) { return function $b(group) {
			var $ptr, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, group, opt, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; group = $f.group; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_ref = group.options;
			_i = 0;
			/* while (true) { */ case 1:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
				opt = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				/* */ if (!opt.canCli()) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!opt.canCli()) { */ case 3:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 4:
				_r = fmt.Fprintln(wr[0], new sliceType$6([new $String(".TP")])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_r$1 = fmt.Fprintf(wr[0], "\\fB", new sliceType$6([])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				/* */ if (!((opt.ShortName === 0))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((opt.ShortName === 0))) { */ case 7:
					_r$2 = fmt.Fprintf(wr[0], "\\fB\\-%c\\fR", new sliceType$6([new $Int32(opt.ShortName)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 8:
				/* */ if (!((opt.LongName.length === 0))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((opt.LongName.length === 0))) { */ case 10:
					/* */ if (!((opt.ShortName === 0))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!((opt.ShortName === 0))) { */ case 12:
						_r$3 = fmt.Fprintf(wr[0], ", ", new sliceType$6([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
					/* } */ case 13:
					_r$4 = fmt.Fprintf(wr[0], "\\fB\\-\\-%s\\fR", new sliceType$6([new $String(manQuote(opt.LongNameWithNamespace()))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
				/* } */ case 11:
				/* */ if (!((opt.ValueName.length === 0)) || opt.OptionalArgument) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!((opt.ValueName.length === 0)) || opt.OptionalArgument) { */ case 16:
					/* */ if (opt.OptionalArgument) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (opt.OptionalArgument) { */ case 18:
						_r$5 = fmt.Fprintf(wr[0], " [\\fI%s=%s\\fR]", new sliceType$6([new $String(manQuote(opt.ValueName)), new $String(manQuote(strings.Join(quoteV(opt.OptionalValue), ", ")))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
						$s = 20; continue;
					/* } else { */ case 19:
						_r$6 = fmt.Fprintf(wr[0], " \\fI%s\\fR", new sliceType$6([new $String(manQuote(opt.ValueName))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 20:
				/* } */ case 17:
				/* */ if (!((opt.Default.$length === 0))) { $s = 23; continue; }
				/* */ if (!((opt.EnvDefaultKey.length === 0))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((opt.Default.$length === 0))) { */ case 23:
					_r$7 = fmt.Fprintf(wr[0], " <default: \\fI%s\\fR>", new sliceType$6([new $String(manQuote(strings.Join(quoteV(opt.Default), ", ")))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					$s = 25; continue;
				/* } else if (!((opt.EnvDefaultKey.length === 0))) { */ case 24:
					/* */ if (false) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (false) { */ case 27:
						_r$8 = fmt.Fprintf(wr[0], " <default: \\fI%%%s%%\\fR>", new sliceType$6([new $String(manQuote(opt.EnvDefaultKey))])); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$8;
						$s = 29; continue;
					/* } else { */ case 28:
						_r$9 = fmt.Fprintf(wr[0], " <default: \\fI$%s\\fR>", new sliceType$6([new $String(manQuote(opt.EnvDefaultKey))])); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 29:
				/* } */ case 25:
				/* */ if (opt.Required) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (opt.Required) { */ case 32:
					_r$10 = fmt.Fprintf(wr[0], " (\\fIrequired\\fR)", new sliceType$6([])); /* */ $s = 34; case 34: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
				/* } */ case 33:
				_r$11 = fmt.Fprintln(wr[0], new sliceType$6([new $String("\\fP")])); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				/* */ if (!((opt.Description.length === 0))) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (!((opt.Description.length === 0))) { */ case 36:
					$r = formatForMan(wr[0], opt.Description); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$12 = fmt.Fprintln(wr[0], new sliceType$6([new $String("")])); /* */ $s = 39; case 39: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
				/* } */ case 37:
				_i++;
			/* } */ $s = 1; continue; case 2:
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.group = group; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
		}; })(wr)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeManPageOptions }; } $f.$ptr = $ptr; $f.grp = grp; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeManPageSubcommands = function(wr, name, root) {
		var $ptr, _i, _r, _ref, c, commands, name, nn, root, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; commands = $f.commands; name = $f.name; nn = $f.nn; root = $f.root; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = root.sortedCommands(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		commands = _r;
		_ref = commands;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			nn = "";
			if (!((name.length === 0))) {
				nn = name + " " + c.Name;
			} else {
				nn = c.Name;
			}
			$r = writeManPageCommand(wr, nn, root, c); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeManPageSubcommands }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.commands = commands; $f.name = name; $f.nn = nn; $f.root = root; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	writeManPageCommand = function(wr, name, root, command) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, cmdstart, command, name, ok, pre, root, us, usage, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; cmdstart = $f.cmdstart; command = $f.command; name = $f.name; ok = $f.ok; pre = $f.pre; root = $f.root; us = $f.us; usage = $f.usage; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Fprintf(wr, ".SS %s\n", new sliceType$6([new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = fmt.Fprintln(wr, new sliceType$6([new $String(command.Group.ShortDescription)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ if (command.Group.LongDescription.length > 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (command.Group.LongDescription.length > 0) { */ case 3:
			_r$2 = fmt.Fprintln(wr, new sliceType$6([new $String("")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = fmt.Sprintf("The %s command", new sliceType$6([new $String(manQuote(command.Name))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			cmdstart = _r$3;
			/* */ if (strings.HasPrefix(command.Group.LongDescription, cmdstart)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (strings.HasPrefix(command.Group.LongDescription, cmdstart)) { */ case 7:
				_r$4 = fmt.Fprintf(wr, "The \\fI%s\\fP command", new sliceType$6([new $String(manQuote(command.Name))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$r = formatForMan(wr, command.Group.LongDescription.substring(cmdstart.length)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = fmt.Fprintln(wr, new sliceType$6([new $String("")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = formatForMan(wr, command.Group.LongDescription); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$6 = fmt.Fprintln(wr, new sliceType$6([new $String("")])); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
			/* } */ case 9:
		/* } */ case 4:
		usage = "";
		_tuple = $assertType(command.Group.data, Usage, true);
		us = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 15; continue; }
		_r$7 = command.hasCliOptions(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (_r$7) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (ok) { */ case 15:
			_r$8 = us.Usage(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			usage = _r$8;
			$s = 17; continue;
		/* } else if (_r$7) { */ case 16:
			_r$9 = fmt.Sprintf("[%s-OPTIONS]", new sliceType$6([new $String(command.Name)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			usage = _r$9;
		/* } */ case 17:
		pre = "";
		_r$10 = root.hasCliOptions(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		/* */ if (_r$10) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$10) { */ case 21:
			_r$11 = fmt.Sprintf("%s [OPTIONS] %s", new sliceType$6([new $String(root.Name), new $String(command.Name)])); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			pre = _r$11;
			$s = 23; continue;
		/* } else { */ case 22:
			_r$12 = fmt.Sprintf("%s %s", new sliceType$6([new $String(root.Name), new $String(command.Name)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			pre = _r$12;
		/* } */ case 23:
		/* */ if (usage.length > 0) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (usage.length > 0) { */ case 27:
			_r$13 = fmt.Fprintf(wr, "\n\\fBUsage\\fP: %s %s\n\n", new sliceType$6([new $String(manQuote(pre)), new $String(manQuote(usage))])); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$13;
		/* } */ case 28:
		/* */ if (command.Aliases.$length > 0) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (command.Aliases.$length > 0) { */ case 30:
			_r$14 = fmt.Fprintf(wr, "\n\\fBAliases\\fP: %s\n\n", new sliceType$6([new $String(manQuote(strings.Join(command.Aliases, ", ")))])); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$14;
		/* } */ case 31:
		$r = writeManPageOptions(wr, command.Group); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeManPageSubcommands(wr, name, command); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: writeManPageCommand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.cmdstart = cmdstart; $f.command = command; $f.name = name; $f.ok = ok; $f.pre = pre; $f.root = root; $f.us = us; $f.usage = usage; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.ptr.prototype.WriteManPage = function(wr) {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, p, t, usage, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; p = $f.p; t = $f.t; usage = $f.usage; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		t = $clone(time.Now(), time.Time);
		_arg = wr;
		_arg$1 = new $String(manQuote(p.Command.Name));
		_r = t.Format("2 January 2006"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = new $String(_r);
		_r$1 = fmt.Fprintf(_arg, ".TH %s 1 \"%s\"\n", new sliceType$6([_arg$1, _arg$2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = fmt.Fprintln(wr, new sliceType$6([new $String(".SH NAME")])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = fmt.Fprintf(wr, "%s \\- %s\n", new sliceType$6([new $String(manQuote(p.Command.Name)), new $String(manQuote(p.Command.Group.ShortDescription))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = fmt.Fprintln(wr, new sliceType$6([new $String(".SH SYNOPSIS")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		usage = p.Usage;
		if (usage.length === 0) {
			usage = "[OPTIONS]";
		}
		_r$5 = fmt.Fprintf(wr, "\\fB%s\\fP %s\n", new sliceType$6([new $String(manQuote(p.Command.Name)), new $String(manQuote(usage))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = fmt.Fprintln(wr, new sliceType$6([new $String(".SH DESCRIPTION")])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$r = formatForMan(wr, p.Command.Group.LongDescription); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$7 = fmt.Fprintln(wr, new sliceType$6([new $String("")])); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = fmt.Fprintln(wr, new sliceType$6([new $String(".SH OPTIONS")])); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		$r = writeManPageOptions(wr, p.Command.Group); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.Command.commands.$length > 0) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (p.Command.commands.$length > 0) { */ case 12:
			_r$9 = fmt.Fprintln(wr, new sliceType$6([new $String(".SH COMMANDS")])); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$r = writeManPageSubcommands(wr, "", p.Command); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.WriteManPage }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.p = p; $f.t = t; $f.usage = usage; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.WriteManPage = function(wr) { return this.$val.WriteManPage(wr); };
	newMultiTag = function(v) {
		var $ptr, v;
		return new multiTag.ptr(v, false);
	};
	multiTag.ptr.prototype.scan = function() {
		var $ptr, _entry, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, err, i, name, ret, v, val, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; err = $f.err; i = $f.i; name = $f.name; ret = $f.ret; v = $f.v; val = $f.val; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		v = x.value;
		ret = {};
		/* while (true) { */ case 1:
			/* if (!(!(v === ""))) { break; } */ if(!(!(v === ""))) { $s = 2; continue; }
			i = 0;
			while (true) {
				if (!(i < v.length && (v.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			v = v.substring(i);
			if (v === "") {
				/* break; */ $s = 2; continue;
			}
			i = 0;
			while (true) {
				if (!(i < v.length && !((v.charCodeAt(i) === 32)) && !((v.charCodeAt(i) === 58)) && !((v.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			/* */ if (i >= v.length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i >= v.length) { */ case 3:
				_r = newErrorf(10, "expected `:' after key name, but got end of tag (in `%v`)", new sliceType$6([new $String(x.value)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return [false, _r];
			/* } */ case 4:
			/* */ if (!((v.charCodeAt(i) === 58))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((v.charCodeAt(i) === 58))) { */ case 7:
				_r$1 = newErrorf(10, "expected `:' after key name, but got `%v' (in `%v`)", new sliceType$6([new $Uint8(v.charCodeAt(i)), new $String(x.value)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 10; case 10:
				return [false, _r$1];
			/* } */ case 8:
			/* */ if ((i + 1 >> 0) >= v.length) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((i + 1 >> 0) >= v.length) { */ case 11:
				_r$2 = newErrorf(10, "expected `\"' to start tag value at end of tag (in `%v`)", new sliceType$6([new $String(x.value)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 14; case 14:
				return [false, _r$2];
			/* } */ case 12:
			/* */ if (!((v.charCodeAt((i + 1 >> 0)) === 34))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!((v.charCodeAt((i + 1 >> 0)) === 34))) { */ case 15:
				_r$3 = newErrorf(10, "expected `\"' to start tag value, but got `%v' (in `%v`)", new sliceType$6([new $Uint8(v.charCodeAt((i + 1 >> 0))), new $String(x.value)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ $s = 18; case 18:
				return [false, _r$3];
			/* } */ case 16:
			name = v.substring(0, i);
			v = v.substring((i + 1 >> 0));
			i = 1;
			/* while (true) { */ case 19:
				/* if (!(i < v.length && !((v.charCodeAt(i) === 34)))) { break; } */ if(!(i < v.length && !((v.charCodeAt(i) === 34)))) { $s = 20; continue; }
				/* */ if (v.charCodeAt(i) === 10) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (v.charCodeAt(i) === 10) { */ case 21:
					_r$4 = newErrorf(10, "unexpected newline in tag value `%v' (in `%v`)", new sliceType$6([new $String(name), new $String(x.value)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ $s = 24; case 24:
					return [false, _r$4];
				/* } */ case 22:
				if (v.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			/* } */ $s = 19; continue; case 20:
			/* */ if (i >= v.length) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (i >= v.length) { */ case 25:
				_r$5 = newErrorf(10, "expected end of tag value `\"' at end of tag (in `%v`)", new sliceType$6([new $String(x.value)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 28; case 28:
				return [false, _r$5];
			/* } */ case 26:
			_tuple = strconv.Unquote(v.substring(0, (i + 1 >> 0)));
			val = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 29:
				_r$6 = newErrorf(10, "Malformed value of tag `%v:%v` => %v (in `%v`)", new sliceType$6([new $String(name), new $String(v.substring(0, (i + 1 >> 0))), err, new $String(x.value)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 32; case 32:
				return [false, _r$6];
			/* } */ case 30:
			v = v.substring((i + 1 >> 0));
			_key = name; (ret || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = ret[$String.keyFor(name)], _entry !== undefined ? _entry.v : sliceType$3.nil), val) };
		/* } */ $s = 1; continue; case 2:
		return [ret, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.scan }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.name = name; $f.ret = ret; $f.v = v; $f.val = val; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.scan = function() { return this.$val.scan(); };
	multiTag.ptr.prototype.Parse = function() {
		var $ptr, _r, _tuple, err, vals, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; vals = $f.vals; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.scan(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		vals = _tuple[0];
		err = _tuple[1];
		x.cache = vals;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.vals = vals; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.Parse = function() { return this.$val.Parse(); };
	multiTag.ptr.prototype.cached = function() {
		var $ptr, _r, _tuple, cache, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; cache = $f.cache; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (x.cache === false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.cache === false) { */ case 1:
			_r = x.scan(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			cache = _tuple[0];
			if (cache === false) {
				cache = {};
			}
			x.cache = cache;
		/* } */ case 2:
		return x.cache;
		/* */ } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.cached }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.cache = cache; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.cached = function() { return this.$val.cached(); };
	multiTag.ptr.prototype.Get = function(key) {
		var $ptr, _entry, _r, _tuple, c, key, ok, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; c = $f.c; key = $f.key; ok = $f.ok; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.cached(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		_tuple = (_entry = c[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [sliceType$3.nil, false]);
		v = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return (x$1 = v.$length - 1 >> 0, ((x$1 < 0 || x$1 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$1]));
		}
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.Get }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.key = key; $f.ok = ok; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.Get = function(key) { return this.$val.Get(key); };
	multiTag.ptr.prototype.GetMany = function(key) {
		var $ptr, _entry, _r, c, key, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; c = $f.c; key = $f.key; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.cached(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		return (_entry = c[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$3.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.GetMany }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f.c = c; $f.key = key; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.GetMany = function(key) { return this.$val.GetMany(key); };
	multiTag.ptr.prototype.Set = function(key, value) {
		var $ptr, _key, _r, c, key, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; c = $f.c; key = $f.key; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.cached(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		_key = key; (c || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new sliceType$3([value]) };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.Set }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.c = c; $f.key = key; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	multiTag.ptr.prototype.SetMany = function(key, value) {
		var $ptr, _key, _r, c, key, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; c = $f.c; key = $f.key; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.cached(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c = _r;
		_key = key; (c || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: value };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: multiTag.ptr.prototype.SetMany }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.c = c; $f.key = key; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	multiTag.prototype.SetMany = function(key, value) { return this.$val.SetMany(key, value); };
	Option.ptr.prototype.LongNameWithNamespace = function() {
		var $ptr, _ref, _ref$1, _tuple, g, i, i$1, i$2, i$3, i$4, longName, namespaceDelimiter, ok, option, p;
		option = this;
		if (option.LongName.length === 0) {
			return "";
		}
		namespaceDelimiter = "";
		g = option.group;
		while (true) {
			_tuple = $assertType(g.parent, ptrType$9, true);
			p = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				namespaceDelimiter = p.NamespaceDelimiter;
				break;
			}
			_ref = g.parent;
			if ($assertType(_ref, ptrType, true)[1]) {
				i = _ref.$val;
				g = i.Group;
			} else if ($assertType(_ref, ptrType$1, true)[1]) {
				i$1 = _ref.$val;
				g = i$1;
			}
		}
		longName = option.LongName;
		g = option.group;
		while (true) {
			if (!(!(g === ptrType$1.nil))) { break; }
			if (!(g.Namespace === "")) {
				longName = g.Namespace + namespaceDelimiter + longName;
			}
			_ref$1 = g.parent;
			if ($assertType(_ref$1, ptrType, true)[1]) {
				i$2 = _ref$1.$val;
				g = i$2.Group;
			} else if ($assertType(_ref$1, ptrType$1, true)[1]) {
				i$3 = _ref$1.$val;
				g = i$3;
			} else if ($assertType(_ref$1, ptrType$9, true)[1]) {
				i$4 = _ref$1.$val;
				g = ptrType$1.nil;
			}
		}
		return longName;
	};
	Option.prototype.LongNameWithNamespace = function() { return this.$val.LongNameWithNamespace(); };
	Option.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, _r$2, data, option, s, short$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; option = $f.option; s = $f.s; short$1 = $f.short$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		s = "";
		short$1 = "";
		/* */ if (!((option.ShortName === 0))) { $s = 1; continue; }
		/* */ if (!((option.LongName.length === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((option.ShortName === 0))) { */ case 1:
			data = $makeSlice(sliceType$10, utf8.RuneLen(option.ShortName));
			utf8.EncodeRune(data, option.ShortName);
			short$1 = $bytesToString(data);
			/* */ if (!((option.LongName.length === 0))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!((option.LongName.length === 0))) { */ case 4:
				_r = fmt.Sprintf("%s%s, %s%s", new sliceType$6([new $String("-"), new $String(short$1), new $String("--"), new $String(option.LongNameWithNamespace())])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = _r;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = fmt.Sprintf("%s%s", new sliceType$6([new $String("-"), new $String(short$1)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				s = _r$1;
			/* } */ case 6:
			$s = 3; continue;
		/* } else if (!((option.LongName.length === 0))) { */ case 2:
			_r$2 = fmt.Sprintf("%s%s", new sliceType$6([new $String("--"), new $String(option.LongNameWithNamespace())])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			s = _r$2;
		/* } */ case 3:
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.option = option; $f.s = s; $f.short$1 = short$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.String = function() { return this.$val.String(); };
	Option.ptr.prototype.Value = function() {
		var $ptr, _r, option, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; option = $f.option; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		_r = option.value.Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.Value }; } $f.$ptr = $ptr; $f._r = _r; $f.option = option; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.Value = function() { return this.$val.Value(); };
	Option.ptr.prototype.IsSet = function() {
		var $ptr, option;
		option = this;
		return option.isSet;
	};
	Option.prototype.IsSet = function() { return this.$val.IsSet(); };
	Option.ptr.prototype.set = function(value) {
		var $ptr, _r, _r$1, _r$2, _r$3, option, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; option = $f.option; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		option.isSet = true;
		_r = option.isFunc(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ if (!(value === ptrType$5.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r) { */ case 1:
			_r$1 = option.call(value); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 6; case 6:
			return _r$1;
		/* } else if (!(value === ptrType$5.nil)) { */ case 2:
			_r$2 = convert(value.$get(), option.value, option.tag); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$2;
		/* } */ case 3:
		_r$3 = convert("", option.value, option.tag); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.set }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.option = option; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.set = function(value) { return this.$val.set(value); };
	Option.ptr.prototype.canCli = function() {
		var $ptr, option;
		option = this;
		return !((option.ShortName === 0)) || !((option.LongName.length === 0));
	};
	Option.prototype.canCli = function() { return this.$val.canCli(); };
	Option.ptr.prototype.canArgument = function() {
		var $ptr, _r, _r$1, option, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; option = $f.option; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		_r = option.isUnmarshaler(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = _r;
		if (!($interfaceIsEqual(u, $ifaceNil))) {
			return true;
		}
		_r$1 = option.isBool(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return !_r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.canArgument }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.option = option; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.canArgument = function() { return this.$val.canArgument(); };
	Option.ptr.prototype.emptyValue = function() {
		var $ptr, _r, _r$1, _r$2, option, tp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; option = $f.option; tp = $f.tp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		tp = option.value.Type();
		_r = tp.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 21) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 21) { */ case 1:
			_r$1 = reflect.MakeMap(tp); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 2:
		_r$2 = reflect.Zero(tp); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.emptyValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.option = option; $f.tp = tp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.emptyValue = function() { return this.$val.emptyValue(); };
	Option.ptr.prototype.empty = function() {
		var $ptr, _r, _r$1, option, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; option = $f.option; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		_r = option.isFunc(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			_r$1 = option.emptyValue(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = option.value.Set(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.empty }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.option = option; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.empty = function() { return this.$val.empty(); };
	Option.ptr.prototype.clearDefault = function() {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tuple, d, envKey, ok, option, tp, usedDefault, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; d = $f.d; envKey = $f.envKey; ok = $f.ok; option = $f.option; tp = $f.tp; usedDefault = $f.usedDefault; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		option = this;
		usedDefault = option.Default;
		envKey = option.EnvDefaultKey;
		/* */ if (!(envKey === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(envKey === "")) { */ case 1:
			_r = syscall.Getenv(envKey); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			value = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				if (!(option.EnvDefaultDelim === "")) {
					usedDefault = strings.Split(value, option.EnvDefaultDelim);
				} else {
					usedDefault = new sliceType$3([value]);
				}
			}
		/* } */ case 2:
		/* */ if (usedDefault.$length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (usedDefault.$length > 0) { */ case 4:
			$r = option.empty(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = usedDefault;
			_i = 0;
			/* while (true) { */ case 8:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
				d[0] = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$1 = option.set((d.$ptr || (d.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, d)))); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i++;
			/* } */ $s = 8; continue; case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			tp = option.value.Type();
				_r$2 = tp.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_1 = _r$2;
				/* */ if (_1 === 21) { $s = 13; continue; }
				/* */ if (_1 === 23) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_1 === 21) { */ case 13:
					/* */ if (option.value.IsNil()) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (option.value.IsNil()) { */ case 16:
						$r = option.empty(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 17:
					$s = 15; continue;
				/* } else if (_1 === 23) { */ case 14:
					/* */ if (option.value.IsNil()) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (option.value.IsNil()) { */ case 19:
						$r = option.empty(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 20:
				/* } */ case 15:
			case 11:
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.clearDefault }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.d = d; $f.envKey = envKey; $f.ok = ok; $f.option = option; $f.tp = tp; $f.usedDefault = usedDefault; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.clearDefault = function() { return this.$val.clearDefault(); };
	Option.ptr.prototype.isUnmarshaler = function() {
		var $ptr, _r, _tuple, i, ok, option, u, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; i = $f.i; ok = $f.ok; option = $f.option; u = $f.u; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		v = option.value;
		/* while (true) { */ case 1:
			if (!v.CanInterface()) {
				/* break; */ $s = 2; continue;
			}
			_r = v.Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i = _r;
			_tuple = $assertType(i, Unmarshaler, true);
			u = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				return u;
			}
			if (!v.CanAddr()) {
				/* break; */ $s = 2; continue;
			}
			v = v.Addr();
		/* } */ $s = 1; continue; case 2:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.isUnmarshaler }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.i = i; $f.ok = ok; $f.option = option; $f.u = u; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.isUnmarshaler = function() { return this.$val.isUnmarshaler(); };
	Option.ptr.prototype.isBool = function() {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, _r$4, option, tp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; option = $f.option; tp = $f.tp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		tp = option.value.Type();
		/* while (true) { */ case 1:
				_r = tp.Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_2 = _r;
				/* */ if (_2 === 1) { $s = 5; continue; }
				/* */ if (_2 === 23) { $s = 6; continue; }
				/* */ if (_2 === 19) { $s = 7; continue; }
				/* */ if (_2 === 22) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_2 === 1) { */ case 5:
					return true;
				/* } else if (_2 === 23) { */ case 6:
					_r$1 = tp.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = _r$1.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ $s = 13; case 13:
					return (_r$2 === 1);
				/* } else if (_2 === 19) { */ case 7:
					_r$3 = tp.NumIn(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ $s = 15; case 15:
					return _r$3 === 0;
				/* } else if (_2 === 22) { */ case 8:
					_r$4 = tp.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					tp = _r$4;
					$s = 10; continue;
				/* } else { */ case 9:
					return false;
				/* } */ case 10:
			case 3:
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.isBool }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.option = option; $f.tp = tp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.isBool = function() { return this.$val.isBool(); };
	Option.ptr.prototype.isFunc = function() {
		var $ptr, _r, option, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; option = $f.option; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		_r = option.value.Type().Kind(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r === 19;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.isFunc }; } $f.$ptr = $ptr; $f._r = _r; $f.option = option; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.isFunc = function() { return this.$val.isFunc(); };
	Option.ptr.prototype.call = function(value) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _v, err, option, retval, tp, val, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _v = $f._v; err = $f.err; option = $f.option; retval = $f.retval; tp = $f.tp; val = $f.val; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		option = this;
		retval = sliceType$7.nil;
		/* */ if (value === ptrType$5.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (value === ptrType$5.nil) { */ case 1:
			_r = option.value.Call(sliceType$7.nil); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			retval = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = option.value.Type().In(0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			tp = _r$1;
			_r$2 = reflect.New(tp); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			val = _r$2;
			_r$3 = reflect.Indirect(val); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
			_r$4 = convert(value.$get(), val, option.tag); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_r$5 = option.value.Call(new sliceType$7([$clone(val, reflect.Value)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			retval = _r$5;
		/* } */ case 3:
		if (!(retval.$length === 1)) { _v = false; $s = 12; continue s; }
		_r$6 = reflect.TypeOf(ptrType$11.nil).Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v = $interfaceIsEqual((0 >= retval.$length ? $throwRuntimeError("index out of range") : retval.$array[retval.$offset + 0]).Type(), _r$6); case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			_r$7 = (0 >= retval.$length ? $throwRuntimeError("index out of range") : retval.$array[retval.$offset + 0]).Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if ($interfaceIsEqual(_r$7, $ifaceNil)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ($interfaceIsEqual(_r$7, $ifaceNil)) { */ case 14:
				return $ifaceNil;
			/* } */ case 15:
			_r$8 = (0 >= retval.$length ? $throwRuntimeError("index out of range") : retval.$array[retval.$offset + 0]).Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ $s = 18; case 18:
			return $assertType(_r$8, $error);
		/* } */ case 11:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Option.ptr.prototype.call }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._v = _v; $f.err = err; $f.option = option; $f.retval = retval; $f.tp = tp; $f.val = val; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Option.prototype.call = function(value) { return this.$val.call(value); };
	argumentStartsOption = function(arg) {
		var $ptr, arg;
		return arg.length > 0 && (arg.charCodeAt(0) === 45);
	};
	argumentIsOption = function(arg) {
		var $ptr, arg;
		if (arg.length > 1 && (arg.charCodeAt(0) === 45) && !((arg.charCodeAt(1) === 45))) {
			return true;
		}
		if (arg.length > 2 && (arg.charCodeAt(0) === 45) && (arg.charCodeAt(1) === 45) && !((arg.charCodeAt(2) === 45))) {
			return true;
		}
		return false;
	};
	stripOptionPrefix = function(optname) {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, islong, name, optname, prefix;
		prefix = "";
		name = "";
		islong = false;
		if (strings.HasPrefix(optname, "--")) {
			_tmp = "--";
			_tmp$1 = optname.substring(2);
			_tmp$2 = true;
			prefix = _tmp;
			name = _tmp$1;
			islong = _tmp$2;
			return [prefix, name, islong];
		} else if (strings.HasPrefix(optname, "-")) {
			_tmp$3 = "-";
			_tmp$4 = optname.substring(1);
			_tmp$5 = false;
			prefix = _tmp$3;
			name = _tmp$4;
			islong = _tmp$5;
			return [prefix, name, islong];
		}
		_tmp$6 = "";
		_tmp$7 = optname;
		_tmp$8 = false;
		prefix = _tmp$6;
		name = _tmp$7;
		islong = _tmp$8;
		return [prefix, name, islong];
	};
	splitOption = function(prefix, option, islong) {
		var $ptr, islong, option, pos, prefix, rest, rest$24ptr;
		pos = strings.Index(option, "=");
		if ((islong && pos >= 0) || (!islong && (pos === 1))) {
			rest = option.substring((pos + 1 >> 0));
			return [option.substring(0, pos), "=", (rest$24ptr || (rest$24ptr = new ptrType$5(function() { return rest; }, function($v) { rest = $v; })))];
		}
		return [option, "", ptrType$5.nil];
	};
	Command.ptr.prototype.addHelpGroup = function(showHelp) {
		var $ptr, _r, _tuple, c, help, ret, showHelp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; help = $f.help; ret = $f.ret; showHelp = $f.showHelp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		help = [help];
		c = this;
		help[0] = new structType.ptr($throwNilPointerError);
		help[0].ShowHelp = showHelp;
		_r = c.AddGroup("Help Options", "", help[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		ret.isBuiltinHelp = true;
		return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Command.ptr.prototype.addHelpGroup }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.help = help; $f.ret = ret; $f.showHelp = showHelp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Command.prototype.addHelpGroup = function(showHelp) { return this.$val.addHelpGroup(showHelp); };
	strArgument.ptr.prototype.Value = function() {
		var $ptr, s;
		s = $clone(this, strArgument);
		if (s.value === ptrType$5.nil) {
			return ["", false];
		}
		return [s.value.$get(), true];
	};
	strArgument.prototype.Value = function() { return this.$val.Value(); };
	NewParser = function(data, options) {
		var $ptr, _r, _tuple, data, err, g, options, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; g = $f.g; options = $f.options; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = NewNamedParser(path.Base((x = os.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))), options);
		/* */ if (!($interfaceIsEqual(data, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(data, $ifaceNil))) { */ case 1:
			_r = p.Command.AddGroup("Application Options", "", data); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			g = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil)) {
				g.parent = p;
			}
			p.internalError = err;
		/* } */ case 2:
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewParser }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.g = g; $f.options = options; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewParser = NewParser;
	NewNamedParser = function(appname, options) {
		var $ptr, appname, options, p;
		p = new Parser.ptr(newCommand(appname, "", "", $ifaceNil), "", options, ".", $throwNilPointerError, $ifaceNil);
		p.Command.Group.parent = p;
		return p;
	};
	$pkg.NewNamedParser = NewNamedParser;
	Parser.ptr.prototype.Parse = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.ParseArgs($subslice(os.Args, 1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.Parse = function() { return this.$val.Parse(); };
	Parser.ptr.prototype.ParseArgs = function(args) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, arg, args, argument, cmd, comp, compval, err, err$1, ignoreUnknown, islong, modifiedArgs, ok, optname, p, parseErr, prefix, reterr, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; arg = $f.arg; args = $f.args; argument = $f.argument; cmd = $f.cmd; comp = $f.comp; compval = $f.compval; err = $f.err; err$1 = $f.err$1; ignoreUnknown = $f.ignoreUnknown; islong = $f.islong; modifiedArgs = $f.modifiedArgs; ok = $f.ok; optname = $f.optname; p = $f.p; parseErr = $f.parseErr; prefix = $f.prefix; reterr = $f.reterr; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!($interfaceIsEqual(p.internalError, $ifaceNil))) {
			return [sliceType$3.nil, p.internalError];
		}
		$r = p.clearIsSet(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(((((p.Options & 2) >>> 0)) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(((((p.Options & 2) >>> 0)) === 0))) { */ case 2:
			$r = p.Command.addHelpGroups($methodVal(p, "showBuiltinHelp")); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r = os.Getenv("GO_FLAGS_COMPLETION"); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		compval = _r;
		/* */ if (!((compval.length === 0))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!((compval.length === 0))) { */ case 6:
			comp = new completion.ptr(p, false);
			if (compval === "verbose") {
				comp.ShowDescriptions = true;
			}
			$r = comp.execute(args); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return [sliceType$3.nil, $ifaceNil];
		/* } */ case 7:
		s = new parseState.ptr("", args, $makeSlice(sliceType$3, 0, args.$length), sliceType$2.nil, $ifaceNil, ptrType.nil, new lookup.ptr(false, false, false));
		$r = p.Command.fillParseState(s); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 10:
			/* if (!(!s.eof())) { break; } */ if(!(!s.eof())) { $s = 11; continue; }
			arg = s.pop();
			/* */ if (!(((((p.Options & 4) >>> 0)) === 0)) && arg === "--") { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!(((((p.Options & 4) >>> 0)) === 0)) && arg === "--") { */ case 12:
				_r$1 = s.addArgs(s.args); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				/* break; */ $s = 11; continue;
			/* } */ case 13:
			/* */ if (!argumentIsOption(arg)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!argumentIsOption(arg)) { */ case 15:
				_r$2 = p.parseNonOption(s); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(_r$2, $ifaceNil))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!($interfaceIsEqual(_r$2, $ifaceNil))) { */ case 17:
					/* break; */ $s = 11; continue;
				/* } */ case 18:
				/* continue; */ $s = 10; continue;
			/* } */ case 16:
			err = $ifaceNil;
			_tuple = stripOptionPrefix(arg);
			prefix = _tuple[0];
			optname = _tuple[1];
			islong = _tuple[2];
			_tuple$1 = splitOption(prefix, optname, islong);
			optname = _tuple$1[0];
			argument = _tuple$1[2];
			/* */ if (islong) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (islong) { */ case 20:
				_r$3 = p.parseLong(s, optname, argument); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 22; continue;
			/* } else { */ case 21:
				_r$4 = p.parseShort(s, optname, argument); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err = _r$4;
			/* } */ case 22:
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 25:
				ignoreUnknown = !(((((p.Options & 8) >>> 0)) === 0));
				_r$5 = wrapError(err); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				parseErr = _r$5;
				if (!((parseErr.Type === 2)) || (!ignoreUnknown && p.UnknownOptionHandler === $throwNilPointerError)) {
					s.err = parseErr;
					/* break; */ $s = 11; continue;
				}
				/* */ if (ignoreUnknown) { $s = 28; continue; }
				/* */ if (!(p.UnknownOptionHandler === $throwNilPointerError)) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (ignoreUnknown) { */ case 28:
					_r$6 = s.addArgs(new sliceType$3([arg])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					$s = 30; continue;
				/* } else if (!(p.UnknownOptionHandler === $throwNilPointerError)) { */ case 29:
					_r$7 = p.UnknownOptionHandler(optname, (x = new strArgument.ptr(argument), new x.constructor.elem(x)), s.args); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$2 = _r$7;
					modifiedArgs = _tuple$2[0];
					err$1 = _tuple$2[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						s.err = err$1;
						/* break; */ $s = 11; continue;
					}
					s.args = modifiedArgs;
				/* } */ case 30:
			/* } */ case 26:
		/* } */ $s = 10; continue; case 11:
		/* */ if ($interfaceIsEqual(s.err, $ifaceNil)) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if ($interfaceIsEqual(s.err, $ifaceNil)) { */ case 33:
			$r = p.Command.eachCommand((function $b(c) {
				var $ptr, c, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = c.Group.eachGroup((function $b(g) {
					var $ptr, _i, _ref, g, option, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; g = $f.g; option = $f.option; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_ref = g.options;
					_i = 0;
					/* while (true) { */ case 1:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
						option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						/* */ if (option.isSet) { $s = 3; continue; }
						/* */ $s = 4; continue;
						/* if (option.isSet) { */ case 3:
							_i++;
							/* continue; */ $s = 1; continue;
						/* } */ case 4:
						$r = option.clearDefault(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 1; continue; case 2:
					/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.g = g; $f.option = option; $f.$s = $s; $f.$r = $r; return $f;
				})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
			}), true); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$8 = s.checkRequired(p); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
		/* } */ case 34:
		reterr = $ifaceNil;
		/* */ if (!($interfaceIsEqual(s.err, $ifaceNil))) { $s = 37; continue; }
		/* */ if (!((s.command.commands.$length === 0)) && !s.command.SubcommandsOptional) { $s = 38; continue; }
		/* */ $s = 39; continue;
		/* if (!($interfaceIsEqual(s.err, $ifaceNil))) { */ case 37:
			reterr = s.err;
			$s = 40; continue;
		/* } else if (!((s.command.commands.$length === 0)) && !s.command.SubcommandsOptional) { */ case 38:
			_r$9 = s.estimateCommand(); /* */ $s = 41; case 41: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			reterr = _r$9;
			$s = 40; continue;
		/* } else { */ case 39:
			_tuple$3 = $assertType(s.command.Group.data, Commander, true);
			cmd = _tuple$3[0];
			ok = _tuple$3[1];
			/* */ if (ok) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (ok) { */ case 42:
				_r$10 = cmd.Execute(s.retargs); /* */ $s = 44; case 44: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				reterr = _r$10;
			/* } */ case 43:
		/* } */ case 40:
		/* */ if (!($interfaceIsEqual(reterr, $ifaceNil))) { $s = 45; continue; }
		/* */ $s = 46; continue;
		/* if (!($interfaceIsEqual(reterr, $ifaceNil))) { */ case 45:
			_r$11 = p.printError(reterr); /* */ $s = 47; case 47: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 48; case 48:
			return [$appendSlice(new sliceType$3([s.arg]), s.args), _r$11];
		/* } */ case 46:
		return [s.retargs, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.ParseArgs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.arg = arg; $f.args = args; $f.argument = argument; $f.cmd = cmd; $f.comp = comp; $f.compval = compval; $f.err = err; $f.err$1 = err$1; $f.ignoreUnknown = ignoreUnknown; $f.islong = islong; $f.modifiedArgs = modifiedArgs; $f.ok = ok; $f.optname = optname; $f.p = p; $f.parseErr = parseErr; $f.prefix = prefix; $f.reterr = reterr; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.ParseArgs = function(args) { return this.$val.ParseArgs(args); };
	parseState.ptr.prototype.eof = function() {
		var $ptr, p;
		p = this;
		return p.args.$length === 0;
	};
	parseState.prototype.eof = function() { return this.$val.eof(); };
	parseState.ptr.prototype.pop = function() {
		var $ptr, p, x;
		p = this;
		if (p.eof()) {
			return "";
		}
		p.arg = (x = p.args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		p.args = $subslice(p.args, 1);
		return p.arg;
	};
	parseState.prototype.pop = function() { return this.$val.pop(); };
	parseState.ptr.prototype.checkRequired = function(parser) {
		var $ptr, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, arg, c, k, msg, msg$1, names, p, parser, reqnames, required, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; c = $f.c; k = $f.k; msg = $f.msg; msg$1 = $f.msg$1; names = $f.names; p = $f.p; parser = $f.parser; reqnames = $f.reqnames; required = $f.required; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		required = [required];
		p = this;
		c = parser.Command;
		required[0] = sliceType$8.nil;
		/* while (true) { */ case 1:
			/* if (!(!(c === ptrType.nil))) { break; } */ if(!(!(c === ptrType.nil))) { $s = 2; continue; }
			$r = c.Group.eachGroup((function(required) { return function(g) {
				var $ptr, _i, _ref, g, option;
				_ref = g.options;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					if (!option.isSet && option.Required) {
						required[0] = $append(required[0], option);
					}
					_i++;
				}
			}; })(required)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			c = c.Active;
		/* } */ $s = 1; continue; case 2:
		/* */ if (required[0].$length === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (required[0].$length === 0) { */ case 4:
			/* */ if (p.positional.$length > 0 && p.command.ArgsRequired) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (p.positional.$length > 0 && p.command.ArgsRequired) { */ case 6:
				reqnames = sliceType$3.nil;
				_ref = p.positional;
				_i = 0;
				/* while (true) { */ case 8:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
					arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_r = arg.isRemaining(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* */ if (_r) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r) { */ case 10:
						/* break; */ $s = 9; continue;
					/* } */ case 11:
					reqnames = $append(reqnames, "`" + arg.Name + "`");
					_i++;
				/* } */ $s = 8; continue; case 9:
				if (reqnames.$length === 0) {
					return $ifaceNil;
				}
				msg = "";
				/* */ if (reqnames.$length === 1) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (reqnames.$length === 1) { */ case 13:
					_r$1 = fmt.Sprintf("the required argument %s was not provided", new sliceType$6([new $String((0 >= reqnames.$length ? $throwRuntimeError("index out of range") : reqnames.$array[reqnames.$offset + 0]))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					msg = _r$1;
					$s = 15; continue;
				/* } else { */ case 14:
					_r$2 = fmt.Sprintf("the required arguments %s and %s were not provided", new sliceType$6([new $String(strings.Join($subslice(reqnames, 0, (reqnames.$length - 1 >> 0)), ", ")), new $String((x = reqnames.$length - 1 >> 0, ((x < 0 || x >= reqnames.$length) ? $throwRuntimeError("index out of range") : reqnames.$array[reqnames.$offset + x])))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					msg = _r$2;
				/* } */ case 15:
				p.err = newError(7, msg);
				return p.err;
			/* } */ case 7:
			return $ifaceNil;
		/* } */ case 5:
		names = $makeSlice(sliceType$3, 0, required[0].$length);
		_ref$1 = required[0];
		_i$1 = 0;
		/* while (true) { */ case 18:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 19; continue; }
			k = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$3 = k.String(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			names = $append(names, "`" + _r$3 + "'");
			_i$1++;
		/* } */ $s = 18; continue; case 19:
		$r = sort.Strings(names); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		msg$1 = "";
		/* */ if (names.$length === 1) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (names.$length === 1) { */ case 22:
			_r$4 = fmt.Sprintf("the required flag %s was not specified", new sliceType$6([new $String((0 >= names.$length ? $throwRuntimeError("index out of range") : names.$array[names.$offset + 0]))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			msg$1 = _r$4;
			$s = 24; continue;
		/* } else { */ case 23:
			_r$5 = fmt.Sprintf("the required flags %s and %s were not specified", new sliceType$6([new $String(strings.Join($subslice(names, 0, (names.$length - 1 >> 0)), ", ")), new $String((x$1 = names.$length - 1 >> 0, ((x$1 < 0 || x$1 >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + x$1])))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			msg$1 = _r$5;
		/* } */ case 24:
		p.err = newError(7, msg$1);
		return p.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseState.ptr.prototype.checkRequired }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.c = c; $f.k = k; $f.msg = msg; $f.msg$1 = msg$1; $f.names = names; $f.p = p; $f.parser = parser; $f.reqnames = reqnames; $f.required = required; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseState.prototype.checkRequired = function(parser) { return this.$val.checkRequired(parser); };
	parseState.ptr.prototype.estimateCommand = function() {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, c, cmdnames, commands, errtype, i, l, msg, p, v, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; cmdnames = $f.cmdnames; commands = $f.commands; errtype = $f.errtype; i = $f.i; l = $f.l; msg = $f.msg; p = $f.p; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.command.sortedCommands(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		commands = _r;
		cmdnames = $makeSlice(sliceType$3, commands.$length);
		_ref = commands;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= cmdnames.$length) ? $throwRuntimeError("index out of range") : cmdnames.$array[cmdnames.$offset + i] = v.Name);
			_i++;
		}
		msg = "";
		errtype = 0;
		/* */ if (!((p.retargs.$length === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((p.retargs.$length === 0))) { */ case 2:
			_tuple = closestChoice((x = p.retargs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), cmdnames);
			c = _tuple[0];
			l = _tuple[1];
			_r$1 = fmt.Sprintf("Unknown command `%s'", new sliceType$6([new $String((x$1 = p.retargs, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			msg = _r$1;
			errtype = 12;
			/* */ if ($fround(l / c.length) < 0.5) { $s = 6; continue; }
			/* */ if (cmdnames.$length === 1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($fround(l / c.length) < 0.5) { */ case 6:
				_r$2 = fmt.Sprintf("%s, did you mean `%s'?", new sliceType$6([new $String(msg), new $String(c)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				msg = _r$2;
				$s = 9; continue;
			/* } else if (cmdnames.$length === 1) { */ case 7:
				_r$3 = fmt.Sprintf("%s. You should use the %s command", new sliceType$6([new $String(msg), new $String((0 >= cmdnames.$length ? $throwRuntimeError("index out of range") : cmdnames.$array[cmdnames.$offset + 0]))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				msg = _r$3;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$4 = fmt.Sprintf("%s. Please specify one command of: %s or %s", new sliceType$6([new $String(msg), new $String(strings.Join($subslice(cmdnames, 0, (cmdnames.$length - 1 >> 0)), ", ")), new $String((x$2 = cmdnames.$length - 1 >> 0, ((x$2 < 0 || x$2 >= cmdnames.$length) ? $throwRuntimeError("index out of range") : cmdnames.$array[cmdnames.$offset + x$2])))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				msg = _r$4;
			/* } */ case 9:
			$s = 4; continue;
		/* } else { */ case 3:
			errtype = 11;
			/* */ if (cmdnames.$length === 1) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (cmdnames.$length === 1) { */ case 13:
				_r$5 = fmt.Sprintf("Please specify the %s command", new sliceType$6([new $String((0 >= cmdnames.$length ? $throwRuntimeError("index out of range") : cmdnames.$array[cmdnames.$offset + 0]))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				msg = _r$5;
				$s = 15; continue;
			/* } else { */ case 14:
				_r$6 = fmt.Sprintf("Please specify one command of: %s or %s", new sliceType$6([new $String(strings.Join($subslice(cmdnames, 0, (cmdnames.$length - 1 >> 0)), ", ")), new $String((x$3 = cmdnames.$length - 1 >> 0, ((x$3 < 0 || x$3 >= cmdnames.$length) ? $throwRuntimeError("index out of range") : cmdnames.$array[cmdnames.$offset + x$3])))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				msg = _r$6;
			/* } */ case 15:
		/* } */ case 4:
		return newError(errtype, msg);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseState.ptr.prototype.estimateCommand }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.cmdnames = cmdnames; $f.commands = commands; $f.errtype = errtype; $f.i = i; $f.l = l; $f.msg = msg; $f.p = p; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseState.prototype.estimateCommand = function() { return this.$val.estimateCommand(); };
	Parser.ptr.prototype.parseOption = function(s, name, option, canarg, argument) {
		var $ptr, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, arg, argument, canarg, err, name, ok, option, p, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arg = $f.arg; argument = $f.argument; canarg = $f.canarg; err = $f.err; name = $f.name; ok = $f.ok; option = $f.option; p = $f.p; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		arg = [arg];
		v = [v];
		err = $ifaceNil;
		p = this;
		_r = option.canArgument(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ if (!(argument === ptrType$5.nil) || (canarg && !s.eof())) { $s = 2; continue; }
		/* */ if (option.OptionalArgument) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!_r) { */ case 1:
			/* */ if (!(argument === ptrType$5.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(argument === ptrType$5.nil)) { */ case 7:
				_r$1 = newErrorf(6, "bool flag `%s' cannot have an argument", new sliceType$6([option])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				/* */ $s = 10; case 10:
				return err;
			/* } */ case 8:
			_r$2 = option.set(ptrType$5.nil); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err = _r$2;
			$s = 5; continue;
		/* } else if (!(argument === ptrType$5.nil) || (canarg && !s.eof())) { */ case 2:
			arg[0] = "";
			/* */ if (!(argument === ptrType$5.nil)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!(argument === ptrType$5.nil)) { */ case 12:
				arg[0] = argument.$get();
				$s = 14; continue;
			/* } else { */ case 13:
				arg[0] = s.pop();
				/* */ if (argumentIsOption(arg[0])) { $s = 15; continue; }
				/* */ if (!((((p.Options & 4) >>> 0) === 0)) && arg[0] === "--") { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (argumentIsOption(arg[0])) { */ case 15:
					_r$3 = newErrorf(1, "expected argument for flag `%s', but got option `%s'", new sliceType$6([option, new $String(arg[0])])); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err = _r$3;
					/* */ $s = 19; case 19:
					return err;
				/* } else if (!((((p.Options & 4) >>> 0) === 0)) && arg[0] === "--") { */ case 16:
					_r$4 = newErrorf(1, "expected argument for flag `%s', but got double dash `--'", new sliceType$6([option])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					/* */ $s = 21; case 21:
					return err;
				/* } */ case 17:
			/* } */ case 14:
			_r$5 = option.tag.Get("unquote"); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!(_r$5 === "false")) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (!(_r$5 === "false")) { */ case 22:
				_tuple = unquoteIfPossible(arg[0]);
				arg[0] = _tuple[0];
				err = _tuple[1];
			/* } */ case 23:
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 25:
				_r$6 = option.set((arg.$ptr || (arg.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, arg)))); /* */ $s = 27; case 27: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
			/* } */ case 26:
			$s = 5; continue;
		/* } else if (option.OptionalArgument) { */ case 3:
			$r = option.empty(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = option.OptionalValue;
			_i = 0;
			/* while (true) { */ case 29:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 30; continue; }
				v[0] = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$7 = option.set((v.$ptr || (v.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, v)))); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 30; continue;
				}
				_i++;
			/* } */ $s = 29; continue; case 30:
			$s = 5; continue;
		/* } else { */ case 4:
			_r$8 = newErrorf(1, "expected argument for flag `%s'", new sliceType$6([option])); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			err = _r$8;
		/* } */ case 5:
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 33:
			_tuple$1 = $assertType(err, ptrType$7, true);
			ok = _tuple$1[1];
			/* */ if (!ok) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!ok) { */ case 35:
				_arg = option;
				_arg$1 = option.value.Type();
				_r$9 = err.Error(); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$9);
				_r$10 = newErrorf(4, "invalid argument for flag `%s' (expected %s): %s", new sliceType$6([_arg, _arg$1, _arg$2])); /* */ $s = 38; case 38: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				err = _r$10;
			/* } */ case 36:
		/* } */ case 34:
		err = err;
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.parseOption }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arg = arg; $f.argument = argument; $f.canarg = canarg; $f.err = err; $f.name = name; $f.ok = ok; $f.option = option; $f.p = p; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.parseOption = function(s, name, option, canarg, argument) { return this.$val.parseOption(s, name, option, canarg, argument); };
	Parser.ptr.prototype.parseLong = function(s, name, argument) {
		var $ptr, _entry, _r, _r$1, argument, canarg, name, option, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; argument = $f.argument; canarg = $f.canarg; name = $f.name; option = $f.option; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		option = (_entry = s.lookup.longNames[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$4.nil);
		/* */ if (!(option === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(option === ptrType$4.nil)) { */ case 1:
			canarg = !option.OptionalArgument;
			_r = p.parseOption(s, name, option, canarg, argument); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = newErrorf(2, "unknown flag `%s'", new sliceType$6([new $String(name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.parseLong }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f.argument = argument; $f.canarg = canarg; $f.name = name; $f.option = option; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.parseLong = function(s, name, argument) { return this.$val.parseLong(s, name, argument); };
	Parser.ptr.prototype.splitShortConcatArg = function(s, optname) {
		var $ptr, _entry, _r, _tuple, _v, arg, c, first, n, option, optname, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; _v = $f._v; arg = $f.arg; c = $f.c; first = $f.first; n = $f.n; option = $f.option; optname = $f.optname; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		arg = [arg];
		p = this;
		_tuple = utf8.DecodeRuneInString(optname);
		c = _tuple[0];
		n = _tuple[1];
		if (n === optname.length) {
			return [optname, ptrType$5.nil];
		}
		first = $encodeRune(c);
		option = (_entry = s.lookup.shortNames[$String.keyFor(first)], _entry !== undefined ? _entry.v : ptrType$4.nil);
		if (!(!(option === ptrType$4.nil))) { _v = false; $s = 3; continue s; }
		_r = option.canArgument(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			arg[0] = optname.substring(n);
			return [first, (arg.$ptr || (arg.$ptr = new ptrType$5(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, arg)))];
		/* } */ case 2:
		return [optname, ptrType$5.nil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.splitShortConcatArg }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.arg = arg; $f.c = c; $f.first = first; $f.n = n; $f.option = option; $f.optname = optname; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.splitShortConcatArg = function(s, optname) { return this.$val.splitShortConcatArg(s, optname); };
	Parser.ptr.prototype.parseShort = function(s, optname, argument) {
		var $ptr, _entry, _i, _r, _r$1, _r$2, _ref, _rune, _tuple, argument, c, canarg, err, i, option, optname, p, s, shortname, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; argument = $f.argument; c = $f.c; canarg = $f.canarg; err = $f.err; i = $f.i; option = $f.option; optname = $f.optname; p = $f.p; s = $f.s; shortname = $f.shortname; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (argument === ptrType$5.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argument === ptrType$5.nil) { */ case 1:
			_r = p.splitShortConcatArg(s, optname); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			optname = _tuple[0];
			argument = _tuple[1];
		/* } */ case 2:
		_ref = optname;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 5; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			shortname = $encodeRune(c);
			option = (_entry = s.lookup.shortNames[$String.keyFor(shortname)], _entry !== undefined ? _entry.v : ptrType$4.nil);
			/* */ if (!(option === ptrType$4.nil)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(option === ptrType$4.nil)) { */ case 6:
				canarg = (((i + utf8.RuneLen(c) >> 0) === optname.length)) && !option.OptionalArgument;
				_r$1 = p.parseOption(s, shortname, option, canarg, argument); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				$s = 8; continue;
			/* } else { */ case 7:
				_r$2 = newErrorf(2, "unknown flag `%s'", new sliceType$6([new $String(shortname)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 11; case 11:
				return _r$2;
			/* } */ case 8:
			argument = ptrType$5.nil;
			_i += _rune[1];
		/* } */ $s = 4; continue; case 5:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.parseShort }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.argument = argument; $f.c = c; $f.canarg = canarg; $f.err = err; $f.i = i; $f.option = option; $f.optname = optname; $f.p = p; $f.s = s; $f.shortname = shortname; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.parseShort = function(s, optname, argument) { return this.$val.parseShort(s, optname, argument); };
	parseState.ptr.prototype.addArgs = function(args) {
		var $ptr, _r, _r$1, arg, args, err, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; arg = $f.arg; args = $f.args; err = $f.err; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* while (true) { */ case 1:
			/* if (!(p.positional.$length > 0 && args.$length > 0)) { break; } */ if(!(p.positional.$length > 0 && args.$length > 0)) { $s = 2; continue; }
			arg = (x = p.positional, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
			_r = convert((0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]), arg.value, arg.tag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_r$1 = arg.isRemaining(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r$1) { */ case 4:
				p.positional = $subslice(p.positional, 1);
			/* } */ case 5:
			args = $subslice(args, 1);
		/* } */ $s = 1; continue; case 2:
		p.retargs = $appendSlice(p.retargs, args);
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseState.ptr.prototype.addArgs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.arg = arg; $f.args = args; $f.err = err; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseState.prototype.addArgs = function(args) { return this.$val.addArgs(args); };
	Parser.ptr.prototype.parseNonOption = function(s) {
		var $ptr, _entry, _r, _r$1, _r$2, _r$3, cmd, err, err$1, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; cmd = $f.cmd; err = $f.err; err$1 = $f.err$1; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (s.positional.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.positional.$length > 0) { */ case 1:
			_r = s.addArgs(new sliceType$3([s.arg])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		cmd = (_entry = s.lookup.commands[$String.keyFor(s.arg)], _entry !== undefined ? _entry.v : ptrType.nil);
		/* */ if (!(cmd === ptrType.nil)) { $s = 5; continue; }
		/* */ if (!(((((p.Options & 32) >>> 0)) === 0))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!(cmd === ptrType.nil)) { */ case 5:
			s.command.Active = cmd;
			$r = cmd.fillParseState(s); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if (!(((((p.Options & 32) >>> 0)) === 0))) { */ case 6:
			_r$1 = s.addArgs(new sliceType$3([s.arg])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err = _r$1;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_r$2 = s.addArgs(s.args); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			s.args = new sliceType$3([]);
			$s = 8; continue;
		/* } else { */ case 7:
			_r$3 = s.addArgs(new sliceType$3([s.arg])); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return _r$3;
		/* } */ case 8:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.parseNonOption }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.cmd = cmd; $f.err = err; $f.err$1 = err$1; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.parseNonOption = function(s) { return this.$val.parseNonOption(s); };
	Parser.ptr.prototype.showBuiltinHelp = function() {
		var $ptr, b, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		p = this;
		b[0] = new bytes.Buffer.ptr(sliceType$10.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		$r = p.WriteHelp(b[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return newError(5, b[0].String());
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.showBuiltinHelp }; } $f.$ptr = $ptr; $f.b = b; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.showBuiltinHelp = function() { return this.$val.showBuiltinHelp(); };
	Parser.ptr.prototype.printError = function(err) {
		var $ptr, _r, err, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil)) && !(((((p.Options & 16) >>> 0)) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil)) && !(((((p.Options & 16) >>> 0)) === 0))) { */ case 1:
			_r = fmt.Fprintln(os.Stderr, new sliceType$6([err])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.printError }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.printError = function(err) { return this.$val.printError(err); };
	Parser.ptr.prototype.clearIsSet = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.Command.eachCommand((function $b(c) {
			var $ptr, c, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = c.Group.eachGroup((function(g) {
				var $ptr, _i, _ref, g, option;
				_ref = g.options;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					option = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					option.isSet = false;
					_i++;
				}
			})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
		}), true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Parser.ptr.prototype.clearIsSet }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	Parser.prototype.clearIsSet = function() { return this.$val.clearIsSet(); };
	getTerminalColumns = function() {
		var $ptr, ws;
		ws = new winsize.ptr(0, 0, 0, 0);
		if (true) {
			syscall.Syscall(54, 0, 1074295912, ws);
			return (ws.col >> 0);
		}
		return 80;
	};
	ptrType$2.methods = [{prop: "isRemaining", name: "isRemaining", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}];
	ptrType.methods = [{prop: "AddCommand", name: "AddCommand", pkg: "", typ: $funcType([$String, $String, $String, $emptyInterface], [ptrType, $error], false)}, {prop: "AddGroup", name: "AddGroup", pkg: "", typ: $funcType([$String, $String, $emptyInterface], [ptrType$1, $error], false)}, {prop: "Commands", name: "Commands", pkg: "", typ: $funcType([], [sliceType$4], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Args", name: "Args", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "scanSubcommandHandler", name: "scanSubcommandHandler", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$1], [scanHandler], false)}, {prop: "scan", name: "scan", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$error], false)}, {prop: "eachCommand", name: "eachCommand", pkg: "github.com/jessevdk/go-flags", typ: $funcType([funcType$1, $Bool], [], false)}, {prop: "eachActiveGroup", name: "eachActiveGroup", pkg: "github.com/jessevdk/go-flags", typ: $funcType([funcType$2], [], false)}, {prop: "addHelpGroups", name: "addHelpGroups", pkg: "github.com/jessevdk/go-flags", typ: $funcType([funcType], [], false)}, {prop: "makeLookup", name: "makeLookup", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [lookup], false)}, {prop: "fillLookup", name: "fillLookup", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$12, $Bool], [], false)}, {prop: "groupByName", name: "groupByName", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$String], [ptrType$1], false)}, {prop: "sortedCommands", name: "sortedCommands", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [sliceType$4], false)}, {prop: "match", name: "match", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$String], [$Bool], false)}, {prop: "hasCliOptions", name: "hasCliOptions", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "fillParseState", name: "fillParseState", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13], [], false)}, {prop: "addHelpGroup", name: "addHelpGroup", pkg: "github.com/jessevdk/go-flags", typ: $funcType([funcType], [ptrType$1], false)}];
	commandList.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	completions.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$14.methods = [{prop: "skipPositional", name: "skipPositional", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $Int], [], false)}, {prop: "completeOptionNames", name: "completeOptionNames", pkg: "github.com/jessevdk/go-flags", typ: $funcType([mapType, $String, $String], [sliceType$5], false)}, {prop: "completeLongNames", name: "completeLongNames", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String, $String], [sliceType$5], false)}, {prop: "completeShortNames", name: "completeShortNames", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String, $String], [sliceType$5], false)}, {prop: "completeCommands", name: "completeCommands", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String], [sliceType$5], false)}, {prop: "completeValue", name: "completeValue", pkg: "github.com/jessevdk/go-flags", typ: $funcType([reflect.Value, $String, $String], [sliceType$5], false)}, {prop: "completeArg", name: "completeArg", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$2, $String, $String], [sliceType$5], false)}, {prop: "complete", name: "complete", pkg: "github.com/jessevdk/go-flags", typ: $funcType([sliceType$3], [sliceType$5], false)}, {prop: "execute", name: "execute", pkg: "github.com/jessevdk/go-flags", typ: $funcType([sliceType$3], [], false)}];
	ErrorType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "AddGroup", name: "AddGroup", pkg: "", typ: $funcType([$String, $String, $emptyInterface], [ptrType$1, $error], false)}, {prop: "Groups", name: "Groups", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Options", name: "Options", pkg: "", typ: $funcType([], [sliceType$8], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([$String], [ptrType$1], false)}, {prop: "optionByName", name: "optionByName", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$String, funcType$3], [ptrType$4], false)}, {prop: "eachGroup", name: "eachGroup", pkg: "github.com/jessevdk/go-flags", typ: $funcType([funcType$4], [], false)}, {prop: "scanStruct", name: "scanStruct", pkg: "github.com/jessevdk/go-flags", typ: $funcType([reflect.Value, ptrType$8, scanHandler], [$error], false)}, {prop: "checkForDuplicateFlags", name: "checkForDuplicateFlags", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [ptrType$7], false)}, {prop: "scanSubGroupHandler", name: "scanSubGroupHandler", pkg: "github.com/jessevdk/go-flags", typ: $funcType([reflect.Value, ptrType$8], [$Bool, $error], false)}, {prop: "scanType", name: "scanType", pkg: "github.com/jessevdk/go-flags", typ: $funcType([scanHandler], [$error], false)}, {prop: "scan", name: "scan", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$error], false)}, {prop: "groupByName", name: "groupByName", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$String], [ptrType$1], false)}];
	ptrType$16.methods = [{prop: "descriptionStart", name: "descriptionStart", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Int], false)}, {prop: "updateLen", name: "updateLen", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$String, $Bool], [], false)}];
	ptrType$19.methods = [{prop: "scan", name: "scan", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [mapType$3, $error], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([], [$error], false)}, {prop: "cached", name: "cached", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [mapType$3], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "GetMany", name: "GetMany", pkg: "", typ: $funcType([$String], [sliceType$3], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "SetMany", name: "SetMany", pkg: "", typ: $funcType([$String, sliceType$3], [], false)}];
	ptrType$4.methods = [{prop: "LongNameWithNamespace", name: "LongNameWithNamespace", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Value", name: "Value", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsSet", name: "IsSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "set", name: "set", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$5], [$error], false)}, {prop: "canCli", name: "canCli", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "canArgument", name: "canArgument", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "emptyValue", name: "emptyValue", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [reflect.Value], false)}, {prop: "empty", name: "empty", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [], false)}, {prop: "clearDefault", name: "clearDefault", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [], false)}, {prop: "valueIsDefault", name: "valueIsDefault", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "isUnmarshaler", name: "isUnmarshaler", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [Unmarshaler], false)}, {prop: "isBool", name: "isBool", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "isFunc", name: "isFunc", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "call", name: "call", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$5], [$error], false)}];
	ptrType$9.methods = [{prop: "getAlignmentInfo", name: "getAlignmentInfo", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [alignmentInfo], false)}, {prop: "writeHelpOption", name: "writeHelpOption", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$20, ptrType$4, alignmentInfo], [], false)}, {prop: "WriteHelp", name: "WriteHelp", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "WriteManPage", name: "WriteManPage", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "ParseArgs", name: "ParseArgs", pkg: "", typ: $funcType([sliceType$3], [sliceType$3, $error], false)}, {prop: "parseOption", name: "parseOption", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String, ptrType$4, $Bool, ptrType$5], [$error], false)}, {prop: "parseLong", name: "parseLong", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String, ptrType$5], [$error], false)}, {prop: "splitShortConcatArg", name: "splitShortConcatArg", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String], [$String, ptrType$5], false)}, {prop: "parseShort", name: "parseShort", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13, $String, ptrType$5], [$error], false)}, {prop: "parseNonOption", name: "parseNonOption", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$13], [$error], false)}, {prop: "showBuiltinHelp", name: "showBuiltinHelp", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$error], false)}, {prop: "printError", name: "printError", pkg: "github.com/jessevdk/go-flags", typ: $funcType([$error], [$error], false)}, {prop: "clearIsSet", name: "clearIsSet", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [], false)}];
	strArgument.methods = [{prop: "Value", name: "Value", pkg: "", typ: $funcType([], [$String, $Bool], false)}];
	ptrType$13.methods = [{prop: "eof", name: "eof", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$Bool], false)}, {prop: "pop", name: "pop", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$String], false)}, {prop: "peek", name: "peek", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$String], false)}, {prop: "checkRequired", name: "checkRequired", pkg: "github.com/jessevdk/go-flags", typ: $funcType([ptrType$9], [$error], false)}, {prop: "estimateCommand", name: "estimateCommand", pkg: "github.com/jessevdk/go-flags", typ: $funcType([], [$error], false)}, {prop: "addArgs", name: "addArgs", pkg: "github.com/jessevdk/go-flags", typ: $funcType([sliceType$3], [$error], true)}];
	Arg.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Description", name: "Description", pkg: "", typ: $String, tag: ""}, {prop: "value", name: "value", pkg: "github.com/jessevdk/go-flags", typ: reflect.Value, tag: ""}, {prop: "tag", name: "tag", pkg: "github.com/jessevdk/go-flags", typ: multiTag, tag: ""}]);
	Command.init([{prop: "Group", name: "", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Active", name: "Active", pkg: "", typ: ptrType, tag: ""}, {prop: "SubcommandsOptional", name: "SubcommandsOptional", pkg: "", typ: $Bool, tag: ""}, {prop: "Aliases", name: "Aliases", pkg: "", typ: sliceType$3, tag: ""}, {prop: "ArgsRequired", name: "ArgsRequired", pkg: "", typ: $Bool, tag: ""}, {prop: "commands", name: "commands", pkg: "github.com/jessevdk/go-flags", typ: sliceType$4, tag: ""}, {prop: "hasBuiltinHelpGroup", name: "hasBuiltinHelpGroup", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}, {prop: "args", name: "args", pkg: "github.com/jessevdk/go-flags", typ: sliceType$2, tag: ""}]);
	Commander.init([{prop: "Execute", name: "Execute", pkg: "", typ: $funcType([sliceType$3], [$error], false)}]);
	Usage.init([{prop: "Usage", name: "Usage", pkg: "", typ: $funcType([], [$String], false)}]);
	lookup.init([{prop: "shortNames", name: "shortNames", pkg: "github.com/jessevdk/go-flags", typ: mapType, tag: ""}, {prop: "longNames", name: "longNames", pkg: "github.com/jessevdk/go-flags", typ: mapType, tag: ""}, {prop: "commands", name: "commands", pkg: "github.com/jessevdk/go-flags", typ: mapType$1, tag: ""}]);
	commandList.init(ptrType);
	Completion.init([{prop: "Item", name: "Item", pkg: "", typ: $String, tag: ""}, {prop: "Description", name: "Description", pkg: "", typ: $String, tag: ""}]);
	completions.init(Completion);
	Completer.init([{prop: "Complete", name: "Complete", pkg: "", typ: $funcType([$String], [sliceType$5], false)}]);
	completion.init([{prop: "parser", name: "parser", pkg: "github.com/jessevdk/go-flags", typ: ptrType$9, tag: ""}, {prop: "ShowDescriptions", name: "ShowDescriptions", pkg: "", typ: $Bool, tag: ""}]);
	Marshaler.init([{prop: "MarshalFlag", name: "MarshalFlag", pkg: "", typ: $funcType([], [$String, $error], false)}]);
	Unmarshaler.init([{prop: "UnmarshalFlag", name: "UnmarshalFlag", pkg: "", typ: $funcType([$String], [$error], false)}]);
	Error.init([{prop: "Type", name: "Type", pkg: "", typ: ErrorType, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Group.init([{prop: "ShortDescription", name: "ShortDescription", pkg: "", typ: $String, tag: ""}, {prop: "LongDescription", name: "LongDescription", pkg: "", typ: $String, tag: ""}, {prop: "Namespace", name: "Namespace", pkg: "", typ: $String, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/jessevdk/go-flags", typ: $emptyInterface, tag: ""}, {prop: "options", name: "options", pkg: "github.com/jessevdk/go-flags", typ: sliceType$8, tag: ""}, {prop: "groups", name: "groups", pkg: "github.com/jessevdk/go-flags", typ: sliceType$9, tag: ""}, {prop: "isBuiltinHelp", name: "isBuiltinHelp", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}, {prop: "data", name: "data", pkg: "github.com/jessevdk/go-flags", typ: $emptyInterface, tag: ""}]);
	scanHandler.init([reflect.Value, ptrType$8], [$Bool, $error], false);
	alignmentInfo.init([{prop: "maxLongLen", name: "maxLongLen", pkg: "github.com/jessevdk/go-flags", typ: $Int, tag: ""}, {prop: "hasShort", name: "hasShort", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}, {prop: "hasValueName", name: "hasValueName", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}, {prop: "terminalColumns", name: "terminalColumns", pkg: "github.com/jessevdk/go-flags", typ: $Int, tag: ""}, {prop: "indent", name: "indent", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}]);
	multiTag.init([{prop: "value", name: "value", pkg: "github.com/jessevdk/go-flags", typ: $String, tag: ""}, {prop: "cache", name: "cache", pkg: "github.com/jessevdk/go-flags", typ: mapType$3, tag: ""}]);
	Option.init([{prop: "Description", name: "Description", pkg: "", typ: $String, tag: ""}, {prop: "ShortName", name: "ShortName", pkg: "", typ: $Int32, tag: ""}, {prop: "LongName", name: "LongName", pkg: "", typ: $String, tag: ""}, {prop: "Default", name: "Default", pkg: "", typ: sliceType$3, tag: ""}, {prop: "EnvDefaultKey", name: "EnvDefaultKey", pkg: "", typ: $String, tag: ""}, {prop: "EnvDefaultDelim", name: "EnvDefaultDelim", pkg: "", typ: $String, tag: ""}, {prop: "OptionalArgument", name: "OptionalArgument", pkg: "", typ: $Bool, tag: ""}, {prop: "OptionalValue", name: "OptionalValue", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Required", name: "Required", pkg: "", typ: $Bool, tag: ""}, {prop: "ValueName", name: "ValueName", pkg: "", typ: $String, tag: ""}, {prop: "DefaultMask", name: "DefaultMask", pkg: "", typ: $String, tag: ""}, {prop: "group", name: "group", pkg: "github.com/jessevdk/go-flags", typ: ptrType$1, tag: ""}, {prop: "field", name: "field", pkg: "github.com/jessevdk/go-flags", typ: reflect.StructField, tag: ""}, {prop: "value", name: "value", pkg: "github.com/jessevdk/go-flags", typ: reflect.Value, tag: ""}, {prop: "iniQuote", name: "iniQuote", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}, {prop: "tag", name: "tag", pkg: "github.com/jessevdk/go-flags", typ: multiTag, tag: ""}, {prop: "isSet", name: "isSet", pkg: "github.com/jessevdk/go-flags", typ: $Bool, tag: ""}]);
	Parser.init([{prop: "Command", name: "", pkg: "", typ: ptrType, tag: ""}, {prop: "Usage", name: "Usage", pkg: "", typ: $String, tag: ""}, {prop: "Options", name: "Options", pkg: "", typ: Options, tag: ""}, {prop: "NamespaceDelimiter", name: "NamespaceDelimiter", pkg: "", typ: $String, tag: ""}, {prop: "UnknownOptionHandler", name: "UnknownOptionHandler", pkg: "", typ: funcType$5, tag: ""}, {prop: "internalError", name: "internalError", pkg: "github.com/jessevdk/go-flags", typ: $error, tag: ""}]);
	SplitArgument.init([{prop: "Value", name: "Value", pkg: "", typ: $funcType([], [$String, $Bool], false)}]);
	strArgument.init([{prop: "value", name: "value", pkg: "github.com/jessevdk/go-flags", typ: ptrType$5, tag: ""}]);
	parseState.init([{prop: "arg", name: "arg", pkg: "github.com/jessevdk/go-flags", typ: $String, tag: ""}, {prop: "args", name: "args", pkg: "github.com/jessevdk/go-flags", typ: sliceType$3, tag: ""}, {prop: "retargs", name: "retargs", pkg: "github.com/jessevdk/go-flags", typ: sliceType$3, tag: ""}, {prop: "positional", name: "positional", pkg: "github.com/jessevdk/go-flags", typ: sliceType$2, tag: ""}, {prop: "err", name: "err", pkg: "github.com/jessevdk/go-flags", typ: $error, tag: ""}, {prop: "command", name: "command", pkg: "github.com/jessevdk/go-flags", typ: ptrType, tag: ""}, {prop: "lookup", name: "lookup", pkg: "github.com/jessevdk/go-flags", typ: lookup, tag: ""}]);
	winsize.init([{prop: "row", name: "row", pkg: "github.com/jessevdk/go-flags", typ: $Uint16, tag: ""}, {prop: "col", name: "col", pkg: "github.com/jessevdk/go-flags", typ: $Uint16, tag: ""}, {prop: "xpixel", name: "xpixel", pkg: "github.com/jessevdk/go-flags", typ: $Uint16, tag: ""}, {prop: "ypixel", name: "ypixel", pkg: "github.com/jessevdk/go-flags", typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = path.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNotPointerToStruct = errors.New("provided data is not a pointer to struct");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, sort, strconv, strings, Error, timeout, temporary, EscapeError, InvalidHostError, URL, Userinfo, Values, sliceType, ptrType, ptrType$1, sliceType$1, arrayType, arrayType$1, sliceType$2, ptrType$2, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape, User, UserPassword, getscheme, split, Parse, parse, parseAuthority, parseHost, validEncodedPath, validOptionalPort, ParseQuery, parseQuery, resolvePath;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Error = $pkg.Error = $newType(0, $kindStruct, "url.Error", "Error", "net/url", function(Op_, URL_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.URL = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.URL = URL_;
		this.Err = Err_;
	});
	timeout = $pkg.timeout = $newType(8, $kindInterface, "url.timeout", "timeout", "net/url", null);
	temporary = $pkg.temporary = $newType(8, $kindInterface, "url.temporary", "temporary", "net/url", null);
	EscapeError = $pkg.EscapeError = $newType(8, $kindString, "url.EscapeError", "EscapeError", "net/url", null);
	InvalidHostError = $pkg.InvalidHostError = $newType(8, $kindString, "url.InvalidHostError", "InvalidHostError", "net/url", null);
	URL = $pkg.URL = $newType(0, $kindStruct, "url.URL", "URL", "net/url", function(Scheme_, Opaque_, User_, Host_, Path_, RawPath_, RawQuery_, Fragment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Scheme = "";
			this.Opaque = "";
			this.User = ptrType$1.nil;
			this.Host = "";
			this.Path = "";
			this.RawPath = "";
			this.RawQuery = "";
			this.Fragment = "";
			return;
		}
		this.Scheme = Scheme_;
		this.Opaque = Opaque_;
		this.User = User_;
		this.Host = Host_;
		this.Path = Path_;
		this.RawPath = RawPath_;
		this.RawQuery = RawQuery_;
		this.Fragment = Fragment_;
	});
	Userinfo = $pkg.Userinfo = $newType(0, $kindStruct, "url.Userinfo", "Userinfo", "net/url", function(username_, password_, passwordSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.username = "";
			this.password = "";
			this.passwordSet = false;
			return;
		}
		this.username = username_;
		this.password = password_;
		this.passwordSet = passwordSet_;
	});
	Values = $pkg.Values = $newType(4, $kindMap, "url.Values", "Values", "net/url", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(URL);
	ptrType$1 = $ptrType(Userinfo);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	ptrType$2 = $ptrType(Error);
	Error.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return e.Op + " " + e.URL + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Timeout = function() {
		var $ptr, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		/* */ $s = 3; case 3:
		return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Timeout }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Timeout = function() { return this.$val.Timeout(); };
	Error.ptr.prototype.Temporary = function() {
		var $ptr, _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, temporary, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Temporary(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		/* */ $s = 3; case 3:
		return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Temporary }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Temporary = function() { return this.$val.Temporary(); };
	ishex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	EscapeError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "invalid URL escape " + strconv.Quote(e);
	};
	$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };
	InvalidHostError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "invalid character " + strconv.Quote(e) + " in host name";
	};
	$ptrType(InvalidHostError).prototype.Error = function() { return new InvalidHostError(this.$get()).Error(); };
	shouldEscape = function(c, mode) {
		var $ptr, _1, _2, _3, c, mode;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		if ((mode === 2) || (mode === 3)) {
			_1 = c;
			if ((_1 === 33) || (_1 === 36) || (_1 === 38) || (_1 === 39) || (_1 === 40) || (_1 === 41) || (_1 === 42) || (_1 === 43) || (_1 === 44) || (_1 === 59) || (_1 === 61) || (_1 === 58) || (_1 === 91) || (_1 === 93) || (_1 === 60) || (_1 === 62) || (_1 === 34)) {
				return false;
			}
		}
		_2 = c;
		if ((_2 === 45) || (_2 === 95) || (_2 === 46) || (_2 === 126)) {
			return false;
		} else if ((_2 === 36) || (_2 === 38) || (_2 === 43) || (_2 === 44) || (_2 === 47) || (_2 === 58) || (_2 === 59) || (_2 === 61) || (_2 === 63) || (_2 === 64)) {
			_3 = mode;
			if (_3 === 1) {
				return c === 63;
			} else if (_3 === 4) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_3 === 5) {
				return true;
			} else if (_3 === 6) {
				return false;
			}
		}
		return true;
	};
	QueryUnescape = function(s) {
		var $ptr, s;
		return unescape(s, 5);
	};
	$pkg.QueryUnescape = QueryUnescape;
	unescape = function(s, mode) {
		var $ptr, _4, _5, hasPlus, i, i$1, j, mode, n, s, t, v;
		n = 0;
		hasPlus = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_4 = s.charCodeAt(i);
			if (_4 === 37) {
				n = n + (1) >> 0;
				if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
					s = s.substring(i);
					if (s.length > 3) {
						s = s.substring(0, 3);
					}
					return ["", new EscapeError(s)];
				}
				if ((mode === 2) && unhex(s.charCodeAt((i + 1 >> 0))) < 8 && !(s.substring(i, (i + 3 >> 0)) === "%25")) {
					return ["", new EscapeError(s.substring(i, (i + 3 >> 0)))];
				}
				if (mode === 3) {
					v = ((unhex(s.charCodeAt((i + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i + 2 >> 0)))) >>> 0;
					if (!(s.substring(i, (i + 3 >> 0)) === "%25") && !((v === 32)) && shouldEscape(v, 2)) {
						return ["", new EscapeError(s.substring(i, (i + 3 >> 0)))];
					}
				}
				i = i + (3) >> 0;
			} else if (_4 === 43) {
				hasPlus = mode === 5;
				i = i + (1) >> 0;
			} else {
				if (((mode === 2) || (mode === 3)) && s.charCodeAt(i) < 128 && shouldEscape(s.charCodeAt(i), mode)) {
					return ["", new InvalidHostError(s.substring(i, (i + 1 >> 0)))];
				}
				i = i + (1) >> 0;
			}
		}
		if ((n === 0) && !hasPlus) {
			return [s, $ifaceNil];
		}
		t = $makeSlice(sliceType, (s.length - ($imul(2, n)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			_5 = s.charCodeAt(i$1);
			if (_5 === 37) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = (((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0));
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else if (_5 === 43) {
				if (mode === 5) {
					((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 32);
				} else {
					((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43);
				}
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
	};
	QueryEscape = function(s) {
		var $ptr, s;
		return escape(s, 5);
	};
	$pkg.QueryEscape = QueryEscape;
	escape = function(s, mode) {
		var $ptr, _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, mode, s, spaceCount, t, x, x$1;
		_tmp = 0;
		_tmp$1 = 0;
		spaceCount = _tmp;
		hexCount = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 5)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(2, hexCount)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 5)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43);
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 37);
				(x = j + 1 >> 0, ((x < 0 || x >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))));
				(x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))));
				j = j + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	User = function(username) {
		var $ptr, username;
		return new Userinfo.ptr(username, "", false);
	};
	$pkg.User = User;
	UserPassword = function(username, password) {
		var $ptr, password, username;
		return new Userinfo.ptr(username, password, true);
	};
	$pkg.UserPassword = UserPassword;
	Userinfo.ptr.prototype.Username = function() {
		var $ptr, u;
		u = this;
		return u.username;
	};
	Userinfo.prototype.Username = function() { return this.$val.Username(); };
	Userinfo.ptr.prototype.Password = function() {
		var $ptr, u;
		u = this;
		if (u.passwordSet) {
			return [u.password, true];
		}
		return ["", false];
	};
	Userinfo.prototype.Password = function() { return this.$val.Password(); };
	Userinfo.ptr.prototype.String = function() {
		var $ptr, s, u;
		u = this;
		s = escape(u.username, 4);
		if (u.passwordSet) {
			s = s + (":" + escape(u.password, 4));
		}
		return s;
	};
	Userinfo.prototype.String = function() { return this.$val.String(); };
	getscheme = function(rawurl) {
		var $ptr, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, err, i, path, rawurl, scheme;
		scheme = "";
		path = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < rawurl.length)) { break; }
			c = rawurl.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
			} else if (48 <= c && c <= 57 || (c === 43) || (c === 45) || (c === 46)) {
				if (i === 0) {
					_tmp = "";
					_tmp$1 = rawurl;
					_tmp$2 = $ifaceNil;
					scheme = _tmp;
					path = _tmp$1;
					err = _tmp$2;
					return [scheme, path, err];
				}
			} else if ((c === 58)) {
				if (i === 0) {
					_tmp$3 = "";
					_tmp$4 = "";
					_tmp$5 = errors.New("missing protocol scheme");
					scheme = _tmp$3;
					path = _tmp$4;
					err = _tmp$5;
					return [scheme, path, err];
				}
				_tmp$6 = rawurl.substring(0, i);
				_tmp$7 = rawurl.substring((i + 1 >> 0));
				_tmp$8 = $ifaceNil;
				scheme = _tmp$6;
				path = _tmp$7;
				err = _tmp$8;
				return [scheme, path, err];
			} else {
				_tmp$9 = "";
				_tmp$10 = rawurl;
				_tmp$11 = $ifaceNil;
				scheme = _tmp$9;
				path = _tmp$10;
				err = _tmp$11;
				return [scheme, path, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$12 = "";
		_tmp$13 = rawurl;
		_tmp$14 = $ifaceNil;
		scheme = _tmp$12;
		path = _tmp$13;
		err = _tmp$14;
		return [scheme, path, err];
	};
	split = function(s, c, cutc) {
		var $ptr, c, cutc, i, s;
		i = strings.Index(s, c);
		if (i < 0) {
			return [s, ""];
		}
		if (cutc) {
			return [s.substring(0, i), s.substring((i + c.length >> 0))];
		}
		return [s.substring(0, i), s.substring(i)];
	};
	Parse = function(rawurl) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, err, frag, rawurl, u, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; frag = $f.frag; rawurl = $f.rawurl; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		url = ptrType.nil;
		err = $ifaceNil;
		_tuple = split(rawurl, "#", true);
		u = _tuple[0];
		frag = _tuple[1];
		_r = parse(u, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		url = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType.nil;
			_tmp$1 = err;
			url = _tmp;
			err = _tmp$1;
			return [url, err];
		}
		if (frag === "") {
			_tmp$2 = url;
			_tmp$3 = $ifaceNil;
			url = _tmp$2;
			err = _tmp$3;
			return [url, err];
		}
		_tuple$2 = unescape(frag, 6);
		url.Fragment = _tuple$2[0];
		err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = ptrType.nil;
			_tmp$5 = new Error.ptr("parse", rawurl, err);
			url = _tmp$4;
			err = _tmp$5;
			return [url, err];
		}
		_tmp$6 = url;
		_tmp$7 = $ifaceNil;
		url = _tmp$6;
		err = _tmp$7;
		return [url, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.frag = frag; $f.rawurl = rawurl; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(rawurl, viaRequest) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, authority, err, rawurl, rest, url, viaRequest, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; authority = $f.authority; err = $f.err; rawurl = $f.rawurl; rest = $f.rest; url = $f.url; viaRequest = $f.viaRequest; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		url = ptrType.nil;
		err = $ifaceNil;
		rest = "";
		/* */ if (rawurl === "" && viaRequest) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (rawurl === "" && viaRequest) { */ case 1:
			err = errors.New("empty url");
			/* goto Error */ $s = 3; continue;
		/* } */ case 2:
		url = new URL.ptr("", "", ptrType$1.nil, "", "", "", "", "");
		if (rawurl === "*") {
			url.Path = "*";
			return [url, err];
		}
		_tuple = getscheme(rawurl);
		url.Scheme = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			/* goto Error */ $s = 3; continue;
		/* } */ case 5:
		_r = strings.ToLower(url.Scheme); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		url.Scheme = _r;
		_tuple$1 = split(rest, "?", true);
		rest = _tuple$1[0];
		url.RawQuery = _tuple$1[1];
		/* */ if (!strings.HasPrefix(rest, "/")) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!strings.HasPrefix(rest, "/")) { */ case 7:
			if (!(url.Scheme === "")) {
				url.Opaque = rest;
				_tmp = url;
				_tmp$1 = $ifaceNil;
				url = _tmp;
				err = _tmp$1;
				return [url, err];
			}
			/* */ if (viaRequest) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (viaRequest) { */ case 9:
				err = errors.New("invalid URI for request");
				/* goto Error */ $s = 3; continue;
			/* } */ case 10:
		/* } */ case 8:
		/* */ if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { */ case 11:
			authority = "";
			_tuple$2 = split(rest.substring(2), "/", false);
			authority = _tuple$2[0];
			rest = _tuple$2[1];
			_r$1 = parseAuthority(authority); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			url.User = _tuple$3[0];
			url.Host = _tuple$3[1];
			err = _tuple$3[2];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 14:
				/* goto Error */ $s = 3; continue;
			/* } */ case 15:
		/* } */ case 12:
		_tuple$4 = unescape(rest, 1);
		url.Path = _tuple$4[0];
		err = _tuple$4[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 16:
			/* goto Error */ $s = 3; continue;
		/* } */ case 17:
		if (!(url.EscapedPath() === rest) && validEncodedPath(rest)) {
			url.RawPath = rest;
		}
		_tmp$2 = url;
		_tmp$3 = $ifaceNil;
		url = _tmp$2;
		err = _tmp$3;
		return [url, err];
		/* Error: */ case 3:
		_tmp$4 = ptrType.nil;
		_tmp$5 = new Error.ptr("parse", rawurl, err);
		url = _tmp$4;
		err = _tmp$5;
		return [url, err];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.authority = authority; $f.err = err; $f.rawurl = rawurl; $f.rest = rest; $f.url = url; $f.viaRequest = viaRequest; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseAuthority = function(authority) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, authority, err, host, i, password, user, userinfo, username, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; authority = $f.authority; err = $f.err; host = $f.host; i = $f.i; password = $f.password; user = $f.user; userinfo = $f.userinfo; username = $f.username; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		user = ptrType$1.nil;
		host = "";
		err = $ifaceNil;
		i = strings.LastIndex(authority, "@");
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r = parseHost(authority); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			host = _tuple[0];
			err = _tuple[1];
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = parseHost(authority.substring((i + 1 >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			host = _tuple$1[0];
			err = _tuple$1[1];
		/* } */ case 3:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = "";
			_tmp$2 = err;
			user = _tmp;
			host = _tmp$1;
			err = _tmp$2;
			return [user, host, err];
		}
		if (i < 0) {
			_tmp$3 = ptrType$1.nil;
			_tmp$4 = host;
			_tmp$5 = $ifaceNil;
			user = _tmp$3;
			host = _tmp$4;
			err = _tmp$5;
			return [user, host, err];
		}
		userinfo = authority.substring(0, i);
		if (strings.Index(userinfo, ":") < 0) {
			_tuple$2 = unescape(userinfo, 4);
			userinfo = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = ptrType$1.nil;
				_tmp$7 = "";
				_tmp$8 = err;
				user = _tmp$6;
				host = _tmp$7;
				err = _tmp$8;
				return [user, host, err];
			}
			user = User(userinfo);
		} else {
			_tuple$3 = split(userinfo, ":", true);
			username = _tuple$3[0];
			password = _tuple$3[1];
			_tuple$4 = unescape(username, 4);
			username = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$9 = ptrType$1.nil;
				_tmp$10 = "";
				_tmp$11 = err;
				user = _tmp$9;
				host = _tmp$10;
				err = _tmp$11;
				return [user, host, err];
			}
			_tuple$5 = unescape(password, 4);
			password = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = ptrType$1.nil;
				_tmp$13 = "";
				_tmp$14 = err;
				user = _tmp$12;
				host = _tmp$13;
				err = _tmp$14;
				return [user, host, err];
			}
			user = UserPassword(username, password);
		}
		_tmp$15 = user;
		_tmp$16 = host;
		_tmp$17 = $ifaceNil;
		user = _tmp$15;
		host = _tmp$16;
		err = _tmp$17;
		return [user, host, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseAuthority }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.authority = authority; $f.err = err; $f.host = host; $f.i = i; $f.password = password; $f.user = user; $f.userinfo = userinfo; $f.username = username; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseHost = function(host) {
		var $ptr, _r, _tuple, _tuple$1, _tuple$2, _tuple$3, colonPort, err, err$1, host, host1, host2, host3, i, zone, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; colonPort = $f.colonPort; err = $f.err; err$1 = $f.err$1; host = $f.host; host1 = $f.host1; host2 = $f.host2; host3 = $f.host3; i = $f.i; zone = $f.zone; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (strings.HasPrefix(host, "[")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (strings.HasPrefix(host, "[")) { */ case 1:
			i = strings.LastIndex(host, "]");
			if (i < 0) {
				return ["", errors.New("missing ']' in host")];
			}
			colonPort = host.substring((i + 1 >> 0));
			/* */ if (!validOptionalPort(colonPort)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!validOptionalPort(colonPort)) { */ case 3:
				_r = fmt.Errorf("invalid port %q after host", new sliceType$1([new $String(colonPort)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return ["", _r];
			/* } */ case 4:
			zone = strings.Index(host.substring(0, i), "%25");
			if (zone >= 0) {
				_tuple = unescape(host.substring(0, zone), 2);
				host1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return ["", err];
				}
				_tuple$1 = unescape(host.substring(zone, i), 3);
				host2 = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return ["", err];
				}
				_tuple$2 = unescape(host.substring(i), 2);
				host3 = _tuple$2[0];
				err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return ["", err];
				}
				return [host1 + host2 + host3, $ifaceNil];
			}
		/* } */ case 2:
		err$1 = $ifaceNil;
		_tuple$3 = unescape(host, 2);
		host = _tuple$3[0];
		err$1 = _tuple$3[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return ["", err$1];
		}
		return [host, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseHost }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.colonPort = colonPort; $f.err = err; $f.err$1 = err$1; $f.host = host; $f.host1 = host1; $f.host2 = host2; $f.host3 = host3; $f.i = i; $f.zone = zone; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.ptr.prototype.EscapedPath = function() {
		var $ptr, _tuple, err, p, u;
		u = this;
		if (!(u.RawPath === "") && validEncodedPath(u.RawPath)) {
			_tuple = unescape(u.RawPath, 1);
			p = _tuple[0];
			err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && p === u.Path) {
				return u.RawPath;
			}
		}
		if (u.Path === "*") {
			return "*";
		}
		return escape(u.Path, 1);
	};
	URL.prototype.EscapedPath = function() { return this.$val.EscapedPath(); };
	validEncodedPath = function(s) {
		var $ptr, _6, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_6 = s.charCodeAt(i);
			if ((_6 === 33) || (_6 === 36) || (_6 === 38) || (_6 === 39) || (_6 === 40) || (_6 === 41) || (_6 === 42) || (_6 === 43) || (_6 === 44) || (_6 === 59) || (_6 === 61) || (_6 === 58) || (_6 === 64)) {
			} else if ((_6 === 91) || (_6 === 93)) {
			} else if (_6 === 37) {
			} else if (shouldEscape(s.charCodeAt(i), 1)) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	validOptionalPort = function(port) {
		var $ptr, _i, _ref, _rune, b, port;
		if (port === "") {
			return true;
		}
		if (!((port.charCodeAt(0) === 58))) {
			return false;
		}
		_ref = port.substring(1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			b = _rune[0];
			if (b < 48 || b > 57) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	URL.ptr.prototype.String = function() {
		var $ptr, buf, h, path, u, ui;
		u = this;
		buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		if (!(u.Scheme === "")) {
			buf.WriteString(u.Scheme);
			buf.WriteByte(58);
		}
		if (!(u.Opaque === "")) {
			buf.WriteString(u.Opaque);
		} else {
			if (!(u.Scheme === "") || !(u.Host === "") || !(u.User === ptrType$1.nil)) {
				buf.WriteString("//");
				ui = u.User;
				if (!(ui === ptrType$1.nil)) {
					buf.WriteString(ui.String());
					buf.WriteByte(64);
				}
				h = u.Host;
				if (!(h === "")) {
					buf.WriteString(escape(h, 2));
				}
			}
			path = u.EscapedPath();
			if (!(path === "") && !((path.charCodeAt(0) === 47)) && !(u.Host === "")) {
				buf.WriteByte(47);
			}
			buf.WriteString(path);
		}
		if (!(u.RawQuery === "")) {
			buf.WriteByte(63);
			buf.WriteString(u.RawQuery);
		}
		if (!(u.Fragment === "")) {
			buf.WriteByte(35);
			buf.WriteString(escape(u.Fragment, 6));
		}
		return buf.String();
	};
	URL.prototype.String = function() { return this.$val.String(); };
	Values.prototype.Get = function(key) {
		var $ptr, _entry, _tuple, key, ok, v, vs;
		v = this.$val;
		if (v === false) {
			return "";
		}
		_tuple = (_entry = v[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [sliceType$2.nil, false]);
		vs = _tuple[0];
		ok = _tuple[1];
		if (!ok || (vs.$length === 0)) {
			return "";
		}
		return (0 >= vs.$length ? $throwRuntimeError("index out of range") : vs.$array[vs.$offset + 0]);
	};
	$ptrType(Values).prototype.Get = function(key) { return new Values(this.$get()).Get(key); };
	Values.prototype.Set = function(key, value) {
		var $ptr, _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new sliceType$2([value]) };
	};
	$ptrType(Values).prototype.Set = function(key, value) { return new Values(this.$get()).Set(key, value); };
	Values.prototype.Add = function(key, value) {
		var $ptr, _entry, _key, key, v, value;
		v = this.$val;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = v[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$2.nil), value) };
	};
	$ptrType(Values).prototype.Add = function(key, value) { return new Values(this.$get()).Add(key, value); };
	Values.prototype.Del = function(key) {
		var $ptr, key, v;
		v = this.$val;
		delete v[$String.keyFor(key)];
	};
	$ptrType(Values).prototype.Del = function(key) { return new Values(this.$get()).Del(key); };
	ParseQuery = function(query) {
		var $ptr, err, m, query;
		m = false;
		err = $ifaceNil;
		m = {};
		err = parseQuery(m, query);
		return [m, err];
	};
	$pkg.ParseQuery = ParseQuery;
	parseQuery = function(m, query) {
		var $ptr, _entry, _key, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, err, err1, i, i$1, key, m, query, value;
		err = $ifaceNil;
		while (true) {
			if (!(!(query === ""))) { break; }
			key = query;
			i = strings.IndexAny(key, "&;");
			if (i >= 0) {
				_tmp = key.substring(0, i);
				_tmp$1 = key.substring((i + 1 >> 0));
				key = _tmp;
				query = _tmp$1;
			} else {
				query = "";
			}
			if (key === "") {
				continue;
			}
			value = "";
			i$1 = strings.Index(key, "=");
			if (i$1 >= 0) {
				_tmp$2 = key.substring(0, i$1);
				_tmp$3 = key.substring((i$1 + 1 >> 0));
				key = _tmp$2;
				value = _tmp$3;
			}
			_tuple = QueryUnescape(key);
			key = _tuple[0];
			err1 = _tuple[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_tuple$1 = QueryUnescape(value);
			value = _tuple$1[0];
			err1 = _tuple$1[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry = m[$String.keyFor(key)], _entry !== undefined ? _entry.v : sliceType$2.nil), value) };
		}
		err = err;
		return err;
	};
	Values.prototype.Encode = function() {
		var $ptr, _entry, _entry$1, _i, _i$1, _i$2, _keys, _ref, _ref$1, _ref$2, buf, k, k$1, keys, prefix, v, v$1, vs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buf = $f.buf; k = $f.k; k$1 = $f.k$1; keys = $f.keys; prefix = $f.prefix; v = $f.v; v$1 = $f.v$1; vs = $f.vs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this.$val;
		if (v === false) {
			return "";
		}
		buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		keys = $makeSlice(sliceType$2, 0, $keys(v).length);
		_ref = v;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			keys = $append(keys, k);
			_i++;
		}
		$r = sort.Strings(keys); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = keys;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			k$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			vs = (_entry$1 = v[$String.keyFor(k$1)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil);
			prefix = QueryEscape(k$1) + "=";
			_ref$2 = vs;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				v$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (buf.Len() > 0) {
					buf.WriteByte(38);
				}
				buf.WriteString(prefix);
				buf.WriteString(QueryEscape(v$1));
				_i$2++;
			}
			_i$1++;
		}
		return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Values.prototype.Encode }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buf = buf; $f.k = k; $f.k$1 = k$1; $f.keys = keys; $f.prefix = prefix; $f.v = v; $f.v$1 = v$1; $f.vs = vs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Values).prototype.Encode = function() { return new Values(this.$get()).Encode(); };
	resolvePath = function(base, ref) {
		var $ptr, _7, _i, _r, _ref, base, dst, elem, full, i, last, ref, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; _i = $f._i; _r = $f._r; _ref = $f._ref; base = $f.base; dst = $f.dst; elem = $f.elem; full = $f.full; i = $f.i; last = $f.last; ref = $f.ref; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		full = "";
		if (ref === "") {
			full = base;
		} else if (!((ref.charCodeAt(0) === 47))) {
			i = strings.LastIndex(base, "/");
			full = base.substring(0, (i + 1 >> 0)) + ref;
		} else {
			full = ref;
		}
		if (full === "") {
			return "";
		}
		dst = sliceType$2.nil;
		src = strings.Split(full, "/");
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			elem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_7 = elem;
			if (_7 === ".") {
			} else if (_7 === "..") {
				if (dst.$length > 0) {
					dst = $subslice(dst, 0, (dst.$length - 1 >> 0));
				}
			} else {
				dst = $append(dst, elem);
			}
			_i++;
		}
		last = (x = src.$length - 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x]));
		if (last === "." || last === "..") {
			dst = $append(dst, "");
		}
		_r = strings.TrimLeft(strings.Join(dst, "/"), "/"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return "/" + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolvePath }; } $f.$ptr = $ptr; $f._7 = _7; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.base = base; $f.dst = dst; $f.elem = elem; $f.full = full; $f.i = i; $f.last = last; $f.ref = ref; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.ptr.prototype.IsAbs = function() {
		var $ptr, u;
		u = this;
		return !(u.Scheme === "");
	};
	URL.prototype.IsAbs = function() { return this.$val.IsAbs(); };
	URL.ptr.prototype.Parse = function(ref) {
		var $ptr, _r, _r$1, _tuple, err, ref, refurl, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ref = $f.ref; refurl = $f.refurl; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = this;
		_r = Parse(ref); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		refurl = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		_r$1 = u.ResolveReference(refurl); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ref = ref; $f.refurl = refurl; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.prototype.Parse = function(ref) { return this.$val.Parse(ref); };
	URL.ptr.prototype.ResolveReference = function(ref) {
		var $ptr, _r, _r$1, ref, u, url, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; ref = $f.ref; u = $f.u; url = $f.url; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		url = [url];
		u = this;
		url[0] = $clone(ref, URL);
		if (ref.Scheme === "") {
			url[0].Scheme = u.Scheme;
		}
		/* */ if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ptrType$1.nil)) { */ case 1:
			_r = resolvePath(ref.Path, ""); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			url[0].Path = _r;
			return url[0];
		/* } */ case 2:
		if (!(ref.Opaque === "")) {
			url[0].User = ptrType$1.nil;
			url[0].Host = "";
			url[0].Path = "";
			return url[0];
		}
		if (ref.Path === "") {
			if (ref.RawQuery === "") {
				url[0].RawQuery = u.RawQuery;
				if (ref.Fragment === "") {
					url[0].Fragment = u.Fragment;
				}
			}
		}
		url[0].Host = u.Host;
		url[0].User = u.User;
		_r$1 = resolvePath(u.Path, ref.Path); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		url[0].Path = _r$1;
		return url[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: URL.ptr.prototype.ResolveReference }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.ref = ref; $f.u = u; $f.url = url; $f.$s = $s; $f.$r = $r; return $f;
	};
	URL.prototype.ResolveReference = function(ref) { return this.$val.ResolveReference(ref); };
	URL.ptr.prototype.Query = function() {
		var $ptr, _tuple, u, v;
		u = this;
		_tuple = ParseQuery(u.RawQuery);
		v = _tuple[0];
		return v;
	};
	URL.prototype.Query = function() { return this.$val.Query(); };
	URL.ptr.prototype.RequestURI = function() {
		var $ptr, result, u;
		u = this;
		result = u.Opaque;
		if (result === "") {
			result = u.EscapedPath();
			if (result === "") {
				result = "/";
			}
		} else {
			if (strings.HasPrefix(result, "//")) {
				result = u.Scheme + ":" + result;
			}
		}
		if (!(u.RawQuery === "")) {
			result = result + ("?" + u.RawQuery);
		}
		return result;
	};
	URL.prototype.RequestURI = function() { return this.$val.RequestURI(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	EscapeError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InvalidHostError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "EscapedPath", name: "EscapedPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsAbs", name: "IsAbs", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType, $error], false)}, {prop: "ResolveReference", name: "ResolveReference", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Query", name: "Query", pkg: "", typ: $funcType([], [Values], false)}, {prop: "RequestURI", name: "RequestURI", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Username", name: "Username", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Password", name: "Password", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Values.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Del", name: "Del", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "URL", name: "URL", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	temporary.init([{prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}]);
	URL.init([{prop: "Scheme", name: "Scheme", pkg: "", typ: $String, tag: ""}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $String, tag: ""}, {prop: "User", name: "User", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Host", name: "Host", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "RawPath", name: "RawPath", pkg: "", typ: $String, tag: ""}, {prop: "RawQuery", name: "RawQuery", pkg: "", typ: $String, tag: ""}, {prop: "Fragment", name: "Fragment", pkg: "", typ: $String, tag: ""}]);
	Userinfo.init([{prop: "username", name: "username", pkg: "net/url", typ: $String, tag: ""}, {prop: "password", name: "password", pkg: "net/url", typ: $String, tag: ""}, {prop: "passwordSet", name: "passwordSet", pkg: "net/url", typ: $Bool, tag: ""}]);
	Values.init($String, sliceType$2);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/common"] = (function() {
	var $pkg = {}, $init, fmt, url, os, strings, DataType, DataOption, DataOptions, CurlOptions, HeaderGroup, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType$1, ptrType$2, funcType, funcType$1;
	fmt = $packages["fmt"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	DataType = $pkg.DataType = $newType(4, $kindInt, "common.DataType", "DataType", "github.com/shibukawa/curl_as_dsl/common", null);
	DataOption = $pkg.DataOption = $newType(0, $kindStruct, "common.DataOption", "DataOption", "github.com/shibukawa/curl_as_dsl/common", function(Value_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = "";
			this.Type = 0;
			return;
		}
		this.Value = Value_;
		this.Type = Type_;
	});
	DataOptions = $pkg.DataOptions = $newType(12, $kindSlice, "common.DataOptions", "DataOptions", "github.com/shibukawa/curl_as_dsl/common", null);
	CurlOptions = $pkg.CurlOptions = $newType(0, $kindStruct, "common.CurlOptions", "CurlOptions", "github.com/shibukawa/curl_as_dsl/common", function(Basic_, Compressed_, Cookie_, CookieJar_, Data_, DataAscii_, DataBinary_, DataUrlEncode_, Get_, Form_, FormString_, Header_, Head_, Http11_, Http2_, Insecure_, Proxy_, Referer_, Request_, TrEncoding_, Transfer_, Url_, User_, UserAgent_, AWSV2_, Http2Flag_, ProcessedData_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Basic = false;
			this.Compressed = $throwNilPointerError;
			this.Cookie = sliceType$1.nil;
			this.CookieJar = "";
			this.Data = $throwNilPointerError;
			this.DataAscii = $throwNilPointerError;
			this.DataBinary = $throwNilPointerError;
			this.DataUrlEncode = $throwNilPointerError;
			this.Get = false;
			this.Form = $throwNilPointerError;
			this.FormString = $throwNilPointerError;
			this.Header = sliceType$1.nil;
			this.Head = false;
			this.Http11 = $throwNilPointerError;
			this.Http2 = $throwNilPointerError;
			this.Insecure = false;
			this.Proxy = "";
			this.Referer = $throwNilPointerError;
			this.Request = "";
			this.TrEncoding = $throwNilPointerError;
			this.Transfer = $throwNilPointerError;
			this.Url = "";
			this.User = "";
			this.UserAgent = $throwNilPointerError;
			this.AWSV2 = "";
			this.Http2Flag = false;
			this.ProcessedData = DataOptions.nil;
			return;
		}
		this.Basic = Basic_;
		this.Compressed = Compressed_;
		this.Cookie = Cookie_;
		this.CookieJar = CookieJar_;
		this.Data = Data_;
		this.DataAscii = DataAscii_;
		this.DataBinary = DataBinary_;
		this.DataUrlEncode = DataUrlEncode_;
		this.Get = Get_;
		this.Form = Form_;
		this.FormString = FormString_;
		this.Header = Header_;
		this.Head = Head_;
		this.Http11 = Http11_;
		this.Http2 = Http2_;
		this.Insecure = Insecure_;
		this.Proxy = Proxy_;
		this.Referer = Referer_;
		this.Request = Request_;
		this.TrEncoding = TrEncoding_;
		this.Transfer = Transfer_;
		this.Url = Url_;
		this.User = User_;
		this.UserAgent = UserAgent_;
		this.AWSV2 = AWSV2_;
		this.Http2Flag = Http2Flag_;
		this.ProcessedData = ProcessedData_;
	});
	HeaderGroup = $pkg.HeaderGroup = $newType(0, $kindStruct, "common.HeaderGroup", "HeaderGroup", "github.com/shibukawa/curl_as_dsl/common", function(Key_, Values_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = "";
			this.Values = sliceType$1.nil;
			return;
		}
		this.Key = Key_;
		this.Values = Values_;
	});
	ptrType = $ptrType(DataOptions);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType(sliceType$1);
	sliceType$3 = $sliceType(HeaderGroup);
	ptrType$1 = $ptrType(DataOption);
	ptrType$2 = $ptrType(CurlOptions);
	funcType = $funcType([], [], false);
	funcType$1 = $funcType([$String], [], false);
	DataOption.ptr.prototype.IsFormStyle = function() {
		var $ptr, self;
		self = this;
		return !((strings.IndexByte(self.Value, 61) === -1));
	};
	DataOption.prototype.IsFormStyle = function() { return this.$val.IsFormStyle(); };
	DataOption.ptr.prototype.UseExternalFile = function() {
		var $ptr, self;
		self = this;
		return !(self.FileName() === "");
	};
	DataOption.prototype.UseExternalFile = function() { return this.$val.UseExternalFile(); };
	DataOption.ptr.prototype.FileName = function() {
		var $ptr, index, nextChar, self, x, x$1;
		self = this;
		if (self.Type === 3) {
			index = strings.Index(self.Value, "=");
			if (index === -1) {
				return "";
			}
			if (index < (self.Value.length - 1 >> 0)) {
				nextChar = self.Value.substring((index + 1 >> 0), (index + 2 >> 0));
				if (nextChar === "@" || nextChar === "<") {
					return (x = strings.Split(self.Value.substring((index + 2 >> 0)), ";"), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
				}
			}
		} else if (!((self.Type === 4))) {
			if (strings.HasPrefix(self.Value, "@")) {
				return (x$1 = strings.Split(self.Value.substring(1), ";"), (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
			}
		}
		return "";
	};
	DataOption.prototype.FileName = function() { return this.$val.FileName(); };
	DataOption.ptr.prototype.SendAsFormFile = function() {
		var $ptr, index, nextChar, self;
		self = this;
		if (self.Type === 3) {
			index = strings.Index(self.Value, "=");
			if (index === -1) {
				return false;
			}
			if (index < (self.Value.length - 1 >> 0)) {
				nextChar = self.Value.substring((index + 1 >> 0), (index + 2 >> 0));
				if (nextChar === "@") {
					return true;
				}
			}
		}
		return false;
	};
	DataOption.prototype.SendAsFormFile = function() { return this.$val.SendAsFormFile(); };
	$ptrType(DataOptions).prototype.Append = function(data, typeEmum) {
		var $ptr, data, self, typeEmum;
		self = this;
		self.$set($append(self.$get(), new DataOption.ptr(data, typeEmum)));
	};
	$ptrType(DataOptions).prototype.HasAnyData = function() {
		var $ptr, self;
		self = this;
		return self.$get().$length > 0;
	};
	$ptrType(DataOptions).prototype.HasData = function() {
		var $ptr, _1, _i, _ref, data, self;
		self = this;
		_ref = self.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), DataOption);
			_1 = data.Type;
			if (_1 === 0) {
				return true;
			} else if (_1 === 1) {
				return true;
			} else if (_1 === 2) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$ptrType(DataOptions).prototype.HasForm = function() {
		var $ptr, _2, _i, _ref, data, self;
		self = this;
		_ref = self.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), DataOption);
			_2 = data.Type;
			if (_2 === 3) {
				return true;
			} else if (_2 === 4) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$ptrType(DataOptions).prototype.ExternalFileCount = function() {
		var $ptr, _i, _ref, count, data, self;
		self = this;
		count = 0;
		_ref = self.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), DataOption);
			if (data.UseExternalFile()) {
				count = count + (1) >> 0;
			}
			_i++;
		}
		return count;
	};
	CurlOptions.ptr.prototype.Init = function() {
		var $ptr, self;
		self = this;
		self.Compressed = (function() {
			var $ptr;
			self.Header = $append(self.Header, "Accept-Encoding: deflate", "Accept-Encoding: gzip");
		});
		self.Data = (function(data) {
			var $ptr, data;
			(self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(data, 0);
		});
		self.DataAscii = self.Data;
		self.DataBinary = (function(data) {
			var $ptr, data;
			(self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(data, 1);
		});
		self.DataUrlEncode = (function(data) {
			var $ptr, data;
			(self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(data, 2);
		});
		self.Form = (function(data) {
			var $ptr, data;
			(self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(data, 3);
		});
		self.FormString = (function(data) {
			var $ptr, data;
			(self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(data, 4);
		});
		self.Http11 = (function() {
			var $ptr;
			self.Http2Flag = false;
		});
		self.Http2 = (function() {
			var $ptr;
			self.Http2Flag = true;
		});
		self.Referer = (function $b(data) {
			var $ptr, _r, data, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Sprintf("Referer: %s", new sliceType([new $String(data)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			self.Header = $append(self.Header, _r);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
		});
		self.Transfer = (function $b(data) {
			var $ptr, _r, data, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Sprintf("@%s", new sliceType([new $String(data)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = (self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).Append(_r, 1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (self.Request === "") {
				self.Request = "PUT";
			}
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
		});
		self.TrEncoding = (function() {
			var $ptr;
			self.Header = $append(self.Header, "Te: gzip");
		});
		self.UserAgent = (function $b(data) {
			var $ptr, _r, data, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = fmt.Sprintf("User-Agent: %s", new sliceType([new $String(data)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			self.Header = $append(self.Header, _r);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	CurlOptions.prototype.Init = function() { return this.$val.Init(); };
	CurlOptions.ptr.prototype.CheckError = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if ((self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).HasData() && (self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).HasData()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).HasData() && (self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).HasData()) { */ case 1:
			_r = fmt.Errorf("Warning: You can only select one HTTP request!", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.CheckError }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.CheckError = function() { return this.$val.CheckError(); };
	CurlOptions.ptr.prototype.Method = function() {
		var $ptr, _r, method, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; method = $f.method; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = strings.ToUpper(self.Request); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		method = _r;
		if (!(method === "")) {
			return method;
		}
		if (self.Get) {
			return "GET";
		}
		if (self.Head) {
			return "HEAD";
		}
		if ((self.$ptr_ProcessedData || (self.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, self))).HasAnyData()) {
			return "POST";
		}
		return "GET";
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.method = method; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.Method = function() { return this.$val.Method(); };
	CurlOptions.ptr.prototype.Headers = function() {
		var $ptr, _i, _r, _r$1, _ref, header, result, self, words, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; header = $f.header; result = $f.result; self = $f.self; words = $f.words; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		result = sliceType$2.nil;
		_ref = self.Header;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			words = strings.SplitN(header, ":", 2);
			/* */ if (!((words.$length === 2))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((words.$length === 2))) { */ case 3:
				_r = fmt.Fprintf(os.Stderr, "[warning] %s is wrong style header.\n", new sliceType([new $String(header)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$1 = strings.TrimSpace((1 >= words.$length ? $throwRuntimeError("index out of range") : words.$array[words.$offset + 1])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			(1 >= words.$length ? $throwRuntimeError("index out of range") : words.$array[words.$offset + 1] = _r$1);
			result = $append(result, words);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.Headers }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.header = header; $f.result = result; $f.self = self; $f.words = words; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.Headers = function() { return this.$val.Headers(); };
	CurlOptions.ptr.prototype.GroupedHeaders = function() {
		var $ptr, _entry, _i, _key, _r, _r$1, _ref, _tuple, header, headerGroup, headers, i, index, key, ok, result, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; header = $f.header; headerGroup = $f.headerGroup; headers = $f.headers; i = $f.i; index = $f.index; key = $f.key; ok = $f.ok; result = $f.result; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Headers(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		headers = _r;
		index = {};
		result = sliceType$3.nil;
		_ref = headers;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$1 = strings.ToLower((0 >= header.$length ? $throwRuntimeError("index out of range") : header.$array[header.$offset + 0])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			key = _r$1;
			_tuple = (_entry = index[$String.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			i = _tuple[0];
			ok = _tuple[1];
			if (ok) {
				((i < 0 || i >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i]).Values = $append(((i < 0 || i >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i]).Values, (1 >= header.$length ? $throwRuntimeError("index out of range") : header.$array[header.$offset + 1]));
			} else {
				headerGroup = new HeaderGroup.ptr(key, $makeSlice(sliceType$1, 1));
				(x = headerGroup.Values, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = (1 >= header.$length ? $throwRuntimeError("index out of range") : header.$array[header.$offset + 1])));
				_key = key; (index || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: result.$length };
				result = $append(result, headerGroup);
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.GroupedHeaders }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.header = header; $f.headerGroup = headerGroup; $f.headers = headers; $f.i = i; $f.index = index; $f.key = key; $f.ok = ok; $f.result = result; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.GroupedHeaders = function() { return this.$val.GroupedHeaders(); };
	CurlOptions.ptr.prototype.OnlyHasContentTypeHeader = function() {
		var $ptr, _r, _r$1, _v, _v$1, headers, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; _v$1 = $f._v$1; headers = $f.headers; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.Headers(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		headers = _r;
		if (headers.$length === 0) { _v = true; $s = 4; continue s; }
		if (!(headers.$length === 1)) { _v$1 = false; $s = 5; continue s; }
		_r$1 = strings.ToLower((x = (0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0]), (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$1 = _r$1 === "content-type"; case 5:
		_v = _v$1; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			return true;
		/* } */ case 3:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.OnlyHasContentTypeHeader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f._v$1 = _v$1; $f.headers = headers; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.OnlyHasContentTypeHeader = function() { return this.$val.OnlyHasContentTypeHeader(); };
	CurlOptions.ptr.prototype.FindContentTypeHeader = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _v, fragments, header, headers, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _v = $f._v; fragments = $f.fragments; header = $f.header; headers = $f.headers; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		headers = self.Header;
		_ref = headers;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fragments = strings.SplitN(header, ":", 2);
			if (!(fragments.$length === 2)) { _v = false; $s = 5; continue s; }
			_r = strings.ToLower((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = strings.TrimSpace(_r); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 === "content-type"; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_r$2 = strings.TrimSpace((1 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 1])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 9; case 9:
				return _r$2;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.FindContentTypeHeader }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._v = _v; $f.fragments = fragments; $f.header = header; $f.headers = headers; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.FindContentTypeHeader = function() { return this.$val.FindContentTypeHeader(); };
	CurlOptions.ptr.prototype.InsertContentTypeHeader = function(contentType) {
		var $ptr, _r, _r$1, contentType, contentTypeInHeader, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; contentType = $f.contentType; contentTypeInHeader = $f.contentTypeInHeader; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		_r = self.FindContentTypeHeader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		contentTypeInHeader = _r;
		/* */ if (contentTypeInHeader === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (contentTypeInHeader === "") { */ case 2:
			_r$1 = fmt.Sprintf("Content-Type: %s", new sliceType([new $String(contentType)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			self.Header = $append(self.Header, _r$1);
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: CurlOptions.ptr.prototype.InsertContentTypeHeader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.contentType = contentType; $f.contentTypeInHeader = contentTypeInHeader; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	CurlOptions.prototype.InsertContentTypeHeader = function(contentType) { return this.$val.InsertContentTypeHeader(contentType); };
	CurlOptions.ptr.prototype.CanUseSimpleForm = function() {
		var $ptr, _entry, _i, _i$1, _keys, _ref, _ref$1, _tuple, data, err, self, singleData, values;
		self = this;
		_ref = self.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), DataOption);
			if (data.UseExternalFile()) {
				return false;
			}
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			err = _tuple[1];
			if (($keys(singleData).length === 0) || !($interfaceIsEqual(err, $ifaceNil))) {
				return false;
			}
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				values = _entry.v;
				if ((values.$length === 1) && (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0]) === "") {
					return false;
				}
				_i$1++;
			}
			_i++;
		}
		return true;
	};
	CurlOptions.prototype.CanUseSimpleForm = function() { return this.$val.CanUseSimpleForm(); };
	ptrType$1.methods = [{prop: "IsFormStyle", name: "IsFormStyle", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "UseExternalFile", name: "UseExternalFile", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "FileName", name: "FileName", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SendAsFormFile", name: "SendAsFormFile", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType.methods = [{prop: "Append", name: "Append", pkg: "", typ: $funcType([$String, DataType], [], false)}, {prop: "HasAnyData", name: "HasAnyData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasData", name: "HasData", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "HasForm", name: "HasForm", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ExternalFileCount", name: "ExternalFileCount", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$2.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([], [], false)}, {prop: "CheckError", name: "CheckError", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Headers", name: "Headers", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "GroupedHeaders", name: "GroupedHeaders", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "OnlyHasContentTypeHeader", name: "OnlyHasContentTypeHeader", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "FindContentTypeHeader", name: "FindContentTypeHeader", pkg: "", typ: $funcType([], [$String], false)}, {prop: "InsertContentTypeHeader", name: "InsertContentTypeHeader", pkg: "", typ: $funcType([$String], [], false)}, {prop: "CanUseSimpleForm", name: "CanUseSimpleForm", pkg: "", typ: $funcType([], [$Bool], false)}];
	DataOption.init([{prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: DataType, tag: ""}]);
	DataOptions.init(DataOption);
	CurlOptions.init([{prop: "Basic", name: "Basic", pkg: "", typ: $Bool, tag: "long:\"basic\" description:\"Use HTTP Basic Authentication (H)\""}, {prop: "Compressed", name: "Compressed", pkg: "", typ: funcType, tag: "long:\"compressed\" description:\"Request compressed response (using deflate or gzip)\""}, {prop: "Cookie", name: "Cookie", pkg: "", typ: sliceType$1, tag: "short:\"b\" long:\"cookie\" value-name:\"STRING/FILE\" description:\"Read cookies from STRING/FILE (H)\""}, {prop: "CookieJar", name: "CookieJar", pkg: "", typ: $String, tag: "short:\"c\" long:\"cookie-jar\" value-name:\"FILE\" description:\"Write cookies to FILE after operation (H)\""}, {prop: "Data", name: "Data", pkg: "", typ: funcType$1, tag: "short:\"d\" long:\"data\" value-name:\"DATA\" description:\"HTTP POST data (H)\""}, {prop: "DataAscii", name: "DataAscii", pkg: "", typ: funcType$1, tag: "long:\"data-ascii\" value-name:\"DATA\" description:\"HTTP POST ASCII data (H)\""}, {prop: "DataBinary", name: "DataBinary", pkg: "", typ: funcType$1, tag: "long:\"data-binary\" value-name:\"DATA\" description:\"HTTP POST binary data (H)\""}, {prop: "DataUrlEncode", name: "DataUrlEncode", pkg: "", typ: funcType$1, tag: "long:\"data-urlencode\" value-name:\"DATA\" description:\"HTTP POST data url encoded (H)\""}, {prop: "Get", name: "Get", pkg: "", typ: $Bool, tag: "short:\"G\" long:\"get\" description:\"Send the -d data with a HTTP GET (H)\""}, {prop: "Form", name: "Form", pkg: "", typ: funcType$1, tag: "short:\"F\" long:\"form\" value-name:\"KEY=VALUE\" description:\"Specify HTTP multipart POST data (H)\""}, {prop: "FormString", name: "FormString", pkg: "", typ: funcType$1, tag: "long:\"form-string\" value-name:\"KEY=VALUE\" description:\"Specify HTTP multipart POST data (H)\""}, {prop: "Header", name: "Header", pkg: "", typ: sliceType$1, tag: "short:\"H\" long:\"header\" value-name:\"LINE\" description:\"Pass custom header LINE to server (H)\""}, {prop: "Head", name: "Head", pkg: "", typ: $Bool, tag: "short:\"I\" long:\"head\" description:\"Show document info only\""}, {prop: "Http11", name: "Http11", pkg: "", typ: funcType, tag: "long:\"http1.1\" description:\"Use HTTP 1.1 (H)\""}, {prop: "Http2", name: "Http2", pkg: "", typ: funcType, tag: "long:\"http2\" description:\"Use HTTP 2 (H)\""}, {prop: "Insecure", name: "Insecure", pkg: "", typ: $Bool, tag: "short:\"k\" long:\"insecure\" description:\"Allow connections to SSL sites without certs (H)\""}, {prop: "Proxy", name: "Proxy", pkg: "", typ: $String, tag: "short:\"x\" long:\"proxy\" value-name:\"[PROTOCOL://]HOST[:PORT]\" description:\"Use proxy on given port\""}, {prop: "Referer", name: "Referer", pkg: "", typ: funcType$1, tag: "short:\"e\" long:\"referer\" description:\"Referer URL (H)\""}, {prop: "Request", name: "Request", pkg: "", typ: $String, tag: "short:\"X\" long:\"request\" value-name:\"COMMAND\" description:\"Specify request command to use\""}, {prop: "TrEncoding", name: "TrEncoding", pkg: "", typ: funcType, tag: "long:\"tr-encoding\" description:\"Request compressed transfer encoding (H)\""}, {prop: "Transfer", name: "Transfer", pkg: "", typ: funcType$1, tag: "short:\"T\" long:\"upload-file\" value-name:\"FILE\" description:\"Transfer FILE to destination\""}, {prop: "Url", name: "Url", pkg: "", typ: $String, tag: "long:\"url\" value-name:\"URL\" description:\"URL to work with\""}, {prop: "User", name: "User", pkg: "", typ: $String, tag: "short:\"u\" long:\"user\" value-name:\"USER[:PASSWORD]\" description:\"Server user and password\""}, {prop: "UserAgent", name: "UserAgent", pkg: "", typ: funcType$1, tag: "short:\"A\" long:\"user-agent\" value-name:\"STRING\" description:\"User-Agent to send to server (H)\""}, {prop: "AWSV2", name: "AWSV2", pkg: "", typ: $String, tag: "long:\"awsv2\" value-name:\"ACCESS-KEY:SECRET-KEY\" description:\"AWS V2 style authentication (original)\""}, {prop: "Http2Flag", name: "Http2Flag", pkg: "", typ: $Bool, tag: ""}, {prop: "ProcessedData", name: "ProcessedData", pkg: "", typ: DataOptions, tag: ""}]);
	HeaderGroup.init([{prop: "Key", name: "Key", pkg: "", typ: $String, tag: ""}, {prop: "Values", name: "Values", pkg: "", typ: sliceType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, $init, bufio, fmt, io, math, sort, strconv, sync, huffmanEncoder, literalNode, CorruptInputError, InternalError, Resetter, huffmanDecoder, Reader, decompressor, arrayType$2, sliceType, sliceType$1, sliceType$4, sliceType$5, sliceType$8, ptrType$4, sliceType$9, sliceType$10, arrayType$7, ptrType$5, ptrType$6, arrayType$8, arrayType$9, ptrType$7, arrayType$10, ptrType$8, arrayType$11, ptrType$9, arrayType$12, funcType$3, fixedLiteralEncoding, fixedOffsetEncoding, fixedOnce, fixedHuffmanDecoder, fixedHuffmanDecoder$24ptr, codeOrder, reverseByte, forwardCopy, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, makeReader, fixedHuffmanDecoderInit, NewReader, reverseUint16, reverseBits;
	bufio = $packages["bufio"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, $kindStruct, "flate.huffmanEncoder", "huffmanEncoder", "compress/flate", function(codeBits_, code_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.codeBits = sliceType$4.nil;
			this.code = sliceType$9.nil;
			return;
		}
		this.codeBits = codeBits_;
		this.code = code_;
	});
	literalNode = $pkg.literalNode = $newType(0, $kindStruct, "flate.literalNode", "literalNode", "compress/flate", function(literal_, freq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.literal = 0;
			this.freq = 0;
			return;
		}
		this.literal = literal_;
		this.freq = freq_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "flate.CorruptInputError", "CorruptInputError", "compress/flate", null);
	InternalError = $pkg.InternalError = $newType(8, $kindString, "flate.InternalError", "InternalError", "compress/flate", null);
	Resetter = $pkg.Resetter = $newType(8, $kindInterface, "flate.Resetter", "Resetter", "compress/flate", null);
	huffmanDecoder = $pkg.huffmanDecoder = $newType(0, $kindStruct, "flate.huffmanDecoder", "huffmanDecoder", "compress/flate", function(min_, chunks_, links_, linkMask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.chunks = arrayType$2.zero();
			this.links = sliceType$1.nil;
			this.linkMask = 0;
			return;
		}
		this.min = min_;
		this.chunks = chunks_;
		this.links = links_;
		this.linkMask = linkMask_;
	});
	Reader = $pkg.Reader = $newType(8, $kindInterface, "flate.Reader", "Reader", "compress/flate", null);
	decompressor = $pkg.decompressor = $newType(0, $kindStruct, "flate.decompressor", "decompressor", "compress/flate", function(r_, roffset_, woffset_, b_, nb_, h1_, h2_, bits_, codebits_, hist_, hp_, hw_, hfull_, buf_, step_, final$15_, err_, toRead_, hl_, hd_, copyLen_, copyDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.roffset = new $Int64(0, 0);
			this.woffset = new $Int64(0, 0);
			this.b = 0;
			this.nb = 0;
			this.h1 = new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0);
			this.h2 = new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0);
			this.bits = ptrType$7.nil;
			this.codebits = ptrType$8.nil;
			this.hist = ptrType$9.nil;
			this.hp = 0;
			this.hw = 0;
			this.hfull = false;
			this.buf = arrayType$12.zero();
			this.step = $throwNilPointerError;
			this.final$15 = false;
			this.err = $ifaceNil;
			this.toRead = sliceType$4.nil;
			this.hl = ptrType$6.nil;
			this.hd = ptrType$6.nil;
			this.copyLen = 0;
			this.copyDist = 0;
			return;
		}
		this.r = r_;
		this.roffset = roffset_;
		this.woffset = woffset_;
		this.b = b_;
		this.nb = nb_;
		this.h1 = h1_;
		this.h2 = h2_;
		this.bits = bits_;
		this.codebits = codebits_;
		this.hist = hist_;
		this.hp = hp_;
		this.hw = hw_;
		this.hfull = hfull_;
		this.buf = buf_;
		this.step = step_;
		this.final$15 = final$15_;
		this.err = err_;
		this.toRead = toRead_;
		this.hl = hl_;
		this.hd = hd_;
		this.copyLen = copyLen_;
		this.copyDist = copyDist_;
	});
	arrayType$2 = $arrayType($Uint32, 512);
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType(sliceType);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($Int);
	sliceType$8 = $sliceType($Int32);
	ptrType$4 = $ptrType(huffmanEncoder);
	sliceType$9 = $sliceType($Uint16);
	sliceType$10 = $sliceType(literalNode);
	arrayType$7 = $arrayType($Int, 16);
	ptrType$5 = $ptrType(decompressor);
	ptrType$6 = $ptrType(huffmanDecoder);
	arrayType$8 = $arrayType($Int, 288);
	arrayType$9 = $arrayType($Int, 316);
	ptrType$7 = $ptrType(arrayType$9);
	arrayType$10 = $arrayType($Int, 19);
	ptrType$8 = $ptrType(arrayType$10);
	arrayType$11 = $arrayType($Uint8, 32768);
	ptrType$9 = $ptrType(arrayType$11);
	arrayType$12 = $arrayType($Uint8, 4);
	funcType$3 = $funcType([ptrType$5], [], false);
	forwardCopy = function(mem, dst, src, n) {
		var $ptr, dst, k, mem, n, src;
		if (dst <= src) {
			$copySlice($subslice(mem, dst, (dst + n >> 0)), $subslice(mem, src, (src + n >> 0)));
			return;
		}
		while (true) {
			if (dst >= (src + n >> 0)) {
				$copySlice($subslice(mem, dst, (dst + n >> 0)), $subslice(mem, src, (src + n >> 0)));
				return;
			}
			k = dst - src >> 0;
			$copySlice($subslice(mem, dst, (dst + k >> 0)), $subslice(mem, src, (src + k >> 0)));
			n = n - (k) >> 0;
			dst = dst + (k) >> 0;
		}
	};
	newHuffmanEncoder = function(size) {
		var $ptr, size;
		return new huffmanEncoder.ptr($makeSlice(sliceType$4, size), $makeSlice(sliceType$9, size));
	};
	generateFixedLiteralEncoding = function() {
		var $ptr, bits, ch, code, codeBits, h, size;
		h = newHuffmanEncoder(286);
		codeBits = h.codeBits;
		code = h.code;
		ch = 0;
		ch = 0;
		while (true) {
			if (!(ch < 286)) { break; }
			bits = 0;
			size = 0;
			switch (0) { default:
				if (ch < 144) {
					bits = ch + 48 << 16 >>> 16;
					size = 8;
					break;
				} else if (ch < 256) {
					bits = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
					size = 9;
					break;
				} else if (ch < 280) {
					bits = ch - 256 << 16 >>> 16;
					size = 7;
					break;
				} else {
					bits = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
					size = 8;
				}
			}
			((ch < 0 || ch >= codeBits.$length) ? $throwRuntimeError("index out of range") : codeBits.$array[codeBits.$offset + ch] = size);
			((ch < 0 || ch >= code.$length) ? $throwRuntimeError("index out of range") : code.$array[code.$offset + ch] = reverseBits(bits, size));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var $ptr, ch, code, codeBits, h;
		h = newHuffmanEncoder(30);
		codeBits = h.codeBits;
		code = h.code;
		ch = 0;
		while (true) {
			if (!(ch < 30)) { break; }
			((ch < 0 || ch >= codeBits.$length) ? $throwRuntimeError("index out of range") : codeBits.$array[codeBits.$offset + ch] = 5);
			((ch < 0 || ch >= code.$length) ? $throwRuntimeError("index out of range") : code.$array[code.$offset + ch] = reverseBits(ch, 5));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "flate: corrupt input before offset " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	InternalError.prototype.Error = function() {
		var $ptr, e;
		e = this.$val;
		return "flate: internal error: " + e;
	};
	$ptrType(InternalError).prototype.Error = function() { return new InternalError(this.$get()).Error(); };
	huffmanDecoder.ptr.prototype.init = function(bits) {
		var $ptr, _i, _i$1, _i$2, _i$3, _i$4, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, bits, chunk, chunk$1, chunk$2, code, code$1, count, h, i, i$1, i$2, j, j$1, link, linktab, linktab$1, max, min, n, n$1, nextcode, numLinks, off, off$1, off$2, reverse, reverse$1, value, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4;
		h = this;
		if (!((h.min === 0))) {
			huffmanDecoder.copy(h, new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0));
		}
		count = arrayType$7.zero();
		_tmp = 0;
		_tmp$1 = 0;
		min = _tmp;
		max = _tmp$1;
		_ref = bits;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (n === 0) {
				_i++;
				continue;
			}
			if ((min === 0) || n < min) {
				min = n;
			}
			if (n > max) {
				max = n;
			}
			((n < 0 || n >= count.length) ? $throwRuntimeError("index out of range") : count[n] = (((n < 0 || n >= count.length) ? $throwRuntimeError("index out of range") : count[n]) + (1) >> 0));
			_i++;
		}
		if (max === 0) {
			return true;
		}
		code = 0;
		nextcode = arrayType$7.zero();
		i = min;
		while (true) {
			if (!(i <= max)) { break; }
			code = (y = (1), y < 32 ? (code << y) : 0) >> 0;
			((i < 0 || i >= nextcode.length) ? $throwRuntimeError("index out of range") : nextcode[i] = code);
			code = code + (((i < 0 || i >= count.length) ? $throwRuntimeError("index out of range") : count[i])) >> 0;
			i = i + (1) >> 0;
		}
		if (!((code === ((y$1 = (max >>> 0), y$1 < 32 ? (1 << y$1) : 0) >> 0))) && !((code === 1) && (max === 1))) {
			return false;
		}
		h.min = min;
		if (max > 9) {
			numLinks = (y$2 = (((max >>> 0) - 9 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) >> 0;
			h.linkMask = ((numLinks - 1 >> 0) >>> 0);
			link = nextcode[10] >> 1 >> 0;
			h.links = $makeSlice(sliceType$1, (512 - link >> 0));
			j = (link >>> 0);
			while (true) {
				if (!(j < 512)) { break; }
				reverse = ((x = j >>> 8 >>> 0, ((x < 0 || x >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x])) >> 0) | (((x$1 = (j & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$1])) >> 0) << 8 >> 0);
				reverse = (reverse >> $min((7), 31)) >> 0;
				off = j - (link >>> 0) >>> 0;
				if (false && !(((x$2 = h.chunks, ((reverse < 0 || reverse >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[reverse])) === 0))) {
					$panic(new $String("impossible: overwriting existing chunk"));
				}
				(x$3 = h.chunks, ((reverse < 0 || reverse >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[reverse] = ((((off << 4 >>> 0) | 10) >>> 0) >>> 0)));
				(x$4 = h.links, ((off < 0 || off >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + off] = $makeSlice(sliceType, numLinks)));
				j = j + (1) >>> 0;
			}
		}
		_ref$1 = bits;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (n$1 === 0) {
				_i$1++;
				continue;
			}
			code$1 = ((n$1 < 0 || n$1 >= nextcode.length) ? $throwRuntimeError("index out of range") : nextcode[n$1]);
			((n$1 < 0 || n$1 >= nextcode.length) ? $throwRuntimeError("index out of range") : nextcode[n$1] = (((n$1 < 0 || n$1 >= nextcode.length) ? $throwRuntimeError("index out of range") : nextcode[n$1]) + (1) >> 0));
			chunk = (((i$1 << 4 >> 0) | n$1) >>> 0);
			reverse$1 = ((x$5 = code$1 >> 8 >> 0, ((x$5 < 0 || x$5 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$5])) >> 0) | (((x$6 = code$1 & 255, ((x$6 < 0 || x$6 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$6])) >> 0) << 8 >> 0);
			reverse$1 = (reverse$1 >> $min((((16 - n$1 >> 0) >>> 0)), 31)) >> 0;
			if (n$1 <= 9) {
				off$1 = reverse$1;
				while (true) {
					if (!(off$1 < 512)) { break; }
					if (false && !(((x$7 = h.chunks, ((off$1 < 0 || off$1 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[off$1])) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					(x$8 = h.chunks, ((off$1 < 0 || off$1 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[off$1] = chunk));
					off$1 = off$1 + (((y$3 = (n$1 >>> 0), y$3 < 32 ? (1 << y$3) : 0) >> 0)) >> 0;
				}
			} else {
				j$1 = reverse$1 & 511;
				if (false && !(((((x$9 = h.chunks, ((j$1 < 0 || j$1 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[j$1])) & 15) >>> 0) === 10))) {
					$panic(new $String("impossible: not an indirect chunk"));
				}
				value = (x$10 = h.chunks, ((j$1 < 0 || j$1 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10[j$1])) >>> 4 >>> 0;
				linktab = (x$11 = h.links, ((value < 0 || value >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + value]));
				reverse$1 = (reverse$1 >> $min((9), 31)) >> 0;
				off$2 = reverse$1;
				while (true) {
					if (!(off$2 < linktab.$length)) { break; }
					if (false && !((((off$2 < 0 || off$2 >= linktab.$length) ? $throwRuntimeError("index out of range") : linktab.$array[linktab.$offset + off$2]) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					((off$2 < 0 || off$2 >= linktab.$length) ? $throwRuntimeError("index out of range") : linktab.$array[linktab.$offset + off$2] = chunk);
					off$2 = off$2 + (((y$4 = ((n$1 - 9 >> 0) >>> 0), y$4 < 32 ? (1 << y$4) : 0) >> 0)) >> 0;
				}
			}
			_i$1++;
		}
		if (false) {
			_ref$2 = h.chunks;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 512)) { break; }
				i$2 = _i$2;
				chunk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? $throwRuntimeError("index out of range") : _ref$2[_i$2]);
				if (chunk$1 === 0) {
					if ((code === 1) && ((_r = i$2 % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1)) {
						_i$2++;
						continue;
					}
					$panic(new $String("impossible: missing chunk"));
				}
				_i$2++;
			}
			_ref$3 = h.links;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				linktab$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				_ref$4 = linktab$1;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					chunk$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
					if (chunk$2 === 0) {
						$panic(new $String("impossible: missing chunk"));
					}
					_i$4++;
				}
				_i$3++;
			}
		}
		return true;
	};
	huffmanDecoder.prototype.init = function(bits) { return this.$val.init(bits); };
	decompressor.ptr.prototype.nextBlock = function() {
		var $ptr, _1, _r, _r$1, f, typ, x, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; typ = $f.typ; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.final$15) {
			if (!((f.hw === f.hp))) {
				f.flush($methodExpr(ptrType$5, "nextBlock"));
				return;
			}
			f.err = io.EOF;
			return;
		}
		/* while (true) { */ case 1:
			/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f.err = _r;
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				return;
			}
		/* } */ $s = 1; continue; case 2:
		f.final$15 = ((f.b & 1) >>> 0) === 1;
		f.b = (y = (1), y < 32 ? (f.b >>> y) : 0) >>> 0;
		typ = (f.b & 3) >>> 0;
		f.b = (y$1 = (2), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		f.nb = f.nb - (3) >>> 0;
			_1 = typ;
			/* */ if (_1 === 0) { $s = 5; continue; }
			/* */ if (_1 === 1) { $s = 6; continue; }
			/* */ if (_1 === 2) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === 0) { */ case 5:
				$r = f.dataBlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === 1) { */ case 6:
				f.hl = fixedHuffmanDecoder;
				f.hd = ptrType$6.nil;
				$r = f.huffmanBlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === 2) { */ case 7:
				_r$1 = f.readHuffman(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f.err = _r$1;
				if (!($interfaceIsEqual(f.err, $ifaceNil))) {
					/* break; */ $s = 4; continue;
				}
				f.hl = f.h1;
				f.hd = f.h2;
				$r = f.huffmanBlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				f.err = (x = f.roffset, new CorruptInputError(x.$high, x.$low));
			/* } */ case 9:
		case 4:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.nextBlock }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.typ = typ; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.nextBlock = function() { return this.$val.nextBlock(); };
	decompressor.ptr.prototype.Read = function(b) {
		var $ptr, b, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			if (f.toRead.$length > 0) {
				n = $copySlice(b, f.toRead);
				f.toRead = $subslice(f.toRead, n);
				return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				return [0, f.err];
			}
			$r = f.step(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.Read }; } $f.$ptr = $ptr; $f.b = b; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.Read = function(b) { return this.$val.Read(b); };
	decompressor.ptr.prototype.Close = function() {
		var $ptr, f;
		f = this;
		if ($interfaceIsEqual(f.err, io.EOF)) {
			return $ifaceNil;
		}
		return f.err;
	};
	decompressor.prototype.Close = function() { return this.$val.Close(); };
	decompressor.ptr.prototype.readHuffman = function() {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, b, err, err$1, err$2, err$3, f, i, i$1, i$2, j, n, nb, nclen, ndist, nlit, rep, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, y$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; n = $f.n; nb = $f.nb; nclen = $f.nclen; ndist = $f.ndist; nlit = $f.nlit; rep = $f.rep; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 14)) { break; } */ if(!(f.nb < 14)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		/* } */ $s = 1; continue; case 2:
		nlit = (((f.b & 31) >>> 0) >> 0) + 257 >> 0;
		if (nlit > 286) {
			return (x = f.roffset, new CorruptInputError(x.$high, x.$low));
		}
		f.b = (y = (5), y < 32 ? (f.b >>> y) : 0) >>> 0;
		ndist = (((f.b & 31) >>> 0) >> 0) + 1 >> 0;
		if (ndist > 30) {
			return (x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low));
		}
		f.b = (y$1 = (5), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		nclen = (((f.b & 15) >>> 0) >> 0) + 4 >> 0;
		f.b = (y$2 = (4), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
		f.nb = f.nb - (14) >>> 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < nclen)) { break; } */ if(!(i < nclen)) { $s = 5; continue; }
			/* while (true) { */ case 6:
				/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 7; continue; }
				_r$1 = f.moreBits(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
			/* } */ $s = 6; continue; case 7:
			(x$2 = f.codebits, x$3 = ((i < 0 || i >= codeOrder.length) ? $throwRuntimeError("index out of range") : codeOrder[i]), x$2.nilCheck, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3] = (((f.b & 7) >>> 0) >> 0)));
			f.b = (y$3 = (3), y$3 < 32 ? (f.b >>> y$3) : 0) >>> 0;
			f.nb = f.nb - (3) >>> 0;
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$1 = nclen;
		while (true) {
			if (!(i$1 < 19)) { break; }
			(x$4 = f.codebits, x$5 = ((i$1 < 0 || i$1 >= codeOrder.length) ? $throwRuntimeError("index out of range") : codeOrder[i$1]), x$4.nilCheck, ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[x$5] = 0));
			i$1 = i$1 + (1) >> 0;
		}
		if (!f.h1.init($subslice(new sliceType$5(f.codebits), 0))) {
			return (x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low));
		}
		_tmp = 0;
		_tmp$1 = nlit + ndist >> 0;
		i$2 = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i$2 < n)) { break; } */ if(!(i$2 < n)) { $s = 10; continue; }
			_r$2 = f.huffSym(f.h1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			x$7 = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
			/* */ if (x$7 < 16) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (x$7 < 16) { */ case 12:
				(x$8 = f.bits, x$8.nilCheck, ((i$2 < 0 || i$2 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[i$2] = x$7));
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			rep = 0;
			nb = 0;
			b = 0;
			_2 = x$7;
			if (_2 === 16) {
				rep = 3;
				nb = 2;
				if (i$2 === 0) {
					return (x$9 = f.roffset, new CorruptInputError(x$9.$high, x$9.$low));
				}
				b = (x$10 = f.bits, x$11 = i$2 - 1 >> 0, (x$10.nilCheck, ((x$11 < 0 || x$11 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10[x$11])));
			} else if (_2 === 17) {
				rep = 3;
				nb = 3;
				b = 0;
			} else if (_2 === 18) {
				rep = 11;
				nb = 7;
				b = 0;
			} else {
				return new InternalError("unexpected length code");
			}
			/* while (true) { */ case 14:
				/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 15; continue; }
				_r$3 = f.moreBits(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					return err$3;
				}
			/* } */ $s = 14; continue; case 15:
			rep = rep + ((((f.b & (((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0)) >> 0;
			f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
			f.nb = f.nb - (nb) >>> 0;
			if ((i$2 + rep >> 0) > n) {
				return (x$12 = f.roffset, new CorruptInputError(x$12.$high, x$12.$low));
			}
			j = 0;
			while (true) {
				if (!(j < rep)) { break; }
				(x$13 = f.bits, x$13.nilCheck, ((i$2 < 0 || i$2 >= x$13.length) ? $throwRuntimeError("index out of range") : x$13[i$2] = b));
				i$2 = i$2 + (1) >> 0;
				j = j + (1) >> 0;
			}
		/* } */ $s = 9; continue; case 10:
		if (!f.h1.init($subslice(new sliceType$5(f.bits), 0, nlit)) || !f.h2.init($subslice(new sliceType$5(f.bits), nlit, (nlit + ndist >> 0)))) {
			return (x$14 = f.roffset, new CorruptInputError(x$14.$high, x$14.$low));
		}
		if (f.h1.min < (x$15 = f.bits, (x$15.nilCheck, x$15[256]))) {
			f.h1.min = (x$16 = f.bits, (x$16.nilCheck, x$16[256]));
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.readHuffman }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.n = n; $f.nb = nb; $f.nclen = nclen; $f.ndist = ndist; $f.nlit = nlit; $f.rep = rep; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.readHuffman = function() { return this.$val.readHuffman(); };
	decompressor.ptr.prototype.huffmanBlock = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, dist, err, extra, f, length, n, nb, v, x, x$1, x$2, x$3, x$4, x$5, y, y$1, y$2, y$3, y$4, y$5, y$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dist = $f.dist; err = $f.err; extra = $f.extra; f = $f.f; length = $f.length; n = $f.n; nb = $f.nb; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			_r = f.huffSym(f.hl); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			v = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				f.err = err;
				return;
			}
			n = 0;
			length = 0;
				if (v < 256) {
					(x = f.hist, x$1 = f.hp, x.nilCheck, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = (v << 24 >>> 24)));
					f.hp = f.hp + (1) >> 0;
					if (f.hp === 32768) {
						f.flush($methodExpr(ptrType$5, "huffmanBlock"));
						return;
					}
					/* continue; */ $s = 1; continue;
				} else if ((v === 256)) {
					f.step = $methodExpr(ptrType$5, "nextBlock");
					return;
				} else if (v < 265) {
					length = v - 254 >> 0;
					n = 0;
				} else if (v < 269) {
					length = ($imul(v, 2)) - 519 >> 0;
					n = 1;
				} else if (v < 273) {
					length = ($imul(v, 4)) - 1057 >> 0;
					n = 2;
				} else if (v < 277) {
					length = ($imul(v, 8)) - 2149 >> 0;
					n = 3;
				} else if (v < 281) {
					length = ($imul(v, 16)) - 4365 >> 0;
					n = 4;
				} else if (v < 285) {
					length = ($imul(v, 32)) - 8861 >> 0;
					n = 5;
				} else if (v < 286) {
					length = 258;
					n = 0;
				} else {
					f.err = (x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low));
					return;
				}
			case 4:
			/* */ if (n > 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (n > 0) { */ case 5:
				/* while (true) { */ case 7:
					/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 8; continue; }
					_r$1 = f.moreBits(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err = _r$1;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						return;
					}
				/* } */ $s = 7; continue; case 8:
				length = length + ((((f.b & (((y = n, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0)) >> 0;
				f.b = (y$1 = (n), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
			/* } */ case 6:
			dist = 0;
			/* */ if (f.hd === ptrType$6.nil) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (f.hd === ptrType$6.nil) { */ case 10:
				/* while (true) { */ case 13:
					/* if (!(f.nb < 5)) { break; } */ if(!(f.nb < 5)) { $s = 14; continue; }
					_r$2 = f.moreBits(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err = _r$2;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						return;
					}
				/* } */ $s = 13; continue; case 14:
				dist = ((x$3 = (((f.b & 31) >>> 0)) << 3 >>> 0, ((x$3 < 0 || x$3 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$3])) >> 0);
				f.b = (y$2 = (5), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
				f.nb = f.nb - (5) >>> 0;
				$s = 12; continue;
			/* } else { */ case 11:
				_r$3 = f.huffSym(f.hd); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				dist = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					return;
				}
			/* } */ case 12:
				/* */ if (dist < 4) { $s = 18; continue; }
				/* */ if (dist < 30) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (dist < 4) { */ case 18:
					dist = dist + (1) >> 0;
					$s = 21; continue;
				/* } else if (dist < 30) { */ case 19:
					nb = ((dist - 2 >> 0) >>> 0) >>> 1 >>> 0;
					extra = (y$3 = nb, y$3 < 32 ? (((dist & 1)) << y$3) : 0) >> 0;
					/* while (true) { */ case 22:
						/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 23; continue; }
						_r$4 = f.moreBits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						err = _r$4;
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							f.err = err;
							return;
						}
					/* } */ $s = 22; continue; case 23:
					extra = extra | ((((f.b & (((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0)) >>> 0) >> 0));
					f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
					f.nb = f.nb - (nb) >>> 0;
					dist = (((y$6 = ((nb + 1 >>> 0)), y$6 < 32 ? (1 << y$6) : 0) >> 0) + 1 >> 0) + extra >> 0;
					$s = 21; continue;
				/* } else { */ case 20:
					f.err = (x$4 = f.roffset, new CorruptInputError(x$4.$high, x$4.$low));
					return;
				/* } */ case 21:
			case 17:
			if (dist > 32768) {
				f.err = new InternalError("bad history distance");
				return;
			}
			if (!f.hfull && dist > f.hp) {
				f.err = (x$5 = f.roffset, new CorruptInputError(x$5.$high, x$5.$low));
				return;
			}
			_tmp = length;
			_tmp$1 = dist;
			f.copyLen = _tmp;
			f.copyDist = _tmp$1;
			if (f.copyHist()) {
				return;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffmanBlock }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dist = dist; $f.err = err; $f.extra = extra; $f.f = f; $f.length = length; $f.n = n; $f.nb = nb; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffmanBlock = function() { return this.$val.huffmanBlock(); };
	decompressor.ptr.prototype.copyHist = function() {
		var $ptr, f, n, p, x, x$1;
		f = this;
		p = f.hp - f.copyDist >> 0;
		if (p < 0) {
			p = p + (32768) >> 0;
		}
		while (true) {
			if (!(f.copyLen > 0)) { break; }
			n = f.copyLen;
			x = 32768 - f.hp >> 0;
			if (n > x) {
				n = x;
			}
			x$1 = 32768 - p >> 0;
			if (n > x$1) {
				n = x$1;
			}
			forwardCopy(new sliceType$4(f.hist), f.hp, p, n);
			p = p + (n) >> 0;
			f.hp = f.hp + (n) >> 0;
			f.copyLen = f.copyLen - (n) >> 0;
			if (f.hp === 32768) {
				f.flush($methodExpr(ptrType$5, "copyHuff"));
				return true;
			}
			if (p === 32768) {
				p = 0;
			}
		}
		return false;
	};
	decompressor.prototype.copyHist = function() { return this.$val.copyHist(); };
	decompressor.ptr.prototype.copyHuff = function() {
		var $ptr, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.copyHist()) {
			return;
		}
		$r = f.huffmanBlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyHuff }; } $f.$ptr = $ptr; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyHuff = function() { return this.$val.copyHuff(); };
	decompressor.ptr.prototype.dataBlock = function() {
		var $ptr, _r, _tuple, err, f, n, nn, nr, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; nr = $f.nr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.nb = 0;
		f.b = 0;
		_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.buf), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nr = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, nr), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			return;
		}
		n = (f.buf[0] >> 0) | ((f.buf[1] >> 0) << 8 >> 0);
		nn = (f.buf[2] >> 0) | ((f.buf[3] >> 0) << 8 >> 0);
		if (!(((nn << 16 >>> 16) === ((~n >> 0) << 16 >>> 16)))) {
			f.err = (x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low));
			return;
		}
		if (n === 0) {
			f.flush($methodExpr(ptrType$5, "nextBlock"));
			return;
		}
		f.copyLen = n;
		$r = f.copyData(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.dataBlock }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.nr = nr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.dataBlock = function() { return this.$val.dataBlock(); };
	decompressor.ptr.prototype.copyData = function() {
		var $ptr, _r, _tuple, err, f, m, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; m = $f.m; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = f.copyLen;
		/* while (true) { */ case 1:
			/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 2; continue; }
			m = 32768 - f.hp >> 0;
			if (m > n) {
				m = n;
			}
			_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.hist), f.hp, (f.hp + m >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			err = _tuple[1];
			f.roffset = (x = f.roffset, x$1 = new $Int64(0, m), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				f.err = err;
				return;
			}
			n = n - (m) >> 0;
			f.hp = f.hp + (m) >> 0;
			if (f.hp === 32768) {
				f.copyLen = n;
				f.flush($methodExpr(ptrType$5, "copyData"));
				return;
			}
		/* } */ $s = 1; continue; case 2:
		f.step = $methodExpr(ptrType$5, "nextBlock");
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyData }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.m = m; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyData = function() { return this.$val.copyData(); };
	decompressor.ptr.prototype.setDict = function(dict) {
		var $ptr, dict, f;
		f = this;
		if (dict.$length > 32768) {
			dict = $subslice(dict, (dict.$length - 32768 >> 0));
		}
		f.hp = $copySlice(new sliceType$4(f.hist), dict);
		if (f.hp === 32768) {
			f.hp = 0;
			f.hfull = true;
		}
		f.hw = f.hp;
	};
	decompressor.prototype.setDict = function(dict) { return this.$val.setDict(dict); };
	decompressor.ptr.prototype.moreBits = function() {
		var $ptr, _r, _tuple, c, err, f, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		c = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			return err;
		}
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.b = (f.b | (((y = f.nb, y < 32 ? ((c >>> 0) << y) : 0) >>> 0))) >>> 0;
		f.nb = f.nb + (8) >>> 0;
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.moreBits }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.moreBits = function() { return this.$val.moreBits(); };
	decompressor.ptr.prototype.huffSym = function(h) {
		var $ptr, _r, chunk, err, f, h, n, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; chunk = $f.chunk; err = $f.err; f = $f.f; h = $f.h; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = (h.min >>> 0);
		/* while (true) { */ case 1:
			/* while (true) { */ case 3:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 4; continue; }
				_r = f.moreBits(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [0, err];
				}
			/* } */ $s = 3; continue; case 4:
			chunk = (x = h.chunks, x$1 = (f.b & 511) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
			n = (((chunk & 15) >>> 0) >>> 0);
			if (n > 9) {
				chunk = (x$2 = (x$3 = h.links, x$4 = chunk >>> 4 >>> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])), x$5 = (((f.b >>> 9 >>> 0)) & h.linkMask) >>> 0, ((x$5 < 0 || x$5 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$5]));
				n = (((chunk & 15) >>> 0) >>> 0);
			}
			if (n <= f.nb) {
				if (n === 0) {
					f.err = (x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low));
					return [0, f.err];
				}
				f.b = (y = (n), y < 32 ? (f.b >>> y) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
				return [((chunk >>> 4 >>> 0) >> 0), $ifaceNil];
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffSym }; } $f.$ptr = $ptr; $f._r = _r; $f.chunk = chunk; $f.err = err; $f.f = f; $f.h = h; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffSym = function(h) { return this.$val.huffSym(h); };
	decompressor.ptr.prototype.flush = function(step) {
		var $ptr, f, step, x, x$1;
		f = this;
		f.toRead = $subslice(new sliceType$4(f.hist), f.hw, f.hp);
		f.woffset = (x = f.woffset, x$1 = new $Int64(0, (f.hp - f.hw >> 0)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.hw = f.hp;
		if (f.hp === 32768) {
			f.hp = 0;
			f.hw = 0;
			f.hfull = true;
		}
		f.step = step;
	};
	decompressor.prototype.flush = function(step) { return this.$val.flush(step); };
	makeReader = function(r) {
		var $ptr, _tuple, ok, r, rr;
		_tuple = $assertType(r, Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	fixedHuffmanDecoderInit = function() {
		var $ptr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixedOnce.Do((function() {
			var $ptr, bits, i, i$1, i$2, i$3;
			bits = arrayType$8.zero();
			i = 0;
			while (true) {
				if (!(i < 144)) { break; }
				((i < 0 || i >= bits.length) ? $throwRuntimeError("index out of range") : bits[i] = 8);
				i = i + (1) >> 0;
			}
			i$1 = 144;
			while (true) {
				if (!(i$1 < 256)) { break; }
				((i$1 < 0 || i$1 >= bits.length) ? $throwRuntimeError("index out of range") : bits[i$1] = 9);
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 256;
			while (true) {
				if (!(i$2 < 280)) { break; }
				((i$2 < 0 || i$2 >= bits.length) ? $throwRuntimeError("index out of range") : bits[i$2] = 7);
				i$2 = i$2 + (1) >> 0;
			}
			i$3 = 280;
			while (true) {
				if (!(i$3 < 288)) { break; }
				((i$3 < 0 || i$3 >= bits.length) ? $throwRuntimeError("index out of range") : bits[i$3] = 8);
				i$3 = i$3 + (1) >> 0;
			}
			fixedHuffmanDecoder.init(new sliceType$5(bits));
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: fixedHuffmanDecoderInit }; } $f.$ptr = $ptr; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.ptr.prototype.Reset = function(r, dict) {
		var $ptr, dict, f, r;
		f = this;
		decompressor.copy(f, new decompressor.ptr(makeReader(r), new $Int64(0, 0), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0), f.bits, f.codebits, f.hist, 0, 0, false, arrayType$12.zero(), $methodExpr(ptrType$5, "nextBlock"), false, $ifaceNil, sliceType$4.nil, ptrType$6.nil, ptrType$6.nil, 0, 0));
		if (!(dict === sliceType$4.nil)) {
			f.setDict(dict);
		}
		return $ifaceNil;
	};
	decompressor.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewReader = function(r) {
		var $ptr, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0), ptrType$7.nil, ptrType$8.nil, ptrType$9.nil, 0, 0, false, arrayType$12.zero(), $throwNilPointerError, false, $ifaceNil, sliceType$4.nil, ptrType$6.nil, ptrType$6.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].hist = arrayType$11.zero();
		f[0].bits = arrayType$9.zero();
		f[0].codebits = arrayType$10.zero();
		f[0].step = $methodExpr(ptrType$5, "nextBlock");
		return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	reverseUint16 = function(v) {
		var $ptr, v, x, x$1;
		return (((x = v >>> 8 << 16 >>> 16, ((x < 0 || x >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x])) << 16 >>> 16) | (((x$1 = (v & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$1])) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	reverseBits = function(number, bitLength) {
		var $ptr, bitLength, number, y;
		return reverseUint16((y = (16 - bitLength << 24 >>> 24), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	ptrType$4.methods = [{prop: "bitLength", name: "bitLength", pkg: "compress/flate", typ: $funcType([sliceType$8], [$Int64], false)}, {prop: "bitCounts", name: "bitCounts", pkg: "compress/flate", typ: $funcType([sliceType$10, $Int32], [sliceType$8], false)}, {prop: "assignEncodingAndSize", name: "assignEncodingAndSize", pkg: "compress/flate", typ: $funcType([sliceType$8, sliceType$10], [], false)}, {prop: "generate", name: "generate", pkg: "compress/flate", typ: $funcType([sliceType$8, $Int32], [], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InternalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([sliceType$5], [$Bool], false)}];
	ptrType$5.methods = [{prop: "nextBlock", name: "nextBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readHuffman", name: "readHuffman", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffmanBlock", name: "huffmanBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyHist", name: "copyHist", pkg: "compress/flate", typ: $funcType([], [$Bool], false)}, {prop: "copyHuff", name: "copyHuff", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "dataBlock", name: "dataBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyData", name: "copyData", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "setDict", name: "setDict", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "moreBits", name: "moreBits", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffSym", name: "huffSym", pkg: "compress/flate", typ: $funcType([ptrType$6], [$Int, $error], false)}, {prop: "flush", name: "flush", pkg: "compress/flate", typ: $funcType([funcType$3], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}];
	huffmanEncoder.init([{prop: "codeBits", name: "codeBits", pkg: "compress/flate", typ: sliceType$4, tag: ""}, {prop: "code", name: "code", pkg: "compress/flate", typ: sliceType$9, tag: ""}]);
	literalNode.init([{prop: "literal", name: "literal", pkg: "compress/flate", typ: $Uint16, tag: ""}, {prop: "freq", name: "freq", pkg: "compress/flate", typ: $Int32, tag: ""}]);
	Resetter.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}]);
	huffmanDecoder.init([{prop: "min", name: "min", pkg: "compress/flate", typ: $Int, tag: ""}, {prop: "chunks", name: "chunks", pkg: "compress/flate", typ: arrayType$2, tag: ""}, {prop: "links", name: "links", pkg: "compress/flate", typ: sliceType$1, tag: ""}, {prop: "linkMask", name: "linkMask", pkg: "compress/flate", typ: $Uint32, tag: ""}]);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decompressor.init([{prop: "r", name: "r", pkg: "compress/flate", typ: Reader, tag: ""}, {prop: "roffset", name: "roffset", pkg: "compress/flate", typ: $Int64, tag: ""}, {prop: "woffset", name: "woffset", pkg: "compress/flate", typ: $Int64, tag: ""}, {prop: "b", name: "b", pkg: "compress/flate", typ: $Uint32, tag: ""}, {prop: "nb", name: "nb", pkg: "compress/flate", typ: $Uint, tag: ""}, {prop: "h1", name: "h1", pkg: "compress/flate", typ: huffmanDecoder, tag: ""}, {prop: "h2", name: "h2", pkg: "compress/flate", typ: huffmanDecoder, tag: ""}, {prop: "bits", name: "bits", pkg: "compress/flate", typ: ptrType$7, tag: ""}, {prop: "codebits", name: "codebits", pkg: "compress/flate", typ: ptrType$8, tag: ""}, {prop: "hist", name: "hist", pkg: "compress/flate", typ: ptrType$9, tag: ""}, {prop: "hp", name: "hp", pkg: "compress/flate", typ: $Int, tag: ""}, {prop: "hw", name: "hw", pkg: "compress/flate", typ: $Int, tag: ""}, {prop: "hfull", name: "hfull", pkg: "compress/flate", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "compress/flate", typ: arrayType$12, tag: ""}, {prop: "step", name: "step", pkg: "compress/flate", typ: funcType$3, tag: ""}, {prop: "final$15", name: "final", pkg: "compress/flate", typ: $Bool, tag: ""}, {prop: "err", name: "err", pkg: "compress/flate", typ: $error, tag: ""}, {prop: "toRead", name: "toRead", pkg: "compress/flate", typ: sliceType$4, tag: ""}, {prop: "hl", name: "hl", pkg: "compress/flate", typ: ptrType$6, tag: ""}, {prop: "hd", name: "hd", pkg: "compress/flate", typ: ptrType$6, tag: ""}, {prop: "copyLen", name: "copyLen", pkg: "compress/flate", typ: $Int, tag: ""}, {prop: "copyDist", name: "copyDist", pkg: "compress/flate", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fixedOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		fixedHuffmanDecoder = new huffmanDecoder.ptr(0, arrayType$2.zero(), sliceType$1.nil, 0);
		codeOrder = $toNativeArray($kindInt, [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		reverseByte = $toNativeArray($kindUint8, [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		fixedOffsetEncoding = generateFixedOffsetEncoding();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash32, sliceType;
	io = $packages["io"];
	Hash32 = $pkg.Hash32 = $newType(8, $kindInterface, "hash.Hash32", "Hash32", "hash", null);
	sliceType = $sliceType($Uint8);
	Hash32.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/crc32"] = (function() {
	var $pkg = {}, $init, hash, sync, Table, slicing8Table, digest, ptrType, ptrType$1, arrayType, arrayType$1, sliceType, ptrType$2, castagnoliTable, ieeeTable8, ieeeTable8Once, makeTable, makeTable8, New, NewIEEE, update, updateSlicingBy8, Update, updateCastagnoli, updateIEEE;
	hash = $packages["hash"];
	sync = $packages["sync"];
	Table = $pkg.Table = $newType(1024, $kindArray, "crc32.Table", "Table", "hash/crc32", null);
	slicing8Table = $pkg.slicing8Table = $newType(8192, $kindArray, "crc32.slicing8Table", "slicing8Table", "hash/crc32", null);
	digest = $pkg.digest = $newType(0, $kindStruct, "crc32.digest", "digest", "hash/crc32", function(crc_, tab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.crc = 0;
			this.tab = ptrType.nil;
			return;
		}
		this.crc = crc_;
		this.tab = tab_;
	});
	ptrType = $ptrType(Table);
	ptrType$1 = $ptrType(slicing8Table);
	arrayType = $arrayType($Uint32, 256);
	arrayType$1 = $arrayType(Table, 8);
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(digest);
	makeTable = function(poly) {
		var $ptr, crc, i, j, poly, t, y;
		t = arrayType.zero();
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = (i >>> 0);
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				if (((crc & 1) >>> 0) === 1) {
					crc = (((crc >>> 1 >>> 0)) ^ poly) >>> 0;
				} else {
					crc = (y = (1), y < 32 ? (crc >>> y) : 0) >>> 0;
				}
				j = j + (1) >> 0;
			}
			t.nilCheck, ((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i] = crc);
			i = i + (1) >> 0;
		}
		return t;
	};
	makeTable8 = function(poly) {
		var $ptr, crc, i, j, poly, t, x, x$1, x$2, x$3;
		t = arrayType$1.zero();
		Table.copy((t.nilCheck, t[0]), makeTable(poly));
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = (x = (t.nilCheck, t[0]), ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			j = 1;
			while (true) {
				if (!(j < 8)) { break; }
				crc = ((x$1 = (t.nilCheck, t[0]), x$2 = (crc & 255) >>> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) ^ ((crc >>> 8 >>> 0))) >>> 0;
				(x$3 = (t.nilCheck, ((j < 0 || j >= t.length) ? $throwRuntimeError("index out of range") : t[j])), ((i < 0 || i >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i] = crc));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return t;
	};
	New = function(tab) {
		var $ptr, tab;
		return new digest.ptr(0, tab);
	};
	$pkg.New = New;
	NewIEEE = function() {
		var $ptr;
		return New($pkg.IEEETable);
	};
	$pkg.NewIEEE = NewIEEE;
	digest.ptr.prototype.Size = function() {
		var $ptr, d;
		d = this;
		return 4;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var $ptr, d;
		d = this;
		return 1;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Reset = function() {
		var $ptr, d;
		d = this;
		d.crc = 0;
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	update = function(crc, tab, p) {
		var $ptr, _i, _ref, crc, p, tab, v, x;
		crc = ~crc >>> 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			crc = ((x = ((crc << 24 >>> 24) ^ v) << 24 >>> 24, (tab.nilCheck, ((x < 0 || x >= tab.length) ? $throwRuntimeError("index out of range") : tab[x]))) ^ ((crc >>> 8 >>> 0))) >>> 0;
			_i++;
		}
		return ~crc >>> 0;
	};
	updateSlicingBy8 = function(crc, tab, p) {
		var $ptr, crc, p, tab, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		crc = ~crc >>> 0;
		while (true) {
			if (!(p.$length > 8)) { break; }
			crc = (crc ^ (((((((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >>> 0) | (((1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]) >>> 0) << 16 >>> 0)) >>> 0) | (((3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]) >>> 0) << 24 >>> 0)) >>> 0))) >>> 0;
			crc = ((((((((((((((x = (tab.nilCheck, tab[0]), x$1 = (7 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 7]), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) ^ (x$2 = (tab.nilCheck, tab[1]), x$3 = (6 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 6]), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3]))) >>> 0) ^ (x$4 = (tab.nilCheck, tab[2]), x$5 = (5 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 5]), ((x$5 < 0 || x$5 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[x$5]))) >>> 0) ^ (x$6 = (tab.nilCheck, tab[3]), x$7 = (4 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 4]), ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7]))) >>> 0) ^ (x$8 = (tab.nilCheck, tab[4]), x$9 = crc >>> 24 >>> 0, ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9]))) >>> 0) ^ (x$10 = (tab.nilCheck, tab[5]), x$11 = (((crc >>> 16 >>> 0)) & 255) >>> 0, ((x$11 < 0 || x$11 >= x$10.length) ? $throwRuntimeError("index out of range") : x$10[x$11]))) >>> 0) ^ (x$12 = (tab.nilCheck, tab[6]), x$13 = (((crc >>> 8 >>> 0)) & 255) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12[x$13]))) >>> 0) ^ (x$14 = (tab.nilCheck, tab[7]), x$15 = (crc & 255) >>> 0, ((x$15 < 0 || x$15 >= x$14.length) ? $throwRuntimeError("index out of range") : x$14[x$15]))) >>> 0;
			p = $subslice(p, 8);
		}
		crc = ~crc >>> 0;
		return update(crc, (tab.nilCheck, tab[0]), p);
	};
	Update = function(crc, tab, p) {
		var $ptr, _2, _r, crc, p, tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; crc = $f.crc; p = $f.p; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_2 = tab;
			/* */ if ($equal(_2, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_2, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_2, (castagnoliTable), Table)) { */ case 2:
				return updateCastagnoli(crc, p);
			/* } else if ($equal(_2, ($pkg.IEEETable), Table)) { */ case 3:
				_r = updateIEEE(crc, p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return _r;
			/* } */ case 4:
		case 1:
		return update(crc, tab, p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Update }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f.crc = crc; $f.p = p; $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Update = Update;
	digest.ptr.prototype.Write = function(p) {
		var $ptr, _r, _tmp, _tmp$1, d, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
		_r = Update(d.crc, d.tab, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d.crc = _r;
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum32 = function() {
		var $ptr, d;
		d = this;
		return d.crc;
	};
	digest.prototype.Sum32 = function() { return this.$val.Sum32(); };
	digest.ptr.prototype.Sum = function(in$1) {
		var $ptr, d, in$1, s;
		d = this;
		s = d.Sum32();
		return $append(in$1, ((s >>> 24 >>> 0) << 24 >>> 24), ((s >>> 16 >>> 0) << 24 >>> 24), ((s >>> 8 >>> 0) << 24 >>> 24), (s << 24 >>> 24));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	updateCastagnoli = function(crc, p) {
		var $ptr, crc, p;
		return update(crc, castagnoliTable, p);
	};
	updateIEEE = function(crc, p) {
		var $ptr, crc, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; crc = $f.crc; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (p.$length >= 4096) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.$length >= 4096) { */ case 1:
			$r = ieeeTable8Once.Do((function() {
				var $ptr;
				ieeeTable8 = makeTable8(3988292384);
			})); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return updateSlicingBy8(crc, ieeeTable8, p);
		/* } */ case 2:
		return update(crc, $pkg.IEEETable, p);
		/* */ } return; } if ($f === undefined) { $f = { $blk: updateIEEE }; } $f.$ptr = $ptr; $f.crc = crc; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$2.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	Table.init($Uint32, 256);
	slicing8Table.init(Table, 8);
	digest.init([{prop: "crc", name: "crc", pkg: "hash/crc32", typ: $Uint32, tag: ""}, {prop: "tab", name: "tab", pkg: "hash/crc32", typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		castagnoliTable = ptrType.nil;
		ieeeTable8 = ptrType$1.nil;
		ieeeTable8Once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		$pkg.IEEETable = makeTable(3988292384);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/gzip"] = (function() {
	var $pkg = {}, $init, bufio, flate, errors, fmt, hash, crc32, io, time, Header, Reader, sliceType, ptrType, arrayType, ptrType$1, sliceType$1, makeReader, NewReader, get4;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	crc32 = $packages["hash/crc32"];
	io = $packages["io"];
	time = $packages["time"];
	Header = $pkg.Header = $newType(0, $kindStruct, "gzip.Header", "Header", "compress/gzip", function(Comment_, Extra_, ModTime_, Name_, OS_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Comment = "";
			this.Extra = sliceType.nil;
			this.ModTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil);
			this.Name = "";
			this.OS = 0;
			return;
		}
		this.Comment = Comment_;
		this.Extra = Extra_;
		this.ModTime = ModTime_;
		this.Name = Name_;
		this.OS = OS_;
	});
	Reader = $pkg.Reader = $newType(0, $kindStruct, "gzip.Reader", "Reader", "compress/gzip", function(Header_, r_, decompressor_, digest_, size_, flg_, buf_, err_, multistream_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Header = new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0);
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = $ifaceNil;
			this.size = 0;
			this.flg = 0;
			this.buf = arrayType.zero();
			this.err = $ifaceNil;
			this.multistream = false;
			return;
		}
		this.Header = Header_;
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.size = size_;
		this.flg = flg_;
		this.buf = buf_;
		this.err = err_;
		this.multistream = multistream_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(time.Location);
	arrayType = $arrayType($Uint8, 512);
	ptrType$1 = $ptrType(Reader);
	sliceType$1 = $sliceType($Int32);
	makeReader = function(r) {
		var $ptr, _tuple, ok, r, rr;
		_tuple = $assertType(r, flate.Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	NewReader = function(r) {
		var $ptr, _r, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new Reader.ptr(new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Int64(0, 0), 0, ptrType.nil), "", 0), $ifaceNil, $ifaceNil, $ifaceNil, 0, 0, arrayType.zero(), $ifaceNil, false);
		z.r = makeReader(r);
		z.multistream = true;
		z.digest = crc32.NewIEEE();
		_r = z.readHeader(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$1.nil, err];
		}
		return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.$ptr = $ptr; $f._r = _r; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var $ptr, _r, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.r = makeReader(r);
		/* */ if ($interfaceIsEqual(z.digest, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(z.digest, $ifaceNil)) { */ case 1:
			z.digest = crc32.NewIEEE();
			$s = 3; continue;
		/* } else { */ case 2:
			$r = z.digest.Reset(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		z.size = 0;
		z.err = $ifaceNil;
		z.multistream = true;
		_r = z.readHeader(true); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Reset }; } $f.$ptr = $ptr; $f._r = _r; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.Multistream = function(ok) {
		var $ptr, ok, z;
		z = this;
		z.multistream = ok;
	};
	Reader.prototype.Multistream = function(ok) { return this.$val.Multistream(ok); };
	get4 = function(p) {
		var $ptr, p;
		return (((((((0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]) >>> 0) | (((1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]) >>> 0) << 16 >>> 0)) >>> 0) | (((3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	Reader.ptr.prototype.readString = function() {
		var $ptr, _i, _r, _ref, _tuple, err, i, needconv, s, v, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; i = $f.i; needconv = $f.needconv; s = $f.s; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		err = $ifaceNil;
		needconv = false;
		i = 0;
		/* while (true) { */ case 1:
			if (i >= 512) {
				return ["", $pkg.ErrHeader];
			}
			_r = z.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			(x = z.buf, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = _tuple[0]));
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			if ((x$1 = z.buf, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) > 127) {
				needconv = true;
			}
			if ((x$2 = z.buf, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) === 0) {
				if (needconv) {
					s = $makeSlice(sliceType$1, 0, i);
					_ref = $subslice(new sliceType(z.buf), 0, i);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						s = $append(s, (v >> 0));
						_i++;
					}
					return [$runesToString(s), $ifaceNil];
				}
				return [$bytesToString($subslice(new sliceType(z.buf), 0, i)), $ifaceNil];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readString }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.needconv = needconv; $f.s = s; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readString = function() { return this.$val.readString(); };
	Reader.ptr.prototype.read2 = function() {
		var $ptr, _r, _tuple, err, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			return [0, err];
		}
		return [((z.buf[0] >>> 0) | ((z.buf[1] >>> 0) << 8 >>> 0)) >>> 0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.read2 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.read2 = function() { return this.$val.read2(); };
	Reader.ptr.prototype.readHeader = function(save) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, data, err, err$1, err$2, n, n$1, s, save, sum, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; data = $f.data; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; n = $f.n; n$1 = $f.n$1; s = $f.s; save = $f.save; sum = $f.sum; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (!((z.buf[0] === 31)) || !((z.buf[1] === 139)) || !((z.buf[2] === 8))) {
			return $pkg.ErrHeader;
		}
		z.flg = z.buf[3];
		if (save) {
			time.Time.copy(z.Header.ModTime, time.Unix(new $Int64(0, get4($subslice(new sliceType(z.buf), 4, 8))), new $Int64(0, 0)));
			z.Header.OS = z.buf[9];
		}
		$r = z.digest.Reset(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = z.digest.Write($subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ if (!((((z.flg & 4) >>> 0) === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((((z.flg & 4) >>> 0) === 0))) { */ case 4:
			_r$2 = z.read2(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			n = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			data = $makeSlice(sliceType, n);
			_r$3 = io.ReadFull(z.r, data); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$2 = _r$3;
			err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				return err$1;
			}
			if (save) {
				z.Header.Extra = data;
			}
		/* } */ case 5:
		s = "";
		/* */ if (!((((z.flg & 8) >>> 0) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((((z.flg & 8) >>> 0) === 0))) { */ case 8:
			_r$4 = z.readString(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$3 = _r$4;
			s = _tuple$3[0];
			err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			if (save) {
				z.Header.Name = s;
			}
		/* } */ case 9:
		/* */ if (!((((z.flg & 16) >>> 0) === 0))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!((((z.flg & 16) >>> 0) === 0))) { */ case 11:
			_r$5 = z.readString(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$4 = _r$5;
			s = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			if (save) {
				z.Header.Comment = s;
			}
		/* } */ case 12:
		/* */ if (!((((z.flg & 2) >>> 0) === 0))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!((((z.flg & 2) >>> 0) === 0))) { */ case 14:
			_r$6 = z.read2(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$5 = _r$6;
			n$1 = _tuple$5[0];
			err$2 = _tuple$5[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
			_r$7 = z.digest.Sum32(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			sum = (_r$7 & 65535) >>> 0;
			if (!((n$1 === sum))) {
				return $pkg.ErrHeader;
			}
		/* } */ case 15:
		$r = z.digest.Reset(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 19:
			_r$8 = flate.NewReader(z.r); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			z.decompressor = _r$8;
			$s = 21; continue;
		/* } else { */ case 20:
			_r$9 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, sliceType.nil); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
		/* } */ case 21:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readHeader }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.data = data; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.n = n; $f.n$1 = n$1; $f.s = s; $f.save = save; $f.sum = sum; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readHeader = function(save) { return this.$val.readHeader(save); };
	Reader.ptr.prototype.Read = function(p) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, crc32$1, err, err$1, isize, n, p, sum, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; crc32$1 = $f.crc32$1; err = $f.err; err$1 = $f.err$1; isize = $f.isize; n = $f.n; p = $f.p; sum = $f.sum; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = z.err;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if (p.$length === 0) {
			_tmp$2 = 0;
			_tmp$3 = $ifaceNil;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		_r$1 = z.digest.Write($subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		z.size = z.size + ((n >>> 0)) >>> 0;
		if (!((n === 0)) || !($interfaceIsEqual(err, io.EOF))) {
			z.err = err;
			return [n, err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			if ($interfaceIsEqual(err$1, io.EOF)) {
				err$1 = io.ErrUnexpectedEOF;
			}
			z.err = err$1;
			_tmp$4 = 0;
			_tmp$5 = err$1;
			n = _tmp$4;
			err = _tmp$5;
			return [n, err];
		}
		_tmp$6 = get4($subslice(new sliceType(z.buf), 0, 4));
		_tmp$7 = get4($subslice(new sliceType(z.buf), 4, 8));
		crc32$1 = _tmp$6;
		isize = _tmp$7;
		_r$3 = z.digest.Sum32(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		sum = _r$3;
		if (!((sum === crc32$1)) || !((isize === z.size))) {
			z.err = $pkg.ErrChecksum;
			_tmp$8 = 0;
			_tmp$9 = z.err;
			n = _tmp$8;
			err = _tmp$9;
			return [n, err];
		}
		if (!z.multistream) {
			_tmp$10 = 0;
			_tmp$11 = io.EOF;
			n = _tmp$10;
			err = _tmp$11;
			return [n, err];
		}
		_r$4 = z.readHeader(false); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		err = _r$4;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			z.err = err;
			return [n, err];
		}
		$r = z.digest.Reset(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		z.size = 0;
		_r$5 = z.Read(p); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		n = _tuple$2[0];
		err = _tuple$2[1];
		/* */ $s = 8; case 8:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.crc32$1 = crc32$1; $f.err = err; $f.err$1 = err$1; $f.isize = isize; $f.n = n; $f.p = p; $f.sum = sum; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.Close = function() {
		var $ptr, _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Close }; } $f.$ptr = $ptr; $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Close = function() { return this.$val.Close(); };
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [$error], false)}, {prop: "Multistream", name: "Multistream", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "readString", name: "readString", pkg: "compress/gzip", typ: $funcType([], [$String, $error], false)}, {prop: "read2", name: "read2", pkg: "compress/gzip", typ: $funcType([], [$Uint32, $error], false)}, {prop: "readHeader", name: "readHeader", pkg: "compress/gzip", typ: $funcType([$Bool], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	Header.init([{prop: "Comment", name: "Comment", pkg: "", typ: $String, tag: ""}, {prop: "Extra", name: "Extra", pkg: "", typ: sliceType, tag: ""}, {prop: "ModTime", name: "ModTime", pkg: "", typ: time.Time, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "OS", name: "OS", pkg: "", typ: $Uint8, tag: ""}]);
	Reader.init([{prop: "Header", name: "", pkg: "", typ: Header, tag: ""}, {prop: "r", name: "r", pkg: "compress/gzip", typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", pkg: "compress/gzip", typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", pkg: "compress/gzip", typ: hash.Hash32, tag: ""}, {prop: "size", name: "size", pkg: "compress/gzip", typ: $Uint32, tag: ""}, {prop: "flg", name: "flg", pkg: "compress/gzip", typ: $Uint8, tag: ""}, {prop: "buf", name: "buf", pkg: "compress/gzip", typ: arrayType, tag: ""}, {prop: "err", name: "err", pkg: "compress/gzip", typ: $error, tag: ""}, {prop: "multistream", name: "multistream", pkg: "compress/gzip", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("gzip: invalid checksum");
		$pkg.ErrHeader = errors.New("gzip: invalid header");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$4, NewEncoding;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_, padChar_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$4 = $arrayType($Uint8, 4);
	NewEncoding = function(encoder$1) {
		var $ptr, e, encoder$1, i, i$1, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			(x = e.decodeMap, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255));
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24)));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var $ptr, enc, padding;
		enc = $clone(this, Encoding);
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var $ptr, _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = ((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) >>> 0) << 16 >>> 0) | (((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) >>> 0)) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? $throwRuntimeError("index out of range") : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = ((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$15])) >>> 0) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | ((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$16])) >>> 0) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? $throwRuntimeError("index out of range") : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? $throwRuntimeError("index out of range") : x$20[x$21]))));
		_1 = remain;
		if (_1 === 2) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? $throwRuntimeError("index out of range") : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$26] = (enc.padChar << 24 >>> 24)));
			}
		} else if (_1 === 1) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$27] = (enc.padChar << 24 >>> 24)));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + x$28] = (enc.padChar << 24 >>> 24)));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var $ptr, buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var $ptr, e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var $ptr, _2, _3, _i, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
			si = si + (1) >> 0;
		}
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			_ref = dbuf;
			_i = 0;
			while (true) {
				if (!(_i < 4)) { break; }
				j = _i;
				if (src.$length === si) {
					if (!((enc.padChar === -1)) || j < 2) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = new CorruptInputError(0, (si - j >> 0));
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					}
					_tmp$5 = j - 1 >> 0;
					_tmp$6 = j;
					_tmp$7 = true;
					dinc = _tmp$5;
					dlen = _tmp$6;
					end = _tmp$7;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if ((in$1 >> 0) === enc.padChar) {
					_2 = j;
					if ((_2 === 0) || (_2 === 1)) {
						_tmp$8 = n;
						_tmp$9 = false;
						_tmp$10 = new CorruptInputError(0, (si - 1 >> 0));
						n = _tmp$8;
						end = _tmp$9;
						err = _tmp$10;
						return [n, end, err];
					} else if (_2 === 2) {
						if (si === src.$length) {
							_tmp$11 = n;
							_tmp$12 = false;
							_tmp$13 = new CorruptInputError(0, src.$length);
							n = _tmp$11;
							end = _tmp$12;
							err = _tmp$13;
							return [n, end, err];
						}
						if (!(((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) >> 0) === enc.padChar))) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = new CorruptInputError(0, (si - 1 >> 0));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						si = si + (1) >> 0;
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
					}
					if (si < src.$length) {
						err = new CorruptInputError(0, si);
					}
					_tmp$17 = 3;
					_tmp$18 = j;
					_tmp$19 = true;
					dinc = _tmp$17;
					dlen = _tmp$18;
					end = _tmp$19;
					break;
				}
				((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1])));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$20 = n;
					_tmp$21 = false;
					_tmp$22 = new CorruptInputError(0, (si - 1 >> 0));
					n = _tmp$20;
					end = _tmp$21;
					err = _tmp$22;
					return [n, end, err];
				}
				_i++;
			}
			val = (((((((dbuf[0] >>> 0) << 18 >>> 0) | ((dbuf[1] >>> 0) << 12 >>> 0)) >>> 0) | ((dbuf[2] >>> 0) << 6 >>> 0)) >>> 0) | (dbuf[3] >>> 0)) >>> 0;
			_3 = dlen;
			if (_3 === 4) {
				(2 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((val >>> 0 >>> 0) << 24 >>> 24));
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_3 === 3) {
				(1 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((val >>> 8 >>> 0) << 24 >>> 24));
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			} else if (_3 === 2) {
				(0 >= dst.$length ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((val >>> 16 >>> 0) << 24 >>> 24));
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$23 = n;
		_tmp$24 = end;
		_tmp$25 = err;
		n = _tmp$23;
		end = _tmp$24;
		err = _tmp$25;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var $ptr, _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var $ptr, _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType($stringToBytes(s)));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var $ptr, _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 6)) + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base64", typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base64", typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", pkg: "encoding/base64", typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $pkg.StdEncoding.WithPadding(-1);
		$pkg.RawURLEncoding = $pkg.URLEncoding.WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["mime"] = (function() {
	var $pkg = {}, $init, bufio, bytes, base64, errors, fmt, io, os, sort, strings, sync, unicode, utf8, sliceType, sliceType$1, arrayType, arrayType$1, sliceType$2, arrayType$2, errInvalidWord, maxBase64Len, bufPool, mimeLock, mimeTypes, mimeTypesLower, extensions, builtinTypesLower, once, testInitMime, osInitMime, typeFiles, isTSpecial, isTokenChar, isToken, FormatMediaType, checkMediaTypeDisposition, ParseMediaType, decode2231Enc, isNotTokenChar, consumeToken, consumeValue, consumeMediaParam, percentHexUnescape, ishex, unhex, setMimeTypes, clone, invert, initMime, TypeByExtension, setExtensionType, init, loadMimeFile, initMimeUnix;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	arrayType$2 = $arrayType($Uint8, 10);
	isTSpecial = function(r) {
		var $ptr, r;
		return !((strings.IndexRune("()<>@,;:\\\"/[]?=", r) === -1));
	};
	isTokenChar = function(r) {
		var $ptr, r;
		return r > 32 && r < 127 && !isTSpecial(r);
	};
	isToken = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (s === "") {
			return false;
		}
		_r = strings.IndexFunc(s, isNotTokenChar); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r < 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isToken }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FormatMediaType = function(t, param) {
		var $ptr, _entry, _entry$1, _i, _i$1, _i$2, _keys, _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _rune, _tmp, _tmp$1, _v, a, attribute, attrs, b, character, index, major, offset, param, slash, sub, t, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _rune = $f._rune; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; a = $f.a; attribute = $f.attribute; attrs = $f.attrs; b = $f.b; character = $f.character; index = $f.index; major = $f.major; offset = $f.offset; param = $f.param; slash = $f.slash; sub = $f.sub; t = $f.t; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		slash = strings.Index(t, "/");
		/* */ if (slash === -1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (slash === -1) { */ case 1:
			_r = isToken(t); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!_r) { */ case 4:
				return "";
			/* } */ case 5:
			_r$1 = strings.ToLower(t); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = b.WriteString(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 3; continue;
		/* } else { */ case 2:
			_tmp = t.substring(0, slash);
			_tmp$1 = t.substring((slash + 1 >> 0));
			major = _tmp;
			sub = _tmp$1;
			_r$3 = isToken(major); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			if (!_r$3) { _v = true; $s = 11; continue s; }
			_r$4 = isToken(sub); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = !_r$4; case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				return "";
			/* } */ case 10:
			_r$5 = strings.ToLower(major); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = b.WriteString(_r$5); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			b.WriteByte(47);
			_r$7 = strings.ToLower(sub); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = b.WriteString(_r$7); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
		/* } */ case 3:
		attrs = $makeSlice(sliceType$2, 0, $keys(param).length);
		_ref = param;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			a = _entry.k;
			attrs = $append(attrs, a);
			_i++;
		}
		$r = sort.Strings(attrs); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = attrs;
		_i$1 = 0;
		/* while (true) { */ case 19:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 20; continue; }
			attribute = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			value = (_entry$1 = param[$String.keyFor(attribute)], _entry$1 !== undefined ? _entry$1.v : "");
			b.WriteByte(59);
			b.WriteByte(32);
			_r$9 = isToken(attribute); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (!_r$9) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!_r$9) { */ case 21:
				return "";
			/* } */ case 22:
			_r$10 = strings.ToLower(attribute); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = b.WriteString(_r$10); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			b.WriteByte(61);
			_r$12 = isToken(value); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			/* */ if (_r$12) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$12) { */ case 26:
				b.WriteString(value);
				_i$1++;
				/* continue; */ $s = 19; continue;
			/* } */ case 27:
			b.WriteByte(34);
			offset = 0;
			_ref$2 = value;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.length)) { break; }
				_rune = $decodeRune(_ref$2, _i$2);
				index = _i$2;
				character = _rune[0];
				if ((character === 34) || (character === 92)) {
					b.WriteString(value.substring(offset, index));
					offset = index;
					b.WriteByte(92);
				}
				if (!(((character & 128) === 0))) {
					return "";
				}
				_i$2 += _rune[1];
			}
			b.WriteString(value.substring(offset));
			b.WriteByte(34);
			_i$1++;
		/* } */ $s = 19; continue; case 20:
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormatMediaType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._rune = _rune; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f.a = a; $f.attribute = attribute; $f.attrs = attrs; $f.b = b; $f.character = character; $f.index = index; $f.major = major; $f.offset = offset; $f.param = param; $f.slash = slash; $f.sub = sub; $f.t = t; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormatMediaType = FormatMediaType;
	checkMediaTypeDisposition = function(s) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, rest, s, subtype, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; rest = $f.rest; s = $f.s; subtype = $f.subtype; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = consumeToken(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		typ = _tuple[0];
		rest = _tuple[1];
		if (typ === "") {
			return errors.New("mime: no media type");
		}
		if (rest === "") {
			return $ifaceNil;
		}
		if (!strings.HasPrefix(rest, "/")) {
			return errors.New("mime: expected slash after first token");
		}
		_r$1 = consumeToken(rest.substring(1)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		subtype = _tuple$1[0];
		rest = _tuple$1[1];
		if (subtype === "") {
			return errors.New("mime: expected token after slash");
		}
		if (!(rest === "")) {
			return errors.New("mime: unexpected content after media subtype");
		}
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkMediaTypeDisposition }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.rest = rest; $f.s = s; $f.subtype = subtype; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseMediaType = function(v) {
		var $ptr, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _i, _key, _key$1, _key$2, _key$3, _keys, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, baseName, buf, continuation, decv, decv$1, encodedPart, err, exists, i, idx, key, key$1, mediatype, n, ok, ok$1, ok$2, ok$3, params, pieceMap, pmap, rest, simplePart, singlePartKey, v, v$1, v$2, v$3, valid, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; baseName = $f.baseName; buf = $f.buf; continuation = $f.continuation; decv = $f.decv; decv$1 = $f.decv$1; encodedPart = $f.encodedPart; err = $f.err; exists = $f.exists; i = $f.i; idx = $f.idx; key = $f.key; key$1 = $f.key$1; mediatype = $f.mediatype; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; params = $f.params; pieceMap = $f.pieceMap; pmap = $f.pmap; rest = $f.rest; simplePart = $f.simplePart; singlePartKey = $f.singlePartKey; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; v$3 = $f.v$3; valid = $f.valid; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mediatype = "";
		params = false;
		err = $ifaceNil;
		i = strings.Index(v, ";");
		if (i === -1) {
			i = v.length;
		}
		_r = strings.ToLower(v.substring(0, i)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strings.TrimSpace(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mediatype = _r$1;
		_r$2 = checkMediaTypeDisposition(mediatype); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		err = _r$2;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = "";
			_tmp$1 = false;
			_tmp$2 = err;
			mediatype = _tmp;
			params = _tmp$1;
			err = _tmp$2;
			return [mediatype, params, err];
		}
		params = {};
		continuation = false;
		v = v.substring(i);
		/* while (true) { */ case 4:
			/* if (!(v.length > 0)) { break; } */ if(!(v.length > 0)) { $s = 5; continue; }
			_r$3 = strings.TrimLeftFunc(v, unicode.IsSpace); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			if (v.length === 0) {
				/* break; */ $s = 5; continue;
			}
			_r$4 = consumeMediaParam(v); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			key = _tuple[0];
			value = _tuple[1];
			rest = _tuple[2];
			/* */ if (key === "") { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (key === "") { */ case 8:
				_r$5 = strings.TrimSpace(rest); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5 === ";") { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$5 === ";") { */ case 10:
					return [mediatype, params, err];
				/* } */ case 11:
				_tmp$3 = "";
				_tmp$4 = false;
				_tmp$5 = errors.New("mime: invalid media parameter");
				mediatype = _tmp$3;
				params = _tmp$4;
				err = _tmp$5;
				return [mediatype, params, err];
			/* } */ case 9:
			pmap = params;
			idx = strings.Index(key, "*");
			if (!((idx === -1))) {
				baseName = key.substring(0, idx);
				if (continuation === false) {
					continuation = {};
				}
				ok = false;
				_tuple$1 = (_entry = continuation[$String.keyFor(baseName)], _entry !== undefined ? [_entry.v, true] : [false, false]);
				pmap = _tuple$1[0];
				ok = _tuple$1[1];
				if (!ok) {
					_key = baseName; (continuation || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: {} };
					pmap = (_entry$1 = continuation[$String.keyFor(baseName)], _entry$1 !== undefined ? _entry$1.v : false);
				}
			}
			_tuple$2 = (_entry$2 = pmap[$String.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : ["", false]);
			exists = _tuple$2[1];
			if (exists) {
				_tmp$6 = "";
				_tmp$7 = false;
				_tmp$8 = errors.New("mime: duplicate parameter name");
				mediatype = _tmp$6;
				params = _tmp$7;
				err = _tmp$8;
				return [mediatype, params, err];
			}
			_key$1 = key; (pmap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: value };
			v = rest;
		/* } */ $s = 4; continue; case 5:
		buf = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_ref = continuation;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 13:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 14; continue; }
			_entry$3 = _ref[_keys[_i]];
			if (_entry$3 === undefined) {
				_i++;
				/* continue; */ $s = 13; continue;
			}
			key$1 = _entry$3.k;
			pieceMap = _entry$3.v;
			singlePartKey = key$1 + "*";
			_tuple$3 = (_entry$4 = pieceMap[$String.keyFor(singlePartKey)], _entry$4 !== undefined ? [_entry$4.v, true] : ["", false]);
			v$1 = _tuple$3[0];
			ok$1 = _tuple$3[1];
			/* */ if (ok$1) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (ok$1) { */ case 15:
				_r$6 = decode2231Enc(v$1); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				decv = _r$6;
				_key$2 = key$1; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: decv };
				_i++;
				/* continue; */ $s = 13; continue;
			/* } */ case 16:
			buf.Reset();
			valid = false;
			n = 0;
			/* while (true) { */ case 18:
				_r$7 = fmt.Sprintf("%s*%d", new sliceType([new $String(key$1), new $Int(n)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				simplePart = _r$7;
				_tuple$4 = (_entry$5 = pieceMap[$String.keyFor(simplePart)], _entry$5 !== undefined ? [_entry$5.v, true] : ["", false]);
				v$2 = _tuple$4[0];
				ok$2 = _tuple$4[1];
				if (ok$2) {
					valid = true;
					buf.WriteString(v$2);
					n = n + (1) >> 0;
					/* continue; */ $s = 18; continue;
				}
				encodedPart = simplePart + "*";
				_tuple$5 = (_entry$6 = pieceMap[$String.keyFor(encodedPart)], _entry$6 !== undefined ? [_entry$6.v, true] : ["", false]);
				v$3 = _tuple$5[0];
				ok$3 = _tuple$5[1];
				/* */ if (ok$3) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (ok$3) { */ case 21:
					valid = true;
					/* */ if (n === 0) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (n === 0) { */ case 24:
						_r$8 = decode2231Enc(v$3); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$9 = buf.WriteString(_r$8); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
						$s = 26; continue;
					/* } else { */ case 25:
						_r$10 = percentHexUnescape(v$3); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_tuple$6 = _r$10;
						decv$1 = _tuple$6[0];
						buf.WriteString(decv$1);
					/* } */ case 26:
					$s = 23; continue;
				/* } else { */ case 22:
					/* break; */ $s = 19; continue;
				/* } */ case 23:
				n = n + (1) >> 0;
			/* } */ $s = 18; continue; case 19:
			if (valid) {
				_key$3 = key$1; (params || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: buf.String() };
			}
			_i++;
		/* } */ $s = 13; continue; case 14:
		return [mediatype, params, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ParseMediaType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.baseName = baseName; $f.buf = buf; $f.continuation = continuation; $f.decv = decv; $f.decv$1 = decv$1; $f.encodedPart = encodedPart; $f.err = err; $f.exists = exists; $f.i = i; $f.idx = idx; $f.key = key; $f.key$1 = key$1; $f.mediatype = mediatype; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.params = params; $f.pieceMap = pieceMap; $f.pmap = pmap; $f.rest = rest; $f.simplePart = simplePart; $f.singlePartKey = singlePartKey; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.v$3 = v$3; $f.valid = valid; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ParseMediaType = ParseMediaType;
	decode2231Enc = function(v) {
		var $ptr, _r, _r$1, _tuple, charset, encv, sv, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; charset = $f.charset; encv = $f.encv; sv = $f.sv; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sv = strings.SplitN(v, "'", 3);
		if (!((sv.$length === 3))) {
			return "";
		}
		_r = strings.ToLower((0 >= sv.$length ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + 0])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		charset = _r;
		if (!(charset === "us-ascii") && !(charset === "utf-8")) {
			return "";
		}
		_r$1 = percentHexUnescape((2 >= sv.$length ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + 2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		encv = _tuple[0];
		return encv;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decode2231Enc }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.charset = charset; $f.encv = encv; $f.sv = sv; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	isNotTokenChar = function(r) {
		var $ptr, r;
		return !isTokenChar(r);
	};
	consumeToken = function(v) {
		var $ptr, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, notPos, rest, token, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; notPos = $f.notPos; rest = $f.rest; token = $f.token; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = "";
		rest = "";
		_r = strings.IndexFunc(v, isNotTokenChar); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		notPos = _r;
		if (notPos === -1) {
			_tmp = v;
			_tmp$1 = "";
			token = _tmp;
			rest = _tmp$1;
			return [token, rest];
		}
		if (notPos === 0) {
			_tmp$2 = "";
			_tmp$3 = v;
			token = _tmp$2;
			rest = _tmp$3;
			return [token, rest];
		}
		_tmp$4 = v.substring(0, notPos);
		_tmp$5 = v.substring(notPos);
		token = _tmp$4;
		rest = _tmp$5;
		return [token, rest];
		/* */ } return; } if ($f === undefined) { $f = { $blk: consumeToken }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.notPos = notPos; $f.rest = rest; $f.token = token; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	consumeValue = function(v) {
		var $ptr, _i, _r, _ref, _rune, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buffer, idx, nextIsLiteral, r, rest, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _rune = $f._rune; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; buffer = $f.buffer; idx = $f.idx; nextIsLiteral = $f.nextIsLiteral; r = $f.r; rest = $f.rest; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = "";
		rest = "";
		if (v === "") {
			return [value, rest];
		}
		/* */ if (!((v.charCodeAt(0) === 34))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((v.charCodeAt(0) === 34))) { */ case 1:
			_r = consumeToken(v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			value = _tuple[0];
			rest = _tuple[1];
			/* */ $s = 4; case 4:
			return [value, rest];
		/* } */ case 2:
		rest = v.substring(1);
		buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		nextIsLiteral = false;
		_ref = rest;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			idx = _i;
			r = _rune[0];
			if (nextIsLiteral) {
				buffer.WriteRune(r);
				nextIsLiteral = false;
			} else if ((r === 34)) {
				_tmp = buffer.String();
				_tmp$1 = rest.substring((idx + 1 >> 0));
				value = _tmp;
				rest = _tmp$1;
				return [value, rest];
			} else if ((r === 92)) {
				nextIsLiteral = true;
			} else if (!((r === 13)) && !((r === 10))) {
				buffer.WriteRune(r);
			} else {
				_tmp$2 = "";
				_tmp$3 = v;
				value = _tmp$2;
				rest = _tmp$3;
				return [value, rest];
			}
			_i += _rune[1];
		}
		_tmp$4 = "";
		_tmp$5 = v;
		value = _tmp$4;
		rest = _tmp$5;
		return [value, rest];
		/* */ } return; } if ($f === undefined) { $f = { $blk: consumeValue }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._rune = _rune; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.buffer = buffer; $f.idx = idx; $f.nextIsLiteral = nextIsLiteral; $f.r = r; $f.rest = rest; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	consumeMediaParam = function(v) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, param, rest, rest2, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; param = $f.param; rest = $f.rest; rest2 = $f.rest2; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		param = "";
		value = "";
		rest = "";
		_r = strings.TrimLeftFunc(v, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rest = _r;
		if (!strings.HasPrefix(rest, ";")) {
			_tmp = "";
			_tmp$1 = "";
			_tmp$2 = v;
			param = _tmp;
			value = _tmp$1;
			rest = _tmp$2;
			return [param, value, rest];
		}
		rest = rest.substring(1);
		_r$1 = strings.TrimLeftFunc(rest, unicode.IsSpace); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		rest = _r$1;
		_r$2 = consumeToken(rest); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		param = _tuple[0];
		rest = _tuple[1];
		_r$3 = strings.ToLower(param); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		param = _r$3;
		if (param === "") {
			_tmp$3 = "";
			_tmp$4 = "";
			_tmp$5 = v;
			param = _tmp$3;
			value = _tmp$4;
			rest = _tmp$5;
			return [param, value, rest];
		}
		_r$4 = strings.TrimLeftFunc(rest, unicode.IsSpace); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rest = _r$4;
		if (!strings.HasPrefix(rest, "=")) {
			_tmp$6 = "";
			_tmp$7 = "";
			_tmp$8 = v;
			param = _tmp$6;
			value = _tmp$7;
			rest = _tmp$8;
			return [param, value, rest];
		}
		rest = rest.substring(1);
		_r$5 = strings.TrimLeftFunc(rest, unicode.IsSpace); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		rest = _r$5;
		_r$6 = consumeValue(rest); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		value = _tuple$1[0];
		rest2 = _tuple$1[1];
		if (value === "" && rest2 === rest) {
			_tmp$9 = "";
			_tmp$10 = "";
			_tmp$11 = v;
			param = _tmp$9;
			value = _tmp$10;
			rest = _tmp$11;
			return [param, value, rest];
		}
		rest = rest2;
		_tmp$12 = param;
		_tmp$13 = value;
		_tmp$14 = rest;
		param = _tmp$12;
		value = _tmp$13;
		rest = _tmp$14;
		return [param, value, rest];
		/* */ } return; } if ($f === undefined) { $f = { $blk: consumeMediaParam }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.param = param; $f.rest = rest; $f.rest2 = rest2; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	percentHexUnescape = function(s) {
		var $ptr, _1, _r, i, i$1, j, percents, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; i = $f.i; i$1 = $f.i$1; j = $f.j; percents = $f.percents; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		percents = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			/* */ if (!((s.charCodeAt(i) === 37))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((s.charCodeAt(i) === 37))) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			percents = percents + (1) >> 0;
			/* */ if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) { */ case 5:
				s = s.substring(i);
				if (s.length > 3) {
					s = s.substring(0, 3);
				}
				_r = fmt.Errorf("mime: bogus characters after %%: %q", new sliceType([new $String(s)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return ["", _r];
			/* } */ case 6:
			i = i + (3) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (percents === 0) {
			return [s, $ifaceNil];
		}
		t = $makeSlice(sliceType$1, (s.length - ($imul(2, percents)) >> 0));
		j = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			_1 = s.charCodeAt(i$1);
			if (_1 === 37) {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = (((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0));
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else {
				((j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1));
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: percentHexUnescape }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.percents = percents; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	ishex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		var $ptr, c;
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	setMimeTypes = function(lowerExt, mixExt) {
		var $ptr, _r, lowerExt, mixExt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; lowerExt = $f.lowerExt; mixExt = $f.mixExt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (lowerExt === false || mixExt === false) {
			$panic(new $String("nil map"));
		}
		mimeTypesLower = lowerExt;
		mimeTypes = mixExt;
		_r = invert(lowerExt); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		extensions = _r;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: setMimeTypes }; } $f.$ptr = $ptr; $f._r = _r; $f.lowerExt = lowerExt; $f.mixExt = mixExt; $f.$s = $s; $f.$r = $r; return $f;
	};
	clone = function(m) {
		var $ptr, _entry, _i, _key, _keys, _r, _ref, k, m, m2, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _ref = $f._ref; k = $f.k; m = $f.m; m2 = $f.m2; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = (x = $keys(m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (m2 || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: v };
			_r = strings.ToLower(k); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!(_r === k)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(_r === k)) { */ case 3:
				$panic(new $String("keys in builtinTypesLower must be lowercase"));
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		return m2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f.k = k; $f.m = m; $f.m2 = m2; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	invert = function(m) {
		var $ptr, _entry, _entry$1, _i, _key, _keys, _r, _ref, _tuple, err, justType, k, m, m2, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; justType = $f.justType; k = $f.k; m = $f.m; m2 = $f.m2; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m2 = (x = $keys(m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_r = ParseMediaType(v); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			justType = _tuple[0];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(err);
			}
			_key = justType; (m2 || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = m2[$String.keyFor(justType)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil), k) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		return m2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: invert }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.justType = justType; $f.k = k; $f.m = m; $f.m2 = m2; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	initMime = function() {
		var $ptr, _arg, _arg$1, _r, fn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; fn = $f.fn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = testInitMime;
		/* */ if (!(fn === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(fn === $throwNilPointerError)) { */ case 1:
			$r = fn(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_arg = builtinTypesLower;
			_r = clone(builtinTypesLower); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$r = setMimeTypes(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = osInitMime(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initMime }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.fn = fn; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeByExtension = function(ext) {
		var $ptr, _entry, _entry$1, _entry$2, _r, buf, c, ext, i, lower, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _r = $f._r; buf = $f.buf; c = $f.c; ext = $f.ext; i = $f.i; lower = $f.lower; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = once.Do(initMime); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mimeLock.RLock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(mimeLock, "RUnlock"), []]);
		v = (_entry = mimeTypes[$String.keyFor(ext)], _entry !== undefined ? _entry.v : "");
		if (!(v === "")) {
			return v;
		}
		buf = arrayType$2.zero();
		lower = $subslice(new sliceType$1(buf), 0, 0);
		i = 0;
		/* while (true) { */ case 3:
			/* if (!(i < ext.length)) { break; } */ if(!(i < ext.length)) { $s = 4; continue; }
			c = ext.charCodeAt(i);
			/* */ if (c >= 128) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (c >= 128) { */ case 5:
				_r = strings.ToLower(ext); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return (_entry$1 = mimeTypesLower[$String.keyFor(_r)], _entry$1 !== undefined ? _entry$1.v : "");
			/* } */ case 6:
			if (65 <= c && c <= 90) {
				lower = $append(lower, c + 32 << 24 >>> 24);
			} else {
				lower = $append(lower, c);
			}
			i = i + (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		return (_entry$2 = mimeTypesLower[$String.keyFor($bytesToString(lower))], _entry$2 !== undefined ? _entry$2.v : "");
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ""; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: TypeByExtension }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._r = _r; $f.buf = buf; $f.c = c; $f.ext = ext; $f.i = i; $f.lower = lower; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.TypeByExtension = TypeByExtension;
	setExtensionType = function(extension, mimeType) {
		var $ptr, _entry, _entry$1, _entry$2, _i, _key, _key$1, _key$2, _key$3, _r, _r$1, _r$2, _ref, _tuple, err, extLower, extension, justType, mimeType, param, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; extLower = $f.extLower; extension = $f.extension; justType = $f.justType; mimeType = $f.mimeType; param = $f.param; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_r = ParseMediaType(mimeType); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		justType = _tuple[0];
		param = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		/* */ if (strings.HasPrefix(mimeType, "text/") && (_entry = param[$String.keyFor("charset")], _entry !== undefined ? _entry.v : "") === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (strings.HasPrefix(mimeType, "text/") && (_entry = param[$String.keyFor("charset")], _entry !== undefined ? _entry.v : "") === "") { */ case 2:
			_key = "charset"; (param || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: "utf-8" };
			_r$1 = FormatMediaType(mimeType, param); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			mimeType = _r$1;
		/* } */ case 3:
		_r$2 = strings.ToLower(extension); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		extLower = _r$2;
		$r = mimeLock.Lock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(mimeLock, "Unlock"), []]);
		_key$1 = extension; (mimeTypes || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: mimeType };
		_key$2 = extLower; (mimeTypesLower || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: mimeType };
		_ref = (_entry$1 = extensions[$String.keyFor(justType)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === extLower) {
				return $ifaceNil;
			}
			_i++;
		}
		_key$3 = justType; (extensions || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: $append((_entry$2 = extensions[$String.keyFor(justType)], _entry$2 !== undefined ? _entry$2.v : sliceType$2.nil), extLower) };
		return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: setExtensionType }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.extLower = extLower; $f.extension = extension; $f.justType = justType; $f.mimeType = mimeType; $f.param = param; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	init = function() {
		var $ptr;
		osInitMime = initMimeUnix;
	};
	loadMimeFile = function(filename) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, err, err$1, ext, f, fields, filename, mimeType, scanner, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; ext = $f.ext; f = $f.f; fields = $f.fields; filename = $f.filename; mimeType = $f.mimeType; scanner = $f.scanner; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_tuple = os.Open(filename);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		scanner = bufio.NewScanner(f);
		/* while (true) { */ case 1:
			_r = scanner.Scan(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* if (!(_r)) { break; } */ if(!(_r)) { $s = 2; continue; }
			_r$1 = strings.Fields(scanner.Text()); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			fields = _r$1;
			/* */ if (fields.$length <= 1 || ((0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).charCodeAt(0) === 35)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (fields.$length <= 1 || ((0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).charCodeAt(0) === 35)) { */ case 5:
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			mimeType = (0 >= fields.$length ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]);
			_ref = $subslice(fields, 1);
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				ext = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (ext.charCodeAt(0) === 35) {
					/* break; */ $s = 8; continue;
				}
				_r$2 = setExtensionType("." + ext, mimeType); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 7; continue; case 8:
		/* } */ $s = 1; continue; case 2:
		err$1 = scanner.Err();
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$panic(err$1);
		}
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: loadMimeFile }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.ext = ext; $f.f = f; $f.fields = fields; $f.filename = filename; $f.mimeType = mimeType; $f.scanner = scanner; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	initMimeUnix = function() {
		var $ptr, _i, _ref, filename, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; filename = $f.filename; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = typeFiles;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = loadMimeFile(filename); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: initMimeUnix }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.filename = filename; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		mimeLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		mimeTypes = false;
		mimeTypesLower = false;
		extensions = false;
		once = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		testInitMime = $throwNilPointerError;
		osInitMime = $throwNilPointerError;
		errInvalidWord = errors.New("mime: invalid RFC 2047 encoded-word");
		maxBase64Len = base64.StdEncoding.DecodedLen(65);
		bufPool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr;
			return new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		}));
		builtinTypesLower = $makeMap($String.keyFor, [{ k: ".css", v: "text/css; charset=utf-8" }, { k: ".gif", v: "image/gif" }, { k: ".htm", v: "text/html; charset=utf-8" }, { k: ".html", v: "text/html; charset=utf-8" }, { k: ".jpg", v: "image/jpeg" }, { k: ".js", v: "application/x-javascript" }, { k: ".pdf", v: "application/pdf" }, { k: ".png", v: "image/png" }, { k: ".svg", v: "image/svg+xml" }, { k: ".xml", v: "text/xml; charset=utf-8" }]);
		typeFiles = new sliceType$2(["/etc/mime.types", "/etc/apache2/mime.types", "/etc/apache/mime.types"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/golang"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, mime, url, os, strings, GoGenerator, ptrType, structType, sliceType, ptrType$1, sliceType$1, arrayType, arrayType$1, sliceType$2, ptrType$2, mapType, escapeDQ, ClientNeeded, ProcessCurlCommand, processCurlFullFeatureRequest, processCurlPostSingleFile, processCurlPostData, processCurlPostDataWithUrl, processCurlGetDataWithUrl, processCurlSimple, NewGoGenerator, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	mime = $packages["mime"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	GoGenerator = $pkg.GoGenerator = $newType(0, $kindStruct, "golang.GoGenerator", "GoGenerator", "github.com/shibukawa/curl_as_dsl/client/golang", function(Options_, Modules_, Data_, DataVariable_, ContentType_, HasBoundary_, extraUrl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType$1.nil;
			this.Modules = false;
			this.Data = "";
			this.DataVariable = "";
			this.ContentType = "";
			this.HasBoundary = false;
			this.extraUrl = "";
			return;
		}
		this.Options = Options_;
		this.Modules = Modules_;
		this.Data = Data_;
		this.DataVariable = DataVariable_;
		this.ContentType = ContentType_;
		this.HasBoundary = HasBoundary_;
		this.extraUrl = extraUrl_;
	});
	ptrType = $ptrType(common.DataOptions);
	structType = $structType([{prop: "Url", name: "Url", pkg: "", typ: $String, tag: ""}, {prop: "FilePath", name: "FilePath", pkg: "", typ: $String, tag: ""}, {prop: "ContentType", name: "ContentType", pkg: "", typ: $String, tag: ""}]);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(common.CurlOptions);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	ptrType$2 = $ptrType(GoGenerator);
	mapType = $mapType($String, $Bool);
	escapeDQ = function(src) {
		var $ptr, src;
		return strings.Replace(strings.Replace(src, "\"", "\\\"", -1), "\\", "\\\\", -1);
	};
	ClientNeeded = function(options) {
		var $ptr, _r, _r$1, method, options, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; method = $f.method; options = $f.options; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (options.Insecure || !(options.Proxy === "") || !(options.User === "") || options.Cookie.$length > 0) {
			return true;
		}
		if (options.AWSV2.length > 0) {
			return true;
		}
		_r = options.OnlyHasContentTypeHeader(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = options.Method(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			method = _r$1;
			if (!(method === "GET") && !(method === "POST")) {
				return true;
			}
			return false;
		/* } */ case 2:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ClientNeeded }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.method = method; $f.options = options; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ClientNeeded = ClientNeeded;
	ProcessCurlCommand = function(options) {
		var $ptr, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, generator, method, onlyHasContentTypeHeader, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; generator = $f.generator; method = $f.method; onlyHasContentTypeHeader = $f.onlyHasContentTypeHeader; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		generator = NewGoGenerator(options);
		_r = ClientNeeded(options); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = processCurlFullFeatureRequest(generator); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$1;
		/* } */ case 2:
		_r$2 = options.Method(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		method = _r$2;
		_r$3 = options.OnlyHasContentTypeHeader(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		onlyHasContentTypeHeader = _r$3;
		/* */ if (method === "POST" && onlyHasContentTypeHeader) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (method === "POST" && onlyHasContentTypeHeader) { */ case 8:
			/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 10; continue; }
			/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 10:
				/* */ if (options.Get) { $s = 14; continue; }
				/* */ if ((options.ProcessedData.$length === 1) && (x = options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).UseExternalFile()) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (options.Get) { */ case 14:
					_r$4 = processCurlPostDataWithUrl(generator); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ $s = 19; case 19:
					return _r$4;
				/* } else if ((options.ProcessedData.$length === 1) && (x = options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).UseExternalFile()) { */ case 15:
					_r$5 = processCurlPostSingleFile(generator); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					/* */ $s = 21; case 21:
					return _r$5;
				/* } else { */ case 16:
					_r$6 = processCurlPostData(generator); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					/* */ $s = 23; case 23:
					return _r$6;
				/* } */ case 17:
				$s = 13; continue;
			/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 11:
				_r$7 = processCurlPostData(generator); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 25; case 25:
				return _r$7;
			/* } else { */ case 12:
				_r$8 = processCurlSimple(generator); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ $s = 27; case 27:
				return _r$8;
			/* } */ case 13:
		/* } */ case 9:
		/* */ if (method === "GET") { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (method === "GET") { */ case 28:
			/* */ if (options.ProcessedData.$length > 0) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (options.ProcessedData.$length > 0) { */ case 30:
				_r$9 = processCurlGetDataWithUrl(generator); /* */ $s = 33; case 33: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return _r$9;
			/* } else { */ case 31:
				_r$10 = processCurlSimple(generator); /* */ $s = 35; case 35: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ $s = 36; case 36:
				return _r$10;
			/* } */ case 32:
		/* } */ case 29:
		/* */ if (!(options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData() && !(options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 37; continue; }
		/* */ $s = 38; continue;
		/* if (!(options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData() && !(options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 37:
			_r$11 = processCurlSimple(generator); /* */ $s = 39; case 39: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 40; case 40:
			return _r$11;
		/* } */ case 38:
		return ["", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.generator = generator; $f.method = method; $f.onlyHasContentTypeHeader = onlyHasContentTypeHeader; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	processCurlFullFeatureRequest = function(generator) {
		var $ptr, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		options = generator.Options;
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 1; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 1:
			/* */ if (options.Get) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (options.Get) { */ case 4:
				$r = generator.SetDataForUrl(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				generator.DataVariable = "nil";
				$s = 6; continue;
			/* } else { */ case 5:
				generator.DataVariable = "&buffer";
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 2:
			generator.DataVariable = "&buffer";
			$r = generator.Options.InsertContentTypeHeader("multipart/form-data"); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			generator.HasBoundary = true;
			$r = generator.SetFormForBody(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (!(options.Proxy === "")) {
			_key = "net/url"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		}
		if (!(options.User === "")) {
			_key$1 = "encoding/base64"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		}
		if (options.Insecure) {
			_key$2 = "crypto/tls"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
		}
		if (!(generator.Options.AWSV2 === "")) {
			_key$3 = "encoding/base64"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
			_key$4 = "crypto/hmac"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
			_key$5 = "crypto/sha1"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: true };
			_key$6 = "time"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: true };
			_key$7 = "fmt"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$7)] = { k: _key$7, v: true };
		}
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: processCurlFullFeatureRequest }; } $f.$ptr = $ptr; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	processCurlPostSingleFile = function(generator) {
		var $ptr, _r, _r$1, _r$2, contentType, fileName, generator, headers, value, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; contentType = $f.contentType; fileName = $f.fileName; generator = $f.generator; headers = $f.headers; value = $f.value; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fileName = (x = generator.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Value.substring(1);
		contentType = "";
		_r = generator.Options.Headers(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		headers = _r;
		/* */ if (headers.$length > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (headers.$length > 0) { */ case 2:
			contentType = (x$1 = (0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0]), (1 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1]));
			$s = 4; continue;
		/* } else { */ case 3:
			_r$1 = mime.TypeByExtension(fileName); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			contentType = _r$1;
		/* } */ case 4:
		value = new structType.ptr("", "", "");
		_r$2 = fmt.Sprintf("\"%s\"", new sliceType([new $String(generator.Options.Url)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		value.Url = _r$2;
		value.FilePath = fileName;
		value.ContentType = contentType;
		return ["post_single_file", new value.constructor.elem(value)];
		/* */ } return; } if ($f === undefined) { $f = { $blk: processCurlPostSingleFile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.contentType = contentType; $f.fileName = fileName; $f.generator = generator; $f.headers = headers; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	processCurlPostData = function(generator) {
		var $ptr, _key, _r, contentType, generator, headers, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; contentType = $f.contentType; generator = $f.generator; headers = $f.headers; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		contentType = "";
		_r = generator.Options.Headers(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		headers = _r;
		if (headers.$length > 0) {
			contentType = (x = (0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0]), (1 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1]));
		}
		if (!(x$1 = generator.Options, (x$1.$ptr_ProcessedData || (x$1.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x$1)))).HasForm() && generator.Options.CanUseSimpleForm() && contentType === "") {
			_key = "net/url"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
			generator.SetDataForPostForm();
			return ["post_form", generator];
		}
		/* */ if ((x$2 = generator.Options, (x$2.$ptr_ProcessedData || (x$2.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x$2)))).HasForm()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((x$2 = generator.Options, (x$2.$ptr_ProcessedData || (x$2.$ptr_ProcessedData = new ptrType(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x$2)))).HasForm()) { */ case 2:
			generator.DataVariable = "&buffer";
			contentType = "multipart/form-data";
			$r = generator.SetFormForBody(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			generator.HasBoundary = true;
			$s = 4; continue;
		/* } else { */ case 3:
			generator.DataVariable = "&buffer";
			contentType = "application/x-www-form-urlencoded";
			$r = generator.SetDataForBody(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		generator.ContentType = contentType;
		return ["post_text", (x$3 = generator, new x$3.constructor.elem(x$3))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: processCurlPostData }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.contentType = contentType; $f.generator = generator; $f.headers = headers; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	processCurlPostDataWithUrl = function(generator) {
		var $ptr, generator, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; generator = $f.generator; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = generator.SetDataForUrl(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ["post_with_data_url", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: processCurlPostDataWithUrl }; } $f.$ptr = $ptr; $f.generator = generator; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	processCurlGetDataWithUrl = function(generator) {
		var $ptr, generator, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; generator = $f.generator; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = generator.SetDataForUrl(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return ["get_with_data_url", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: processCurlGetDataWithUrl }; } $f.$ptr = $ptr; $f.generator = generator; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	processCurlSimple = function(generator) {
		var $ptr, _r, generator, method, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; generator = $f.generator; method = $f.method; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = generator.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		method = _r;
		if (method === "GET") {
			return ["simple_get", (x = generator, new x.constructor.elem(x))];
		} else {
			return ["simple_post", (x$1 = generator, new x$1.constructor.elem(x$1))];
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: processCurlSimple }; } $f.$ptr = $ptr; $f._r = _r; $f.generator = generator; $f.method = method; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewGoGenerator = function(options) {
		var $ptr, _key, _key$1, _key$2, options, result;
		result = new GoGenerator.ptr(options, false, "", "", "", false, "");
		result.Modules = {};
		_key = "net/http"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		_key$1 = "log"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		_key$2 = "io/ioutil"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
		result.DataVariable = "nil";
		return result;
	};
	$pkg.NewGoGenerator = NewGoGenerator;
	GoGenerator.ptr.prototype.Url = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, GoGenerator);
		_r = fmt.Sprintf("\"%s\"%s", new sliceType([new $String(self.Options.Url), new $String(self.extraUrl)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.Url }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.Url = function() { return this.$val.Url(); };
	GoGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, GoGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.Method = function() { return this.$val.Method(); };
	GoGenerator.ptr.prototype.FilePath = function() {
		var $ptr, self;
		self = $clone(this, GoGenerator);
		return "";
	};
	GoGenerator.prototype.FilePath = function() { return this.$val.FilePath(); };
	GoGenerator.ptr.prototype.PrepareClient = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, GoGenerator);
		/* */ if (!(self.Options.Proxy === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self.Options.Proxy === "")) { */ case 1:
			_r = fmt.Sprintf("proxyUrl, err := url.Parse(\"%s\")", new sliceType([new $String(self.Options.Proxy)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.PrepareClient }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.PrepareClient = function() { return this.$val.PrepareClient(); };
	GoGenerator.ptr.prototype.ClientBody = function() {
		var $ptr, buffer, self;
		self = $clone(this, GoGenerator);
		if (!self.Options.Insecure && self.Options.Proxy === "") {
			return "{}";
		}
		buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer.WriteString("{Transport: &http.Transport{");
		if (self.Options.Insecure) {
			buffer.WriteString("TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n");
		}
		if (!(self.Options.Proxy === "")) {
			buffer.WriteString("Proxy: http.ProxyURL(proxyUrl),\n");
		}
		buffer.WriteString("}}");
		return buffer.String();
	};
	GoGenerator.prototype.ClientBody = function() { return this.$val.ClientBody(); };
	GoGenerator.ptr.prototype.ModifyRequest = function() {
		var $ptr, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, contentTypeInHeader, cookie, fragments, header, headers, key, name, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; contentTypeInHeader = $f.contentTypeInHeader; cookie = $f.cookie; fragments = $f.fragments; header = $f.header; headers = $f.headers; key = $f.key; name = $f.name; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, GoGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r = self.Options.FindContentTypeHeader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		contentTypeInHeader = _r;
		if (!(contentTypeInHeader === "")) {
			self.ContentType = contentTypeInHeader;
		}
		_ref = self.Options.Header;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			headers = strings.SplitN(header, ":", 2);
			/* */ if (headers.$length === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (headers.$length === 2) { */ case 4:
				_r$1 = strings.TrimSpace((0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				key = _r$1;
				_r$2 = strings.TrimSpace((1 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				value = _r$2;
				_r$3 = strings.ToLower(key); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === "content-type" && self.HasBoundary) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r$3 === "content-type" && self.HasBoundary) { */ case 8:
					_r$4 = fmt.Fprintf(buffer[0], "request.Header.Add(\"%s\", \"%s; boundary=\" + writer.Boundary())\n", new sliceType([new $String(key), new $String(value)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					$s = 10; continue;
				/* } else { */ case 9:
					_r$5 = fmt.Fprintf(buffer[0], "request.Header.Add(\"%s\", \"%s\")\n", new sliceType([new $String(key), new $String(value)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
				/* } */ case 10:
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ if (!(self.Options.User === "")) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (!(self.Options.User === "")) { */ case 14:
			_r$6 = fmt.Fprintf(buffer[0], "request.Header.Add(\"Authorization\", \"Basic \" + base64.StdEncoding.EncodeToString([]byte(\"%s\")))\n", new sliceType([new $String(self.Options.User)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 15:
		_ref$1 = self.Options.Cookie;
		_i$1 = 0;
		/* while (true) { */ case 17:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 18; continue; }
			cookie = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			fragments = strings.SplitN(cookie, "=", 2);
			/* */ if (fragments.$length === 2) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (fragments.$length === 2) { */ case 19:
				_r$7 = strings.TrimSpace((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0])); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				name = _r$7;
				_r$8 = strings.TrimSpace((1 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 1])); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				value$1 = _r$8;
				_r$9 = fmt.Fprintf(buffer[0], "request.AddCookie(&http.Cookie{Name: \"%s\", Value: \"%s\"})\n", new sliceType([new $String(name), new $String(value$1)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 20:
			_i$1++;
		/* } */ $s = 17; continue; case 18:
		/* */ if (!(self.Options.AWSV2 === "")) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!(self.Options.AWSV2 === "")) { */ case 24:
			_r$10 = fmt.Sprintf("SignAWSV2(request, \"\", \"%s\")\n", new sliceType([new $String(self.ContentType)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = buffer[0].WriteString(_r$10); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
		/* } */ case 25:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.ModifyRequest }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.contentTypeInHeader = contentTypeInHeader; $f.cookie = cookie; $f.fragments = fragments; $f.header = header; $f.headers = headers; $f.key = key; $f.name = name; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.ModifyRequest = function() { return this.$val.ModifyRequest(); };
	GoGenerator.ptr.prototype.AdditionalDeclaration = function() {
		var $ptr, _r, buffer, fragments, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; buffer = $f.buffer; fragments = $f.fragments; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, GoGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (!(self.Options.AWSV2 === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self.Options.AWSV2 === "")) { */ case 1:
			fragments = strings.SplitN(self.Options.AWSV2, ":", 2);
			/* */ if (fragments.$length === 2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (fragments.$length === 2) { */ case 3:
				_r = fmt.Fprintf(buffer[0], "\n\t\t\t\tfunc SignAWSV2(req *http.Request, md5, contentType string) {\n\t\t\t\t\tdateStr := time.Now().UTC().Format(time.RFC1123Z)\n\t\t\t\t\treq.Header.Set(\"Date\", dateStr)\n\t\t\t\t\tif md5 != \"\" {\n\t\t\t\t\t\treq.Header.Set(\"Content-MD5\", md5)\n\t\t\t\t\t}\n\t\t\t\t\tstrToSign := fmt.Sprintf(\"%%s\\n%%s\\n%%s\\n%%s\\n%%s\", req.Method, md5, contentType, dateStr, req.URL.Path)\n\t\t\t\t\thash := hmac.New(sha1.New, []byte(\"%s\"))\n\t\t\t\t\thash.Write([]byte(strToSign))\n\t\t\t\t\tsignature := make([]byte, base64.StdEncoding.EncodedLen(hash.Size()))\n\t\t\t\t\tbase64.StdEncoding.Encode(signature, hash.Sum(nil))\n\t\t\t\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"AWS %%s:%%s\", \"%s\", string(signature)))\n\t\t\t\t}\n\t\t\t", new sliceType([new $String((1 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 1])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 4:
		/* } */ case 2:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.AdditionalDeclaration }; } $f.$ptr = $ptr; $f._r = _r; $f.buffer = buffer; $f.fragments = fragments; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.AdditionalDeclaration = function() { return this.$val.AdditionalDeclaration(); };
	GoGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, body, buffer, data, i, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; body = $f.body; buffer = $f.buffer; data = $f.data; i = $f.i; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			body = "";
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			body = _tuple[0];
			self.DataVariable = _tuple[1];
			buffer.WriteString(body);
			$s = 3; continue;
		/* } else { */ case 2:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				i = _i;
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				if (i > 0) {
					buffer.WriteString("buffer.WriteByte('&')\n");
				} else {
					buffer.WriteString("var buffer bytes.Buffer\n");
				}
				_r$1 = StringForData(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = buffer.WriteString(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 5; continue; case 6:
			self.DataVariable = "&buffer";
		/* } */ case 3:
		self.Data = buffer.String();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.body = body; $f.buffer = buffer; $f.data = data; $f.i = i; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	GoGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			self.SetDataForPostForm();
			self.extraUrl = " + \"?\" + values.Encode()";
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.SetDataForBody(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = " + \"?\" + buffer.String()";
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	GoGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _r, _r$1, _ref, buffer, data, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; buffer = $f.buffer; data = $f.data; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer.WriteString("var buffer bytes.Buffer\n");
		buffer.WriteString("    writer := multipart.NewWriter(&buffer)\n");
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_r = FormString(self, data[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = buffer.WriteString(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_i++;
		/* } */ $s = 1; continue; case 2:
		buffer.WriteString("    writer.Close()\n");
		self.Data = buffer.String();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: GoGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.buffer = buffer; $f.data = data; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	GoGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	GoGenerator.ptr.prototype.SetDataForPostForm = function() {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _key, _key$1, _keys, _keys$1, _ref, _ref$1, _ref$2, _ref$3, _tuple, buffer, count, data, entries, j, key, key$1, self, singleData, value, values, values$1;
		self = this;
		entries = {};
		_ref = self.Options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				key = _entry.k;
				values = _entry.v;
				_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
				_i$1++;
			}
			_i++;
		}
		buffer = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		count = 0;
		_ref$2 = entries;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		while (true) {
			if (!(_i$2 < _keys$1.length)) { break; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			key$1 = _entry$2.k;
			values$1 = _entry$2.v;
			if (count === 0) {
				buffer.WriteString("values := url.Values{\n");
			}
			buffer.WriteString("\"" + key$1);
			buffer.WriteString("\": {");
			_ref$3 = values$1;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				j = _i$3;
				value = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				if (j === 0) {
					buffer.WriteString("\"");
				} else {
					buffer.WriteString(", \"");
				}
				buffer.WriteString(value);
				buffer.WriteString("\"");
				_i$3++;
			}
			count = count + (1) >> 0;
			buffer.WriteString("},\n");
			_i$2++;
		}
		buffer.WriteString("}\n");
		self.Data = buffer.String();
		self.DataVariable = "values";
		_key$1 = "net/url"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
	};
	GoGenerator.prototype.SetDataForPostForm = function() { return this.$val.SetDataForPostForm(); };
	NewStringForData = function(generator, data) {
		var $ptr, _1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, buffer, buffer$1, buffer$2, data, generator, name, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; buffer = $f.buffer; buffer$1 = $f.buffer$1; buffer$2 = $f.buffer$2; data = $f.data; generator = $f.generator; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		buffer$2 = [buffer$2];
		result = "";
		name = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					buffer$2[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					buffer$2[0].WriteString("var buffer bytes.Buffer\n");
					_r = fmt.Fprintf(buffer$2[0], "content, err := ioutil.ReadFile(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					buffer$2[0].WriteString("if err != nil {\n");
					buffer$2[0].WriteString("    log.Fatal(err)\n");
					buffer$2[0].WriteString("}\n");
					buffer$2[0].WriteString("buffer.WriteString(strings.Replace(string(content), \"\\n\", \"\", -1))");
					result = buffer$2[0].String();
					name = "&buffer";
					_key = "strings"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("buffer := bytes.NewBufferString(\"%s\")\n", new sliceType([new $String(escapeDQ(strings.Replace(data.Value, "\n", "", -1)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
					name = "buffer";
				/* } */ case 9:
				_key$1 = "bytes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					buffer[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					_r$2 = fmt.Fprintf(buffer[0], "file, err := os.Open(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					buffer[0].WriteString("if err != nil {\n");
					buffer[0].WriteString("    log.Fatal(err)\n");
					buffer[0].WriteString("}\n");
					result = buffer[0].String();
					name = "file";
					_key$2 = "os"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("buffer := bytes.NewBufferString(\"%s\")\n", new sliceType([new $String(escapeDQ(data.Value))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
					name = "buffer";
					_key$3 = "bytes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					buffer$1[0].WriteString("var buffer bytes.Buffer\n");
					_r$4 = fmt.Fprintf(buffer$1[0], "content, err := ioutil.ReadFile(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					buffer$1[0].WriteString("if err != nil {\n");
					buffer$1[0].WriteString("    log.Fatal(err)\n");
					buffer$1[0].WriteString("}\n");
					buffer$1[0].WriteString("buffer.WriteString(url.QueryEscape(string(content)))");
					result = buffer$1[0].String();
					name = "&buffer";
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("buffer := bytes.NewBufferString(url.QueryEscape(\"%s\"))\n", new sliceType([new $String(escapeDQ(data.Value))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
					name = "buffer";
				/* } */ case 19:
				_key$4 = "bytes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
				_key$5 = "net/url"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, name];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.buffer$2 = buffer$2; $f.data = data; $f.generator = generator; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _2, _key, _key$1, _key$2, _key$3, _key$4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, buffer, buffer$1, buffer$2, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; buffer = $f.buffer; buffer$1 = $f.buffer$1; buffer$2 = $f.buffer$2; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		buffer$2 = [buffer$2];
		result = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					buffer$1[0].WriteString("{\n");
					_r = fmt.Fprintf(buffer$1[0], "content, err := ioutil.ReadFile(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					buffer$1[0].WriteString("if err != nil {\n");
					buffer$1[0].WriteString("    log.Fatal(err)\n");
					buffer$1[0].WriteString("}\n");
					buffer$1[0].WriteString("buffer.WriteString(strings.Replace(string(content), \"\\n\", \"\", -1))\n");
					buffer$1[0].WriteString("}\n");
					result = buffer$1[0].String();
					_key = "strings"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("    buffer.WriteString(\"%s\")\n", new sliceType([new $String(escapeDQ(strings.Replace(data.Value, "\n", "", -1)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					buffer$2[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					buffer$2[0].WriteString("{\n");
					_r$2 = fmt.Fprintf(buffer$2[0], "file, err := os.Open(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					buffer$2[0].WriteString("if err != nil {\n");
					buffer$2[0].WriteString("    log.Fatal(err)\n");
					buffer$2[0].WriteString("}\n");
					buffer$2[0].WriteString("io.Copy(&buffer, file)\n");
					buffer$2[0].WriteString("}\n");
					result = buffer$2[0].String();
					_key$1 = "os"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
					_key$2 = "io"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("buffer.WriteString(\"%s\")\n", new sliceType([new $String(escapeDQ(data.Value))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					buffer[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					buffer[0].WriteString("{\n");
					_r$4 = fmt.Fprintf(buffer[0], "content, err := ioutil.ReadFile(\"%s\")\n", new sliceType([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					buffer[0].WriteString("if err != nil {\n");
					buffer[0].WriteString("    log.Fatal(err)\n");
					buffer[0].WriteString("}\n");
					buffer[0].WriteString("buffer.WriteString(url.QueryEscape(string(content)))\n");
					buffer[0].WriteString("}\n");
					result = buffer[0].String();
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("buffer.WriteString(url.QueryEscape(\"%s\"))\n", new sliceType([new $String(escapeDQ(data.Value))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				_key$3 = "net/url"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		_key$4 = "bytes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.buffer$2 = buffer$2; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, sourceFile, sourceFile$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; sourceFile = $f.sourceFile; sourceFile$1 = $f.sourceFile$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_3 = data.Type;
			/* */ if (_3 === 3) { $s = 2; continue; }
			/* */ if (_3 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_3 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					contentType = "";
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					sourceFile = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					buffer[0].WriteString("{\n");
					/* */ if (!(contentType === "")) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (!(contentType === "")) { */ case 12:
						buffer[0].WriteString("header := make(textproto.MIMEHeader)\n");
						_r$1 = fmt.Fprintf(buffer[0], "header.Add(\"Content-Disposition\", \"form-data; name=\\\"%s\\\"; filename=\\\"%s\\\"\")\n", new sliceType([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(sentFileName)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_r$1;
						_r$2 = fmt.Fprintf(buffer[0], "header.Add(\"Content-Type\", \"%s\")\n", new sliceType([new $String(contentType)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$2;
						buffer[0].WriteString("fileWriter, err := writer.CreatePart(header)\n");
						buffer[0].WriteString("if err != nil {\n");
						buffer[0].WriteString("    log.Fatal(err)\n");
						buffer[0].WriteString("}\n");
						_key = "net/textproto"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
						$s = 14; continue;
					/* } else { */ case 13:
						_r$3 = fmt.Fprintf(buffer[0], "fileWriter, err := writer.CreateFormFile(\"%s\", \"%s\")\n", new sliceType([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(sentFileName)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						buffer[0].WriteString("if err != nil {\n");
						buffer[0].WriteString("    log.Fatal(err)\n");
						buffer[0].WriteString("}\n");
					/* } */ case 14:
					_r$4 = fmt.Fprintf(buffer[0], "file, err := os.Open(\"%s\")\n", new sliceType([new $String(sourceFile)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					buffer[0].WriteString("if err != nil {\n");
					buffer[0].WriteString("    log.Fatal(err)\n");
					buffer[0].WriteString("}\n");
					buffer[0].WriteString("io.Copy(fileWriter, file)\n");
					buffer[0].WriteString("}\n");
					result = buffer[0].String();
					_key$1 = "os"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
					_key$2 = "io"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$1.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					contentType$1 = "";
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					sourceFile$1 = (0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]);
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					buffer$1[0].WriteString("{\n");
					buffer$1[0].WriteString("header := make(textproto.MIMEHeader)\n");
					_r$5 = fmt.Fprintf(buffer$1[0], "header.Add(\"Content-Disposition\", \"form-data; name=\\\"%s\\\"\")\n", new sliceType([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0]))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					/* */ if (!(contentType$1 === "")) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!(contentType$1 === "")) { */ case 20:
						_r$6 = fmt.Fprintf(buffer$1[0], "header.Add(\"Content-Type\", \"%s\")\n", new sliceType([new $String(contentType$1)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 21:
					buffer$1[0].WriteString("fileWriter, err := writer.CreatePart(header)\n");
					buffer$1[0].WriteString("if err != nil {\n");
					buffer$1[0].WriteString("    log.Fatal(err)\n");
					buffer$1[0].WriteString("}\n");
					_r$7 = fmt.Fprintf(buffer$1[0], "file, err := os.Open(\"%s\")\n", new sliceType([new $String(sourceFile$1)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					buffer$1[0].WriteString("if err != nil {\n");
					buffer$1[0].WriteString("    log.Fatal(err)\n");
					buffer$1[0].WriteString("}\n");
					buffer$1[0].WriteString("io.Copy(fileWriter, file)\n");
					buffer$1[0].WriteString("}\n");
					result = buffer$1[0].String();
					_key$3 = "net/textproto"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
					_key$4 = "os"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
					_key$5 = "io"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: true };
					$s = 11; continue;
				/* } else { */ case 10:
					_r$8 = fmt.Sprintf("writer.WriteField(\"%s\", \"%s\")\n", new sliceType([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					result = _r$8;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_3 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!((field$1.$length === 2))) { */ case 25:
					_r$9 = fmt.Fprintln(os.Stderr, new sliceType([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$9;
					os.Exit(1);
				/* } */ case 26:
				_r$10 = fmt.Sprintf("writer.WriteField(\"%s\", \"%s\")\n", new sliceType([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				result = _r$10;
			/* } */ case 4:
		case 1:
		_key$6 = "bytes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: true };
		_key$7 = "mime/multipart"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$7)] = { k: _key$7, v: true };
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.sourceFile = sourceFile; $f.sourceFile$1 = sourceFile$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	GoGenerator.methods = [{prop: "Url", name: "Url", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FilePath", name: "FilePath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareClient", name: "PrepareClient", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ClientBody", name: "ClientBody", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ModifyRequest", name: "ModifyRequest", pkg: "", typ: $funcType([], [$String], false)}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForPostForm", name: "SetDataForPostForm", pkg: "", typ: $funcType([], [], false)}];
	GoGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Modules", name: "Modules", pkg: "", typ: mapType, tag: ""}, {prop: "Data", name: "Data", pkg: "", typ: $String, tag: ""}, {prop: "DataVariable", name: "DataVariable", pkg: "", typ: $String, tag: ""}, {prop: "ContentType", name: "ContentType", pkg: "", typ: $String, tag: ""}, {prop: "HasBoundary", name: "HasBoundary", pkg: "", typ: $Bool, tag: ""}, {prop: "extraUrl", name: "extraUrl", pkg: "github.com/shibukawa/curl_as_dsl/client/golang", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Fatal;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", "Logger", "log", function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var $ptr, flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var $ptr, l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var $ptr, _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = (((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((48 + i >> 0) << 24 >>> 24));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var $ptr, _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = $clone(t, time.Time);
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		if (!(((l.flag & 32) === 0))) {
			time.Time.copy(t, t.UTC());
		}
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = t.Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = t.Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = file.substring((i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f.$ptr = $ptr; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var $ptr, _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), now, file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var $ptr, _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var $ptr, _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var $ptr, _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var $ptr, _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var $ptr, flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var $ptr, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var $ptr, l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Fatal = function(v) {
		var $ptr, _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Fatal }; } $f.$ptr = $ptr; $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatal = Fatal;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init([{prop: "mu", name: "mu", pkg: "log", typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", pkg: "log", typ: $String, tag: ""}, {prop: "flag", name: "flag", pkg: "log", typ: $Int, tag: ""}, {prop: "out", name: "out", pkg: "log", typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "log", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/java"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, log, url, os, strings, JavaGenerator, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, arrayType$1, ptrType$1, ptrType$2, mapType, NewJavaGenerator, ProcessCurlCommand, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	log = $packages["log"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	JavaGenerator = $pkg.JavaGenerator = $newType(0, $kindStruct, "java.JavaGenerator", "JavaGenerator", "github.com/shibukawa/curl_as_dsl/client/java", function(Options_, Modules_, Url_, IsHttps_, HasBody_, Body_, PrepareBody_, AdditionalDeclaration_, specialHeaders_, commonInitialize_, mimeCounter_, formFileContentCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.Modules = false;
			this.Url = "";
			this.IsHttps = false;
			this.HasBody = false;
			this.Body = "";
			this.PrepareBody = "";
			this.AdditionalDeclaration = "";
			this.specialHeaders = sliceType$1.nil;
			this.commonInitialize = sliceType.nil;
			this.mimeCounter = 0;
			this.formFileContentCounter = 0;
			return;
		}
		this.Options = Options_;
		this.Modules = Modules_;
		this.Url = Url_;
		this.IsHttps = IsHttps_;
		this.HasBody = HasBody_;
		this.Body = Body_;
		this.PrepareBody = PrepareBody_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.specialHeaders = specialHeaders_;
		this.commonInitialize = commonInitialize_;
		this.mimeCounter = mimeCounter_;
		this.formFileContentCounter = formFileContentCounter_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(sliceType);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(common.DataOptions);
	ptrType$2 = $ptrType(JavaGenerator);
	mapType = $mapType($String, $Bool);
	NewJavaGenerator = function(options) {
		var $ptr, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _r, _r$1, options, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _r = $f._r; _r$1 = $f._r$1; options = $f.options; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new JavaGenerator.ptr(options, false, "", false, false, "", "", "", sliceType$1.nil, sliceType.nil, 0, 0);
		_r = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(options.Url)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result.Url = _r;
		result.Modules = {};
		_key = "java.net.URL"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		_r$1 = fmt.Sprintf("java.net.%s", new sliceType$2([new $String(result.ConnectionClass())])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_key$1 = _r$1; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		_key$2 = "java.net.MalformedURLException"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
		_key$3 = "java.io.IOException"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
		_key$4 = "java.io.BufferedReader"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
		_key$5 = "java.io.InputStreamReader"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: true };
		result.mimeCounter = 0;
		result.formFileContentCounter = 0;
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewJavaGenerator }; } $f.$ptr = $ptr; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._r = _r; $f._r$1 = _r$1; $f.options = options; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewJavaGenerator = NewJavaGenerator;
	JavaGenerator.ptr.prototype.ConnectionClass = function() {
		var $ptr, self, targetUrl;
		self = $clone(this, JavaGenerator);
		targetUrl = "";
		if (!(self.Options.Proxy === "")) {
			targetUrl = self.Options.Proxy;
		} else {
			targetUrl = self.Options.Url;
		}
		if (strings.HasPrefix(targetUrl, "https")) {
			return "HttpsURLConnection";
		}
		return "HttpURLConnection";
	};
	JavaGenerator.prototype.ConnectionClass = function() { return this.$val.ConnectionClass(); };
	JavaGenerator.ptr.prototype.Proxy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _tuple, err, host, hostFragments, port, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; host = $f.host; hostFragments = $f.hostFragments; port = $f.port; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, JavaGenerator);
		if (self.Options.Proxy === "") {
			return "";
		}
		_r = url.Parse(self.Options.Proxy); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		hostFragments = strings.Split(u.Host, ":");
		host = (0 >= hostFragments.$length ? $throwRuntimeError("index out of range") : hostFragments.$array[hostFragments.$offset + 0]);
		port = "";
		if (hostFragments.$length === 1) {
			port = "80";
		} else {
			port = (1 >= hostFragments.$length ? $throwRuntimeError("index out of range") : hostFragments.$array[hostFragments.$offset + 1]);
		}
		_r$1 = strings.ToUpper(u.Scheme); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = new $String(_r$1);
		_arg$1 = new $String(host);
		_arg$2 = new $String(port);
		_r$2 = fmt.Sprintf("new Proxy(Proxy.Type.%s, new InetSocketAddress(\"%s\", %s))", new sliceType$2([_arg, _arg$1, _arg$2])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.Proxy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.host = host; $f.hostFragments = hostFragments; $f.port = port; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.Proxy = function() { return this.$val.Proxy(); };
	JavaGenerator.ptr.prototype.CommonInitialize = function() {
		var $ptr, _i, _ref, buffer, indent, line, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; buffer = $f.buffer; indent = $f.indent; line = $f.line; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, JavaGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer);
		_ref = self.commonInitialize;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			buffer[0].WriteString(line);
			buffer[0].WriteByte(10);
			$r = indent(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.CommonInitialize }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.buffer = buffer; $f.indent = indent; $f.line = line; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.CommonInitialize = function() { return this.$val.CommonInitialize(); };
	JavaGenerator.ptr.prototype.PrepareConnection = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, header, header$1, headers, indent, method, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; header = $f.header; header$1 = $f.header$1; headers = $f.headers; indent = $f.indent; method = $f.method; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, JavaGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		method = _r;
		/* */ if (!(method === "GET")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(method === "GET")) { */ case 2:
			$r = indent(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = fmt.Sprintf("conn.setRequestMethod(\"%s\");\n", new sliceType$2([new $String(method)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = buffer[0].WriteString(_r$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 3:
		_ref = self.Options.Header;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = indent(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			headers = strings.Split(header, ":");
			_r$3 = strings.TrimSpace((0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg = new $String(_r$3);
			_r$4 = strings.TrimSpace((1 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 1])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$4);
			_r$5 = fmt.Sprintf("conn.setRequestProperty(\"%s\", \"%s\");\n", new sliceType$2([_arg, _arg$1])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = buffer[0].WriteString(_r$5); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_i++;
		/* } */ $s = 7; continue; case 8:
		_ref$1 = self.specialHeaders;
		_i$1 = 0;
		/* while (true) { */ case 14:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 15; continue; }
			header$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = strings.TrimSpace((0 >= header$1.$length ? $throwRuntimeError("index out of range") : header$1.$array[header$1.$offset + 0])); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$7);
			_arg$3 = new $String((1 >= header$1.$length ? $throwRuntimeError("index out of range") : header$1.$array[header$1.$offset + 1]));
			_r$8 = fmt.Sprintf("conn.setRequestProperty(\"%s\", %s);\n", new sliceType$2([_arg$2, _arg$3])); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = buffer[0].WriteString(_r$8); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			_i$1++;
		/* } */ $s = 14; continue; case 15:
		/* */ if (self.HasBody) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (self.HasBody) { */ case 20:
			$r = indent(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("conn.setRequestProperty(\"Content-Length\", String.valueOf(content.getBytes(\"UTF-8\").length));\n");
			$r = indent(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("conn.setDoOutput(true);\n");
			$r = indent(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n");
			$r = indent(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("wr.writeBytes(content);\n");
			$r = indent(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("wr.flush();\n");
			$r = indent(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("wr.close();\n");
		/* } */ case 21:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.PrepareConnection }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.header = header; $f.header$1 = header$1; $f.headers = headers; $f.indent = indent; $f.method = method; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.PrepareConnection = function() { return this.$val.PrepareConnection(); };
	JavaGenerator.ptr.prototype.AppendCommonInitialize = function(newLine, check) {
		var $ptr, _i, _ref, check, found, line, newLine, self;
		self = this;
		if (check) {
			found = false;
			_ref = self.commonInitialize;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (line === newLine) {
					found = true;
					break;
				}
				_i++;
			}
			if (found) {
				return;
			}
		}
		self.commonInitialize = $append(self.commonInitialize, newLine);
	};
	JavaGenerator.prototype.AppendCommonInitialize = function(newLine, check) { return this.$val.AppendCommonInitialize(newLine, check); };
	JavaGenerator.ptr.prototype.MimeTypeVariable = function() {
		var $ptr, _r, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ((x = self.Options, (x.$ptr_ProcessedData || (x.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x)))).ExternalFileCount() === 0) {
			return "mimeType";
		}
		self.mimeCounter = self.mimeCounter + 1 >> 0;
		_r = fmt.Sprintf("mimeType%d", new sliceType$2([new $Int(self.mimeCounter)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.MimeTypeVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.MimeTypeVariable = function() { return this.$val.MimeTypeVariable(); };
	JavaGenerator.ptr.prototype.FormFileContentVariable = function() {
		var $ptr, _r, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ((x = self.Options, (x.$ptr_ProcessedData || (x.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x)))).ExternalFileCount() === 0) {
			return "fileContent";
		}
		self.formFileContentCounter = self.formFileContentCounter + 1 >> 0;
		_r = fmt.Sprintf("fileContent%d", new sliceType$2([new $Int(self.formFileContentCounter)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.FormFileContentVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.FormFileContentVariable = function() { return this.$val.FormFileContentVariable(); };
	JavaGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, _key, _key$1, _r, boundary, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; boundary = $f.boundary; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.AdditionalDeclaration = "\n    static String BOUNDARY = \"----------ThIs_Is_tHe_bouNdaRY_$\";\n    static String encodeMultiPartFormData(String[][] fields, String[][] files) {\n        try {\n            StringWriter writer = new StringWriter();\n            char[] buffer = new char[1024];\n\n            for (int i = 0; i < fields.length; i++) {\n                String[] field = fields[i];\n                writer.write(\"--\");\n                writer.write(BOUNDARY);\n                writer.write(\"\\r\\n\");\n                writer.write(\"Content-Disposition: form-data; name=\\\"\");\n                writer.write(field[0]);\n                writer.write(\"\\\"\\r\\n\");\n                if (!field[2].equals(\"\")) {\n                    writer.write(\"Content-Type: \");\n                    writer.write(field[2]);\n                    writer.write(\"\\r\\n\");\n                }\n                writer.write(\"\\r\\n\");\n                writer.write(field[1]);\n            }\n            for (int i = 0; i < files.length; i++) {\n                String[] file = files[i];\n                writer.write(\"--\");\n                writer.write(BOUNDARY);\n                writer.write(\"\\r\\n\");\n                writer.write(\"Content-Disposition: form-data; name=\\\"\");\n                writer.write(file[0]);\n                writer.write(\"\\\"; filename=\\\"\");\n                writer.write(file[2]);\n                writer.write(\"\\\"\\r\\nContent-Type: \");\n                writer.write(file[3]);\n                writer.write(\"\\r\\n\\r\\n\");\n                FileReader input = new FileReader(file[1]);\n\n                for (int n = 0; -1 != (n = input.read(buffer));) {\n                    writer.write(buffer, 0, n);\n                }\n            }\n            writer.write(\"--\");\n            writer.write(BOUNDARY);\n            writer.write(\"--\\r\\n\\r\\n\");\n            return writer.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n";
		boundary = "----------ThIs_Is_tHe_bouNdaRY_$";
		_r = fmt.Sprintf("multipart/form-data; boundary=%s", new sliceType$2([new $String(boundary)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = self.Options.InsertContentTypeHeader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = "java.io.StringWriter"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		_key$1 = "java.io.FileReader"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.AddMultiPartCode }; } $f.$ptr = $ptr; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f.boundary = boundary; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	JavaGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, _entry, _i, _i$1, _i$2, _i$3, _i$4, _key, _keys, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, buffer, data, data$1, forWriter, forWriter$1, i, i$1, indent, key, line, line$1, prepareLines, prepareLines$1, self, singleData, values, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; buffer = $f.buffer; data = $f.data; data$1 = $f.data$1; forWriter = $f.forWriter; forWriter$1 = $f.forWriter$1; i = $f.i; i$1 = $f.i$1; indent = $f.indent; key = $f.key; line = $f.line; line$1 = $f.line$1; prepareLines = $f.prepareLines; prepareLines$1 = $f.prepareLines$1; self = $f.self; singleData = $f.singleData; values = $f.values; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer[0].WriteString("StringWriter writer = new StringWriter();\n");
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer, data);
		$r = indent(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String(self.Options.Url)])); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = indent(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buffer[0].WriteString("writer.write('?');\n");
		$r = indent(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 5:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 8:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
				i = _i;
				data$1 = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				/* */ if (!((i === 0))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((i === 0))) { */ case 10:
					$r = indent(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString("writer.write('&');\n");
				/* } */ case 11:
				_tuple = url.ParseQuery(data$1.Value);
				singleData = _tuple[0];
				_ref$1 = singleData;
				_i$1 = 0;
				_keys = $keys(_ref$1);
				/* while (true) { */ case 13:
					/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 14; continue; }
					_entry = _ref$1[_keys[_i$1]];
					if (_entry === undefined) {
						_i$1++;
						/* continue; */ $s = 13; continue;
					}
					key = _entry.k;
					values = _entry.v;
					_r$1 = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String(key)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString("writer.write('=');\n");
					$r = indent(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$2 = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String((0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0]))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					$r = indent(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$1++;
				/* } */ $s = 13; continue; case 14:
				_i++;
			/* } */ $s = 8; continue; case 9:
			self.PrepareBody = buffer[0].String();
			$s = 7; continue;
		/* } else { */ case 6:
			/* */ if (self.Options.ProcessedData.$length === 1) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (self.Options.ProcessedData.$length === 1) { */ case 20:
				_r$3 = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				prepareLines = _tuple$1[0];
				forWriter = _tuple$1[1];
				_ref$2 = prepareLines;
				_i$2 = 0;
				/* while (true) { */ case 24:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 25; continue; }
					line = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					buffer[0].WriteString(line);
					buffer[0].WriteByte(10);
					$r = indent(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				/* } */ $s = 24; continue; case 25:
				_r$4 = fmt.Fprintf(buffer[0], "writer.write(%s);\n", new sliceType$2([new $String(forWriter)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$r = indent(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 22; continue;
			/* } else { */ case 21:
				_ref$3 = self.Options.ProcessedData;
				_i$3 = 0;
				/* while (true) { */ case 29:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 30; continue; }
					i$1 = _i$3;
					data[0] = $clone(((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]), common.DataOption);
					/* */ if (!((i$1 === 0))) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if (!((i$1 === 0))) { */ case 31:
						$r = indent(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						buffer[0].WriteString("writer.write('&');\n");
					/* } */ case 32:
					$r = indent(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$5 = StringForData(self, data[0]); /* */ $s = 35; case 35: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					prepareLines$1 = _tuple$2[0];
					forWriter$1 = _tuple$2[1];
					_ref$4 = prepareLines$1;
					_i$4 = 0;
					/* while (true) { */ case 36:
						/* if (!(_i$4 < _ref$4.$length)) { break; } */ if(!(_i$4 < _ref$4.$length)) { $s = 37; continue; }
						line$1 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
						buffer[0].WriteString(line$1);
						buffer[0].WriteByte(10);
						$r = indent(); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$4++;
					/* } */ $s = 36; continue; case 37:
					/* */ if (!(forWriter$1 === "")) { $s = 39; continue; }
					/* */ $s = 40; continue;
					/* if (!(forWriter$1 === "")) { */ case 39:
						_r$6 = fmt.Fprintf(buffer[0], "writer.write(%s);\n", new sliceType$2([])); /* */ $s = 41; case 41: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 40:
					_i$3++;
				/* } */ $s = 29; continue; case 30:
				$r = indent(); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
		/* } */ case 7:
		self.Url = "writer.toString()";
		self.PrepareBody = buffer[0].String();
		_key = "java.io.StringWriter"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.buffer = buffer; $f.data = data; $f.data$1 = data$1; $f.forWriter = forWriter; $f.forWriter$1 = forWriter$1; $f.i = i; $f.i$1 = i$1; $f.indent = indent; $f.key = key; $f.line = line; $f.line$1 = line$1; $f.prepareLines = prepareLines; $f.prepareLines$1 = prepareLines$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	JavaGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _i$1, _i$2, _key, _key$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _tuple, _tuple$1, buffer, data, forWriter, forWriter$1, i, indent, line, line$1, prepareLines, prepareLines$1, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buffer = $f.buffer; data = $f.data; forWriter = $f.forWriter; forWriter$1 = $f.forWriter$1; i = $f.i; indent = $f.indent; line = $f.line; line$1 = $f.line$1; prepareLines = $f.prepareLines; prepareLines$1 = $f.prepareLines$1; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer, data);
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			prepareLines = _tuple[0];
			forWriter = _tuple[1];
			_ref = prepareLines;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				buffer[0].WriteString(line);
				buffer[0].WriteByte(10);
				$r = indent(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 5; continue; case 6:
			_r$1 = fmt.Fprintf(buffer[0], "String content = %s;\n", new sliceType$2([new $String(forWriter)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$r = indent(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_key = "java.net.URLEncoder"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
			buffer[0].WriteString("StringWriter writer = new StringWriter();\n");
			_ref$1 = self.Options.ProcessedData;
			_i$1 = 0;
			/* while (true) { */ case 10:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 11; continue; }
				i = _i$1;
				data[0] = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), common.DataOption);
				/* */ if (!((i === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((i === 0))) { */ case 12:
					$r = indent(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString("writer.write('&');\n");
				/* } */ case 13:
				_r$2 = StringForData(self, data[0]); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				prepareLines$1 = _tuple$1[0];
				forWriter$1 = _tuple$1[1];
				_ref$2 = prepareLines$1;
				_i$2 = 0;
				/* while (true) { */ case 16:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 17; continue; }
					line$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					$r = indent(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString(line$1);
					buffer[0].WriteByte(10);
					_i$2++;
				/* } */ $s = 16; continue; case 17:
				/* */ if (!(forWriter$1 === "")) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!(forWriter$1 === "")) { */ case 19:
					$r = indent(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$3 = fmt.Fprintf(buffer[0], "writer.write(%s);\n", new sliceType$2([new $String(forWriter$1)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 20:
				_i$1++;
			/* } */ $s = 10; continue; case 11:
			$r = indent(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("String content = writer.toString();\n");
			_key$1 = "java.io.StringWriter"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
			$r = indent(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buffer = buffer; $f.data = data; $f.forWriter = forWriter; $f.forWriter$1 = forWriter$1; $f.i = i; $f.indent = indent; $f.line = line; $f.line$1 = line$1; $f.prepareLines = prepareLines; $f.prepareLines$1 = prepareLines$1; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	JavaGenerator.ptr.prototype.SetDataForForm = function() {
		var $ptr, _entry, _i, _i$1, _key, _keys, _r, _r$1, _ref, _ref$1, _tuple, buffer, data, i, indent, key, self, singleData, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; buffer = $f.buffer; data = $f.data; i = $f.i; indent = $f.indent; key = $f.key; self = $f.self; singleData = $f.singleData; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer);
		buffer[0].WriteString("StringWriter writer = new StringWriter();\n");
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (!((i === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === 0))) { */ case 3:
				$r = indent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString("writer.write('&');\n");
			/* } */ case 4:
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 6:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 7; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 6; continue;
				}
				key = _entry.k;
				values = _entry.v;
				_r = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String(key)])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				buffer[0].WriteString("writer.write('=');\n");
				_r$1 = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String((0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0]))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i$1++;
			/* } */ $s = 6; continue; case 7:
			_i++;
		/* } */ $s = 1; continue; case 2:
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.Body = "values";
		_key = "java.net.URLEncoder"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.buffer = buffer; $f.data = data; $f.i = i; $f.indent = indent; $f.key = key; $f.self = self; $f.singleData = singleData; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.SetDataForForm = function() { return this.$val.SetDataForForm(); };
	JavaGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, indent, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; indent = $f.indent; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		$r = self.AddMultiPartCode(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fields = sliceType.nil;
		files = sliceType.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (data[0].SendAsFormFile()) { */ case 4:
				_r = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = FormString(self, data[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer, data);
		/* */ if (fields.$length > 0) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (fields.$length > 0) { */ case 9:
			buffer[0].WriteString("String[][] fields = {\n");
			_ref$1 = fields;
			_i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				$r = indent(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString(value);
				_i$1++;
			/* } */ $s = 12; continue; case 13:
			$r = indent(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("};\n");
			$s = 11; continue;
		/* } else { */ case 10:
			buffer[0].WriteString("String[][] fields = {};\n");
		/* } */ case 11:
		$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (files.$length > 0) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (files.$length > 0) { */ case 17:
			buffer[0].WriteString("String[][] files = {\n");
			_ref$2 = files;
			_i$2 = 0;
			/* while (true) { */ case 20:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 21; continue; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				$r = indent(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString(value$1);
				_i$2++;
			/* } */ $s = 20; continue; case 21:
			$r = indent(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("};\n");
			$s = 19; continue;
		/* } else { */ case 18:
			buffer[0].WriteString("String[][] files = {};\n");
		/* } */ case 19:
		$r = indent(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buffer[0].WriteString("String content = encodeMultiPartFormData(fields, files);\n");
		$r = indent(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JavaGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.indent = indent; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	JavaGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _key, _key$1, _key$2, _r, _r$1, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; _r$1 = $f._r$1; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewJavaGenerator(options); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		generator = _r;
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 2; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 2:
			/* */ if (options.Get) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (options.Get) { */ case 5:
				$r = generator.SetDataForUrl(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			$s = 4; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 3:
			$r = generator.SetFormForBody(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ if (!(generator.Options.User === "")) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!(generator.Options.User === "")) { */ case 12:
			_r$1 = fmt.Sprintf("\"Basic \" + Base64.getEncoder().encodeToString(\"%s\".getBytes(StandardCharsets.UTF_8))", new sliceType$2([new $String(generator.Options.User)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, new sliceType(["Authorization", _r$1]));
			_key = "java.util.Base64"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
			_key$1 = "java.nio.charset.StandardCharsets"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		/* } */ case 13:
		if (generator.HasBody) {
			_key$2 = "java.io.DataOutputStream"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
		}
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f._r$1 = _r$1; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewStringForData = function(generator, data) {
		var $ptr, _1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					result = $append(result, "StringWriter writer = new StringWriter();");
					_r = fmt.Sprintf("FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = $append(result, _r);
					result = $append(result, "BufferedReader bufferedReader = new BufferedReader(fileReader);");
					result = $append(result, "String str = bufferedReader.readLine();");
					result = $append(result, "while (str != null) {");
					result = $append(result, "\t writer.write(str);");
					result = $append(result, "\t str = bufferedReader.readLine();");
					result = $append(result, "}");
					result = $append(result, "bufferedReader.close();");
					resultForWriter = "writer.toString()";
					_key = "java.io.StringWriter"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					_key$1 = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					resultForWriter = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					result = $append(result, "StringWriter writer = new StringWriter();");
					_r$2 = fmt.Sprintf("FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = $append(result, _r$2);
					result = $append(result, "for (int n = 0; -1 != (n = fileReader.read(buffer));) {");
					result = $append(result, "    writer.write(buffer, 0, n);");
					result = $append(result, "}");
					result = $append(result, "fileReader.close();");
					resultForWriter = "writer.toString()";
					generator.AppendCommonInitialize("char[] buffer = new char[1024];", true);
					_key$2 = "java.io.StringWriter"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
					_key$3 = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					resultForWriter = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					result = $append(result, "StringWriter writer = new StringWriter();");
					_r$4 = fmt.Sprintf("FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = $append(result, _r$4);
					result = $append(result, "BufferedReader bufferedReader = new BufferedReader(fileReader);");
					result = $append(result, "String str = bufferedReader.readLine();");
					result = $append(result, "while (str != null) {");
					result = $append(result, "\t writer.write(URLEncoder.encode(str + \"\\n\", \"UTF-8\"));");
					result = $append(result, "\t str = bufferedReader.readLine();");
					result = $append(result, "}");
					result = $append(result, "bufferedReader.close();");
					resultForWriter = "writer.toString()";
					_key$4 = "java.io.StringWriter"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
					_key$5 = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$5)] = { k: _key$5, v: true };
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("URLEncoder.encode(\"%s\", \"UTF-8\")", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					resultForWriter = _r$5;
				/* } */ case 19:
				_key$6 = "java.net.URLEncoder"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$6)] = { k: _key$6, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _2, _key, _key$1, _key$2, _key$3, _key$4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					result = $append(result, "{");
					_r = fmt.Sprintf("    FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = $append(result, _r);
					result = $append(result, "    BufferedReader bufferedReader = new BufferedReader(fileReader);");
					result = $append(result, "    String str = bufferedReader.readLine();");
					result = $append(result, "    while (str != null) {");
					result = $append(result, "\t     writer.write(str);");
					result = $append(result, "\t     str = bufferedReader.readLine();");
					result = $append(result, "    }");
					result = $append(result, "    bufferedReader.close();");
					result = $append(result, "}");
					_key = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					resultForWriter = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					result = $append(result, "{");
					_r$2 = fmt.Sprintf("    FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = $append(result, _r$2);
					result = $append(result, "    for (int n = 0; -1 != (n = fileReader.read(buffer));) {");
					result = $append(result, "        writer.write(buffer, 0, n);");
					result = $append(result, "    }");
					result = $append(result, "    fileReader.close();");
					result = $append(result, "}");
					generator.AppendCommonInitialize("char[] buffer = new char[1024];", true);
					_key$1 = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
					_key$2 = "java.io.BufferedReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					resultForWriter = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					result = $append(result, "{");
					_r$4 = fmt.Sprintf("    FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = $append(result, _r$4);
					result = $append(result, "    BufferedReader bufferedReader = new BufferedReader(fileReader);");
					result = $append(result, "    String str = bufferedReader.readLine();");
					result = $append(result, "    while (str != null) {");
					result = $append(result, "\t     writer.write(URLEncoder.encode(str + \"\\n\", \"UTF-8\"));");
					result = $append(result, "\t     str = bufferedReader.readLine();");
					result = $append(result, "    }");
					result = $append(result, "    bufferedReader.close();");
					result = $append(result, "}");
					_key$3 = "java.io.FileReader"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: true };
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("URLEncoder.encode(\"%s\", \"UTF-8\")", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					resultForWriter = _r$5;
				/* } */ case 19:
				_key$4 = "java.net.URLEncoder"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$4)] = { k: _key$4, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _3, _i, _i$1, _key, _key$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, contentVariable, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, mimeTypeVariable, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; contentVariable = $f.contentVariable; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; mimeTypeVariable = $f.mimeTypeVariable; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_3 = data.Type;
			/* */ if (_3 === 3) { $s = 2; continue; }
			/* */ if (_3 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_3 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$1 = fmt.Sprintf("    {\"%s\", \"%s\", ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = buffer.WriteString(_r$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					contentType = "";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_r$3 = fmt.Sprintf("\"%s\", ", new sliceType$2([new $String(sentFileName)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = buffer.WriteString(_r$3); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					mimeTypeVariable = "";
					/* */ if (!(contentType === "")) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!(contentType === "")) { */ case 16:
						_r$5 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(contentType)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = buffer.WriteString(_r$5); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						$s = 18; continue;
					/* } else { */ case 17:
						_r$7 = generator.MimeTypeVariable(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						mimeTypeVariable = _r$7;
						_r$8 = fmt.Sprintf("%s != null ? %s : \"application/octet-stream\"", new sliceType$2([new $String(mimeTypeVariable), new $String(mimeTypeVariable)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$9 = buffer.WriteString(_r$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
					/* } */ case 18:
					buffer.WriteString("},\n");
					result = buffer.String();
					generator.AppendCommonInitialize("FileNameMap fileNameMap = URLConnection.getFileNameMap();", true);
					/* */ if (!(mimeTypeVariable === "")) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!(mimeTypeVariable === "")) { */ case 24:
						_r$10 = fmt.Sprintf("String %s = fileNameMap.getContentTypeFor(\"%s\");", new sliceType$2([new $String(mimeTypeVariable), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = generator.AppendCommonInitialize(_r$10, false); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 25:
					_key = "java.net.URLConnection"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					_key$1 = "java.net.FileNameMap"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1 = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					generator.AppendCommonInitialize("char[] buffer = new char[1024];", true);
					_r$11 = generator.FormFileContentVariable(); /* */ $s = 28; case 28: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					contentVariable = _r$11;
					_r$12 = fmt.Sprintf("String %s;", new sliceType$2([new $String(contentVariable)])); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					$r = generator.AppendCommonInitialize(_r$12, false); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					generator.AppendCommonInitialize("{", false);
					generator.AppendCommonInitialize("    StringWriter writer = new StringWriter();", false);
					_r$13 = fmt.Sprintf("    FileReader fileReader = new FileReader(\"%s\");", new sliceType$2([new $String((0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]))])); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					$r = generator.AppendCommonInitialize(_r$13, false); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					generator.AppendCommonInitialize("    for (int n = 0; -1 != (n = fileReader.read(buffer));) {", false);
					generator.AppendCommonInitialize("        writer.write(buffer, 0, n);", false);
					generator.AppendCommonInitialize("    }", false);
					generator.AppendCommonInitialize("    fileReader.close();", false);
					_r$14 = fmt.Sprintf("    %s = writer.toString();", new sliceType$2([new $String(contentVariable)])); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					$r = generator.AppendCommonInitialize(_r$14, false); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					generator.AppendCommonInitialize("}", false);
					_r$15 = fmt.Sprintf("    {\"%s\", %s, ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(contentVariable)])); /* */ $s = 35; case 35: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_r$16 = buffer$1.WriteString(_r$15); /* */ $s = 36; case 36: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					_r$16;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					/* */ if (contentType$1 === "") { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if (contentType$1 === "") { */ case 37:
						buffer$1.WriteString("\"\"");
						$s = 39; continue;
					/* } else { */ case 38:
						_r$17 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(contentType$1)])); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						_r$18 = buffer$1.WriteString(_r$17); /* */ $s = 41; case 41: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						_r$18;
					/* } */ case 39:
					buffer$1.WriteString("},\n");
					result = buffer$1.String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$19 = fmt.Sprintf("    {\"%s\", \"%s\", \"\"},\n", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 42; case 42: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					result = _r$19;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_3 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (!((field$1.$length === 2))) { */ case 43:
					_r$20 = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
					_r$20;
					os.Exit(1);
				/* } */ case 44:
				_r$21 = fmt.Sprintf("        (\"%s\", \"%s\", None),\n", new sliceType$2([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 46; case 46: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				result = _r$21;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.contentVariable = contentVariable; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.mimeTypeVariable = mimeTypeVariable; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	JavaGenerator.methods = [{prop: "ConnectionClass", name: "ConnectionClass", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Proxy", name: "Proxy", pkg: "", typ: $funcType([], [$String], false)}, {prop: "CommonInitialize", name: "CommonInitialize", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareConnection", name: "PrepareConnection", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AppendCommonInitialize", name: "AppendCommonInitialize", pkg: "", typ: $funcType([$String, $Bool], [], false)}, {prop: "MimeTypeVariable", name: "MimeTypeVariable", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FormFileContentVariable", name: "FormFileContentVariable", pkg: "", typ: $funcType([], [$String], false)}, {prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	JavaGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "Modules", name: "Modules", pkg: "", typ: mapType, tag: ""}, {prop: "Url", name: "Url", pkg: "", typ: $String, tag: ""}, {prop: "IsHttps", name: "IsHttps", pkg: "", typ: $Bool, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/java", typ: sliceType$1, tag: ""}, {prop: "commonInitialize", name: "commonInitialize", pkg: "github.com/shibukawa/curl_as_dsl/client/java", typ: sliceType, tag: ""}, {prop: "mimeCounter", name: "mimeCounter", pkg: "github.com/shibukawa/curl_as_dsl/client/java", typ: $Int, tag: ""}, {prop: "formFileContentCounter", name: "formFileContentCounter", pkg: "github.com/shibukawa/curl_as_dsl/client/java", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/nodejs"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, log, url, os, strconv, strings, ExternalFile, NodeJsGenerator, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType$1, sliceType$4, arrayType, arrayType$1, ptrType$2, mapType, escapeDQ, NewNodeJsGenerator, ProcessCurlCommand, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	log = $packages["log"];
	url = $packages["net/url"];
	os = $packages["os"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	ExternalFile = $pkg.ExternalFile = $newType(0, $kindStruct, "nodejs.ExternalFile", "ExternalFile", "github.com/shibukawa/curl_as_dsl/client/nodejs", function(FileName_, TextType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FileName = "";
			this.TextType = false;
			return;
		}
		this.FileName = FileName_;
		this.TextType = TextType_;
	});
	NodeJsGenerator = $pkg.NodeJsGenerator = $newType(0, $kindStruct, "nodejs.NodeJsGenerator", "NodeJsGenerator", "github.com/shibukawa/curl_as_dsl/client/nodejs", function(Options_, Modules_, ClientModule_, PrepareBody_, HasBody_, BodyLines_, ExternalFiles_, usedFile_, extraUrl_, AdditionalDeclaration_, processedHeaders_, specialHeaders_, UseSimpleGet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.Modules = false;
			this.ClientModule = "";
			this.PrepareBody = "";
			this.HasBody = false;
			this.BodyLines = sliceType.nil;
			this.ExternalFiles = sliceType$1.nil;
			this.usedFile = 0;
			this.extraUrl = "";
			this.AdditionalDeclaration = "";
			this.processedHeaders = sliceType$2.nil;
			this.specialHeaders = sliceType.nil;
			this.UseSimpleGet = false;
			return;
		}
		this.Options = Options_;
		this.Modules = Modules_;
		this.ClientModule = ClientModule_;
		this.PrepareBody = PrepareBody_;
		this.HasBody = HasBody_;
		this.BodyLines = BodyLines_;
		this.ExternalFiles = ExternalFiles_;
		this.usedFile = usedFile_;
		this.extraUrl = extraUrl_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.processedHeaders = processedHeaders_;
		this.specialHeaders = specialHeaders_;
		this.UseSimpleGet = UseSimpleGet_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(ExternalFile);
	sliceType$2 = $sliceType(common.HeaderGroup);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(common.DataOptions);
	sliceType$4 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(NodeJsGenerator);
	mapType = $mapType($String, $Bool);
	escapeDQ = function(src) {
		var $ptr, src;
		return strings.Replace(strings.Replace(src, "\"", "\\\"", -1), "\\", "\\\\", -1);
	};
	NewNodeJsGenerator = function(options) {
		var $ptr, options, result;
		result = new NodeJsGenerator.ptr(options, false, "", "", false, sliceType.nil, sliceType$1.nil, 0, "", "", sliceType$2.nil, sliceType.nil, false);
		result.Modules = {};
		return result;
	};
	$pkg.NewNodeJsGenerator = NewNodeJsGenerator;
	NodeJsGenerator.ptr.prototype.Url = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, NodeJsGenerator);
		_r = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(self.Options.Url)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.Url }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.Url = function() { return this.$val.Url(); };
	NodeJsGenerator.ptr.prototype.Host = function() {
		var $ptr, _r, _tuple, _tuple$1, err, fragments, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; fragments = $f.fragments; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, NodeJsGenerator);
		_r = url.Parse(self.Options.Url); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$3([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		fragments = strings.SplitN(u.Host, ":", 2);
		if (fragments.$length > 1) {
			_tuple$1 = strconv.Atoi((1 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 1]));
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return u.Host;
			}
		}
		return (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.Host }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.fragments = fragments; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.Host = function() { return this.$val.Host(); };
	NodeJsGenerator.ptr.prototype.Port = function() {
		var $ptr, _r, _tuple, _tuple$1, err, err$1, fragments, port, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; fragments = $f.fragments; port = $f.port; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, NodeJsGenerator);
		_r = url.Parse(self.Options.Url); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$3([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		fragments = strings.SplitN(u.Host, ":", 2);
		if (fragments.$length > 1) {
			_tuple$1 = strconv.Atoi((1 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 1]));
			port = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return 0;
			}
			return port;
		}
		if (u.Scheme === "http") {
			return 80;
		}
		return 443;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.Port }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.fragments = fragments; $f.port = port; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.Port = function() { return this.$val.Port(); };
	NodeJsGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, NodeJsGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.Method = function() { return this.$val.Method(); };
	NodeJsGenerator.ptr.prototype.Path = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, err, path, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; path = $f.path; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, NodeJsGenerator);
		_r = url.Parse(self.Options.Url); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$3([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		path = u.Path;
		if (u.Path === "") {
			path = "/";
		}
		/* */ if (!(self.extraUrl === "")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(self.extraUrl === "")) { */ case 5:
			_r$1 = fmt.Sprintf("\"%s?\" + %s", new sliceType$3([new $String(path), new $String(self.extraUrl)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$1;
		/* } else { */ case 6:
			_r$2 = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(path)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r$2;
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.Path }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.path = path; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.Path = function() { return this.$val.Path(); };
	NodeJsGenerator.ptr.prototype.indent = function() {
		var $ptr, hasIndent, self, x;
		self = $clone(this, NodeJsGenerator);
		hasIndent = (x = self.Options, (x.$ptr_ProcessedData || (x.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, x)))).ExternalFileCount() > 0;
		if (hasIndent) {
			return "    ";
		} else {
			return "";
		}
	};
	NodeJsGenerator.prototype.indent = function() { return this.$val.indent(); };
	NodeJsGenerator.ptr.prototype.PrepareOptions = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, buffer, header, header$1, i, indent, self, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; header = $f.header; header$1 = $f.header$1; i = $f.i; indent = $f.indent; self = $f.self; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, NodeJsGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = self.indent();
		/* */ if (!((self.processedHeaders.$length === 0)) || !((self.specialHeaders.$length === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.processedHeaders.$length === 0)) || !((self.specialHeaders.$length === 0))) { */ case 1:
			_r = fmt.Fprintf(buffer[0], "\n%s    headers: {\n", new sliceType$3([new $String(indent)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_ref = self.processedHeaders;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				header = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.HeaderGroup);
				/* */ if (header.Values.$length === 1) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (header.Values.$length === 1) { */ case 6:
					_r$1 = fmt.Fprintf(buffer[0], "%s        \"%s\": \"%s\",\n", new sliceType$3([new $String(indent), new $String(header.Key), new $String((x = header.Values, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$s = 8; continue;
				/* } else { */ case 7:
					_r$2 = fmt.Fprintf(buffer[0], "%s        \"%s\": [", new sliceType$3([new $String(indent), new $String(header.Key)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					_ref$1 = header.Values;
					_i$1 = 0;
					/* while (true) { */ case 11:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
						i = _i$1;
						value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (!((i === 0))) {
							buffer[0].WriteString(", ");
						}
						_r$3 = fmt.Fprintf(buffer[0], "\"%s\"", new sliceType$3([new $String(value)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						_i$1++;
					/* } */ $s = 11; continue; case 12:
					buffer[0].WriteString("],\n");
				/* } */ case 8:
				_i++;
			/* } */ $s = 4; continue; case 5:
			_ref$2 = self.specialHeaders;
			_i$2 = 0;
			/* while (true) { */ case 14:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 15; continue; }
				header$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$4 = fmt.Fprintf(buffer[0], "%s        %s,\n", new sliceType$3([new $String(indent), new $String(header$1)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_i$2++;
			/* } */ $s = 14; continue; case 15:
			_r$5 = fmt.Fprintf(buffer[0], "%s    },", new sliceType$3([new $String(indent)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 2:
		/* */ if (self.Options.Insecure) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (self.Options.Insecure) { */ case 18:
			_r$6 = fmt.Fprintf(buffer[0], "\n%s    rejectUnauthorized: false,", new sliceType$3([new $String(indent)])); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
		/* } */ case 19:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.PrepareOptions }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.header = header; $f.header$1 = header$1; $f.i = i; $f.indent = indent; $f.self = self; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.PrepareOptions = function() { return this.$val.PrepareOptions(); };
	NodeJsGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, _r, boundary, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; boundary = $f.boundary; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.AdditionalDeclaration = "\nBOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$';\n\nfunction encodeMultiPartFormData(fields, files) {\n    var L = [];\n    for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        L.push('--' + BOUNDARY);\n        L.push('Content-Disposition: form-data; name=\"' + field.key + '\"');\n        if (field.contentType) {\n            L.push('Content-Type: ' + field.contentType);\n        }\n        L.push('');\n        L.push(field.value);\n    }\n    for (var i = 0; i < files.length; i++) {\n    \tvar file = files[i];\n        L.push('--' + BOUNDARY);\n        L.push('Content-Disposition: form-data; name=\"' + file.key + '\"; filename=\"' + file.filename + '\"');\n        L.push('Content-Type: ' + file.contentType);\n        L.push('');\n        L.push(file.content);\n    }\n    L.push('--' + BOUNDARY + '--');\n    return L.join(\"\\r\\n\");\n}\n";
		boundary = "----------ThIs_Is_tHe_bouNdaRY_$";
		_r = fmt.Sprintf("multipart/form-data; boundary=%s", new sliceType$3([new $String(boundary)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = self.Options.InsertContentTypeHeader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.AddMultiPartCode }; } $f.$ptr = $ptr; $f._r = _r; $f.boundary = boundary; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	NodeJsGenerator.ptr.prototype.FileContent = function() {
		var $ptr, _r, index, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if (self.ExternalFiles.$length === 1) {
			return "fileContent";
		}
		index = self.usedFile;
		self.usedFile = self.usedFile + 1 >> 0;
		_r = fmt.Sprintf("fileContents[%d]", new sliceType$3([new $Int(index)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.FileContent }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.FileContent = function() { return this.$val.FileContent(); };
	NodeJsGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			$r = self.SetDataForForm(false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = strings.Join(self.BodyLines, "");
			self.BodyLines = sliceType.nil;
			self.HasBody = false;
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.SetDataForBody(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = strings.Join(self.BodyLines, "");
			self.BodyLines = sliceType.nil;
			self.HasBody = false;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	NodeJsGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _r, _r$1, _ref, data, i, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; data = $f.data; i = $f.i; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			self.BodyLines = $append(self.BodyLines, _r);
			$s = 3; continue;
		/* } else { */ case 2:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				i = _i;
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				if (!((i === 0))) {
					self.BodyLines = $append(self.BodyLines, "\"&\"");
				}
				_r$1 = StringForData(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				self.BodyLines = $append(self.BodyLines, _r$1);
				_i++;
			/* } */ $s = 5; continue; case 6:
		/* } */ case 3:
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.data = data; $f.i = i; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	NodeJsGenerator.ptr.prototype.SetDataForForm = function(hasIndent) {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _key, _key$1, _keys, _keys$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _tuple, buffer, count, data, entries, hasIndent, i, indent, key, key$1, self, singleData, value, values, values$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; buffer = $f.buffer; count = $f.count; data = $f.data; entries = $f.entries; hasIndent = $f.hasIndent; i = $f.i; indent = $f.indent; key = $f.key; key$1 = $f.key$1; self = $f.self; singleData = $f.singleData; value = $f.value; values = $f.values; values$1 = $f.values$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		entries = {};
		indent = "";
		if (hasIndent) {
			indent = "    ";
		} else {
			indent = "";
		}
		_ref = self.Options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				key = _entry.k;
				values = _entry.v;
				_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
				_i$1++;
			}
			_i++;
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		count = 0;
		_ref$2 = entries;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 1:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 2; continue; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 1; continue;
			}
			key$1 = _entry$2.k;
			values$1 = _entry$2.v;
			/* */ if (count === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (count === 0) { */ case 3:
				buffer[0].WriteString("var query = querystring.stringify({\n");
				$s = 5; continue;
			/* } else { */ case 4:
				_r = fmt.Fprintf(buffer[0], "%s, \"", new sliceType$3([new $String(indent)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 5:
			/* */ if (values$1.$length === 1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (values$1.$length === 1) { */ case 7:
				_r$1 = fmt.Fprintf(buffer[0], "%s    \"%s\": \"%s\",\n", new sliceType$3([new $String(indent), new $String(escapeDQ(key$1)), new $String(escapeDQ((0 >= values$1.$length ? $throwRuntimeError("index out of range") : values$1.$array[values$1.$offset + 0])))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$2 = fmt.Fprintf(buffer[0], "%s    \"%s\": [\n%s         ", new sliceType$3([new $String(indent), new $String(key$1), new $String(indent)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_ref$3 = values$1;
				_i$3 = 0;
				/* while (true) { */ case 12:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 13; continue; }
					i = _i$3;
					value = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
					if (!((i === 0))) {
						buffer[0].WriteString(", ");
					}
					_r$3 = fmt.Fprintf(buffer[0], "\"%s\"", new sliceType$3([new $String(escapeDQ(value))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
					_i$3++;
				/* } */ $s = 12; continue; case 13:
				_r$4 = fmt.Fprintf(buffer[0], "],\n%s    ", new sliceType$3([new $String(indent)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 9:
			count = count + (1) >> 0;
			_i$2++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = fmt.Fprintf(buffer[0], "});%s\n", new sliceType$3([new $String(indent)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.BodyLines = $append(self.BodyLines, "query");
		_key$1 = "querystring"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f.buffer = buffer; $f.count = count; $f.data = data; $f.entries = entries; $f.hasIndent = hasIndent; $f.i = i; $f.indent = indent; $f.key = key; $f.key$1 = key$1; $f.self = self; $f.singleData = singleData; $f.value = value; $f.values = values; $f.values$1 = values$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.SetDataForForm = function(hasIndent) { return this.$val.SetDataForForm(hasIndent); };
	NodeJsGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, indent, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; indent = $f.indent; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		$r = self.AddMultiPartCode(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		indent = self.indent();
		fields = sliceType.nil;
		files = sliceType.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (data[0].SendAsFormFile()) { */ case 4:
				_r = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = FormString(self, data[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		buffer = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		if (fields.$length > 0) {
			buffer.WriteString("var fields = [\n");
			_ref$1 = fields;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				buffer.WriteString(indent);
				buffer.WriteString(value);
				_i$1++;
			}
			buffer.WriteString(indent);
			buffer.WriteString("];\n");
			buffer.WriteString(indent);
		}
		if (files.$length > 0) {
			if (fields.$length > 0) {
				self.BodyLines = $append(self.BodyLines, "encodeMultiPartFormData(fields, files)");
			} else {
				self.BodyLines = $append(self.BodyLines, "encodeMultiPartFormData([], files)");
			}
			buffer.WriteString("var files = [\n");
			_ref$2 = files;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				buffer.WriteString(indent);
				buffer.WriteString(value$1);
				_i$2++;
			}
			buffer.WriteString(indent);
			buffer.WriteString("];\n");
			buffer.WriteString(indent);
		} else {
			self.BodyLines = $append(self.BodyLines, "encodeMultiPartFormData(fields, [])");
		}
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.indent = indent; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	NodeJsGenerator.ptr.prototype.TearDown = function() {
		var $ptr, _r, _r$1, _r$2, buffer, indent, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; buffer = $f.buffer; indent = $f.indent; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, NodeJsGenerator);
		indent = self.indent();
		buffer[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r = fmt.Fprintf(buffer[0], "\n    %sres.on('end', function() {", new sliceType$3([new $String(indent)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = fmt.Fprintf(buffer[0], "\n        %sprocess.exit(0);", new sliceType$3([new $String(indent)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = fmt.Fprintf(buffer[0], "\n    %s});", new sliceType$3([new $String(indent)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: NodeJsGenerator.ptr.prototype.TearDown }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.buffer = buffer; $f.indent = indent; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	NodeJsGenerator.prototype.TearDown = function() { return this.$val.TearDown(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _1, _i, _key, _key$1, _key$2, _r, _r$1, _r$2, _ref, data, fileName, generator, isText, options, templateName, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; data = $f.data; fileName = $f.fileName; generator = $f.generator; isText = $f.isText; options = $f.options; templateName = $f.templateName; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		generator = NewNodeJsGenerator(options);
		if (options.Http2Flag) {
			_key = "http2"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
			generator.ClientModule = "http2";
		} else if (strings.HasPrefix(options.Url, "https")) {
			_key$1 = "https"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
			generator.ClientModule = "https";
		} else {
			_key$2 = "http"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: true };
			generator.ClientModule = "http";
			options.Insecure = false;
		}
		_ref = options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			fileName = data.FileName();
			if (!(fileName === "")) {
				isText = data.Type === 0;
				generator.ExternalFiles = $append(generator.ExternalFiles, new ExternalFile.ptr(fileName, isText));
			}
			_i++;
		}
		_r = options.GroupedHeaders(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		generator.processedHeaders = _r;
		templateName = "";
		_1 = generator.ExternalFiles.$length;
		if (_1 === 0) {
			templateName = "full";
		} else if (_1 === 1) {
			templateName = "external_file";
		} else {
			templateName = "external_files";
		}
		/* */ if (!(generator.Options.User === "")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(generator.Options.User === "")) { */ case 2:
			_r$1 = fmt.Sprintf("\"Authorization\": \"Basic \" + new Buffer(\"%s\").toString(\"base64\")", new sliceType$3([new $String(generator.Options.User)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, _r$1);
		/* } */ case 3:
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 5; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 6; continue; }
		_r$2 = options.Method(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 === "GET" && (generator.processedHeaders.$length === 0) && (generator.specialHeaders.$length === 0)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 5:
			/* */ if (options.Get) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (options.Get) { */ case 10:
				$r = generator.SetDataForUrl(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else { */ case 11:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			$s = 8; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 6:
			$r = generator.SetFormForBody(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if (_r$2 === "GET" && (generator.processedHeaders.$length === 0) && (generator.specialHeaders.$length === 0)) { */ case 7:
			if (templateName === "full" && !options.Insecure) {
				templateName = "simple_get";
			}
		/* } */ case 8:
		return [templateName, (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.data = data; $f.fileName = fileName; $f.generator = generator; $f.isText = isText; $f.options = options; $f.templateName = templateName; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewStringForData = function(generator, data) {
		var $ptr, _2, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = generator.FileContent(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg = new $String(_r);
					_r$1 = fmt.Sprintf("%s.replace('\\n', '')", new sliceType$3([_arg])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$2 = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(escapeDQ(strings.Replace(data.Value, "\n", "", -1)))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 13:
					_r$3 = generator.FileContent(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
					$s = 15; continue;
				/* } else { */ case 14:
					_r$4 = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(escapeDQ(data.Value))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
				/* } */ case 15:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 18:
					_r$5 = generator.FileContent(); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$1 = new $String(_r$5);
					_r$6 = fmt.Sprintf("encodeURIComponent(%s)", new sliceType$3([_arg$1])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					result = _r$6;
					$s = 20; continue;
				/* } else { */ case 19:
					_r$7 = fmt.Sprintf("encodeURIComponent(\"%s\")", new sliceType$3([new $String(escapeDQ(data.Value))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					result = _r$7;
				/* } */ case 20:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$8 = fmt.Sprintf("unknown type: %d", new sliceType$3([new common.DataType(data.Type)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$panic(new $String(_r$8));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _3, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_3 = data.Type;
			/* */ if (_3 === 0) { $s = 2; continue; }
			/* */ if (_3 === 1) { $s = 3; continue; }
			/* */ if (_3 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_3 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = generator.FileContent(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg = new $String(_r);
					_r$1 = fmt.Sprintf("%s.replace('\\n', '')", new sliceType$3([_arg])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$2 = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(escapeDQ(strings.Replace(data.Value, "\n", "", -1)))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_3 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 13:
					_r$3 = generator.FileContent(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$1 = new $String(_r$3);
					_r$4 = fmt.Sprintf("%s", new sliceType$3([_arg$1])); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
					$s = 15; continue;
				/* } else { */ case 14:
					_r$5 = fmt.Sprintf("\"%s\"", new sliceType$3([new $String(escapeDQ(data.Value))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 15:
				$s = 6; continue;
			/* } else if (_3 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 19:
					_r$6 = generator.FileContent(); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$2 = new $String(_r$6);
					_r$7 = fmt.Sprintf("encodeURIComponent(%s)", new sliceType$3([_arg$2])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					result = _r$7;
					$s = 21; continue;
				/* } else { */ case 20:
					_r$8 = fmt.Sprintf("encodeURIComponent(\"%s\")", new sliceType$3([new $String(escapeDQ(data.Value))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					result = _r$8;
				/* } */ case 21:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$9 = fmt.Sprintf("unknown type: %d", new sliceType$3([new common.DataType(data.Type)])); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$panic(new $String(_r$9));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._3 = _3; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _4, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_4 = data.Type;
			/* */ if (_4 === 3) { $s = 2; continue; }
			/* */ if (_4 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_4 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$3([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					contentType = "application/octet-stream";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_arg = buffer$1[0];
					_arg$1 = new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0]));
					_arg$2 = new $String(sentFileName);
					_r$1 = generator.FileContent(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg$3 = new $String(_r$1);
					_arg$4 = new $String(contentType);
					_r$2 = fmt.Fprintf(_arg, "    {key: \"%s\", filename: \"%s\", content: %s, contentType: \"%s\"},\n", new sliceType$3([_arg$1, _arg$2, _arg$3, _arg$4])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					result = buffer$1[0].String();
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer[0] = new bytes.Buffer.ptr(sliceType$4.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_arg$5 = buffer[0];
					_arg$6 = new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0]));
					_r$3 = generator.FileContent(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_arg$7 = new $String(_r$3);
					_r$4 = fmt.Fprintf(_arg$5, "    {key: \"%s\", value: %s", new sliceType$3([_arg$6, _arg$7])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
							break;
						}
						_i$1++;
					}
					/* */ if (!(contentType$1 === "")) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!(contentType$1 === "")) { */ case 16:
						_r$5 = fmt.Fprintf(buffer[0], ", contentType: \"%s\"},\n", new sliceType$3([new $String(contentType$1)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
						$s = 18; continue;
					/* } else { */ case 17:
						buffer[0].WriteString("},\n");
					/* } */ case 18:
					result = buffer[0].String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$6 = fmt.Sprintf("    {key: \"%s\", value: \"%s\"},\n", new sliceType$3([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					result = _r$6;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_4 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!((field$1.$length === 2))) { */ case 21:
					_r$7 = fmt.Fprintln(os.Stderr, new sliceType$3([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					os.Exit(1);
				/* } */ case 22:
				_r$8 = fmt.Sprintf("    {key: \"%s\", value: \"%s\"},\n", new sliceType$3([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				result = _r$8;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	NodeJsGenerator.methods = [{prop: "Url", name: "Url", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Host", name: "Host", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Port", name: "Port", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Path", name: "Path", pkg: "", typ: $funcType([], [$String], false)}, {prop: "indent", name: "indent", pkg: "github.com/shibukawa/curl_as_dsl/client/nodejs", typ: $funcType([], [$String], false)}, {prop: "PrepareOptions", name: "PrepareOptions", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TearDown", name: "TearDown", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "FileContent", name: "FileContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	ExternalFile.init([{prop: "FileName", name: "FileName", pkg: "", typ: $String, tag: ""}, {prop: "TextType", name: "TextType", pkg: "", typ: $Bool, tag: ""}]);
	NodeJsGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "Modules", name: "Modules", pkg: "", typ: mapType, tag: ""}, {prop: "ClientModule", name: "ClientModule", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "BodyLines", name: "BodyLines", pkg: "", typ: sliceType, tag: ""}, {prop: "ExternalFiles", name: "ExternalFiles", pkg: "", typ: sliceType$1, tag: ""}, {prop: "usedFile", name: "usedFile", pkg: "github.com/shibukawa/curl_as_dsl/client/nodejs", typ: $Int, tag: ""}, {prop: "extraUrl", name: "extraUrl", pkg: "github.com/shibukawa/curl_as_dsl/client/nodejs", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "processedHeaders", name: "processedHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/nodejs", typ: sliceType$2, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/nodejs", typ: sliceType, tag: ""}, {prop: "UseSimpleGet", name: "UseSimpleGet", pkg: "", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/objc"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, log, url, os, strings, ObjCGenerator, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, arrayType$1, ptrType$1, ptrType$2, mapType, NewObjCGenerator, ProcessCurlCommand, NewBinaryForData, BinaryForData, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	log = $packages["log"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	ObjCGenerator = $pkg.ObjCGenerator = $newType(0, $kindStruct, "objc.ObjCGenerator", "ObjCGenerator", "github.com/shibukawa/curl_as_dsl/client/objc", function(Options_, Url_, IsHttps_, HasBody_, Body_, PrepareBody_, AdditionalDeclaration_, specialHeaders_, commonInitialize_, Modules_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.Url = "";
			this.IsHttps = false;
			this.HasBody = false;
			this.Body = "";
			this.PrepareBody = "";
			this.AdditionalDeclaration = "";
			this.specialHeaders = sliceType$1.nil;
			this.commonInitialize = sliceType.nil;
			this.Modules = false;
			return;
		}
		this.Options = Options_;
		this.Url = Url_;
		this.IsHttps = IsHttps_;
		this.HasBody = HasBody_;
		this.Body = Body_;
		this.PrepareBody = PrepareBody_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.specialHeaders = specialHeaders_;
		this.commonInitialize = commonInitialize_;
		this.Modules = Modules_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(sliceType);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(common.DataOptions);
	ptrType$2 = $ptrType(ObjCGenerator);
	mapType = $mapType($String, $Bool);
	NewObjCGenerator = function(options) {
		var $ptr, _key, _r, options, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; options = $f.options; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new ObjCGenerator.ptr(options, "", false, false, "", "", "", sliceType$1.nil, sliceType.nil, false);
		_r = fmt.Sprintf("@\"%s\"", new sliceType$2([new $String(options.Url)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		result.Url = _r;
		result.Modules = {};
		_key = "Foundation/Foundation.h"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewObjCGenerator }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.options = options; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewObjCGenerator = NewObjCGenerator;
	ObjCGenerator.ptr.prototype.Proxy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _tuple, err, host, hostFragments, port, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; host = $f.host; hostFragments = $f.hostFragments; port = $f.port; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, ObjCGenerator);
		if (self.Options.Proxy === "") {
			return "";
		}
		_r = url.Parse(self.Options.Proxy); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		hostFragments = strings.Split(u.Host, ":");
		host = (0 >= hostFragments.$length ? $throwRuntimeError("index out of range") : hostFragments.$array[hostFragments.$offset + 0]);
		port = "";
		if (hostFragments.$length === 1) {
			port = "80";
		} else {
			port = (1 >= hostFragments.$length ? $throwRuntimeError("index out of range") : hostFragments.$array[hostFragments.$offset + 1]);
		}
		_r$1 = strings.ToUpper(u.Scheme); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = new $String(_r$1);
		_arg$1 = new $String(host);
		_arg$2 = new $String(port);
		_r$2 = fmt.Sprintf("new Proxy(Proxy.Type.%s, new InetSocketAddress(\"%s\", %s))", new sliceType$2([_arg, _arg$1, _arg$2])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.Proxy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.host = host; $f.hostFragments = hostFragments; $f.port = port; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.Proxy = function() { return this.$val.Proxy(); };
	ObjCGenerator.ptr.prototype.CommonInitialize = function() {
		var $ptr, _i, _ref, buffer, indent, line, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; buffer = $f.buffer; indent = $f.indent; line = $f.line; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, ObjCGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("        ");
		}; })(buffer);
		_ref = self.commonInitialize;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			buffer[0].WriteString(line);
			buffer[0].WriteByte(10);
			$r = indent(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.CommonInitialize }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.buffer = buffer; $f.indent = indent; $f.line = line; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.CommonInitialize = function() { return this.$val.CommonInitialize(); };
	ObjCGenerator.ptr.prototype.ModifyRequest = function() {
		var $ptr, _arg, _arg$1, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buffer, header, header$1, headerStr, indent, method, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; header = $f.header; header$1 = $f.header$1; headerStr = $f.headerStr; indent = $f.indent; method = $f.method; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, ObjCGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("        ");
		}; })(buffer);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		method = _r;
		/* */ if (!(method === "GET")) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(method === "GET")) { */ case 2:
			$r = indent(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = fmt.Sprintf("[request setHTTPMethod:@\"%s\"];\n", new sliceType$2([new $String(method)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = buffer[0].WriteString(_r$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 3:
		_ref = self.Options.Header;
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			headerStr = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = indent(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			header = strings.Split(headerStr, ":");
			_r$3 = strings.TrimSpace((1 >= header.$length ? $throwRuntimeError("index out of range") : header.$array[header.$offset + 1])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg = new $String(_r$3);
			_r$4 = strings.TrimSpace((0 >= header.$length ? $throwRuntimeError("index out of range") : header.$array[header.$offset + 0])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$4);
			_r$5 = fmt.Sprintf("[request setValue:@\"%s\" forHTTPHeaderField:@\"%s\"];\n", new sliceType$2([_arg, _arg$1])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = buffer[0].WriteString(_r$5); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_i++;
		/* } */ $s = 7; continue; case 8:
		_ref$1 = self.specialHeaders;
		_i$1 = 0;
		/* while (true) { */ case 14:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 15; continue; }
			header$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = fmt.Sprintf("[request setValue:%s forHTTPHeaderField:@\"%s\"];\n", new sliceType$2([new $String((1 >= header$1.$length ? $throwRuntimeError("index out of range") : header$1.$array[header$1.$offset + 1])), new $String((0 >= header$1.$length ? $throwRuntimeError("index out of range") : header$1.$array[header$1.$offset + 0]))])); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = buffer[0].WriteString(_r$7); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_i$1++;
		/* } */ $s = 14; continue; case 15:
		/* */ if (self.HasBody) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (self.HasBody) { */ case 19:
			$r = indent(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("[request setValue:[NSString stringWithFormat:@\"%lu\", [content length]] forHTTPHeaderField:@\"Content-length\"];\n");
			$r = indent(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("[request setHTTPBody:content];\n");
		/* } */ case 20:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.ModifyRequest }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.header = header; $f.header$1 = header$1; $f.headerStr = headerStr; $f.indent = indent; $f.method = method; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.ModifyRequest = function() { return this.$val.ModifyRequest(); };
	ObjCGenerator.ptr.prototype.AppendCommonInitialize = function(newLine, check) {
		var $ptr, _i, _ref, check, found, line, newLine, self;
		self = this;
		if (check) {
			found = false;
			_ref = self.commonInitialize;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (line === newLine) {
					found = true;
					break;
				}
				_i++;
			}
			if (found) {
				return;
			}
		}
		self.commonInitialize = $append(self.commonInitialize, newLine);
	};
	ObjCGenerator.prototype.AppendCommonInitialize = function(newLine, check) { return this.$val.AppendCommonInitialize(newLine, check); };
	ObjCGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, self;
		self = this;
		self.AdditionalDeclaration = "\nNSData* encodeMultiPartBody(NSString* boundary, NSArray* fields, NSArray* files)\n{\n    NSMutableData *httpBody = [NSMutableData data];\n\n    for (NSArray* field in fields) {\n        NSString* key = [field objectAtIndex:0];\n        NSString* value = [field objectAtIndex:1];\n        [httpBody appendData:[[NSString stringWithFormat:@\"--%@\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n        [httpBody appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\", key] dataUsingEncoding:NSUTF8StringEncoding]];\n        if ([field count] == 3) {\n            [httpBody appendData:[[NSString stringWithFormat:@\"Content-Type: %@\\r\\n\", [field objectAtIndex:2]] dataUsingEncoding:NSUTF8StringEncoding]];\n        }\n        [httpBody appendData:[@\"\\r\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n        [httpBody appendData:[[NSString stringWithFormat:@\"%@\\r\\n\", value] dataUsingEncoding:NSUTF8StringEncoding]];\n    }\n\n    for (NSArray *file in files) {\n        NSString* key            = [file objectAtIndex:0];\n        NSData*   data           = [NSData dataWithContentsOfFile:[file objectAtIndex:1]];\n        NSString* remoteFileName = [file objectAtIndex:2];\n        NSString* contentType    = [file objectAtIndex:3];\n\n        [httpBody appendData:[[NSString stringWithFormat:@\"--%@\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n        [httpBody appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", key, remoteFileName] dataUsingEncoding:NSUTF8StringEncoding]];\n        [httpBody appendData:[[NSString stringWithFormat:@\"Content-Type: %@\\r\\n\\r\\n\", contentType] dataUsingEncoding:NSUTF8StringEncoding]];\n        [httpBody appendData:data];\n        [httpBody appendData:[@\"\\r\\n\" dataUsingEncoding:NSUTF8StringEncoding]];\n    }\n\n    [httpBody appendData:[[NSString stringWithFormat:@\"--%@--\\r\\n\", boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n    return httpBody;\n}\n\nNSString* getMimeTypeFromPath(NSString* path)\n{\n    NSString *mimeType = nil;\n#ifdef TARGET_OS_MAC\n    CFStringRef uti = (__bridge CFStringRef)[[NSWorkspace sharedWorkspace] typeOfFile:path error:nil];\n#else\n    CFStringRef extension = (__bridge CFStringRef)[path pathExtension];\n    CFStringRef uti = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, extension, NULL);\n    CFRelease(extension);\n#endif\n    if (uti) {\n        CFStringRef cfMimeType = UTTypeCopyPreferredTagWithClass(uti, kUTTagClassMIMEType);\n        if (cfMimeType) {\n            mimeType = (__bridge NSString*)cfMimeType;\n            CFRelease(cfMimeType);\n        }\n    }\n    if (!mimeType) {\n        mimeType = @\"application/octet-stream\";\n    }\n    return mimeType;\n}\n";
		self.specialHeaders = $append(self.specialHeaders, new sliceType(["Content-type", "[NSString stringWithFormat: @\"multipart/form-data; boundary=%@\", boundary]"]));
	};
	ObjCGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	ObjCGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, _entry, _i, _i$1, _i$2, _i$3, _i$4, _keys, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, buffer, data, data$1, forWriter, forWriter$1, i, i$1, indent, key, line, line$1, prepareLines, prepareLines$1, self, singleData, values, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; buffer = $f.buffer; data = $f.data; data$1 = $f.data$1; forWriter = $f.forWriter; forWriter$1 = $f.forWriter$1; i = $f.i; i$1 = $f.i$1; indent = $f.indent; key = $f.key; line = $f.line; line$1 = $f.line$1; prepareLines = $f.prepareLines; prepareLines$1 = $f.prepareLines$1; self = $f.self; singleData = $f.singleData; values = $f.values; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("        ");
		}; })(buffer, data);
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			_r = fmt.Fprintf(buffer[0], "NSMutableString* url = [@\"%s\" mutableCopy];\n", new sliceType$2([new $String(self.Options.Url)])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$r = indent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("[url appendString:@\"?\"];\n");
			$r = indent(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				i = _i;
				data$1 = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				/* */ if (!((i === 0))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((i === 0))) { */ case 9:
					$r = indent(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString("[url appendString:@\"&\"];\n");
				/* } */ case 10:
				_tuple = url.ParseQuery(data$1.Value);
				singleData = _tuple[0];
				_ref$1 = singleData;
				_i$1 = 0;
				_keys = $keys(_ref$1);
				/* while (true) { */ case 12:
					/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 13; continue; }
					_entry = _ref$1[_keys[_i$1]];
					if (_entry === undefined) {
						_i$1++;
						/* continue; */ $s = 12; continue;
					}
					key = _entry.k;
					values = _entry.v;
					_r$1 = fmt.Fprintf(buffer[0], "[url appendFormat:@\"%%@=%%@\", @\"%s\", @\"%s\"];\n", new sliceType$2([new $String(key), new $String((0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0]))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$r = indent(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$1++;
				/* } */ $s = 12; continue; case 13:
				_i++;
			/* } */ $s = 7; continue; case 8:
			self.PrepareBody = buffer[0].String();
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (self.Options.ProcessedData.$length === 1) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (self.Options.ProcessedData.$length === 1) { */ case 16:
				_r$2 = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				prepareLines = _tuple$1[0];
				forWriter = _tuple$1[1];
				_ref$2 = prepareLines;
				_i$2 = 0;
				/* while (true) { */ case 20:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 21; continue; }
					line = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					buffer[0].WriteString(line);
					buffer[0].WriteByte(10);
					$r = indent(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i$2++;
				/* } */ $s = 20; continue; case 21:
				_r$3 = fmt.Fprintf(buffer[0], "NSString* url = [[NSString alloc] initWithFormat:@\"%%@?%%@\", @\"%s\", %s];\n", new sliceType$2([new $String(self.Options.Url), new $String(forWriter)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$r = indent(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				_r$4 = fmt.Fprintf(buffer[0], "NSMutableString* query = [@\"%s\" mutableCopy];\n", new sliceType$2([new $String(self.Options.Url)])); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$r = indent(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString("[url appendString:@\"?\"];\n");
				$r = indent(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_ref$3 = self.Options.ProcessedData;
				_i$3 = 0;
				/* while (true) { */ case 28:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 29; continue; }
					i$1 = _i$3;
					data[0] = $clone(((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]), common.DataOption);
					/* */ if (!((i$1 === 0))) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (!((i$1 === 0))) { */ case 30:
						$r = indent(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						buffer[0].WriteString("[url appendString:@\"&\"];\n");
					/* } */ case 31:
					$r = indent(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$5 = StringForData(self, data[0]); /* */ $s = 34; case 34: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					prepareLines$1 = _tuple$2[0];
					forWriter$1 = _tuple$2[1];
					_ref$4 = prepareLines$1;
					_i$4 = 0;
					/* while (true) { */ case 35:
						/* if (!(_i$4 < _ref$4.$length)) { break; } */ if(!(_i$4 < _ref$4.$length)) { $s = 36; continue; }
						line$1 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
						buffer[0].WriteString(line$1);
						buffer[0].WriteByte(10);
						$r = indent(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$4++;
					/* } */ $s = 35; continue; case 36:
					/* */ if (!(forWriter$1 === "")) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (!(forWriter$1 === "")) { */ case 38:
						_r$6 = fmt.Fprintf(buffer[0], "[query appendString:%s];\n", new sliceType$2([new $String(forWriter$1)])); /* */ $s = 40; case 40: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 39:
					_i$3++;
				/* } */ $s = 28; continue; case 29:
				$r = indent(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
		/* } */ case 3:
		self.Url = "url";
		self.PrepareBody = buffer[0].String();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.buffer = buffer; $f.data = data; $f.data$1 = data$1; $f.forWriter = forWriter; $f.forWriter$1 = forWriter$1; $f.i = i; $f.i$1 = i$1; $f.indent = indent; $f.key = key; $f.line = line; $f.line$1 = line$1; $f.prepareLines = prepareLines; $f.prepareLines$1 = prepareLines$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	ObjCGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _tuple, _tuple$1, buffer, data, forWriter, forWriter$1, i, indent, line, line$1, prepareLines, prepareLines$1, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buffer = $f.buffer; data = $f.data; forWriter = $f.forWriter; forWriter$1 = $f.forWriter$1; i = $f.i; indent = $f.indent; line = $f.line; line$1 = $f.line$1; prepareLines = $f.prepareLines; prepareLines$1 = $f.prepareLines$1; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("        ");
		}; })(buffer, data);
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			_r = NewBinaryForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			prepareLines = _tuple[0];
			forWriter = _tuple[1];
			_ref = prepareLines;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				buffer[0].WriteString(line);
				buffer[0].WriteByte(10);
				$r = indent(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 5; continue; case 6:
			/* */ if (!(forWriter === "")) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!(forWriter === "")) { */ case 8:
				_r$1 = fmt.Fprintf(buffer[0], "NSData *content = %s;\n", new sliceType$2([new $String(forWriter)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$r = indent(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			$s = 3; continue;
		/* } else { */ case 2:
			buffer[0].WriteString("NSMutableData* content = [NSMutableData data];\n");
			_ref$1 = self.Options.ProcessedData;
			_i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
				i = _i$1;
				data[0] = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), common.DataOption);
				/* */ if (!((i === 0))) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!((i === 0))) { */ case 14:
					$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString("[content appendBytes:\"&\" length:1];\n");
				/* } */ case 15:
				_r$2 = BinaryForData(self, data[0]); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				prepareLines$1 = _tuple$1[0];
				forWriter$1 = _tuple$1[1];
				_ref$2 = prepareLines$1;
				_i$2 = 0;
				/* while (true) { */ case 18:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 19; continue; }
					line$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					$r = indent(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					buffer[0].WriteString(line$1);
					buffer[0].WriteByte(10);
					_i$2++;
				/* } */ $s = 18; continue; case 19:
				/* */ if (!(forWriter$1 === "")) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!(forWriter$1 === "")) { */ case 21:
					$r = indent(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$3 = fmt.Fprintf(buffer[0], "[content appendData:%s];\n", new sliceType$2([new $String(forWriter$1)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$3;
				/* } */ case 22:
				_i$1++;
			/* } */ $s = 12; continue; case 13:
			$r = indent(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buffer = buffer; $f.data = data; $f.forWriter = forWriter; $f.forWriter$1 = forWriter$1; $f.i = i; $f.indent = indent; $f.line = line; $f.line$1 = line$1; $f.prepareLines = prepareLines; $f.prepareLines$1 = prepareLines$1; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	ObjCGenerator.ptr.prototype.SetDataForForm = function() {
		var $ptr, _entry, _i, _i$1, _keys, _r, _r$1, _ref, _ref$1, _tuple, buffer, data, i, indent, key, self, singleData, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; buffer = $f.buffer; data = $f.data; i = $f.i; indent = $f.indent; key = $f.key; self = $f.self; singleData = $f.singleData; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer) { return function() {
			var $ptr;
			buffer[0].WriteString("            ");
		}; })(buffer);
		buffer[0].WriteString("StringWriter writer = new StringWriter();\n");
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (!((i === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === 0))) { */ case 3:
				$r = indent(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString("writer.write('&');\n");
			/* } */ case 4:
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 6:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 7; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 6; continue;
				}
				key = _entry.k;
				values = _entry.v;
				_r = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String(key)])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				buffer[0].WriteString("writer.write('=');\n");
				_r$1 = fmt.Fprintf(buffer[0], "writer.write(\"%s\");\n", new sliceType$2([new $String((0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0]))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i$1++;
			/* } */ $s = 6; continue; case 7:
			_i++;
		/* } */ $s = 1; continue; case 2:
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.Body = "values";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.buffer = buffer; $f.data = data; $f.i = i; $f.indent = indent; $f.key = key; $f.self = self; $f.singleData = singleData; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.SetDataForForm = function() { return this.$val.SetDataForForm(); };
	ObjCGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _key, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, indent, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; indent = $f.indent; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		self.AddMultiPartCode();
		fields = sliceType.nil;
		files = sliceType.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (data[0].SendAsFormFile()) { */ case 3:
				_r = FormString(self, data[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		indent = (function(buffer, data) { return function() {
			var $ptr;
			buffer[0].WriteString("        ");
		}; })(buffer, data);
		/* */ if (fields.$length > 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (fields.$length > 0) { */ case 8:
			buffer[0].WriteString("NSArray* fields = [NSArray arrayWithObjects:\n");
			_ref$1 = fields;
			_i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				$r = indent(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString(value);
				_i$1++;
			/* } */ $s = 11; continue; case 12:
			$r = indent(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("    nil\n");
			$r = indent(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("];\n");
			$s = 10; continue;
		/* } else { */ case 9:
			buffer[0].WriteString("NSArray* fields = [NSArray array];\n");
		/* } */ case 10:
		$r = indent(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (files.$length > 0) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (files.$length > 0) { */ case 17:
			buffer[0].WriteString("NSArray* files = [NSArray arrayWithObjects:\n");
			_ref$2 = files;
			_i$2 = 0;
			/* while (true) { */ case 20:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 21; continue; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				$r = indent(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				buffer[0].WriteString(value$1);
				_i$2++;
			/* } */ $s = 20; continue; case 21:
			$r = indent(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("    nil\n");
			$r = indent(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			buffer[0].WriteString("];\n");
			$s = 19; continue;
		/* } else { */ case 18:
			buffer[0].WriteString("NSArray* files = [NSArray array];\n");
		/* } */ case 19:
		$r = indent(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buffer[0].WriteString("NSString *boundary = [NSString stringWithFormat:@\"Boundary-%@\", [[NSUUID UUID] UUIDString]];\n");
		$r = indent(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buffer[0].WriteString("NSData *content = encodeMultiPartBody(boundary, fields, files);\n");
		$r = indent(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		_key = "AppKit/NSWorkspace.h"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ObjCGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.indent = indent; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ObjCGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _r, _r$1, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewObjCGenerator(options); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		generator = _r;
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 2; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 2:
			/* */ if (options.Get) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (options.Get) { */ case 5:
				$r = generator.SetDataForUrl(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			$s = 4; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 3:
			$r = generator.SetFormForBody(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		/* */ if (!(generator.Options.User === "")) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!(generator.Options.User === "")) { */ case 12:
			_r$1 = fmt.Sprintf("[NSString stringWithFormat:@\"Basic %%@\", [[@\"%s\"dataUsingEncoding:NSUTF8StringEncoding] base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed]]", new sliceType$2([new $String(generator.Options.User)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, new sliceType(["Authorization", _r$1]));
		/* } */ case 13:
		if (generator.HasBody) {
		}
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewBinaryForData = function(generator, data) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("NSString *fileContents = [NSString stringWithContentsOfFile:@\"%s\" encoding:NSUTF8StringEncoding error:NULL];", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = $append(result, "NSMutableData* content = [NSMutableData data];", _r, "for (NSString *line in [fileContents componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]]) {", "    [content appendData:[line dataUsingEncoding:NSUTF8StringEncoding]];", "}");
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("[@\"%s\" dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					resultForWriter = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("[NSData dataWithContentsOfFile:@\"%s\"]", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					resultForWriter = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("@\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					resultForWriter = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("NSString *source = [NSString stringWithContentsOfFile:@\"%s\" encoding: NSUTF8StringEncoding error:&error];", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = $append(result, "NSError *error = nil;", _r$4, "NSString *encodedSource = [source stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];");
					resultForWriter = "[encodedSource dataUsingEncoding:NSUTF8StringEncoding]";
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("[[@\"%s\" stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]] dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					resultForWriter = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewBinaryForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewBinaryForData = NewBinaryForData;
	BinaryForData = function(generator, data) {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("    NSString *fileContents = [NSString stringWithContentsOfFile:@\"%s\" encoding:NSUTF8StringEncoding error:NULL];", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = $append(result, "{", _r, "    for (NSString *line in [fileContents componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]]) {", "        [content appendData:[line dataUsingEncoding:NSUTF8StringEncoding]];", "    }", "}");
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("[@\"%s\" dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					resultForWriter = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("[content appendData:[NSData dataWithContentsOfFile:@\"%s\"]];", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = $append(result, _r$2);
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("[@\"%s\" dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					resultForWriter = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("    NSString *source = [NSString stringWithContentsOfFile:@\"%s\" encoding: NSUTF8StringEncoding error:&error];", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = $append(result, "{", "    NSError *error = nil;", _r$4, "    NSString *encodedSource = [source stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];", "    [content appendData:[encodedSource dataUsingEncoding:NSUTF8StringEncoding]];", "}");
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("URLEncoder.encode(\"%s\", \"UTF-8\")", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					resultForWriter = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BinaryForData = BinaryForData;
	NewStringForData = function(generator, data) {
		var $ptr, _3, _r, _r$1, _r$2, _r$3, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_3 = data.Type;
			/* */ if (_3 === 0) { $s = 2; continue; }
			/* */ if (_3 === 1) { $s = 3; continue; }
			/* */ if (_3 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_3 === 0) { */ case 2:
				_r = fmt.Sprintf("@\"%s\"", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				resultForWriter = _r;
				$s = 6; continue;
			/* } else if (_3 === 1) { */ case 3:
				_r$1 = fmt.Sprintf("@\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				resultForWriter = _r$1;
				$s = 6; continue;
			/* } else if (_3 === 2) { */ case 4:
				_r$2 = fmt.Sprintf("[[@\"%s\"\n\t\tstringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]] dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(data.Value)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				resultForWriter = _r$2;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String(_r$3));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _4, _r, _r$1, _r$2, _r$3, data, generator, result, resultForWriter, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; data = $f.data; generator = $f.generator; result = $f.result; resultForWriter = $f.resultForWriter; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = sliceType.nil;
		resultForWriter = "";
			_4 = data.Type;
			/* */ if (_4 === 0) { $s = 2; continue; }
			/* */ if (_4 === 1) { $s = 3; continue; }
			/* */ if (_4 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_4 === 0) { */ case 2:
				_r = fmt.Sprintf("[@\"%s\" dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				resultForWriter = _r;
				$s = 6; continue;
			/* } else if (_4 === 1) { */ case 3:
				_r$1 = fmt.Sprintf("[@\"%s\" dataUsingEncoding:NSUTF8StringEncoding]", new sliceType$2([new $String(data.Value)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				resultForWriter = _r$1;
				$s = 6; continue;
			/* } else if (_4 === 2) { */ case 4:
				_r$2 = fmt.Sprintf("URLEncoder.encode(\"%s\", \"UTF-8\")", new sliceType$2([new $String(data.Value)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				resultForWriter = _r$2;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String(_r$3));
			/* } */ case 6:
		case 1:
		return [result, resultForWriter];
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.data = data; $f.generator = generator; $f.result = result; $f.resultForWriter = resultForWriter; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _5, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_5 = data.Type;
			/* */ if (_5 === 3) { $s = 2; continue; }
			/* */ if (_5 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_5 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$1 = fmt.Fprintf(buffer[0], "    [NSArray arrayWithObjects:@\"%s\", @\"%s\", ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					contentType = "";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_r$2 = fmt.Fprintf(buffer[0], "@\"%s\", ", new sliceType$2([new $String(sentFileName)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					/* */ if (!(contentType === "")) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!(contentType === "")) { */ case 14:
						_r$3 = fmt.Fprintf(buffer[0], "@\"%s\"", new sliceType$2([new $String(contentType)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 16; continue;
					/* } else { */ case 15:
						_r$4 = fmt.Fprintf(buffer[0], "getMimeTypeFromPath(@\"%s\")", new sliceType$2([new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
					/* } */ case 16:
					buffer[0].WriteString(", nil],\n");
					result = buffer[0].String();
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$5 = fmt.Fprintf(buffer$1[0], "    [NSArray arrayWithObjects:@\"%s\", [NSString stringWithContentsOfFile:@\"%s\" encoding:NSUTF8StringEncoding error: nil], ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					/* */ if (!(contentType$1 === "")) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!(contentType$1 === "")) { */ case 20:
						_r$6 = fmt.Fprintf(buffer$1[0], "@\"%s\", ", new sliceType$2([new $String(contentType$1)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 21:
					buffer$1[0].WriteString("nil],\n");
					result = buffer$1[0].String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$7 = fmt.Sprintf("    [NSArray arrayWithObjects:@\"%s\", @\"%s\", nil],\n", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					result = _r$7;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_5 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((field$1.$length === 2))) { */ case 24:
					_r$8 = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					os.Exit(1);
				/* } */ case 25:
				_r$9 = fmt.Sprintf("    [NSArray arrayWithObjects:@\"%s\", @\"%s\", nil],\n", new sliceType$2([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				result = _r$9;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._5 = _5; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	ObjCGenerator.methods = [{prop: "Proxy", name: "Proxy", pkg: "", typ: $funcType([], [$String], false)}, {prop: "CommonInitialize", name: "CommonInitialize", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ModifyRequest", name: "ModifyRequest", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AppendCommonInitialize", name: "AppendCommonInitialize", pkg: "", typ: $funcType([$String, $Bool], [], false)}, {prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	ObjCGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "Url", name: "Url", pkg: "", typ: $String, tag: ""}, {prop: "IsHttps", name: "IsHttps", pkg: "", typ: $Bool, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/objc", typ: sliceType$1, tag: ""}, {prop: "commonInitialize", name: "commonInitialize", pkg: "github.com/shibukawa/curl_as_dsl/client/objc", typ: sliceType, tag: ""}, {prop: "Modules", name: "Modules", pkg: "", typ: mapType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/php"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, url, os, strings, PHPGenerator, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, arrayType$1, ptrType$1, ptrType$2, NewPHPGenerator, ProcessCurlCommand, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	PHPGenerator = $pkg.PHPGenerator = $newType(0, $kindStruct, "php.PHPGenerator", "PHPGenerator", "github.com/shibukawa/curl_as_dsl/client/php", function(Options_, HasBody_, Body_, PrepareBody_, queries_, extraUrl_, AdditionalDeclaration_, specialHeaders_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.HasBody = false;
			this.Body = "";
			this.PrepareBody = "";
			this.queries = sliceType$1.nil;
			this.extraUrl = "";
			this.AdditionalDeclaration = "";
			this.specialHeaders = sliceType.nil;
			return;
		}
		this.Options = Options_;
		this.HasBody = HasBody_;
		this.Body = Body_;
		this.PrepareBody = PrepareBody_;
		this.queries = queries_;
		this.extraUrl = extraUrl_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.specialHeaders = specialHeaders_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType(sliceType);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(common.DataOptions);
	ptrType$2 = $ptrType(PHPGenerator);
	NewPHPGenerator = function(options) {
		var $ptr, options, result;
		result = new PHPGenerator.ptr(options, false, "", "", sliceType$1.nil, "", "", sliceType.nil);
		return result;
	};
	$pkg.NewPHPGenerator = NewPHPGenerator;
	PHPGenerator.ptr.prototype.Url = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PHPGenerator);
		_r = fmt.Sprintf("\"%s\"%s", new sliceType$2([new $String(self.Options.Url), new $String(self.extraUrl)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.Url }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.Url = function() { return this.$val.Url(); };
	PHPGenerator.ptr.prototype.HasHeader = function() {
		var $ptr, self;
		self = $clone(this, PHPGenerator);
		return !((self.Options.Header.$length === 0)) || !((self.specialHeaders.$length === 0));
	};
	PHPGenerator.prototype.HasHeader = function() { return this.$val.HasHeader(); };
	PHPGenerator.ptr.prototype.Header = function() {
		var $ptr, self;
		self = $clone(this, PHPGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		return ",\n    \"header\" => $headers";
	};
	PHPGenerator.prototype.Header = function() { return this.$val.Header(); };
	PHPGenerator.ptr.prototype.PrepareHeader = function() {
		var $ptr, _i, _i$1, _i$2, _i$3, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _ref$3, buffer, header, header$1, header$2, header$3, i, i$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; buffer = $f.buffer; header = $f.header; header$1 = $f.header$1; header$2 = $f.header$2; header$3 = $f.header$3; i = $f.i; i$1 = $f.i$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, PHPGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer[0].WriteString("\n$headers = ");
		/* */ if ((self.Options.Header.$length + self.specialHeaders.$length >> 0) === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((self.Options.Header.$length + self.specialHeaders.$length >> 0) === 1) { */ case 1:
			_ref = self.Options.Header;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r = fmt.Fprintf(buffer[0], "\"%s\";\n", new sliceType$2([new $String(header)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
				_i++;
			/* } */ $s = 4; continue; case 5:
			_ref$1 = self.specialHeaders;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				header$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				buffer[0].WriteString(header$1);
				buffer[0].WriteString(";\n");
				_i$1++;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			buffer[0].WriteString("\n");
			_ref$2 = self.Options.Header;
			_i$2 = 0;
			/* while (true) { */ case 7:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 8; continue; }
				i = _i$2;
				header$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$1 = fmt.Fprintf(buffer[0], "  \"%s\\n\"", new sliceType$2([new $String(header$2)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				if (!((i === (self.Options.Header.$length - 1 >> 0))) || self.specialHeaders.$length > 0) {
					buffer[0].WriteString(" .\n");
				} else {
					buffer[0].WriteString(";\n");
				}
				_i$2++;
			/* } */ $s = 7; continue; case 8:
			_ref$3 = self.specialHeaders;
			_i$3 = 0;
			/* while (true) { */ case 10:
				/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 11; continue; }
				i$1 = _i$3;
				header$3 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				_r$2 = fmt.Fprintf(buffer[0], "  %s", new sliceType$2([new $String(header$3)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				if (i$1 === (self.specialHeaders.$length - 1 >> 0)) {
					buffer[0].WriteString(";\n");
				} else {
					buffer[0].WriteString(".\n");
				}
				_i$3++;
			/* } */ $s = 10; continue; case 11:
		/* } */ case 3:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.PrepareHeader }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.buffer = buffer; $f.header = header; $f.header$1 = header$1; $f.header$2 = header$2; $f.header$3 = header$3; $f.i = i; $f.i$1 = i$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.PrepareHeader = function() { return this.$val.PrepareHeader(); };
	PHPGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PHPGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.Method = function() { return this.$val.Method(); };
	PHPGenerator.ptr.prototype.Content = function() {
		var $ptr, buffer, self;
		self = $clone(this, PHPGenerator);
		if (!(self.Body === "")) {
			buffer = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			buffer.WriteString(",\n    \"content\" => ");
			buffer.WriteString(self.Body);
			return buffer.String();
		}
		return "";
	};
	PHPGenerator.prototype.Content = function() { return this.$val.Content(); };
	PHPGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.AdditionalDeclaration = "\n$BOUNDARY = \"---------------------\".substr(md5(rand(0,32000)), 0, 10);\n\nfunction encode_multipart_formdata($fields, $files, $boundary) {\n  $result = \"\";\n  $finfo = finfo_open(FILEINFO_MIME_TYPE);\n  foreach($fields as $field) {\n    $result .= \"--\" . $boundary . \"\\r\\n\";\n    $result .= \"Content-Disposition: form-data; name=\\\"\" . $field[\"key\"] . \"\\\"\\r\\n\";\n    if ($field[\"content_type\"] != '') {\n      $result .= \"Content-Type: \" . $field[\"content_type\"] . \"\\r\\n\";\n    }\n    $result .= \"\\r\\n\" . $field[\"value\"] . \"\\r\\n\";\n  }\n  foreach($files as $file) {\n    $result .= \"--\" . $boundary . \"\\r\\n\";\n    $result .= \"Content-Disposition: form-data; name=\\\"\" . $file[\"key\"] . \"\\\"; filename=\\\"\" . $file[\"filename\"] . \"\\\"\\r\\n\";\n    if ($file[\"content_type\"] != '') {\n      $result .= \"Content-Type: \" . $file[\"content_type\"] . \"\\r\\n\";\n    } else {\n      $result .= \"Content-Type: \" . finfo_file($finfo, $file[\"source_file\"]) . \"\\r\\n\";\n    }\n    $result .= \"\\r\\n\" . file_get_contents($file[\"source_file\"]) . \"\\r\\n\";\n  }\n  $result .= $boundary . \"--\\r\\n\";\n  return $result;\n}\n";
		$r = self.Options.InsertContentTypeHeader("multipart/form-data; boundary={$BOUNDARY}"); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.AddMultiPartCode }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	PHPGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, _arg, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _key, _keys, _keys$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _tuple, buffer, count, data, data$1, entries, i, key, key$1, self, singleData, values, values$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _key = $f._key; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; buffer = $f.buffer; count = $f.count; data = $f.data; data$1 = $f.data$1; entries = $f.entries; i = $f.i; key = $f.key; key$1 = $f.key$1; self = $f.self; singleData = $f.singleData; values = $f.values; values$1 = $f.values$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			entries = {};
			_ref = self.Options.ProcessedData;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				data$1 = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				_tuple = url.ParseQuery(data$1.Value);
				singleData = _tuple[0];
				_ref$1 = singleData;
				_i$1 = 0;
				_keys = $keys(_ref$1);
				while (true) {
					if (!(_i$1 < _keys.length)) { break; }
					_entry = _ref$1[_keys[_i$1]];
					if (_entry === undefined) {
						_i$1++;
						continue;
					}
					key = _entry.k;
					values = _entry.v;
					_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
					_i$1++;
				}
				_i++;
			}
			_r = fmt.Fprintf(buffer[0], "\n%s = http_build_query([", new sliceType$2([new $String("$query")])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			count = 0;
			_ref$2 = entries;
			_i$2 = 0;
			_keys$1 = $keys(_ref$2);
			/* while (true) { */ case 5:
				/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 6; continue; }
				_entry$2 = _ref$2[_keys$1[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					/* continue; */ $s = 5; continue;
				}
				key$1 = _entry$2.k;
				values$1 = _entry$2.v;
				if (!((count === 0))) {
					buffer[0].WriteString(",");
				}
				_r$1 = fmt.Sprintf("\n  \"%s\" => \"%s\"", new sliceType$2([new $String(key$1), new $String((0 >= values$1.$length ? $throwRuntimeError("index out of range") : values$1.$array[values$1.$offset + 0]))])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = buffer[0].WriteString(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				count = count + (1) >> 0;
				_i$2++;
			/* } */ $s = 5; continue; case 6:
			buffer[0].WriteString("\n], PHP_QUERY_RFC1738);");
			self.extraUrl = " . \"?\" . $query";
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if (self.Options.ProcessedData.$length === 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (self.Options.ProcessedData.$length === 1) { */ case 9:
				_r$3 = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg = new $String(_r$3);
				_r$4 = fmt.Sprintf(" . \"?\" . %s", new sliceType$2([_arg])); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				self.extraUrl = _r$4;
				$s = 11; continue;
			/* } else { */ case 10:
				_ref$3 = self.Options.ProcessedData;
				_i$3 = 0;
				/* while (true) { */ case 14:
					/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 15; continue; }
					i = _i$3;
					data[0] = $clone(((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]), common.DataOption);
					if (i === 0) {
						buffer[0].WriteString("\n$query = \n  ");
					}
					_r$5 = StringForData(self, data[0]); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = buffer[0].WriteString(_r$5); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$6;
					if (!((i === (self.Options.ProcessedData.$length - 1 >> 0)))) {
						buffer[0].WriteString(".\n  ");
					}
					_i$3++;
				/* } */ $s = 14; continue; case 15:
				buffer[0].WriteString(";\n");
				self.extraUrl = " . \"?\" . $query";
			/* } */ case 11:
		/* } */ case 3:
		self.PrepareBody = buffer[0].String();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f._arg = _arg; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._key = _key; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f.buffer = buffer; $f.count = count; $f.data = data; $f.data$1 = data$1; $f.entries = entries; $f.i = i; $f.key = key; $f.key$1 = key$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.values$1 = values$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	PHPGenerator.ptr.prototype.SetDataForBody = function(varName) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _ref, buffer, data, i, self, varName, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; buffer = $f.buffer; data = $f.data; i = $f.i; self = $f.self; varName = $f.varName; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			self.Body = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				i = _i;
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				/* */ if (i === 0) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (i === 0) { */ case 7:
					_r$1 = fmt.Fprintf(buffer[0], "\n%s = \n  ", new sliceType$2([new $String(varName)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$s = 9; continue;
				/* } else { */ case 8:
					buffer[0].WriteString(" . \"&\" .\n  ");
				/* } */ case 9:
				_r$2 = StringForData(self, data[0]); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = buffer[0].WriteString(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_i++;
			/* } */ $s = 5; continue; case 6:
			buffer[0].WriteString(";\n");
			self.Body = varName;
		/* } */ case 3:
		self.PrepareBody = buffer[0].String();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.buffer = buffer; $f.data = data; $f.i = i; $f.self = self; $f.varName = varName; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.SetDataForBody = function(varName) { return this.$val.SetDataForBody(varName); };
	PHPGenerator.ptr.prototype.SetDataForForm = function(varName) {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _keys, _keys$1, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _tuple, buffer, count, data, entries, key, key$1, self, singleData, values, values$1, varName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; buffer = $f.buffer; count = $f.count; data = $f.data; entries = $f.entries; key = $f.key; key$1 = $f.key$1; self = $f.self; singleData = $f.singleData; values = $f.values; values$1 = $f.values$1; varName = $f.varName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		entries = {};
		_ref = self.Options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				key = _entry.k;
				values = _entry.v;
				_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
				_i$1++;
			}
			_i++;
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r = fmt.Fprintf(buffer[0], "\n%s = http_build_query([", new sliceType$2([new $String(varName)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		count = 0;
		_ref$2 = entries;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 2:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 3; continue; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 2; continue;
			}
			key$1 = _entry$2.k;
			values$1 = _entry$2.v;
			if (!((count === 0))) {
				buffer[0].WriteString(",");
			}
			_r$1 = fmt.Sprintf("\n  \"%s\" => \"%s\"", new sliceType$2([new $String(key$1), new $String((0 >= values$1.$length ? $throwRuntimeError("index out of range") : values$1.$array[values$1.$offset + 0]))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = buffer[0].WriteString(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			count = count + (1) >> 0;
			_i$2++;
		/* } */ $s = 2; continue; case 3:
		buffer[0].WriteString("\n], PHP_QUERY_RFC1738);");
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.Body = "values";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.buffer = buffer; $f.count = count; $f.data = data; $f.entries = entries; $f.key = key; $f.key$1 = key$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.values$1 = values$1; $f.varName = varName; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.SetDataForForm = function(varName) { return this.$val.SetDataForForm(varName); };
	PHPGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		$r = self.AddMultiPartCode(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fields = sliceType.nil;
		files = sliceType.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (data[0].SendAsFormFile()) { */ case 4:
				_r = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = FormString(self, data[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		buffer = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		if (fields.$length > 0) {
			buffer.WriteString("\n$fields = [\n");
			_ref$1 = fields;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				buffer.WriteString(value);
				_i$1++;
			}
			buffer.WriteString("];\n");
		}
		if (files.$length > 0) {
			if (fields.$length > 0) {
				self.Body = "encode_multipart_formdata($fields, $files, $BOUNDARY)";
			} else {
				self.Body = "encode_multipart_formdata(array(), $files, $BOUNDARY)";
			}
			buffer.WriteString("\n$files = [\n");
			_ref$2 = files;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				buffer.WriteString(value$1);
				_i$2++;
			}
			buffer.WriteString("];\n");
		} else {
			self.Body = "encode_multipart_formdata($fields, array(), $BOUNDARY)";
		}
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PHPGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	PHPGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _r, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		generator = NewPHPGenerator(options);
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 1; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 1:
			/* */ if (options.Get) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (options.Get) { */ case 4:
				$r = generator.SetDataForUrl(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody("$content"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 2:
			$r = generator.SetFormForBody(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (!(generator.Options.User === "")) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!(generator.Options.User === "")) { */ case 11:
			_r = fmt.Sprintf("\"Authorization: Basic \" . base64_encode('%s') . \"\\n\"", new sliceType$2([new $String(generator.Options.User)])); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, _r);
		/* } */ case 12:
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._r = _r; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewStringForData = function(generator, data) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"\", file_get_contents(\"%s\"))", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = _r;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("file_get_contents(\"%s\")", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("urlencode(file_get_contents('%s'))", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("urlencode('%s')", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), '', file_get_contents('%s'))", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = _r;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("file_get_contents(\"%s\")", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("urlencode(file_get_contents(\"%s\"))", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("urlencode(\"%s\")", new sliceType$2([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _3, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_3 = data.Type;
			/* */ if (_3 === 3) { $s = 2; continue; }
			/* */ if (_3 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_3 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$1 = fmt.Fprintf(buffer[0], "  array(\"key\"=>\"%s\", \"source_file\"=>\"%s\", ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					contentType = "";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_r$2 = fmt.Fprintf(buffer[0], "\"filename\"=>\"%s\", ", new sliceType$2([new $String(sentFileName)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					/* */ if (!(contentType === "")) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!(contentType === "")) { */ case 14:
						_r$3 = fmt.Fprintf(buffer[0], "\"content_type\"=>\"%s\"),\n", new sliceType$2([new $String(contentType)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 16; continue;
					/* } else { */ case 15:
						buffer[0].WriteString("\"content_type\"=>\"\"),\n");
					/* } */ case 16:
					result = buffer[0].String();
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$3.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$4 = fmt.Fprintf(buffer$1[0], "  array(\"key\"=>\"%s\", \"value\"=>file_get_contents(\"%s\"), \"content_type\"=>", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					/* */ if (contentType$1 === "") { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (contentType$1 === "") { */ case 19:
						buffer$1[0].WriteString("\"\"),\n");
						$s = 21; continue;
					/* } else { */ case 20:
						_r$5 = fmt.Fprintf(buffer$1[0], "\"%s\"),\n", new sliceType$2([new $String(contentType$1)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
					/* } */ case 21:
					result = buffer$1[0].String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$6 = fmt.Sprintf("  array(\"key\"=>\"%s\", \"value\"=>\"%s\", \"content_type\"=>\"\"),\n", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					result = _r$6;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_3 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((field$1.$length === 2))) { */ case 24:
					_r$7 = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					os.Exit(1);
				/* } */ case 25:
				_r$8 = fmt.Sprintf("  array(\"key\"=>\"%s\", \"value\"=>\"%s\", \"content_type\"=>\"\"),\n", new sliceType$2([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				result = _r$8;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	PHPGenerator.methods = [{prop: "Url", name: "Url", pkg: "", typ: $funcType([], [$String], false)}, {prop: "HasHeader", name: "HasHeader", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareHeader", name: "PrepareHeader", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Content", name: "Content", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	PHPGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "queries", name: "queries", pkg: "github.com/shibukawa/curl_as_dsl/client/php", typ: sliceType$1, tag: ""}, {prop: "extraUrl", name: "extraUrl", pkg: "github.com/shibukawa/curl_as_dsl/client/php", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/php", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/python"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, log, url, os, strings, PythonGenerator, ptrType, sliceType, sliceType$1, sliceType$2, arrayType, arrayType$1, ptrType$1, ptrType$2, mapType, NewPythonGenerator, ProcessCurlCommand, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	log = $packages["log"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	PythonGenerator = $pkg.PythonGenerator = $newType(0, $kindStruct, "python.PythonGenerator", "PythonGenerator", "github.com/shibukawa/curl_as_dsl/client/python", function(Options_, Modules_, HasBody_, Body_, PrepareBody_, extraUrl_, AdditionalDeclaration_, specialHeaders_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.Modules = false;
			this.HasBody = false;
			this.Body = "";
			this.PrepareBody = "";
			this.extraUrl = "";
			this.AdditionalDeclaration = "";
			this.specialHeaders = sliceType.nil;
			return;
		}
		this.Options = Options_;
		this.Modules = Modules_;
		this.HasBody = HasBody_;
		this.Body = Body_;
		this.PrepareBody = PrepareBody_;
		this.extraUrl = extraUrl_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.specialHeaders = specialHeaders_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(common.DataOptions);
	ptrType$2 = $ptrType(PythonGenerator);
	mapType = $mapType($String, $Bool);
	NewPythonGenerator = function(options) {
		var $ptr, _key, options, result;
		result = new PythonGenerator.ptr(options, false, false, "", "", "", "", sliceType.nil);
		result.Modules = {};
		_key = "http.client"; (result.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		return result;
	};
	$pkg.NewPythonGenerator = NewPythonGenerator;
	PythonGenerator.ptr.prototype.ConnectionClass = function() {
		var $ptr, self, targetUrl;
		self = $clone(this, PythonGenerator);
		targetUrl = "";
		if (!(self.Options.Proxy === "")) {
			targetUrl = self.Options.Proxy;
		} else {
			targetUrl = self.Options.Url;
		}
		if (strings.HasPrefix(targetUrl, "https")) {
			return "HTTPSConnection";
		}
		return "HTTPConnection";
	};
	PythonGenerator.prototype.ConnectionClass = function() { return this.$val.ConnectionClass(); };
	PythonGenerator.ptr.prototype.Host = function() {
		var $ptr, _r, _tuple, err, self, targetUrl, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; self = $f.self; targetUrl = $f.targetUrl; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PythonGenerator);
		targetUrl = "";
		if (!(self.Options.Proxy === "")) {
			targetUrl = self.Options.Proxy;
		} else {
			targetUrl = self.Options.Url;
		}
		_r = url.Parse(targetUrl); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$1([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		return u.Host;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.Host }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.self = self; $f.targetUrl = targetUrl; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.Host = function() { return this.$val.Host(); };
	PythonGenerator.ptr.prototype.Proxy = function() {
		var $ptr, _r, _r$1, _tuple, err, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PythonGenerator);
		/* */ if (!(self.Options.Proxy === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self.Options.Proxy === "")) { */ case 1:
			_r = url.Parse(self.Options.Url); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			u = _tuple[0];
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				$r = log.Fatal(new sliceType$1([err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$1 = fmt.Sprintf("conn.set_tunnel(\"%s\")\n    ", new sliceType$1([new $String(u.Host)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$1;
		/* } */ case 2:
		return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.Proxy }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.Proxy = function() { return this.$val.Proxy(); };
	PythonGenerator.ptr.prototype.HasHeader = function() {
		var $ptr, self;
		self = $clone(this, PythonGenerator);
		return !((self.Options.Header.$length === 0)) || !((self.specialHeaders.$length === 0));
	};
	PythonGenerator.prototype.HasHeader = function() { return this.$val.HasHeader(); };
	PythonGenerator.ptr.prototype.Header = function() {
		var $ptr, self;
		self = $clone(this, PythonGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		return "headers";
	};
	PythonGenerator.prototype.Header = function() { return this.$val.Header(); };
	PythonGenerator.ptr.prototype.PrepareHeader = function() {
		var $ptr, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, buffer, header, header$1, headers, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; header = $f.header; header$1 = $f.header$1; headers = $f.headers; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, PythonGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer[0].WriteString("headers = {\n");
		_ref = self.Options.Header;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			header = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			headers = strings.Split(header, ":");
			_arg = buffer[0];
			_r = strings.TrimSpace((0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r);
			_r$1 = strings.TrimSpace((1 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$1);
			_r$2 = fmt.Fprintf(_arg, "        \"%s\": \"%s\",\n", new sliceType$1([_arg$1, _arg$2])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = self.specialHeaders;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			header$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			buffer[0].WriteString(header$1);
			_i$1++;
		}
		buffer[0].WriteString("    }\n    ");
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.PrepareHeader }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.header = header; $f.header$1 = header$1; $f.headers = headers; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.PrepareHeader = function() { return this.$val.PrepareHeader(); };
	PythonGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PythonGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.Method = function() { return this.$val.Method(); };
	PythonGenerator.ptr.prototype.Path = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, err, path, self, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; err = $f.err; path = $f.path; self = $f.self; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, PythonGenerator);
		_r = url.Parse(self.Options.Url); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		u = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Fatal(new sliceType$1([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		path = u.Path;
		if (u.Path === "") {
			path = "/";
		}
		/* */ if (!(self.extraUrl === "")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(self.extraUrl === "")) { */ case 5:
			_r$1 = fmt.Sprintf("\"%s?\" + %s", new sliceType$1([new $String(path), new $String(self.extraUrl)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 9; case 9:
			return _r$1;
		/* } else { */ case 6:
			_r$2 = fmt.Sprintf("\"%s\"", new sliceType$1([new $String(path)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r$2;
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.Path }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.err = err; $f.path = path; $f.self = self; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.Path = function() { return this.$val.Path(); };
	PythonGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, _r, boundary, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; boundary = $f.boundary; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.AdditionalDeclaration = "\nBOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'\n\ndef encode_multipart_formdata(fields, files):\n    L = []\n    for key, value, contenttype in fields:\n        L.append('--' + BOUNDARY)\n        L.append('Content-Disposition: form-data; name=\"%s\"' % key)\n        if contenttype:\n            L.append('Content-Type: %s' % contenttype)\n        L.append('')\n        L.append(value)\n    for key, sourcefile, filename, contenttype in files:\n        L.append('--' + BOUNDARY)\n        L.append('Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"' % (key, filename))\n        L.append('Content-Type: %s' % contenttype)\n        L.append('')\n        L.append(open(sourcefile).read())\n        L.append('')\n    L.append('--' + BOUNDARY + '--')\n    return '\\r\\n'.join(L)\n";
		boundary = "----------ThIs_Is_tHe_bouNdaRY_$";
		_r = fmt.Sprintf("multipart/form-data; boundary=%s", new sliceType$1([new $String(boundary)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = self.Options.InsertContentTypeHeader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.AddMultiPartCode }; } $f.$ptr = $ptr; $f._r = _r; $f.boundary = boundary; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	PythonGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			$r = self.SetDataForForm(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = self.Body;
			self.Body = "";
			self.HasBody = false;
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.SetDataForBody(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = self.Body;
			self.Body = "";
			self.HasBody = false;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	PythonGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, body, buffer, data, i, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; body = $f.body; buffer = $f.buffer; data = $f.data; i = $f.i; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			body = "";
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			body = _tuple[0];
			self.Body = _tuple[1];
			buffer.WriteString(body);
			$s = 3; continue;
		/* } else { */ case 2:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				i = _i;
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				if (i === 0) {
					buffer.WriteString("body = [\n");
				}
				_r$1 = StringForData(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = buffer.WriteString(_r$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 5; continue; case 6:
			buffer.WriteString("    ]\n    ");
			self.Body = "'&'.join(body)";
		/* } */ case 3:
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.body = body; $f.buffer = buffer; $f.data = data; $f.i = i; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	PythonGenerator.ptr.prototype.SetDataForForm = function() {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _key$1, _keys, _keys$1, _r, _ref, _ref$1, _ref$2, _tuple, buffer, count, data, entries, key, key$1, self, singleData, values, values$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; buffer = $f.buffer; count = $f.count; data = $f.data; entries = $f.entries; key = $f.key; key$1 = $f.key$1; self = $f.self; singleData = $f.singleData; values = $f.values; values$1 = $f.values$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		entries = {};
		_ref = self.Options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				key = _entry.k;
				values = _entry.v;
				_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
				_i$1++;
			}
			_i++;
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		count = 0;
		_ref$2 = entries;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 1:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 2; continue; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 1; continue;
			}
			key$1 = _entry$2.k;
			values$1 = _entry$2.v;
			if (count === 0) {
				buffer[0].WriteString("values = urllib.parse.urlencode({\n");
			} else {
				buffer[0].WriteString(", \"");
			}
			_r = fmt.Fprintf(buffer[0], "        \"%s\": \"%s\",\n", new sliceType$1([new $String(key$1), new $String((0 >= values$1.$length ? $throwRuntimeError("index out of range") : values$1.$array[values$1.$offset + 0]))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			count = count + (1) >> 0;
			_i$2++;
		/* } */ $s = 1; continue; case 2:
		buffer[0].WriteString("    })\n    ");
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.Body = "values";
		_key$1 = "urllib.parse"; (self.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: true };
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.buffer = buffer; $f.count = count; $f.data = data; $f.entries = entries; $f.key = key; $f.key$1 = key$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.values$1 = values$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.SetDataForForm = function() { return this.$val.SetDataForForm(); };
	PythonGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		$r = self.AddMultiPartCode(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fields = sliceType.nil;
		files = sliceType.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (data[0].SendAsFormFile()) { */ case 4:
				_r = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = FormString(self, data[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		buffer = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		if (fields.$length > 0) {
			buffer.WriteString("fields = [\n");
			_ref$1 = fields;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				buffer.WriteString(value);
				_i$1++;
			}
			buffer.WriteString("    ]\n    ");
		}
		if (files.$length > 0) {
			if (fields.$length > 0) {
				buffer.WriteString("    ");
				self.Body = "encode_multipart_formdata(fields, files)";
			} else {
				self.Body = "encode_multipart_formdata([], files)";
			}
			buffer.WriteString("files = [\n");
			_ref$2 = files;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				buffer.WriteString(value$1);
				_i$2++;
			}
			buffer.WriteString("    ]\n    ");
		} else {
			self.Body = "encode_multipart_formdata(fields, [])";
		}
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: PythonGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	PythonGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _key, _r, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _key = $f._key; _r = $f._r; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		generator = NewPythonGenerator(options);
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 1; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 1:
			/* */ if (options.Get) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (options.Get) { */ case 4:
				$r = generator.SetDataForUrl(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$s = 3; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 2:
			$r = generator.SetFormForBody(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (!(generator.Options.User === "")) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!(generator.Options.User === "")) { */ case 11:
			_r = fmt.Sprintf("        'Authorization': 'Basic %%s' %% base64.b64encode(b'%s').decode('ascii'),\n", new sliceType$1([new $String(generator.Options.User)])); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, _r);
			_key = "base64"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		/* } */ case 12:
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._key = _key; $f._r = _r; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewStringForData = function(generator, data) {
		var $ptr, _1, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, name, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; name = $f.name; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
		name = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					result = "";
					_r = fmt.Sprintf("open(r'%s').read().replace('\\n', '')", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					name = _r;
					$s = 9; continue;
				/* } else { */ case 8:
					result = "";
					_r$1 = fmt.Sprintf("r'%s'", new sliceType$1([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					name = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					result = "";
					_r$2 = fmt.Sprintf("open(r'%s').read()", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					name = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					result = "";
					_r$3 = fmt.Sprintf("'%s'", new sliceType$1([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					name = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					result = "";
					_r$4 = fmt.Sprintf("urllib.parse.quote_plus(open(r'%s').read())", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					name = _r$4;
					$s = 19; continue;
				/* } else { */ case 18:
					result = "";
					_r$5 = fmt.Sprintf("urllib.parse.quote_plus(r'%s')", new sliceType$1([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					name = _r$5;
				/* } */ case 19:
				_key = "urllib.parse"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$1([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, name];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.name = name; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _2, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("        open('%s').read().replace('\\n', ''),\n", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = _r;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("        r'%s',\n", new sliceType$1([new $String(strings.Replace(data.Value, "\n", "", -1))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("        open('%s').read(),\n", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("        r'%s',\n", new sliceType$1([new $String(data.Value)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("        urllib.parse.quote_plus(open(r'%s').read()),\n", new sliceType$1([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("        urllib.parse.quote_plus(r'%s'),\n", new sliceType$1([new $String(data.Value)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				_key = "urllib.parse"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$1([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _3, _i, _i$1, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_3 = data.Type;
			/* */ if (_3 === 3) { $s = 2; continue; }
			/* */ if (_3 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_3 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$1([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer[0] = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$1 = fmt.Fprintf(buffer[0], "        (r'%s', r'%s', ", new sliceType$1([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					contentType = "";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_r$2 = fmt.Fprintf(buffer[0], "r'%s', ", new sliceType$1([new $String(sentFileName)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					/* */ if (!(contentType === "")) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!(contentType === "")) { */ case 14:
						_r$3 = fmt.Fprintf(buffer[0], "r'%s'", new sliceType$1([new $String(contentType)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 16; continue;
					/* } else { */ case 15:
						_r$4 = fmt.Fprintf(buffer[0], "mimetypes.guess_type(r'%s')[0] or 'application/octet-stream'", new sliceType$1([new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						_key = "mimetypes"; (generator.Modules || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
					/* } */ case 16:
					buffer[0].WriteString("),\n");
					result = buffer[0].String();
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$5 = fmt.Fprintf(buffer$1[0], "        (r'%s', open(r'%s').read(), ", new sliceType$1([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]))])); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					/* */ if (contentType$1 === "") { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (contentType$1 === "") { */ case 20:
						buffer$1[0].WriteString("None");
						$s = 22; continue;
					/* } else { */ case 21:
						_r$6 = fmt.Fprintf(buffer$1[0], "r'%s'", new sliceType$1([new $String(contentType$1)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 22:
					buffer$1[0].WriteString("),\n");
					result = buffer$1[0].String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$7 = fmt.Sprintf("        (\"%s\", \"%s\", None),\n", new sliceType$1([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					result = _r$7;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_3 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (!((field$1.$length === 2))) { */ case 25:
					_r$8 = fmt.Fprintln(os.Stderr, new sliceType$1([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					os.Exit(1);
				/* } */ case 26:
				_r$9 = fmt.Sprintf("        (\"%s\", \"%s\", None),\n", new sliceType$1([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1]))])); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				result = _r$9;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	PythonGenerator.methods = [{prop: "ConnectionClass", name: "ConnectionClass", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Host", name: "Host", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Proxy", name: "Proxy", pkg: "", typ: $funcType([], [$String], false)}, {prop: "HasHeader", name: "HasHeader", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareHeader", name: "PrepareHeader", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Path", name: "Path", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	PythonGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "Modules", name: "Modules", pkg: "", typ: mapType, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "extraUrl", name: "extraUrl", pkg: "github.com/shibukawa/curl_as_dsl/client/python", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/python", typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/vimscript"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, log, url, os, strings, VimScriptGenerator, ptrType, sliceType, arrayType, arrayType$1, sliceType$1, sliceType$2, ptrType$1, ptrType$2, escapeDQ, NewVimScriptGenerator, ProcessCurlCommand, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	log = $packages["log"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	VimScriptGenerator = $pkg.VimScriptGenerator = $newType(0, $kindStruct, "vimscript.VimScriptGenerator", "VimScriptGenerator", "github.com/shibukawa/curl_as_dsl/client/vimscript", function(Options_, HasBody_, Body_, PrepareBody_, FinalizeBodyBuffer_, AdditionalDeclaration_, specialHeaders_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.HasBody = false;
			this.Body = "";
			this.PrepareBody = "";
			this.FinalizeBodyBuffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.AdditionalDeclaration = "";
			this.specialHeaders = sliceType$1.nil;
			return;
		}
		this.Options = Options_;
		this.HasBody = HasBody_;
		this.Body = Body_;
		this.PrepareBody = PrepareBody_;
		this.FinalizeBodyBuffer = FinalizeBodyBuffer_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.specialHeaders = specialHeaders_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(common.DataOptions);
	ptrType$2 = $ptrType(VimScriptGenerator);
	escapeDQ = function(src) {
		var $ptr, src;
		return strings.Replace(strings.Replace(src, "\"", "\\\"", -1), "\\", "\\\\", -1);
	};
	NewVimScriptGenerator = function(options) {
		var $ptr, options;
		return new VimScriptGenerator.ptr(options, false, "", "", new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), "", sliceType$1.nil);
	};
	$pkg.NewVimScriptGenerator = NewVimScriptGenerator;
	VimScriptGenerator.ptr.prototype.Url = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, VimScriptGenerator);
		_r = fmt.Sprintf("'%s'", new sliceType$2([new $String(self.Options.Url)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.Url }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.Url = function() { return this.$val.Url(); };
	VimScriptGenerator.ptr.prototype.HasHeader = function() {
		var $ptr, self;
		self = $clone(this, VimScriptGenerator);
		return !((self.Options.Header.$length === 0)) || !((self.specialHeaders.$length === 0));
	};
	VimScriptGenerator.prototype.HasHeader = function() { return this.$val.HasHeader(); };
	VimScriptGenerator.ptr.prototype.BodyContent = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, VimScriptGenerator);
		if (self.Body === "") {
			return ", ''";
		}
		_r = fmt.Sprintf(", %s", new sliceType$2([new $String(self.Body)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.BodyContent }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.BodyContent = function() { return this.$val.BodyContent(); };
	VimScriptGenerator.ptr.prototype.Header = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, VimScriptGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		_r = fmt.Sprintf(", s:headers", new sliceType$2([])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.Header }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.Header = function() { return this.$val.Header(); };
	VimScriptGenerator.ptr.prototype.PrepareHeader = function() {
		var $ptr, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, buffer, first, header, header$1, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; first = $f.first; header = $f.header; header$1 = $f.header$1; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, VimScriptGenerator);
		if ((self.Options.Header.$length === 0) && (self.specialHeaders.$length === 0)) {
			return "";
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer[0].WriteString("let s:headers = {\n  ");
		first = true;
		_r = self.Options.GroupedHeaders(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_ref = _r;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			header = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.HeaderGroup);
			if (first) {
				first = false;
			} else {
				buffer[0].WriteString(",\n  ");
			}
			_arg = buffer[0];
			_r$1 = strings.TrimSpace(header.Key); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$1);
			_r$2 = strings.TrimSpace((x = header.Values, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$2);
			_r$3 = fmt.Fprintf(_arg, "\\\"%s\": \"%s\"", new sliceType$2([_arg$1, _arg$2])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = self.specialHeaders;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			header$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (first) {
				first = false;
			} else {
				buffer[0].WriteString(",\n  ");
			}
			buffer[0].WriteString(header$1);
			_i$1++;
		}
		buffer[0].WriteString("\n  \\}\n");
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.PrepareHeader }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.first = first; $f.header = header; $f.header$1 = header$1; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.PrepareHeader = function() { return this.$val.PrepareHeader(); };
	VimScriptGenerator.ptr.prototype.FinalizeBody = function() {
		var $ptr, self;
		self = $clone(this, VimScriptGenerator);
		if (self.FinalizeBodyBuffer.Len() > 0) {
			return "\n" + self.FinalizeBodyBuffer.String();
		}
		return "";
	};
	VimScriptGenerator.prototype.FinalizeBody = function() { return this.$val.FinalizeBody(); };
	VimScriptGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, _r$1, method, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; method = $f.method; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, VimScriptGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = strings.ToLower(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		method = _r$1;
		/* */ if (!(method === "get") && !(method === "post")) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!(method === "get") && !(method === "post")) { */ case 3:
			$r = log.Fatal(new sliceType$2([new $String("VimScript only supports get, post")])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		return method;
		/* */ } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.method = method; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.Method = function() { return this.$val.Method(); };
	VimScriptGenerator.ptr.prototype.AddMultiPartCode = function() {
		var $ptr, _r, boundary, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; boundary = $f.boundary; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		self.AdditionalDeclaration = "let s:BOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'\n\nfunction! s:encode_multipart_formdata(fields, files)\n    let lines = []\n    for field in a:fields\n        call add(lines, '--'. s:BOUNDARY)\n        call add(lines, printf('Content-Disposition: form-data; name=\"%s\"', field.key))\n        if has_key(field, 'contenttype')\n            call add(lines, 'Content-Type: '. field.contenttype)\n        endif\n        call add(lines, '')\n        call add(lines, field.value)\n    endfor\n    for file in a:files\n        call add(lines, '--'. s:BOUNDARY)\n        call add(lines, printf('Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"', file.key, file.filename))\n        call add(lines, 'Content-Type: '. file.contenttype)\n        call add(lines, '')\n        call add(lines, join(readfile(file.sourcefile), \"\\n\"))\n    endfor\n    call add(lines, '--'. s:BOUNDARY. '--')\n    return join(lines, \"\\r\\n\")\nendfunction\n";
		boundary = "----------ThIs_Is_tHe_bouNdaRY_$";
		_r = fmt.Sprintf("multipart/form-data; boundary=%s", new sliceType$2([new $String(boundary)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = self.Options.InsertContentTypeHeader(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.AddMultiPartCode }; } $f.$ptr = $ptr; $f._r = _r; $f.boundary = boundary; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.AddMultiPartCode = function() { return this.$val.AddMultiPartCode(); };
	VimScriptGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, buffer, data, i, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buffer = $f.buffer; data = $f.data; i = $f.i; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			$r = self.SetDataForForm(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.FinalizeBodyBuffer.WriteString("unlet! s:body\n");
			$s = 4; continue;
		/* } else if (self.Options.ProcessedData.$length === 1) { */ case 2:
			_r = StringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			self.Body = _r;
			self.PrepareBody = buffer.String();
			$s = 4; continue;
		/* } else { */ case 3:
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				i = _i;
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				if (i === 0) {
					buffer.WriteString("let s:body = join([\n  \\");
				} else {
					buffer.WriteString(",\n  \\");
				}
				_r$1 = StringForData(self, data[0]); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = buffer.WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 7; continue; case 8:
			buffer.WriteString("\n  \\], \"&\")\n");
			self.Body = "s:body";
			self.FinalizeBodyBuffer.WriteString("unlet! s:body\n");
			self.PrepareBody = buffer.String();
		/* } */ case 4:
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buffer = buffer; $f.data = data; $f.i = i; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	VimScriptGenerator.ptr.prototype.SetDataForForm = function() {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _keys, _keys$1, _r, _ref, _ref$1, _ref$2, _tuple, buffer, count, data, entries, key, key$1, self, singleData, values, values$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; buffer = $f.buffer; count = $f.count; data = $f.data; entries = $f.entries; key = $f.key; key$1 = $f.key$1; self = $f.self; singleData = $f.singleData; values = $f.values; values$1 = $f.values$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = this;
		entries = {};
		_ref = self.Options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				key = _entry.k;
				values = _entry.v;
				_key = key; (entries || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $append((_entry$1 = entries[$String.keyFor(key)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil), (0 >= values.$length ? $throwRuntimeError("index out of range") : values.$array[values.$offset + 0])) };
				_i$1++;
			}
			_i++;
		}
		buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		count = 1;
		_ref$2 = entries;
		_i$2 = 0;
		_keys$1 = $keys(_ref$2);
		/* while (true) { */ case 1:
			/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 2; continue; }
			_entry$2 = _ref$2[_keys$1[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				/* continue; */ $s = 1; continue;
			}
			key$1 = _entry$2.k;
			values$1 = _entry$2.v;
			if (count === 1) {
				buffer[0].WriteString("let s:body = {");
			} else {
				buffer[0].WriteString(", ");
			}
			_r = fmt.Fprintf(buffer[0], "\"%s\": \"%s\"", new sliceType$2([new $String(key$1), new $String((0 >= values$1.$length ? $throwRuntimeError("index out of range") : values$1.$array[values$1.$offset + 0]))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			count = count + (1) >> 0;
			_i$2++;
		/* } */ $s = 1; continue; case 2:
		buffer[0].WriteString("}\n");
		self.PrepareBody = buffer[0].String();
		self.HasBody = true;
		self.Body = "s:body";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.buffer = buffer; $f.count = count; $f.data = data; $f.entries = entries; $f.key = key; $f.key$1 = key$1; $f.self = self; $f.singleData = singleData; $f.values = values; $f.values$1 = values$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.SetDataForForm = function() { return this.$val.SetDataForForm(); };
	VimScriptGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, data, fields, files, self, value, value$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; data = $f.data; fields = $f.fields; files = $f.files; self = $f.self; value = $f.value; value$1 = $f.value$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		$r = self.AddMultiPartCode(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fields = sliceType$1.nil;
		files = sliceType$1.nil;
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			/* */ if (data[0].SendAsFormFile()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (data[0].SendAsFormFile()) { */ case 4:
				_r = FormString(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				files = $append(files, _r);
				$s = 6; continue;
			/* } else { */ case 5:
				_r$1 = FormString(self, data[0]); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				fields = $append(fields, _r$1);
			/* } */ case 6:
			_i++;
		/* } */ $s = 2; continue; case 3:
		buffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		if (fields.$length > 0) {
			buffer.WriteString("\nlet s:fields = [\n");
			_ref$1 = fields;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				buffer.WriteString(value);
				_i$1++;
			}
			buffer.WriteString("  \\]\n");
			self.FinalizeBodyBuffer.WriteString("unlet! s:fields\n");
		}
		if (files.$length > 0) {
			if (fields.$length > 0) {
				self.Body = "s:encode_multipart_formdata(s:fields, s:files)";
			} else {
				self.Body = "s:encode_multipart_formdata([], s:files)";
			}
			buffer.WriteString("\nlet s:files = [\n");
			_ref$2 = files;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				value$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				buffer.WriteString(value$1);
				_i$2++;
			}
			buffer.WriteString("  \\]\n");
			self.FinalizeBodyBuffer.WriteString("unlet! s:files\n");
		} else {
			self.Body = "s:encode_multipart_formdata(s:fields, [])";
		}
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: VimScriptGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.data = data; $f.fields = fields; $f.files = files; $f.self = self; $f.value = value; $f.value$1 = value$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	VimScriptGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _r, generator, options, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; generator = $f.generator; options = $f.options; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		generator = NewVimScriptGenerator(options);
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 1; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 1:
			$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = generator.SetDataForBody(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$1(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 2:
			$r = generator.SetFormForBody(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (!(generator.Options.User === "")) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(generator.Options.User === "")) { */ case 7:
			_r = fmt.Sprintf("\\'Authorization': 'Basic '. webapi#base64#b64encode('%s')", new sliceType$2([new $String(generator.Options.User)])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, _r);
		/* } */ case 8:
		return ["full", (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._r = _r; $f.generator = generator; $f.options = options; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	StringForData = function(generator, data) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
			_1 = data.Type;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ if (_1 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Sprintf("join(readfile('%s'), '')", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = _r;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(escapeDQ(strings.Replace(data.Value, "\n", "", -1)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_1 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Sprintf("join(readfile('%s'), \"\\n\")", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$2([new $String(escapeDQ(data.Value))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Sprintf("webapi#http#encodeURIComponent(join(readfile('%s'), \"\\n\"))", new sliceType$2([new $String(data.Value.substring(1))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					result = _r$4;
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("webapi#http#encodeURIComponent(\"%s\")", new sliceType$2([new $String(escapeDQ(data.Value))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$2([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _2, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, buffer, buffer$1, contentType, contentType$1, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, result, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; buffer$1 = $f.buffer$1; contentType = $f.contentType; contentType$1 = $f.contentType$1; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; result = $f.result; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer$1 = [buffer$1];
		result = "";
			_2 = data.Type;
			/* */ if (_2 === 3) { $s = 2; continue; }
			/* */ if (_2 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_2 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$1 = fmt.Fprintf(buffer[0], "  \\{'key': '%s', 'sourcefile': '%s', ", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					contentType = "";
					sentFileName = (0 >= fragments.$length ? $throwRuntimeError("index out of range") : fragments.$array[fragments.$offset + 0]);
					_ref = $subslice(fragments, 1);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						if (strings.HasPrefix(fragment, "filename=")) {
							sentFileName = fragment.substring(9);
						} else if (strings.HasPrefix(fragment, "type=")) {
							contentType = fragment.substring(5);
						}
						_i++;
					}
					_r$2 = fmt.Fprintf(buffer[0], "'filename': '%s', ", new sliceType$2([new $String(sentFileName)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					/* */ if (!(contentType === "")) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!(contentType === "")) { */ case 14:
						_r$3 = fmt.Fprintf(buffer[0], "'contenttype': '%s'", new sliceType$2([new $String(contentType)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 16; continue;
					/* } else { */ case 15:
						buffer[0].WriteString("'contenttype': 'application/octet-stream'");
					/* } */ case 16:
					buffer[0].WriteString("},\n");
					result = buffer[0].String();
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					buffer$1[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_r$4 = fmt.Fprintf(buffer$1[0], "  \\{'key':'%s', 'value': join(readfile('%s'), \"\\n\")", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((0 >= fragments$1.$length ? $throwRuntimeError("index out of range") : fragments$1.$array[fragments$1.$offset + 0]))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					contentType$1 = "";
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (strings.HasPrefix(fragment$1, "type=")) {
							contentType$1 = fragment$1.substring(5);
						}
						_i$1++;
					}
					/* */ if (!(contentType$1 === "")) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!(contentType$1 === "")) { */ case 19:
						_r$5 = fmt.Fprintf(buffer$1[0], ", 'contenttype': '%s'", new sliceType$2([new $String(contentType$1)])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
					/* } */ case 20:
					buffer$1[0].WriteString("},\n");
					result = buffer$1[0].String();
					$s = 11; continue;
				/* } else { */ case 10:
					_r$6 = fmt.Sprintf("  \\{'key': '%s', 'value': \"%s\"},\n", new sliceType$2([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(escapeDQ((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1])))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					result = _r$6;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_2 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (!((field$1.$length === 2))) { */ case 23:
					_r$7 = fmt.Fprintln(os.Stderr, new sliceType$2([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
					os.Exit(1);
				/* } */ case 24:
				_r$8 = fmt.Sprintf("  \\{'key': '%s', 'value': \"%s\"},\n", new sliceType$2([new $String((0 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 0])), new $String(escapeDQ((1 >= field$1.$length ? $throwRuntimeError("index out of range") : field$1.$array[field$1.$offset + 1])))])); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				result = _r$8;
			/* } */ case 4:
		case 1:
		return result;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._2 = _2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.buffer$1 = buffer$1; $f.contentType = contentType; $f.contentType$1 = contentType$1; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.result = result; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	VimScriptGenerator.methods = [{prop: "Url", name: "Url", pkg: "", typ: $funcType([], [$String], false)}, {prop: "HasHeader", name: "HasHeader", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "BodyContent", name: "BodyContent", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Header", name: "Header", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareHeader", name: "PrepareHeader", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FinalizeBody", name: "FinalizeBody", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "AddMultiPartCode", name: "AddMultiPartCode", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	VimScriptGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "FinalizeBodyBuffer", name: "FinalizeBodyBuffer", pkg: "", typ: bytes.Buffer, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/vimscript", typ: sliceType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/client/xhr"] = (function() {
	var $pkg = {}, $init, bytes, fmt, common, url, os, strings, ExternalFile, XHRGenerator, ptrType, sliceType, arrayType, arrayType$1, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType$1, ptrType$2, ptrType$3, ptrType$4, mapType, escapeDQ, NewXHRGenerator, ProcessCurlCommand, NewStringForData, StringForData, FormString;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	url = $packages["net/url"];
	os = $packages["os"];
	strings = $packages["strings"];
	ExternalFile = $pkg.ExternalFile = $newType(0, $kindStruct, "xhr.ExternalFile", "ExternalFile", "github.com/shibukawa/curl_as_dsl/client/xhr", function(Data_, FileName_, VariableName_, TextType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Data = ptrType$1.nil;
			this.FileName = "";
			this.VariableName = "";
			this.TextType = false;
			return;
		}
		this.Data = Data_;
		this.FileName = FileName_;
		this.VariableName = VariableName_;
		this.TextType = TextType_;
	});
	XHRGenerator = $pkg.XHRGenerator = $newType(0, $kindStruct, "xhr.XHRGenerator", "XHRGenerator", "github.com/shibukawa/curl_as_dsl/client/xhr", function(Options_, prepareFile_, PrepareBody_, Body_, HasBody_, ExternalFiles_, usedFile_, extraUrl_, AdditionalDeclaration_, processedHeaders_, specialHeaders_, UseSimpleGet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Options = ptrType.nil;
			this.prepareFile = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			this.PrepareBody = "";
			this.Body = "";
			this.HasBody = false;
			this.ExternalFiles = false;
			this.usedFile = 0;
			this.extraUrl = "";
			this.AdditionalDeclaration = "";
			this.processedHeaders = sliceType$1.nil;
			this.specialHeaders = sliceType$3.nil;
			this.UseSimpleGet = false;
			return;
		}
		this.Options = Options_;
		this.prepareFile = prepareFile_;
		this.PrepareBody = PrepareBody_;
		this.Body = Body_;
		this.HasBody = HasBody_;
		this.ExternalFiles = ExternalFiles_;
		this.usedFile = usedFile_;
		this.extraUrl = extraUrl_;
		this.AdditionalDeclaration = AdditionalDeclaration_;
		this.processedHeaders = processedHeaders_;
		this.specialHeaders = specialHeaders_;
		this.UseSimpleGet = UseSimpleGet_;
	});
	ptrType = $ptrType(common.CurlOptions);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$1 = $sliceType(common.HeaderGroup);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType(sliceType$2);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(common.DataOption);
	ptrType$2 = $ptrType(common.DataOptions);
	ptrType$3 = $ptrType(XHRGenerator);
	ptrType$4 = $ptrType(ExternalFile);
	mapType = $mapType($Int, ptrType$4);
	escapeDQ = function(src) {
		var $ptr, src;
		return strings.Replace(strings.Replace(src, "\"", "\\\"", -1), "\\", "\\\\", -1);
	};
	NewXHRGenerator = function(options) {
		var $ptr, options, result;
		result = new XHRGenerator.ptr(options, new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0), "", "", false, {}, 0, "", "", sliceType$1.nil, sliceType$3.nil, false);
		return result;
	};
	$pkg.NewXHRGenerator = NewXHRGenerator;
	XHRGenerator.ptr.prototype.Url = function() {
		var $ptr, _r, _r$1, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, XHRGenerator);
		/* */ if (!(self.extraUrl === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(self.extraUrl === "")) { */ case 1:
			_r = fmt.Sprintf("\"%s\" + \"?\" + %s", new sliceType$4([new $String(self.Options.Url), new $String(self.extraUrl)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("\"%s\"", new sliceType$4([new $String(self.Options.Url)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.Url }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.Url = function() { return this.$val.Url(); };
	XHRGenerator.ptr.prototype.Method = function() {
		var $ptr, _r, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = $clone(this, XHRGenerator);
		_r = self.Options.Method(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.Method }; } $f.$ptr = $ptr; $f._r = _r; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.Method = function() { return this.$val.Method(); };
	XHRGenerator.ptr.prototype.PrepareOptions = function() {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, buffer, first, header, headers, self, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buffer = $f.buffer; first = $f.first; header = $f.header; headers = $f.headers; self = $f.self; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		self = $clone(this, XHRGenerator);
		buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		/* */ if (!((self.processedHeaders.$length === 0)) || !((self.specialHeaders.$length === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((self.processedHeaders.$length === 0)) || !((self.specialHeaders.$length === 0))) { */ case 1:
			first = true;
			_ref = self.processedHeaders;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				header = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.HeaderGroup);
				_ref$1 = header.Values;
				_i$1 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
					value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (first) {
						first = false;
					} else {
						buffer[0].WriteString("    ");
					}
					_r = fmt.Fprintf(buffer[0], "xhr.setRequestHeader(\"%s\", \"%s\")\n", new sliceType$4([new $String(header.Key), new $String(value)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					_i$1++;
				/* } */ $s = 5; continue; case 6:
				_i++;
			/* } */ $s = 3; continue; case 4:
			_ref$2 = self.specialHeaders;
			_i$2 = 0;
			/* while (true) { */ case 8:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 9; continue; }
				headers = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (first) {
					first = false;
				} else {
					buffer[0].WriteString("    ");
				}
				_r$1 = fmt.Fprintf(buffer[0], "xhr.setRequestHeader(\"%s\", %s)\n", new sliceType$4([new $String((0 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 0])), new $String((1 >= headers.$length ? $throwRuntimeError("index out of range") : headers.$array[headers.$offset + 1]))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i$2++;
			/* } */ $s = 8; continue; case 9:
		/* } */ case 2:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.PrepareOptions }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buffer = buffer; $f.first = first; $f.header = header; $f.headers = headers; $f.self = self; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.PrepareOptions = function() { return this.$val.PrepareOptions(); };
	XHRGenerator.ptr.prototype.FileNames = function() {
		var $ptr, _entry, _i, _keys, _ref, file, result, self;
		self = $clone(this, XHRGenerator);
		result = sliceType$2.nil;
		_ref = self.ExternalFiles;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			file = _entry.v;
			result = $append(result, file.VariableName);
			_i++;
		}
		return result;
	};
	XHRGenerator.prototype.FileNames = function() { return this.$val.FileNames(); };
	XHRGenerator.ptr.prototype.PrepareFile = function() {
		var $ptr, self;
		self = $clone(this, XHRGenerator);
		return self.prepareFile.String();
	};
	XHRGenerator.prototype.PrepareFile = function() { return this.$val.PrepareFile(); };
	XHRGenerator.ptr.prototype.FileReader = function() {
		var $ptr, _r, index, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; index = $f.index; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		if ($keys(self.ExternalFiles).length === 1) {
			return "fileReader";
		}
		index = self.usedFile;
		self.usedFile = self.usedFile + 1 >> 0;
		_r = fmt.Sprintf("fileReader%d", new sliceType$4([new $Int(index)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.FileReader }; } $f.$ptr = $ptr; $f._r = _r; $f.index = index; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.FileReader = function() { return this.$val.FileReader(); };
	XHRGenerator.ptr.prototype.SetDataForUrl = function() {
		var $ptr, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		/* */ if (self.Options.CanUseSimpleForm()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.CanUseSimpleForm()) { */ case 1:
			$r = self.SetDataForForm(false); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = self.Body;
			self.Body = "";
			self.HasBody = false;
			$s = 3; continue;
		/* } else { */ case 2:
			$r = self.SetDataForBody(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			self.extraUrl = self.Body;
			self.Body = "";
			self.HasBody = false;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.SetDataForUrl }; } $f.$ptr = $ptr; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.SetDataForUrl = function() { return this.$val.SetDataForUrl(); };
	XHRGenerator.ptr.prototype.VariableName = function(data) {
		var $ptr, _entry, _i, _keys, _ref, data, file, self;
		self = this;
		_ref = self.ExternalFiles;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			file = _entry.v;
			if (file.Data === data) {
				return file.VariableName;
			}
			_i++;
		}
		return "";
	};
	XHRGenerator.prototype.VariableName = function(data) { return this.$val.VariableName(data); };
	XHRGenerator.ptr.prototype.SetDataForBody = function() {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, buffer, data, dataStr, prepareFile, self, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buffer = $f.buffer; data = $f.data; dataStr = $f.dataStr; prepareFile = $f.prepareFile; self = $f.self; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		data = [data];
		self = this;
		prepareFile = "";
		/* */ if (self.Options.ProcessedData.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (self.Options.ProcessedData.$length === 1) { */ case 1:
			_r = NewStringForData(self, (x = self.Options.ProcessedData, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			self.Body = _tuple[0];
			prepareFile = _tuple[1];
			self.prepareFile.WriteString(prepareFile);
			$s = 3; continue;
		/* } else { */ case 2:
			buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			buffer[0].WriteString("\n    var content = [\n");
			_ref = self.Options.ProcessedData;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
				_r$1 = StringForData(self, data[0]); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				dataStr = _tuple$1[0];
				_r$2 = fmt.Fprintf(buffer[0], "        %s,\n", new sliceType$4([new $String(dataStr)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 5; continue; case 6:
			buffer[0].WriteString("    ];\n");
			self.PrepareBody = buffer[0].String();
			self.Body = "content.join(\"&\")";
		/* } */ case 3:
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.SetDataForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buffer = buffer; $f.data = data; $f.dataStr = dataStr; $f.prepareFile = prepareFile; $f.self = self; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.SetDataForBody = function() { return this.$val.SetDataForBody(); };
	XHRGenerator.ptr.prototype.SetDataForForm = function(hasIndent) {
		var $ptr, _entry, _i, _i$1, _i$2, _keys, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _tuple, buffer, data, hasIndent, key, self, singleData, value, values, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; buffer = $f.buffer; data = $f.data; hasIndent = $f.hasIndent; key = $f.key; self = $f.self; singleData = $f.singleData; value = $f.value; values = $f.values; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer.WriteString("\n    var query = [\n");
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			data = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_tuple = url.ParseQuery(data.Value);
			singleData = _tuple[0];
			_ref$1 = singleData;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 3:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 4; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 3; continue;
				}
				key = _entry.k;
				values = _entry.v;
				_ref$2 = values;
				_i$2 = 0;
				/* while (true) { */ case 5:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 6; continue; }
					value = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					_r = fmt.Sprintf("        encodeURIComponent(\"%s\") + \"=\" + encodeURIComponent(\"%s\"),\n", new sliceType$4([new $String(escapeDQ(key)), new $String(escapeDQ(value))])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = buffer.WriteString(_r); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					_i$2++;
				/* } */ $s = 5; continue; case 6:
				_i$1++;
			/* } */ $s = 3; continue; case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$2 = fmt.Sprintf("    ];\n", new sliceType$4([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = buffer.WriteString(_r$2); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		self.PrepareBody = buffer.String();
		self.HasBody = true;
		self.Body = "query.join(\"&\")";
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.SetDataForForm }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f.buffer = buffer; $f.data = data; $f.hasIndent = hasIndent; $f.key = key; $f.self = self; $f.singleData = singleData; $f.value = value; $f.values = values; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.SetDataForForm = function(hasIndent) { return this.$val.SetDataForForm(hasIndent); };
	XHRGenerator.ptr.prototype.SetFormForBody = function() {
		var $ptr, _i, _r, _ref, _tuple, body, buffer, data, prepareFile, self, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; body = $f.body; buffer = $f.buffer; data = $f.data; prepareFile = $f.prepareFile; self = $f.self; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		self = this;
		buffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		buffer.WriteString("\n    var form = new FormData();\n");
		_ref = self.Options.ProcessedData;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			_r = FormString(self, data[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			body = _tuple[0];
			prepareFile = _tuple[1];
			buffer.WriteString(body);
			self.prepareFile.WriteString(prepareFile);
			_i++;
		/* } */ $s = 1; continue; case 2:
		self.PrepareBody = buffer.String();
		self.Body = "form";
		self.HasBody = true;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: XHRGenerator.ptr.prototype.SetFormForBody }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.body = body; $f.buffer = buffer; $f.data = data; $f.prepareFile = prepareFile; $f.self = self; $f.$s = $s; $f.$r = $r; return $f;
	};
	XHRGenerator.prototype.SetFormForBody = function() { return this.$val.SetFormForBody(); };
	ProcessCurlCommand = function(options) {
		var $ptr, _1, _entry, _entry$1, _i, _i$1, _i$2, _key, _keys, _keys$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, data, externalFile, externalFile$1, file, fileName, generator, i, i$1, isText, options, templateName, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _keys = $f._keys; _keys$1 = $f._keys$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; data = $f.data; externalFile = $f.externalFile; externalFile$1 = $f.externalFile$1; file = $f.file; fileName = $f.fileName; generator = $f.generator; i = $f.i; i$1 = $f.i$1; isText = $f.isText; options = $f.options; templateName = $f.templateName; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		generator = NewXHRGenerator(options);
		_ref = options.ProcessedData;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			data[0] = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), common.DataOption);
			fileName = data[0].FileName();
			if (!(fileName === "")) {
				isText = data[0].Type === 0;
				file = new ExternalFile.ptr(data[0], fileName, "", isText);
				_key = i; (generator.ExternalFiles || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: file };
			}
			_i++;
		}
		/* */ if ($keys(generator.ExternalFiles).length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($keys(generator.ExternalFiles).length === 1) { */ case 1:
			_ref$1 = generator.ExternalFiles;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys.length)) { break; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					continue;
				}
				externalFile = _entry.v;
				externalFile.VariableName = "file";
				_i$1++;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_ref$2 = generator.ExternalFiles;
			_i$2 = 0;
			_keys$1 = $keys(_ref$2);
			/* while (true) { */ case 4:
				/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 5; continue; }
				_entry$1 = _ref$2[_keys$1[_i$2]];
				if (_entry$1 === undefined) {
					_i$2++;
					/* continue; */ $s = 4; continue;
				}
				i$1 = _entry$1.k;
				externalFile$1 = _entry$1.v;
				_r = fmt.Sprintf("file_%d", new sliceType$4([new $Int((i$1 + 1 >> 0))])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				externalFile$1.VariableName = _r;
				_i$2++;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		_r$1 = options.GroupedHeaders(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		generator.processedHeaders = _r$1;
		templateName = "";
		_1 = $keys(generator.ExternalFiles).length;
		if (_1 === 0) {
			templateName = "simple";
		} else if (_1 === 1) {
			templateName = "external_file";
		} else {
			templateName = "external_files";
		}
		/* */ if (!(generator.Options.User === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(generator.Options.User === "")) { */ case 8:
			_r$2 = fmt.Sprintf("\"Basic \" + btoa(\"%s\")", new sliceType$4([new $String(generator.Options.User)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			generator.specialHeaders = $append(generator.specialHeaders, new sliceType$2(["Authorization", _r$2]));
		/* } */ case 9:
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$2(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { $s = 11; continue; }
		/* */ if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$2(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { $s = 12; continue; }
		_r$3 = options.Method(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === "GET" && (generator.processedHeaders.$length === 0) && (generator.specialHeaders.$length === 0)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$2(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasData()) { */ case 11:
			/* */ if (options.Get) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (options.Get) { */ case 16:
				$r = generator.SetDataForUrl(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				$r = generator.Options.InsertContentTypeHeader("application/x-www-form-urlencoded"); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = generator.SetDataForBody(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			$s = 14; continue;
		/* } else if ((options.$ptr_ProcessedData || (options.$ptr_ProcessedData = new ptrType$2(function() { return this.$target.ProcessedData; }, function($v) { this.$target.ProcessedData = $v; }, options))).HasForm()) { */ case 12:
			$r = generator.SetFormForBody(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 14; continue;
		/* } else if (_r$3 === "GET" && (generator.processedHeaders.$length === 0) && (generator.specialHeaders.$length === 0)) { */ case 13:
		/* } */ case 14:
		return [templateName, (x = generator, new x.constructor.elem(x))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ProcessCurlCommand }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._keys = _keys; $f._keys$1 = _keys$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.data = data; $f.externalFile = externalFile; $f.externalFile$1 = externalFile$1; $f.file = file; $f.fileName = fileName; $f.generator = generator; $f.i = i; $f.i$1 = i$1; $f.isText = isText; $f.options = options; $f.templateName = templateName; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ProcessCurlCommand = ProcessCurlCommand;
	NewStringForData = function(generator, data) {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, data, generator, prepare, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; data = $f.data; generator = $f.generator; prepare = $f.prepare; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
		prepare = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_2 = data.Type;
			/* */ if (_2 === 0) { $s = 2; continue; }
			/* */ if (_2 === 1) { $s = 3; continue; }
			/* */ if (_2 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_2 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					result = "file";
					prepare.WriteString("\n    var reader = new FileReader();\n    reader.onloadend = function(evt) {\n        if (evt.target.readyState == FileReader.DONE) {\n            request(evt.target.result.replace(/\\n/g, \"\"));\n        }\n    };\n    reader.readAsText(file, \"UTF-8\");");
					$s = 9; continue;
				/* } else { */ case 8:
					_r = fmt.Sprintf("\"%s\"", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					result = _r;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_2 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 11:
					result = "file";
					prepare.WriteString("\n    var reader = new FileReader();\n    reader.onloadend = function(evt) {\n        if (evt.target.readyState == FileReader.DONE) {\n            request(evt.target.result);\n        }\n    };\n    reader.readAsText(file, \"UTF-8\");");
					$s = 13; continue;
				/* } else { */ case 12:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 13:
				$s = 6; continue;
			/* } else if (_2 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 15:
					result = "file";
					prepare.WriteString("\n    var reader = new FileReader();\n    reader.onloadend = function(evt) {\n        if (evt.target.readyState == FileReader.DONE) {\n            request(encodeURIComponent(evt.target.result));\n        }\n    };\n    reader.readAsText(file, \"UTF-8\");");
					$s = 17; continue;
				/* } else { */ case 16:
					_r$2 = fmt.Sprintf("encodeURIComponent(\"%s\")", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					result = _r$2;
				/* } */ case 17:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = fmt.Sprintf("unknown type: %d", new sliceType$4([new common.DataType(data.Type)])); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String(_r$3));
			/* } */ case 6:
		case 1:
		return [result, prepare.String()];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewStringForData }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.data = data; $f.generator = generator; $f.prepare = prepare; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewStringForData = NewStringForData;
	StringForData = function(generator, data) {
		var $ptr, _3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, data, generator, prepare, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; data = $f.data; generator = $f.generator; prepare = $f.prepare; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = "";
		prepare = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_3 = data.Type;
			/* */ if (_3 === 0) { $s = 2; continue; }
			/* */ if (_3 === 1) { $s = 3; continue; }
			/* */ if (_3 === 2) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_3 === 0) { */ case 2:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 7:
					_r = fmt.Fprintf(os.Stderr, "XHR generator doesn't support sending any file except form(-F).", new sliceType$4([])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
					$s = 9; continue;
				/* } else { */ case 8:
					_r$1 = fmt.Sprintf("\"%s\"", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					result = _r$1;
				/* } */ case 9:
				$s = 6; continue;
			/* } else if (_3 === 1) { */ case 3:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 12:
					_r$2 = fmt.Fprintf(os.Stderr, "XHR generator doesn't support sending any file except form(-F).", new sliceType$4([])); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					os.Exit(1);
					$s = 14; continue;
				/* } else { */ case 13:
					_r$3 = fmt.Sprintf("\"%s\"", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					result = _r$3;
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_3 === 2) { */ case 4:
				/* */ if (strings.HasPrefix(data.Value, "@")) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (strings.HasPrefix(data.Value, "@")) { */ case 17:
					_r$4 = fmt.Fprintf(os.Stderr, "XHR generator doesn't support sending any file except form(-F).", new sliceType$4([])); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$4;
					os.Exit(1);
					$s = 19; continue;
				/* } else { */ case 18:
					_r$5 = fmt.Sprintf("encodeURIComponent(\"%s\")", new sliceType$4([new $String(escapeDQ(data.Value))])); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					result = _r$5;
				/* } */ case 19:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$6 = fmt.Sprintf("unknown type: %d", new sliceType$4([new common.DataType(data.Type)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$panic(new $String(_r$6));
			/* } */ case 6:
		case 1:
		return [result, prepare.String()];
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringForData }; } $f.$ptr = $ptr; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.data = data; $f.generator = generator; $f.prepare = prepare; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.StringForData = StringForData;
	FormString = function(generator, data) {
		var $ptr, _4, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, buffer, data, field, field$1, fragment, fragment$1, fragments, fragments$1, generator, prepare, sentFileName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; buffer = $f.buffer; data = $f.data; field = $f.field; field$1 = $f.field$1; fragment = $f.fragment; fragment$1 = $f.fragment$1; fragments = $f.fragments; fragments$1 = $f.fragments$1; generator = $f.generator; prepare = $f.prepare; sentFileName = $f.sentFileName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		prepare = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_4 = data.Type;
			/* */ if (_4 === 3) { $s = 2; continue; }
			/* */ if (_4 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_4 === 3) { */ case 2:
				field = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field.$length === 2))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((field.$length === 2))) { */ case 5:
					_r = fmt.Fprintln(os.Stderr, new sliceType$4([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r;
					os.Exit(1);
				/* } */ case 6:
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { $s = 8; continue; }
				/* */ if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "@")) { */ case 8:
					fragments = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					sentFileName = "";
					_ref = $subslice(fragments, 1);
					_i = 0;
					/* while (true) { */ case 12:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 13; continue; }
						fragment = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						/* */ if (strings.HasPrefix(fragment, "filename=")) { $s = 14; continue; }
						/* */ if (strings.HasPrefix(fragment, "type=")) { $s = 15; continue; }
						/* */ $s = 16; continue;
						/* if (strings.HasPrefix(fragment, "filename=")) { */ case 14:
							sentFileName = fragment.substring(9);
							$s = 16; continue;
						/* } else if (strings.HasPrefix(fragment, "type=")) { */ case 15:
							_r$1 = fmt.Fprintf(os.Stderr, "XHR doesn't support sending content-type.", new sliceType$4([])); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_r$1;
							os.Exit(1);
						/* } */ case 16:
						_i++;
					/* } */ $s = 12; continue; case 13:
					/* */ if ($keys(generator.ExternalFiles).length === 1) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if ($keys(generator.ExternalFiles).length === 1) { */ case 18:
						/* */ if (!(sentFileName === "")) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if (!(sentFileName === "")) { */ case 21:
							_r$2 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", file, \"%s\");\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(sentFileName)])); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$2;
							$s = 23; continue;
						/* } else { */ case 22:
							_r$3 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", file);\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0]))])); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_r$3;
						/* } */ case 23:
						prepare.WriteString("request(file);");
						$s = 20; continue;
					/* } else { */ case 19:
						/* */ if (!(sentFileName === "")) { $s = 26; continue; }
						/* */ $s = 27; continue;
						/* if (!(sentFileName === "")) { */ case 26:
							_r$4 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", files.%s, \"%s\");\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(generator.VariableName(data)), new $String(sentFileName)])); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_r$4;
							$s = 28; continue;
						/* } else { */ case 27:
							_r$5 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", files.%s);\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String(generator.VariableName(data))])); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							_r$5;
						/* } */ case 28:
						_r$6 = fmt.Fprintf(buffer[0], "files.%s = file;\n    request();", new sliceType$4([new $String(generator.VariableName(data))])); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 20:
					$s = 11; continue;
				/* } else if (strings.HasPrefix((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]), "<")) { */ case 9:
					/* */ if ($keys(generator.ExternalFiles).length > 1) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if ($keys(generator.ExternalFiles).length > 1) { */ case 32:
						_r$7 = fmt.Fprintf(os.Stderr, "XHR generator doesn't support sending multiple files except multipart form.", new sliceType$4([])); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$7;
						os.Exit(1);
					/* } */ case 33:
					fragments$1 = strings.Split((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]).substring(1), ";");
					_ref$1 = $subslice(fragments$1, 1);
					_i$1 = 0;
					/* while (true) { */ case 35:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 36; continue; }
						fragment$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						/* */ if (strings.HasPrefix(fragment$1, "type=")) { $s = 37; continue; }
						/* */ $s = 38; continue;
						/* if (strings.HasPrefix(fragment$1, "type=")) { */ case 37:
							_r$8 = fmt.Fprintf(os.Stderr, "XHR doesn't support sending content-type.", new sliceType$4([])); /* */ $s = 39; case 39: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_r$8;
							os.Exit(1);
						/* } */ case 38:
						_i$1++;
					/* } */ $s = 35; continue; case 36:
					_r$9 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", file);\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0]))])); /* */ $s = 40; case 40: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$9;
					prepare.WriteString("\n    var reader = new FileReader();\n    reader.onloadend = function(evt) {\n        if (evt.target.readyState == FileReader.DONE) {\n            request(evt.target.result);\n        }\n    };\n    reader.readAsText(file, \"UTF-8\");");
					$s = 11; continue;
				/* } else { */ case 10:
					_r$10 = fmt.Fprintf(buffer[0], "    form.append(\"%s\", \"%s\");\n", new sliceType$4([new $String((0 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 0])), new $String((1 >= field.$length ? $throwRuntimeError("index out of range") : field.$array[field.$offset + 1]))])); /* */ $s = 41; case 41: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$10;
				/* } */ case 11:
				$s = 4; continue;
			/* } else if (_4 === 4) { */ case 3:
				field$1 = strings.SplitN(data.Value, "=", 2);
				/* */ if (!((field$1.$length === 2))) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!((field$1.$length === 2))) { */ case 42:
					_r$11 = fmt.Fprintln(os.Stderr, new sliceType$4([new $String("Warning: Illegally formatted input field!\ncurl: option -F: is badly used here")])); /* */ $s = 44; case 44: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$11;
					os.Exit(1);
				/* } */ case 43:
			/* } */ case 4:
		case 1:
		return [buffer[0].String(), prepare.String()];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FormString }; } $f.$ptr = $ptr; $f._4 = _4; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.buffer = buffer; $f.data = data; $f.field = field; $f.field$1 = field$1; $f.fragment = fragment; $f.fragment$1 = fragment$1; $f.fragments = fragments; $f.fragments$1 = fragments$1; $f.generator = generator; $f.prepare = prepare; $f.sentFileName = sentFileName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FormString = FormString;
	XHRGenerator.methods = [{prop: "Url", name: "Url", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([], [$String], false)}, {prop: "PrepareOptions", name: "PrepareOptions", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FileNames", name: "FileNames", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "PrepareFile", name: "PrepareFile", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "FileReader", name: "FileReader", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetDataForUrl", name: "SetDataForUrl", pkg: "", typ: $funcType([], [], false)}, {prop: "VariableName", name: "VariableName", pkg: "", typ: $funcType([ptrType$1], [$String], false)}, {prop: "SetDataForBody", name: "SetDataForBody", pkg: "", typ: $funcType([], [], false)}, {prop: "SetDataForForm", name: "SetDataForForm", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetFormForBody", name: "SetFormForBody", pkg: "", typ: $funcType([], [], false)}];
	ExternalFile.init([{prop: "Data", name: "Data", pkg: "", typ: ptrType$1, tag: ""}, {prop: "FileName", name: "FileName", pkg: "", typ: $String, tag: ""}, {prop: "VariableName", name: "VariableName", pkg: "", typ: $String, tag: ""}, {prop: "TextType", name: "TextType", pkg: "", typ: $Bool, tag: ""}]);
	XHRGenerator.init([{prop: "Options", name: "Options", pkg: "", typ: ptrType, tag: ""}, {prop: "prepareFile", name: "prepareFile", pkg: "github.com/shibukawa/curl_as_dsl/client/xhr", typ: bytes.Buffer, tag: ""}, {prop: "PrepareBody", name: "PrepareBody", pkg: "", typ: $String, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: $String, tag: ""}, {prop: "HasBody", name: "HasBody", pkg: "", typ: $Bool, tag: ""}, {prop: "ExternalFiles", name: "ExternalFiles", pkg: "", typ: mapType, tag: ""}, {prop: "usedFile", name: "usedFile", pkg: "github.com/shibukawa/curl_as_dsl/client/xhr", typ: $Int, tag: ""}, {prop: "extraUrl", name: "extraUrl", pkg: "github.com/shibukawa/curl_as_dsl/client/xhr", typ: $String, tag: ""}, {prop: "AdditionalDeclaration", name: "AdditionalDeclaration", pkg: "", typ: $String, tag: ""}, {prop: "processedHeaders", name: "processedHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/xhr", typ: sliceType$1, tag: ""}, {prop: "specialHeaders", name: "specialHeaders", pkg: "github.com/shibukawa/curl_as_dsl/client/xhr", typ: sliceType$3, tag: ""}, {prop: "UseSimpleGet", name: "UseSimpleGet", pkg: "", typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/token"] = (function() {
	var $pkg = {}, $init, fmt, nosync, sort, strconv, Position, Pos, File, lineInfo, FileSet, serializedFile, serializedFileSet, Token, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, sliceType$4, ptrType$1, ptrType$2, sliceType$5, funcType, funcType$1, tokens, keywords, searchLineInfos, NewFileSet, searchFiles, searchInts, init, Lookup;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	Position = $pkg.Position = $newType(0, $kindStruct, "token.Position", "Position", "go/token", function(Filename_, Offset_, Line_, Column_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filename = "";
			this.Offset = 0;
			this.Line = 0;
			this.Column = 0;
			return;
		}
		this.Filename = Filename_;
		this.Offset = Offset_;
		this.Line = Line_;
		this.Column = Column_;
	});
	Pos = $pkg.Pos = $newType(4, $kindInt, "token.Pos", "Pos", "go/token", null);
	File = $pkg.File = $newType(0, $kindStruct, "token.File", "File", "go/token", function(set_, name_, base_, size_, lines_, infos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.set = ptrType$2.nil;
			this.name = "";
			this.base = 0;
			this.size = 0;
			this.lines = sliceType$1.nil;
			this.infos = sliceType$3.nil;
			return;
		}
		this.set = set_;
		this.name = name_;
		this.base = base_;
		this.size = size_;
		this.lines = lines_;
		this.infos = infos_;
	});
	lineInfo = $pkg.lineInfo = $newType(0, $kindStruct, "token.lineInfo", "lineInfo", "go/token", function(Offset_, Filename_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Offset = 0;
			this.Filename = "";
			this.Line = 0;
			return;
		}
		this.Offset = Offset_;
		this.Filename = Filename_;
		this.Line = Line_;
	});
	FileSet = $pkg.FileSet = $newType(0, $kindStruct, "token.FileSet", "FileSet", "go/token", function(mutex_, base_, files_, last_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mutex = new nosync.RWMutex.ptr(false, 0);
			this.base = 0;
			this.files = sliceType$2.nil;
			this.last = ptrType.nil;
			return;
		}
		this.mutex = mutex_;
		this.base = base_;
		this.files = files_;
		this.last = last_;
	});
	serializedFile = $pkg.serializedFile = $newType(0, $kindStruct, "token.serializedFile", "serializedFile", "go/token", function(Name_, Base_, Size_, Lines_, Infos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Base = 0;
			this.Size = 0;
			this.Lines = sliceType$1.nil;
			this.Infos = sliceType$3.nil;
			return;
		}
		this.Name = Name_;
		this.Base = Base_;
		this.Size = Size_;
		this.Lines = Lines_;
		this.Infos = Infos_;
	});
	serializedFileSet = $pkg.serializedFileSet = $newType(0, $kindStruct, "token.serializedFileSet", "serializedFileSet", "go/token", function(Base_, Files_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = 0;
			this.Files = sliceType$4.nil;
			return;
		}
		this.Base = Base_;
		this.Files = Files_;
	});
	Token = $pkg.Token = $newType(4, $kindInt, "token.Token", "Token", "go/token", null);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Int);
	ptrType = $ptrType(File);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(lineInfo);
	sliceType$4 = $sliceType(serializedFile);
	ptrType$1 = $ptrType(Position);
	ptrType$2 = $ptrType(FileSet);
	sliceType$5 = $sliceType($Uint8);
	funcType = $funcType([ptrType], [$Bool], false);
	funcType$1 = $funcType([$emptyInterface], [$error], false);
	Position.ptr.prototype.IsValid = function() {
		var $ptr, pos;
		pos = this;
		return pos.Line > 0;
	};
	Position.prototype.IsValid = function() { return this.$val.IsValid(); };
	Position.ptr.prototype.String = function() {
		var $ptr, _r, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = $clone(this, Position);
		s = pos.Filename;
		/* */ if (pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pos.IsValid()) { */ case 1:
			if (!(s === "")) {
				s = s + (":");
			}
			_r = fmt.Sprintf("%d:%d", new sliceType([new $Int(pos.Line), new $Int(pos.Column)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
		/* } */ case 2:
		if (s === "") {
			s = "-";
		}
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Position.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Position.prototype.String = function() { return this.$val.String(); };
	Pos.prototype.IsValid = function() {
		var $ptr, p;
		p = this.$val;
		return !((p === 0));
	};
	$ptrType(Pos).prototype.IsValid = function() { return new Pos(this.$get()).IsValid(); };
	File.ptr.prototype.Name = function() {
		var $ptr, f;
		f = this;
		return f.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Base = function() {
		var $ptr, f;
		f = this;
		return f.base;
	};
	File.prototype.Base = function() { return this.$val.Base(); };
	File.ptr.prototype.Size = function() {
		var $ptr, f;
		f = this;
		return f.size;
	};
	File.prototype.Size = function() { return this.$val.Size(); };
	File.ptr.prototype.LineCount = function() {
		var $ptr, f, n;
		f = this;
		f.set.mutex.RLock();
		n = f.lines.$length;
		f.set.mutex.RUnlock();
		return n;
	};
	File.prototype.LineCount = function() { return this.$val.LineCount(); };
	File.ptr.prototype.AddLine = function(offset) {
		var $ptr, f, i, offset, x, x$1;
		f = this;
		f.set.mutex.Lock();
		i = f.lines.$length;
		if (((i === 0) || (x = f.lines, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) < offset) && offset < f.size) {
			f.lines = $append(f.lines, offset);
		}
		f.set.mutex.Unlock();
	};
	File.prototype.AddLine = function(offset) { return this.$val.AddLine(offset); };
	File.ptr.prototype.MergeLine = function(line) {
		var $ptr, f, line, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		f = this;
		if (line <= 0) {
			$panic(new $String("illegal line number (line numbering starts at 1)"));
		}
		f.set.mutex.Lock();
		$deferred.push([$methodVal(f.set.mutex, "Unlock"), []]);
		if (line >= f.lines.$length) {
			$panic(new $String("illegal line number"));
		}
		$copySlice($subslice(f.lines, line), $subslice(f.lines, (line + 1 >> 0)));
		f.lines = $subslice(f.lines, 0, (f.lines.$length - 1 >> 0));
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	File.prototype.MergeLine = function(line) { return this.$val.MergeLine(line); };
	File.ptr.prototype.SetLines = function(lines) {
		var $ptr, _i, _ref, f, i, lines, offset, size, x;
		f = this;
		size = f.size;
		_ref = lines;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			offset = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0 && offset <= (x = i - 1 >> 0, ((x < 0 || x >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x])) || size <= offset) {
				return false;
			}
			_i++;
		}
		f.set.mutex.Lock();
		f.lines = lines;
		f.set.mutex.Unlock();
		return true;
	};
	File.prototype.SetLines = function(lines) { return this.$val.SetLines(lines); };
	File.ptr.prototype.SetLinesForContent = function(content) {
		var $ptr, _i, _ref, b, content, f, line, lines, offset;
		f = this;
		lines = sliceType$1.nil;
		line = 0;
		_ref = content;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			offset = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (line >= 0) {
				lines = $append(lines, line);
			}
			line = -1;
			if (b === 10) {
				line = offset + 1 >> 0;
			}
			_i++;
		}
		f.set.mutex.Lock();
		f.lines = lines;
		f.set.mutex.Unlock();
	};
	File.prototype.SetLinesForContent = function(content) { return this.$val.SetLinesForContent(content); };
	File.ptr.prototype.AddLineInfo = function(offset, filename, line) {
		var $ptr, f, filename, i, line, offset, x, x$1;
		f = this;
		f.set.mutex.Lock();
		i = f.infos.$length;
		if ((i === 0) || (x = f.infos, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Offset < offset && offset < f.size) {
			f.infos = $append(f.infos, new lineInfo.ptr(offset, filename, line));
		}
		f.set.mutex.Unlock();
	};
	File.prototype.AddLineInfo = function(offset, filename, line) { return this.$val.AddLineInfo(offset, filename, line); };
	File.ptr.prototype.Pos = function(offset) {
		var $ptr, f, offset;
		f = this;
		if (offset > f.size) {
			$panic(new $String("illegal file offset"));
		}
		return ((f.base + offset >> 0) >> 0);
	};
	File.prototype.Pos = function(offset) { return this.$val.Pos(offset); };
	File.ptr.prototype.Offset = function(p) {
		var $ptr, f, p;
		f = this;
		if ((p >> 0) < f.base || (p >> 0) > (f.base + f.size >> 0)) {
			$panic(new $String("illegal Pos value"));
		}
		return (p >> 0) - f.base >> 0;
	};
	File.prototype.Offset = function(p) { return this.$val.Offset(p); };
	File.ptr.prototype.Line = function(p) {
		var $ptr, _r, f, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.Position(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r.Line;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Line }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Line = function(p) { return this.$val.Line(p); };
	searchLineInfos = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = sort.Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]).Offset > x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r - 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: searchLineInfos }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.ptr.prototype.unpack = function(offset, adjusted) {
		var $ptr, _r, _tmp, _tmp$1, adjusted, alt, column, f, filename, i, i$1, i$2, line, offset, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; adjusted = $f.adjusted; alt = $f.alt; column = $f.column; f = $f.f; filename = $f.filename; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; line = $f.line; offset = $f.offset; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		filename = "";
		line = 0;
		column = 0;
		f = this;
		filename = f.name;
		i = searchInts(f.lines, offset);
		if (i >= 0) {
			_tmp = i + 1 >> 0;
			_tmp$1 = (offset - (x = f.lines, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >> 0) + 1 >> 0;
			line = _tmp;
			column = _tmp$1;
		}
		/* */ if (adjusted && f.infos.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (adjusted && f.infos.$length > 0) { */ case 1:
			_r = searchLineInfos(f.infos, offset); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			i$1 = _r;
			if (i$1 >= 0) {
				alt = (x$1 = f.infos, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1]));
				filename = alt.Filename;
				i$2 = searchInts(f.lines, alt.Offset);
				if (i$2 >= 0) {
					line = line + (((alt.Line - i$2 >> 0) - 1 >> 0)) >> 0;
				}
			}
		/* } */ case 2:
		return [filename, line, column];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.unpack }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.adjusted = adjusted; $f.alt = alt; $f.column = column; $f.f = f; $f.filename = filename; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.line = line; $f.offset = offset; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.unpack = function(offset, adjusted) { return this.$val.unpack(offset, adjusted); };
	File.ptr.prototype.position = function(p, adjusted) {
		var $ptr, _r, _tuple, adjusted, f, offset, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; adjusted = $f.adjusted; f = $f.f; offset = $f.offset; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		offset = (p >> 0) - f.base >> 0;
		pos.Offset = offset;
		_r = f.unpack(offset, adjusted); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		pos.Filename = _tuple[0];
		pos.Line = _tuple[1];
		pos.Column = _tuple[2];
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.position }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.adjusted = adjusted; $f.f = f; $f.offset = offset; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.position = function(p, adjusted) { return this.$val.position(p, adjusted); };
	File.ptr.prototype.PositionFor = function(p, adjusted) {
		var $ptr, _r, adjusted, f, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; adjusted = $f.adjusted; f = $f.f; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			if ((p >> 0) < f.base || (p >> 0) > (f.base + f.size >> 0)) {
				$panic(new $String("illegal Pos value"));
			}
			_r = f.position(p, adjusted); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			Position.copy(pos, _r);
		/* } */ case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.PositionFor }; } $f.$ptr = $ptr; $f._r = _r; $f.adjusted = adjusted; $f.f = f; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.PositionFor = function(p, adjusted) { return this.$val.PositionFor(p, adjusted); };
	File.ptr.prototype.Position = function(p) {
		var $ptr, _r, f, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		f = this;
		_r = f.PositionFor(p, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Position.copy(pos, _r);
		/* */ $s = 2; case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Position }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Position = function(p) { return this.$val.Position(p); };
	NewFileSet = function() {
		var $ptr;
		return new FileSet.ptr(new nosync.RWMutex.ptr(false, 0), 1, sliceType$2.nil, ptrType.nil);
	};
	$pkg.NewFileSet = NewFileSet;
	FileSet.ptr.prototype.Base = function() {
		var $ptr, b, s;
		s = this;
		s.mutex.RLock();
		b = s.base;
		s.mutex.RUnlock();
		return b;
	};
	FileSet.prototype.Base = function() { return this.$val.Base(); };
	FileSet.ptr.prototype.AddFile = function(filename, base, size) {
		var $ptr, base, f, filename, s, size, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = this;
		s.mutex.Lock();
		$deferred.push([$methodVal(s.mutex, "Unlock"), []]);
		if (base < 0) {
			base = s.base;
		}
		if (base < s.base || size < 0) {
			$panic(new $String("illegal base or size"));
		}
		f = new File.ptr(s, filename, base, size, new sliceType$1([0]), sliceType$3.nil);
		base = base + ((size + 1 >> 0)) >> 0;
		if (base < 0) {
			$panic(new $String("token.Pos offset overflow (> 2G of source code in file set)"));
		}
		s.base = base;
		s.files = $append(s.files, f);
		s.last = f;
		return f;
		/* */ } catch(err) { $err = err; return ptrType.nil; } finally { $callDeferred($deferred, $err); }
	};
	FileSet.prototype.AddFile = function(filename, base, size) { return this.$val.AddFile(filename, base, size); };
	FileSet.ptr.prototype.Iterate = function(f) {
		var $ptr, _r, _v, f, file, i, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _v = $f._v; f = $f.f; file = $f.file; i = $f.i; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = 0;
		/* while (true) { */ case 1:
			file = ptrType.nil;
			s.mutex.RLock();
			if (i < s.files.$length) {
				file = (x = s.files, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			}
			s.mutex.RUnlock();
			if (file === ptrType.nil) { _v = true; $s = 5; continue s; }
			_r = f(file); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Iterate }; } $f.$ptr = $ptr; $f._r = _r; $f._v = _v; $f.f = f; $f.file = file; $f.i = i; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Iterate = function(f) { return this.$val.Iterate(f); };
	searchFiles = function(a, x) {
		var $ptr, _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = sort.Search(a[0].$length, (function(a, x) { return function(i) {
			var $ptr, i;
			return ((i < 0 || i >= a[0].$length) ? $throwRuntimeError("index out of range") : a[0].$array[a[0].$offset + i]).base > x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r - 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: searchFiles }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.ptr.prototype.file = function(p) {
		var $ptr, _r, f, f$1, i, p, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; f$1 = $f.f$1; i = $f.i; p = $f.p; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.mutex.RLock();
		f = s.last;
		if (!(f === ptrType.nil) && f.base <= (p >> 0) && (p >> 0) <= (f.base + f.size >> 0)) {
			s.mutex.RUnlock();
			return f;
		}
		_r = searchFiles(s.files, (p >> 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0) {
			f$1 = (x = s.files, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if ((p >> 0) <= (f$1.base + f$1.size >> 0)) {
				s.mutex.RUnlock();
				s.mutex.Lock();
				s.last = f$1;
				s.mutex.Unlock();
				return f$1;
			}
		}
		s.mutex.RUnlock();
		return ptrType.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.file }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.p = p; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.file = function(p) { return this.$val.file(p); };
	FileSet.ptr.prototype.File = function(p) {
		var $ptr, _r, f, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		s = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			_r = s.file(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f = _r;
		/* } */ case 2:
		return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.File }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.File = function(p) { return this.$val.File(p); };
	FileSet.ptr.prototype.PositionFor = function(p, adjusted) {
		var $ptr, _r, _r$1, adjusted, f, p, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; adjusted = $f.adjusted; f = $f.f; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		s = this;
		/* */ if (!((p === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p === 0))) { */ case 1:
			_r = s.file(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f = _r;
			/* */ if (!(f === ptrType.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(f === ptrType.nil)) { */ case 4:
				_r$1 = f.position(p, adjusted); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				Position.copy(pos, _r$1);
			/* } */ case 5:
		/* } */ case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.PositionFor }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.adjusted = adjusted; $f.f = f; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.PositionFor = function(p, adjusted) { return this.$val.PositionFor(p, adjusted); };
	FileSet.ptr.prototype.Position = function(p) {
		var $ptr, _r, p, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = new Position.ptr("", 0, 0, 0);
		s = this;
		_r = s.PositionFor(p, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		Position.copy(pos, _r);
		/* */ $s = 2; case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Position }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Position = function(p) { return this.$val.Position(p); };
	searchInts = function(a, x) {
		var $ptr, _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) <= x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i - 1 >> 0;
	};
	FileSet.ptr.prototype.Read = function(decode) {
		var $ptr, _r, decode, err, f, files, i, s, ss, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; decode = $f.decode; err = $f.err; f = $f.f; files = $f.files; i = $f.i; s = $f.s; ss = $f.ss; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ss = [ss];
		s = this;
		ss[0] = new serializedFileSet.ptr(0, sliceType$4.nil);
		_r = decode(ss[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		s.mutex.Lock();
		s.base = ss[0].Base;
		files = $makeSlice(sliceType$2, ss[0].Files.$length);
		i = 0;
		while (true) {
			if (!(i < ss[0].Files.$length)) { break; }
			f = (x = ss[0].Files, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			((i < 0 || i >= files.$length) ? $throwRuntimeError("index out of range") : files.$array[files.$offset + i] = new File.ptr(s, f.Name, f.Base, f.Size, f.Lines, f.Infos));
			i = i + (1) >> 0;
		}
		s.files = files;
		s.last = ptrType.nil;
		s.mutex.Unlock();
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Read }; } $f.$ptr = $ptr; $f._r = _r; $f.decode = decode; $f.err = err; $f.f = f; $f.files = files; $f.i = i; $f.s = s; $f.ss = ss; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Read = function(decode) { return this.$val.Read(decode); };
	FileSet.ptr.prototype.Write = function(encode) {
		var $ptr, _i, _r, _ref, encode, f, files, i, s, ss, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; encode = $f.encode; f = $f.f; files = $f.files; i = $f.i; s = $f.s; ss = $f.ss; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		ss = new serializedFileSet.ptr(0, sliceType$4.nil);
		s.mutex.Lock();
		ss.Base = s.base;
		files = $makeSlice(sliceType$4, s.files.$length);
		_ref = s.files;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			serializedFile.copy(((i < 0 || i >= files.$length) ? $throwRuntimeError("index out of range") : files.$array[files.$offset + i]), new serializedFile.ptr(f.name, f.base, f.size, f.lines, f.infos));
			_i++;
		}
		ss.Files = files;
		s.mutex.Unlock();
		_r = encode(new ss.constructor.elem(ss)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FileSet.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.encode = encode; $f.f = f; $f.files = files; $f.i = i; $f.s = s; $f.ss = ss; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileSet.prototype.Write = function(encode) { return this.$val.Write(encode); };
	Token.prototype.String = function() {
		var $ptr, s, tok;
		tok = this.$val;
		s = "";
		if (0 <= tok && tok < 86) {
			s = ((tok < 0 || tok >= tokens.length) ? $throwRuntimeError("index out of range") : tokens[tok]);
		}
		if (s === "") {
			s = "token(" + strconv.Itoa((tok >> 0)) + ")";
		}
		return s;
	};
	$ptrType(Token).prototype.String = function() { return new Token(this.$get()).String(); };
	Token.prototype.Precedence = function() {
		var $ptr, _1, op;
		op = this.$val;
		_1 = op;
		if (_1 === 35) {
			return 1;
		} else if (_1 === 34) {
			return 2;
		} else if ((_1 === 39) || (_1 === 44) || (_1 === 40) || (_1 === 45) || (_1 === 41) || (_1 === 46)) {
			return 3;
		} else if ((_1 === 12) || (_1 === 13) || (_1 === 18) || (_1 === 19)) {
			return 4;
		} else if ((_1 === 14) || (_1 === 15) || (_1 === 16) || (_1 === 20) || (_1 === 21) || (_1 === 17) || (_1 === 22)) {
			return 5;
		}
		return 0;
	};
	$ptrType(Token).prototype.Precedence = function() { return new Token(this.$get()).Precedence(); };
	init = function() {
		var $ptr, _key, i;
		keywords = {};
		i = 61;
		while (true) {
			if (!(i < 86)) { break; }
			_key = ((i < 0 || i >= tokens.length) ? $throwRuntimeError("index out of range") : tokens[i]); (keywords || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: i };
			i = i + (1) >> 0;
		}
	};
	Lookup = function(ident) {
		var $ptr, _entry, _tuple, ident, is_keyword, tok;
		_tuple = (_entry = keywords[$String.keyFor(ident)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		tok = _tuple[0];
		is_keyword = _tuple[1];
		if (is_keyword) {
			return tok;
		}
		return 4;
	};
	$pkg.Lookup = Lookup;
	Token.prototype.IsLiteral = function() {
		var $ptr, tok;
		tok = this.$val;
		return 3 < tok && tok < 10;
	};
	$ptrType(Token).prototype.IsLiteral = function() { return new Token(this.$get()).IsLiteral(); };
	Token.prototype.IsOperator = function() {
		var $ptr, tok;
		tok = this.$val;
		return 11 < tok && tok < 59;
	};
	$ptrType(Token).prototype.IsOperator = function() { return new Token(this.$get()).IsOperator(); };
	Token.prototype.IsKeyword = function() {
		var $ptr, tok;
		tok = this.$val;
		return 60 < tok && tok < 86;
	};
	$ptrType(Token).prototype.IsKeyword = function() { return new Token(this.$get()).IsKeyword(); };
	Position.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}];
	Pos.methods = [{prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Base", name: "Base", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "LineCount", name: "LineCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddLine", name: "AddLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "MergeLine", name: "MergeLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLines", name: "SetLines", pkg: "", typ: $funcType([sliceType$1], [$Bool], false)}, {prop: "SetLinesForContent", name: "SetLinesForContent", pkg: "", typ: $funcType([sliceType$5], [], false)}, {prop: "AddLineInfo", name: "AddLineInfo", pkg: "", typ: $funcType([$Int, $String, $Int], [], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([$Int], [Pos], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([Pos], [$Int], false)}, {prop: "Line", name: "Line", pkg: "", typ: $funcType([Pos], [$Int], false)}, {prop: "unpack", name: "unpack", pkg: "go/token", typ: $funcType([$Int, $Bool], [$String, $Int, $Int], false)}, {prop: "position", name: "position", pkg: "go/token", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "PositionFor", name: "PositionFor", pkg: "", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([Pos], [Position], false)}];
	ptrType$2.methods = [{prop: "Base", name: "Base", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AddFile", name: "AddFile", pkg: "", typ: $funcType([$String, $Int, $Int], [ptrType], false)}, {prop: "Iterate", name: "Iterate", pkg: "", typ: $funcType([funcType], [], false)}, {prop: "file", name: "file", pkg: "go/token", typ: $funcType([Pos], [ptrType], false)}, {prop: "File", name: "File", pkg: "", typ: $funcType([Pos], [ptrType], false)}, {prop: "PositionFor", name: "PositionFor", pkg: "", typ: $funcType([Pos, $Bool], [Position], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([Pos], [Position], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([funcType$1], [$error], false)}];
	Token.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Precedence", name: "Precedence", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsLiteral", name: "IsLiteral", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsOperator", name: "IsOperator", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsKeyword", name: "IsKeyword", pkg: "", typ: $funcType([], [$Bool], false)}];
	Position.init([{prop: "Filename", name: "Filename", pkg: "", typ: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Int, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Column", name: "Column", pkg: "", typ: $Int, tag: ""}]);
	File.init([{prop: "set", name: "set", pkg: "go/token", typ: ptrType$2, tag: ""}, {prop: "name", name: "name", pkg: "go/token", typ: $String, tag: ""}, {prop: "base", name: "base", pkg: "go/token", typ: $Int, tag: ""}, {prop: "size", name: "size", pkg: "go/token", typ: $Int, tag: ""}, {prop: "lines", name: "lines", pkg: "go/token", typ: sliceType$1, tag: ""}, {prop: "infos", name: "infos", pkg: "go/token", typ: sliceType$3, tag: ""}]);
	lineInfo.init([{prop: "Offset", name: "Offset", pkg: "", typ: $Int, tag: ""}, {prop: "Filename", name: "Filename", pkg: "", typ: $String, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}]);
	FileSet.init([{prop: "mutex", name: "mutex", pkg: "go/token", typ: nosync.RWMutex, tag: ""}, {prop: "base", name: "base", pkg: "go/token", typ: $Int, tag: ""}, {prop: "files", name: "files", pkg: "go/token", typ: sliceType$2, tag: ""}, {prop: "last", name: "last", pkg: "go/token", typ: ptrType, tag: ""}]);
	serializedFile.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Base", name: "Base", pkg: "", typ: $Int, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int, tag: ""}, {prop: "Lines", name: "Lines", pkg: "", typ: sliceType$1, tag: ""}, {prop: "Infos", name: "Infos", pkg: "", typ: sliceType$3, tag: ""}]);
	serializedFileSet.init([{prop: "Base", name: "Base", pkg: "", typ: $Int, tag: ""}, {prop: "Files", name: "Files", pkg: "", typ: sliceType$4, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		keywords = false;
		tokens = $toNativeArray($kindString, ["ILLEGAL", "EOF", "COMMENT", "", "IDENT", "INT", "FLOAT", "IMAG", "CHAR", "STRING", "", "", "+", "-", "*", "/", "%", "&", "|", "^", "<<", ">>", "&^", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>=", "&^=", "&&", "||", "<-", "++", "--", "==", "<", ">", "=", "!", "!=", "<=", ">=", ":=", "...", "(", "[", "{", ",", ".", ")", "]", "}", ";", ":", "", "", "break", "case", "chan", "const", "continue", "default", "defer", "else", "fallthrough", "for", "func", "go", "goto", "if", "import", "interface", "map", "package", "range", "return", "select", "struct", "switch", "type", "var"]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/scanner"] = (function() {
	var $pkg = {}, $init, bytes, fmt, token, io, filepath, sort, strconv, unicode, utf8, Error, ErrorList, ErrorHandler, Scanner, Mode, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, prefix, isLetter, isDigit, digitVal, stripCR;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	token = $packages["go/token"];
	io = $packages["io"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Error = $pkg.Error = $newType(0, $kindStruct, "scanner.Error", "Error", "go/scanner", function(Pos_, Msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pos = new token.Position.ptr("", 0, 0, 0);
			this.Msg = "";
			return;
		}
		this.Pos = Pos_;
		this.Msg = Msg_;
	});
	ErrorList = $pkg.ErrorList = $newType(12, $kindSlice, "scanner.ErrorList", "ErrorList", "go/scanner", null);
	ErrorHandler = $pkg.ErrorHandler = $newType(4, $kindFunc, "scanner.ErrorHandler", "ErrorHandler", "go/scanner", null);
	Scanner = $pkg.Scanner = $newType(0, $kindStruct, "scanner.Scanner", "Scanner", "go/scanner", function(file_, dir_, src_, err_, mode_, ch_, offset_, rdOffset_, lineOffset_, insertSemi_, ErrorCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$2.nil;
			this.dir = "";
			this.src = sliceType.nil;
			this.err = $throwNilPointerError;
			this.mode = 0;
			this.ch = 0;
			this.offset = 0;
			this.rdOffset = 0;
			this.lineOffset = 0;
			this.insertSemi = false;
			this.ErrorCount = 0;
			return;
		}
		this.file = file_;
		this.dir = dir_;
		this.src = src_;
		this.err = err_;
		this.mode = mode_;
		this.ch = ch_;
		this.offset = offset_;
		this.rdOffset = rdOffset_;
		this.lineOffset = lineOffset_;
		this.insertSemi = insertSemi_;
		this.ErrorCount = ErrorCount_;
	});
	Mode = $pkg.Mode = $newType(4, $kindUint, "scanner.Mode", "Mode", "go/scanner", null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($String);
	ptrType = $ptrType(ErrorList);
	ptrType$1 = $ptrType(Error);
	ptrType$2 = $ptrType(token.File);
	ptrType$3 = $ptrType(Scanner);
	Error.ptr.prototype.Error = function() {
		var $ptr, _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, Error);
		/* */ if (!(e.Pos.Filename === "") || e.Pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.Pos.Filename === "") || e.Pos.IsValid()) { */ case 1:
			_r = e.Pos.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r + ": " + e.Msg;
		/* } */ case 2:
		return e.Msg;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	$ptrType(ErrorList).prototype.Add = function(pos, msg) {
		var $ptr, msg, p, pos;
		pos = $clone(pos, token.Position);
		p = this;
		p.$set($append(p.$get(), new Error.ptr($clone(pos, token.Position), msg)));
	};
	$ptrType(ErrorList).prototype.Reset = function() {
		var $ptr, p;
		p = this;
		p.$set($subslice((p.$get()), 0, 0));
	};
	ErrorList.prototype.Len = function() {
		var $ptr, p;
		p = this;
		return p.$length;
	};
	$ptrType(ErrorList).prototype.Len = function() { return this.$get().Len(); };
	ErrorList.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(ErrorList).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	ErrorList.prototype.Less = function(i, j) {
		var $ptr, e, f, i, j, p;
		p = this;
		e = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]).Pos;
		f = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]).Pos;
		if (!(e.Filename === f.Filename)) {
			return e.Filename < f.Filename;
		}
		if (!((e.Line === f.Line))) {
			return e.Line < f.Line;
		}
		if (!((e.Column === f.Column))) {
			return e.Column < f.Column;
		}
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]).Msg < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]).Msg;
	};
	$ptrType(ErrorList).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	ErrorList.prototype.Sort = function() {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = sort.Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Sort }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Sort = function() { return this.$get().Sort(); };
	$ptrType(ErrorList).prototype.RemoveMultiples = function() {
		var $ptr, _i, _ref, e, i, last, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; e = $f.e; i = $f.i; last = $f.last; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = sort.Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		last = new token.Position.ptr("", 0, 0, 0);
		i = 0;
		_ref = p.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(e.Pos.Filename === last.Filename) || !((e.Pos.Line === last.Line))) {
				token.Position.copy(last, e.Pos);
				(x = p.$get(), ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = e));
				i = i + (1) >> 0;
			}
			_i++;
		}
		p.$set($subslice((p.$get()), 0, i));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $ptrType(ErrorList).prototype.RemoveMultiples }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.e = e; $f.i = i; $f.last = last; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ErrorList.prototype.Error = function() {
		var $ptr, _1, _r, _r$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = p.$length;
			/* */ if (_1 === 0) { $s = 2; continue; }
			/* */ if (_1 === 1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === 0) { */ case 2:
				return "no errors";
			/* } else if (_1 === 1) { */ case 3:
				_r = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]).Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 6; case 6:
				return _r;
			/* } */ case 4:
		case 1:
		_r$1 = fmt.Sprintf("%s (and %d more errors)", new sliceType$1([(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), new $Int((p.$length - 1 >> 0))])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 8; case 8:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ErrorList.prototype.Error }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(ErrorList).prototype.Error = function() { return this.$get().Error(); };
	ErrorList.prototype.Err = function() {
		var $ptr, p;
		p = this;
		if (p.$length === 0) {
			return $ifaceNil;
		}
		return p;
	};
	$ptrType(ErrorList).prototype.Err = function() { return this.$get().Err(); };
	Scanner.ptr.prototype.next = function() {
		var $ptr, _tmp, _tmp$1, _tuple, r, s, w, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.rdOffset < s.src.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.rdOffset < s.src.$length) { */ case 1:
			s.offset = s.rdOffset;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			_tmp = ((x = s.src, x$1 = s.rdOffset, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0);
			_tmp$1 = 1;
			r = _tmp;
			w = _tmp$1;
				/* */ if ((r === 0)) { $s = 5; continue; }
				/* */ if (r >= 128) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((r === 0)) { */ case 5:
					$r = s.error(s.offset, "illegal character NUL"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if (r >= 128) { */ case 6:
					_tuple = utf8.DecodeRune($subslice(s.src, s.rdOffset));
					r = _tuple[0];
					w = _tuple[1];
					/* */ if ((r === 65533) && (w === 1)) { $s = 9; continue; }
					/* */ if ((r === 65279) && s.offset > 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((r === 65533) && (w === 1)) { */ case 9:
						$r = s.error(s.offset, "illegal UTF-8 encoding"); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 11; continue;
					/* } else if ((r === 65279) && s.offset > 0) { */ case 10:
						$r = s.error(s.offset, "illegal byte order mark"); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
				/* } */ case 7:
			case 4:
			s.rdOffset = s.rdOffset + (w) >> 0;
			s.ch = r;
			$s = 3; continue;
		/* } else { */ case 2:
			s.offset = s.src.$length;
			if (s.ch === 10) {
				s.lineOffset = s.offset;
				s.file.AddLine(s.offset);
			}
			s.ch = -1;
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.next }; } $f.$ptr = $ptr; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.next = function() { return this.$val.next(); };
	Scanner.ptr.prototype.Init = function(file, src, err, mode) {
		var $ptr, _r, _tuple, err, file, mode, s, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; file = $f.file; mode = $f.mode; s = $f.s; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!((file.Size() === src.$length))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((file.Size() === src.$length))) { */ case 1:
			_r = fmt.Sprintf("file size (%d) does not match src len (%d)", new sliceType$1([new $Int(file.Size()), new $Int(src.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$panic(new $String(_r));
		/* } */ case 2:
		s.file = file;
		_tuple = filepath.Split(file.Name());
		s.dir = _tuple[0];
		s.src = src;
		s.err = err;
		s.mode = mode;
		s.ch = 32;
		s.offset = 0;
		s.rdOffset = 0;
		s.lineOffset = 0;
		s.insertSemi = false;
		s.ErrorCount = 0;
		$r = s.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (s.ch === 65279) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (s.ch === 65279) { */ case 5:
			$r = s.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.Init }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.file = file; $f.mode = mode; $f.s = s; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.Init = function(file, src, err, mode) { return this.$val.Init(file, src, err, mode); };
	Scanner.ptr.prototype.error = function(offs, msg) {
		var $ptr, _r, msg, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; msg = $f.msg; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!(s.err === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(s.err === $throwNilPointerError)) { */ case 1:
			_r = s.file.Position(s.file.Pos(offs)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = s.err(_r, msg); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		s.ErrorCount = s.ErrorCount + (1) >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.error }; } $f.$ptr = $ptr; $f._r = _r; $f.msg = msg; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.error = function(offs, msg) { return this.$val.error(offs, msg); };
	Scanner.ptr.prototype.interpretLineComment = function(text) {
		var $ptr, _r, _tuple, err, filename, i, line, s, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; filename = $f.filename; i = $f.i; line = $f.line; s = $f.s; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (bytes.HasPrefix(text, prefix)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (bytes.HasPrefix(text, prefix)) { */ case 1:
			i = bytes.LastIndex(text, new sliceType([58]));
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				_tuple = strconv.Atoi($bytesToString($subslice(text, (i + 1 >> 0))));
				line = _tuple[0];
				err = _tuple[1];
				/* */ if ($interfaceIsEqual(err, $ifaceNil) && line > 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($interfaceIsEqual(err, $ifaceNil) && line > 0) { */ case 5:
					_r = bytes.TrimSpace($subslice(text, prefix.$length, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					filename = $bytesToString(_r);
					if (!(filename === "")) {
						filename = filepath.Clean(filename);
						if (!filepath.IsAbs(filename)) {
							filename = filepath.Join(new sliceType$2([s.dir, filename]));
						}
					}
					s.file.AddLineInfo((s.lineOffset + text.$length >> 0) + 1 >> 0, filename, line);
				/* } */ case 6:
			/* } */ case 4:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.interpretLineComment }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.filename = filename; $f.i = i; $f.line = line; $f.s = s; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.interpretLineComment = function(text) { return this.$val.interpretLineComment(text); };
	Scanner.ptr.prototype.scanComment = function() {
		var $ptr, ch, hasCR, lit, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch = $f.ch; hasCR = $f.hasCR; lit = $f.lit; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		/* */ if (s.ch === 47) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 47) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 4:
				/* if (!(!((s.ch === 10)) && s.ch >= 0)) { break; } */ if(!(!((s.ch === 10)) && s.ch >= 0)) { $s = 5; continue; }
				if (s.ch === 13) {
					hasCR = true;
				}
				$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 4; continue; case 5:
			/* */ if (offs === s.lineOffset) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (offs === s.lineOffset) { */ case 7:
				$r = s.interpretLineComment($subslice(s.src, offs, s.offset)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			/* goto exit */ $s = 10; continue;
		/* } */ case 2:
		$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 12:
			/* if (!(s.ch >= 0)) { break; } */ if(!(s.ch >= 0)) { $s = 13; continue; }
			ch = s.ch;
			if (ch === 13) {
				hasCR = true;
			}
			$r = s.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((ch === 42) && (s.ch === 47)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ((ch === 42) && (s.ch === 47)) { */ case 15:
				$r = s.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* goto exit */ $s = 10; continue;
			/* } */ case 16:
		/* } */ $s = 12; continue; case 13:
		$r = s.error(offs, "comment not terminated"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* exit: */ case 10:
		lit = $subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		return $bytesToString(lit);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanComment }; } $f.$ptr = $ptr; $f.ch = ch; $f.hasCR = hasCR; $f.lit = lit; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanComment = function() { return this.$val.scanComment(); };
	Scanner.ptr.prototype.findLineEnd = function() {
		var $ptr, ch, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch = $f.ch; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = [s];
		s[0] = this;
		$deferred.push([(function(s) { return function $b(offs) {
			var $ptr, offs, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; offs = $f.offs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			s[0].ch = 47;
			s[0].offset = offs;
			s[0].rdOffset = offs + 1 >> 0;
			$r = s[0].next(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.offs = offs; $f.$s = $s; $f.$r = $r; return $f;
		}; })(s), [s[0].offset - 1 >> 0]]);
		/* while (true) { */ case 1:
			/* if (!((s[0].ch === 47) || (s[0].ch === 42))) { break; } */ if(!((s[0].ch === 47) || (s[0].ch === 42))) { $s = 2; continue; }
			if (s[0].ch === 47) {
				return true;
			}
			$r = s[0].next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 4:
				/* if (!(s[0].ch >= 0)) { break; } */ if(!(s[0].ch >= 0)) { $s = 5; continue; }
				ch = s[0].ch;
				if (ch === 10) {
					return true;
				}
				$r = s[0].next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((ch === 42) && (s[0].ch === 47)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if ((ch === 42) && (s[0].ch === 47)) { */ case 7:
					$r = s[0].next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 5; continue;
				/* } */ case 8:
			/* } */ $s = 4; continue; case 5:
			$r = s[0].skipWhitespace(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (s[0].ch < 0 || (s[0].ch === 10)) {
				return true;
			}
			if (!((s[0].ch === 47))) {
				return false;
			}
			$r = s[0].next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		return false;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return false; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.findLineEnd }; } $f.$ptr = $ptr; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Scanner.prototype.findLineEnd = function() { return this.$val.findLineEnd(); };
	isLetter = function(ch) {
		var $ptr, ch;
		return 97 <= ch && ch <= 122 || 65 <= ch && ch <= 90 || (ch === 95) || ch >= 128 && unicode.IsLetter(ch);
	};
	isDigit = function(ch) {
		var $ptr, ch;
		return 48 <= ch && ch <= 57 || ch >= 128 && unicode.IsDigit(ch);
	};
	Scanner.ptr.prototype.scanIdentifier = function() {
		var $ptr, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		/* while (true) { */ case 1:
			/* if (!(isLetter(s.ch) || isDigit(s.ch))) { break; } */ if(!(isLetter(s.ch) || isDigit(s.ch))) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		return $bytesToString($subslice(s.src, offs, s.offset));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanIdentifier }; } $f.$ptr = $ptr; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanIdentifier = function() { return this.$val.scanIdentifier(); };
	digitVal = function(ch) {
		var $ptr, ch;
		if (48 <= ch && ch <= 57) {
			return ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 102) {
			return (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 70) {
			return (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return 16;
	};
	Scanner.ptr.prototype.scanMantissa = function(base) {
		var $ptr, base, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; base = $f.base; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			/* if (!(digitVal(s.ch) < base)) { break; } */ if(!(digitVal(s.ch) < base)) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanMantissa }; } $f.$ptr = $ptr; $f.base = base; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanMantissa = function(base) { return this.$val.scanMantissa(base); };
	Scanner.ptr.prototype.scanNumber = function(seenDecimalPoint) {
		var $ptr, offs, offs$1, s, seenDecimalDigit, seenDecimalPoint, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; offs = $f.offs; offs$1 = $f.offs$1; s = $f.s; seenDecimalDigit = $f.seenDecimalDigit; seenDecimalPoint = $f.seenDecimalPoint; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		tok = 5;
		/* */ if (seenDecimalPoint) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (seenDecimalPoint) { */ case 1:
			offs = offs - (1) >> 0;
			tok = 6;
			$r = s.scanMantissa(10); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* goto exponent */ $s = 4; continue;
		/* } */ case 2:
		/* */ if (s.ch === 48) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (s.ch === 48) { */ case 5:
			offs$1 = s.offset;
			$r = s.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((s.ch === 120) || (s.ch === 88)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.ch === 120) || (s.ch === 88)) { */ case 8:
				$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = s.scanMantissa(16); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((s.offset - offs$1 >> 0) <= 2) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((s.offset - offs$1 >> 0) <= 2) { */ case 13:
					$r = s.error(offs$1, "illegal hexadecimal number"); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$s = 10; continue;
			/* } else { */ case 9:
				seenDecimalDigit = false;
				$r = s.scanMantissa(8); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((s.ch === 56) || (s.ch === 57)) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((s.ch === 56) || (s.ch === 57)) { */ case 17:
					seenDecimalDigit = true;
					$r = s.scanMantissa(10); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 18:
				/* */ if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if ((s.ch === 46) || (s.ch === 101) || (s.ch === 69) || (s.ch === 105)) { */ case 20:
					/* goto fraction */ $s = 22; continue;
				/* } */ case 21:
				/* */ if (seenDecimalDigit) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (seenDecimalDigit) { */ case 23:
					$r = s.error(offs$1, "illegal octal number"); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
			/* } */ case 10:
			/* goto exit */ $s = 26; continue;
		/* } */ case 6:
		$r = s.scanMantissa(10); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* fraction: */ case 22:
		/* */ if (s.ch === 46) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (s.ch === 46) { */ case 28:
			tok = 6;
			$r = s.next(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = s.scanMantissa(10); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 29:
		/* exponent: */ case 4:
		/* */ if ((s.ch === 101) || (s.ch === 69)) { $s = 32; continue; }
		/* */ $s = 33; continue;
		/* if ((s.ch === 101) || (s.ch === 69)) { */ case 32:
			tok = 6;
			$r = s.next(); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((s.ch === 45) || (s.ch === 43)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((s.ch === 45) || (s.ch === 43)) { */ case 35:
				$r = s.next(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 36:
			$r = s.scanMantissa(10); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 33:
		/* */ if (s.ch === 105) { $s = 39; continue; }
		/* */ $s = 40; continue;
		/* if (s.ch === 105) { */ case 39:
			tok = 7;
			$r = s.next(); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 40:
		/* exit: */ case 26:
		return [tok, $bytesToString($subslice(s.src, offs, s.offset))];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanNumber }; } $f.$ptr = $ptr; $f.offs = offs; $f.offs$1 = offs$1; $f.s = s; $f.seenDecimalDigit = seenDecimalDigit; $f.seenDecimalPoint = seenDecimalPoint; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanNumber = function(seenDecimalPoint) { return this.$val.scanNumber(seenDecimalPoint); };
	Scanner.ptr.prototype.scanEscape = function(quote) {
		var $ptr, _1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, base, d, max, msg, msg$1, n, offs, quote, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; base = $f.base; d = $f.d; max = $f.max; msg = $f.msg; msg$1 = $f.msg$1; n = $f.n; offs = $f.offs; quote = $f.quote; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset;
		n = 0;
		_tmp = 0;
		_tmp$1 = 0;
		base = _tmp;
		max = _tmp$1;
			_1 = s.ch;
			/* */ if ((_1 === 97) || (_1 === 98) || (_1 === 102) || (_1 === 110) || (_1 === 114) || (_1 === 116) || (_1 === 118) || (_1 === 92) || (_1 === (quote))) { $s = 2; continue; }
			/* */ if ((_1 === 48) || (_1 === 49) || (_1 === 50) || (_1 === 51) || (_1 === 52) || (_1 === 53) || (_1 === 54) || (_1 === 55)) { $s = 3; continue; }
			/* */ if (_1 === 120) { $s = 4; continue; }
			/* */ if (_1 === 117) { $s = 5; continue; }
			/* */ if (_1 === 85) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === 97) || (_1 === 98) || (_1 === 102) || (_1 === 110) || (_1 === 114) || (_1 === 116) || (_1 === 118) || (_1 === 92) || (_1 === (quote))) { */ case 2:
				$r = s.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return true;
			/* } else if ((_1 === 48) || (_1 === 49) || (_1 === 50) || (_1 === 51) || (_1 === 52) || (_1 === 53) || (_1 === 54) || (_1 === 55)) { */ case 3:
				_tmp$2 = 3;
				_tmp$3 = 8;
				_tmp$4 = 255;
				n = _tmp$2;
				base = _tmp$3;
				max = _tmp$4;
				$s = 8; continue;
			/* } else if (_1 === 120) { */ case 4:
				$r = s.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$5 = 2;
				_tmp$6 = 16;
				_tmp$7 = 255;
				n = _tmp$5;
				base = _tmp$6;
				max = _tmp$7;
				$s = 8; continue;
			/* } else if (_1 === 117) { */ case 5:
				$r = s.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$8 = 4;
				_tmp$9 = 16;
				_tmp$10 = 1114111;
				n = _tmp$8;
				base = _tmp$9;
				max = _tmp$10;
				$s = 8; continue;
			/* } else if (_1 === 85) { */ case 6:
				$r = s.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$11 = 8;
				_tmp$12 = 16;
				_tmp$13 = 1114111;
				n = _tmp$11;
				base = _tmp$12;
				max = _tmp$13;
				$s = 8; continue;
			/* } else { */ case 7:
				msg = "unknown escape sequence";
				if (s.ch < 0) {
					msg = "escape sequence not terminated";
				}
				$r = s.error(offs, msg); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return false;
			/* } */ case 8:
		case 1:
		x = 0;
		/* while (true) { */ case 14:
			/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 15; continue; }
			d = (digitVal(s.ch) >>> 0);
			/* */ if (d >= base) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (d >= base) { */ case 16:
				_r = fmt.Sprintf("illegal character %#U in escape sequence", new sliceType$1([new $Int32(s.ch)])); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				msg$1 = _r;
				if (s.ch < 0) {
					msg$1 = "escape sequence not terminated";
				}
				$r = s.error(s.offset, msg$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return false;
			/* } */ case 17:
			x = ($imul(x, base) >>> 0) + d >>> 0;
			$r = s.next(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = n - (1) >> 0;
		/* } */ $s = 14; continue; case 15:
		/* */ if (x > max || 55296 <= x && x < 57344) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (x > max || 55296 <= x && x < 57344) { */ case 21:
			$r = s.error(offs, "escape sequence is invalid Unicode code point"); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return false;
		/* } */ case 22:
		return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanEscape }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.base = base; $f.d = d; $f.max = max; $f.msg = msg; $f.msg$1 = msg$1; $f.n = n; $f.offs = offs; $f.quote = quote; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanEscape = function(quote) { return this.$val.scanEscape(quote); };
	Scanner.ptr.prototype.scanRune = function() {
		var $ptr, _r, ch, n, offs, s, valid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; n = $f.n; offs = $f.offs; s = $f.s; valid = $f.valid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		valid = true;
		n = 0;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if ((ch === 10) || ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((ch === 10) || ch < 0) { */ case 3:
				/* */ if (valid) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (valid) { */ case 5:
					$r = s.error(offs, "rune literal not terminated"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					valid = false;
				/* } */ case 6:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 39) {
				/* break; */ $s = 2; continue;
			}
			n = n + (1) >> 0;
			/* */ if (ch === 92) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (ch === 92) { */ case 9:
				_r = s.scanEscape(39); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!_r) { */ case 11:
					valid = false;
				/* } */ case 12:
			/* } */ case 10:
		/* } */ $s = 1; continue; case 2:
		/* */ if (valid && !((n === 1))) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (valid && !((n === 1))) { */ case 14:
			$r = s.error(offs, "illegal rune literal"); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 15:
		return $bytesToString($subslice(s.src, offs, s.offset));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanRune }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.n = n; $f.offs = offs; $f.s = s; $f.valid = valid; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanRune = function() { return this.$val.scanRune(); };
	Scanner.ptr.prototype.scanString = function() {
		var $ptr, _r, ch, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; ch = $f.ch; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if ((ch === 10) || ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((ch === 10) || ch < 0) { */ case 3:
				$r = s.error(offs, "string literal not terminated"); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 34) {
				/* break; */ $s = 2; continue;
			}
			/* */ if (ch === 92) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ch === 92) { */ case 7:
				_r = s.scanEscape(34); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 8:
		/* } */ $s = 1; continue; case 2:
		return $bytesToString($subslice(s.src, offs, s.offset));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanString }; } $f.$ptr = $ptr; $f._r = _r; $f.ch = ch; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanString = function() { return this.$val.scanString(); };
	stripCR = function(b) {
		var $ptr, _i, _ref, b, c, ch, i;
		c = $makeSlice(sliceType, b.$length);
		i = 0;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((ch === 13))) {
				((i < 0 || i >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + i] = ch);
				i = i + (1) >> 0;
			}
			_i++;
		}
		return $subslice(c, 0, i);
	};
	Scanner.ptr.prototype.scanRawString = function() {
		var $ptr, ch, hasCR, lit, offs, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch = $f.ch; hasCR = $f.hasCR; lit = $f.lit; offs = $f.offs; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		offs = s.offset - 1 >> 0;
		hasCR = false;
		/* while (true) { */ case 1:
			ch = s.ch;
			/* */ if (ch < 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ch < 0) { */ case 3:
				$r = s.error(offs, "raw string literal not terminated"); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (ch === 96) {
				/* break; */ $s = 2; continue;
			}
			if (ch === 13) {
				hasCR = true;
			}
		/* } */ $s = 1; continue; case 2:
		lit = $subslice(s.src, offs, s.offset);
		if (hasCR) {
			lit = stripCR(lit);
		}
		return $bytesToString(lit);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.scanRawString }; } $f.$ptr = $ptr; $f.ch = ch; $f.hasCR = hasCR; $f.lit = lit; $f.offs = offs; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.scanRawString = function() { return this.$val.scanRawString(); };
	Scanner.ptr.prototype.skipWhitespace = function() {
		var $ptr, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			/* if (!((s.ch === 32) || (s.ch === 9) || (s.ch === 10) && !s.insertSemi || (s.ch === 13))) { break; } */ if(!((s.ch === 32) || (s.ch === 9) || (s.ch === 10) && !s.insertSemi || (s.ch === 13))) { $s = 2; continue; }
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.skipWhitespace }; } $f.$ptr = $ptr; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.skipWhitespace = function() { return this.$val.skipWhitespace(); };
	Scanner.ptr.prototype.switch2 = function(tok0, tok1) {
		var $ptr, s, tok0, tok1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tok1;
		/* } */ case 2:
		return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch2 }; } $f.$ptr = $ptr; $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch2 = function(tok0, tok1) { return this.$val.switch2(tok0, tok1); };
	Scanner.ptr.prototype.switch3 = function(tok0, tok1, ch2, tok2) {
		var $ptr, ch2, s, tok0, tok1, tok2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch2 = $f.ch2; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; tok2 = $f.tok2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tok1;
		/* } */ case 2:
		/* */ if (s.ch === ch2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ch === ch2) { */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tok2;
		/* } */ case 5:
		return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch3 }; } $f.$ptr = $ptr; $f.ch2 = ch2; $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.tok2 = tok2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch3 = function(tok0, tok1, ch2, tok2) { return this.$val.switch3(tok0, tok1, ch2, tok2); };
	Scanner.ptr.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) {
		var $ptr, ch2, s, tok0, tok1, tok2, tok3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch2 = $f.ch2; s = $f.s; tok0 = $f.tok0; tok1 = $f.tok1; tok2 = $f.tok2; tok3 = $f.tok3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (s.ch === 61) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.ch === 61) { */ case 1:
			$r = s.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return tok1;
		/* } */ case 2:
		/* */ if (s.ch === ch2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (s.ch === ch2) { */ case 4:
			$r = s.next(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (s.ch === 61) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (s.ch === 61) { */ case 7:
				$r = s.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return tok3;
			/* } */ case 8:
			return tok2;
		/* } */ case 5:
		return tok0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.switch4 }; } $f.$ptr = $ptr; $f.ch2 = ch2; $f.s = s; $f.tok0 = tok0; $f.tok1 = tok1; $f.tok2 = tok2; $f.tok3 = tok3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.switch4 = function(tok0, tok1, ch2, tok2, tok3) { return this.$val.switch4(tok0, tok1, ch2, tok2, tok3); };
	Scanner.ptr.prototype.Scan = function() {
		var $ptr, _2, _3, _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _v, ch, comment, insertSemi, lit, pos, s, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _3 = $f._3; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; ch = $f.ch; comment = $f.comment; insertSemi = $f.insertSemi; lit = $f.lit; pos = $f.pos; s = $f.s; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		tok = 0;
		lit = "";
		s = this;
		/* scanAgain: */ case 1:
		$r = s.skipWhitespace(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pos = s.file.Pos(s.offset);
		insertSemi = false;
			ch = s.ch;
			/* */ if (isLetter(ch)) { $s = 4; continue; }
			/* */ if (48 <= ch && ch <= 57) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (isLetter(ch)) { */ case 4:
				_r = s.scanIdentifier(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				lit = _r;
				if (lit.length > 1) {
					tok = token.Lookup(lit);
					_2 = tok;
					if ((_2 === 4) || (_2 === 61) || (_2 === 65) || (_2 === 69) || (_2 === 80)) {
						insertSemi = true;
					}
				} else {
					insertSemi = true;
					tok = 4;
				}
				$s = 7; continue;
			/* } else if (48 <= ch && ch <= 57) { */ case 5:
				insertSemi = true;
				_r$1 = s.scanNumber(false); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				tok = _tuple[0];
				lit = _tuple[1];
				$s = 7; continue;
			/* } else { */ case 6:
				$r = s.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_3 = ch;
					/* */ if (_3 === -1) { $s = 12; continue; }
					/* */ if (_3 === 10) { $s = 13; continue; }
					/* */ if (_3 === 34) { $s = 14; continue; }
					/* */ if (_3 === 39) { $s = 15; continue; }
					/* */ if (_3 === 96) { $s = 16; continue; }
					/* */ if (_3 === 58) { $s = 17; continue; }
					/* */ if (_3 === 46) { $s = 18; continue; }
					/* */ if (_3 === 44) { $s = 19; continue; }
					/* */ if (_3 === 59) { $s = 20; continue; }
					/* */ if (_3 === 40) { $s = 21; continue; }
					/* */ if (_3 === 41) { $s = 22; continue; }
					/* */ if (_3 === 91) { $s = 23; continue; }
					/* */ if (_3 === 93) { $s = 24; continue; }
					/* */ if (_3 === 123) { $s = 25; continue; }
					/* */ if (_3 === 125) { $s = 26; continue; }
					/* */ if (_3 === 43) { $s = 27; continue; }
					/* */ if (_3 === 45) { $s = 28; continue; }
					/* */ if (_3 === 42) { $s = 29; continue; }
					/* */ if (_3 === 47) { $s = 30; continue; }
					/* */ if (_3 === 37) { $s = 31; continue; }
					/* */ if (_3 === 94) { $s = 32; continue; }
					/* */ if (_3 === 60) { $s = 33; continue; }
					/* */ if (_3 === 62) { $s = 34; continue; }
					/* */ if (_3 === 61) { $s = 35; continue; }
					/* */ if (_3 === 33) { $s = 36; continue; }
					/* */ if (_3 === 38) { $s = 37; continue; }
					/* */ if (_3 === 124) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (_3 === -1) { */ case 12:
						if (s.insertSemi) {
							s.insertSemi = false;
							_tmp = pos;
							_tmp$1 = 57;
							_tmp$2 = "\n";
							pos = _tmp;
							tok = _tmp$1;
							lit = _tmp$2;
							return [pos, tok, lit];
						}
						tok = 1;
						$s = 40; continue;
					/* } else if (_3 === 10) { */ case 13:
						s.insertSemi = false;
						_tmp$3 = pos;
						_tmp$4 = 57;
						_tmp$5 = "\n";
						pos = _tmp$3;
						tok = _tmp$4;
						lit = _tmp$5;
						return [pos, tok, lit];
					/* } else if (_3 === 34) { */ case 14:
						insertSemi = true;
						tok = 9;
						_r$2 = s.scanString(); /* */ $s = 41; case 41: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						lit = _r$2;
						$s = 40; continue;
					/* } else if (_3 === 39) { */ case 15:
						insertSemi = true;
						tok = 8;
						_r$3 = s.scanRune(); /* */ $s = 42; case 42: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						lit = _r$3;
						$s = 40; continue;
					/* } else if (_3 === 96) { */ case 16:
						insertSemi = true;
						tok = 9;
						_r$4 = s.scanRawString(); /* */ $s = 43; case 43: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						lit = _r$4;
						$s = 40; continue;
					/* } else if (_3 === 58) { */ case 17:
						_r$5 = s.switch2(58, 47); /* */ $s = 44; case 44: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						tok = _r$5;
						$s = 40; continue;
					/* } else if (_3 === 46) { */ case 18:
						/* */ if (48 <= s.ch && s.ch <= 57) { $s = 45; continue; }
						/* */ if (s.ch === 46) { $s = 46; continue; }
						/* */ $s = 47; continue;
						/* if (48 <= s.ch && s.ch <= 57) { */ case 45:
							insertSemi = true;
							_r$6 = s.scanNumber(true); /* */ $s = 49; case 49: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_tuple$1 = _r$6;
							tok = _tuple$1[0];
							lit = _tuple$1[1];
							$s = 48; continue;
						/* } else if (s.ch === 46) { */ case 46:
							$r = s.next(); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* */ if (s.ch === 46) { $s = 51; continue; }
							/* */ $s = 52; continue;
							/* if (s.ch === 46) { */ case 51:
								$r = s.next(); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								tok = 48;
							/* } */ case 52:
							$s = 48; continue;
						/* } else { */ case 47:
							tok = 53;
						/* } */ case 48:
						$s = 40; continue;
					/* } else if (_3 === 44) { */ case 19:
						tok = 52;
						$s = 40; continue;
					/* } else if (_3 === 59) { */ case 20:
						tok = 57;
						lit = ";";
						$s = 40; continue;
					/* } else if (_3 === 40) { */ case 21:
						tok = 49;
						$s = 40; continue;
					/* } else if (_3 === 41) { */ case 22:
						insertSemi = true;
						tok = 54;
						$s = 40; continue;
					/* } else if (_3 === 91) { */ case 23:
						tok = 50;
						$s = 40; continue;
					/* } else if (_3 === 93) { */ case 24:
						insertSemi = true;
						tok = 55;
						$s = 40; continue;
					/* } else if (_3 === 123) { */ case 25:
						tok = 51;
						$s = 40; continue;
					/* } else if (_3 === 125) { */ case 26:
						insertSemi = true;
						tok = 56;
						$s = 40; continue;
					/* } else if (_3 === 43) { */ case 27:
						_r$7 = s.switch3(12, 23, 43, 37); /* */ $s = 54; case 54: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						tok = _r$7;
						if (tok === 37) {
							insertSemi = true;
						}
						$s = 40; continue;
					/* } else if (_3 === 45) { */ case 28:
						_r$8 = s.switch3(13, 24, 45, 38); /* */ $s = 55; case 55: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						tok = _r$8;
						if (tok === 38) {
							insertSemi = true;
						}
						$s = 40; continue;
					/* } else if (_3 === 42) { */ case 29:
						_r$9 = s.switch2(14, 25); /* */ $s = 56; case 56: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						tok = _r$9;
						$s = 40; continue;
					/* } else if (_3 === 47) { */ case 30:
						/* */ if ((s.ch === 47) || (s.ch === 42)) { $s = 57; continue; }
						/* */ $s = 58; continue;
						/* if ((s.ch === 47) || (s.ch === 42)) { */ case 57:
							if (!(s.insertSemi)) { _v = false; $s = 62; continue s; }
							_r$10 = s.findLineEnd(); /* */ $s = 63; case 63: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							_v = _r$10; case 62:
							/* */ if (_v) { $s = 60; continue; }
							/* */ $s = 61; continue;
							/* if (_v) { */ case 60:
								s.ch = 47;
								s.offset = s.file.Offset(pos);
								s.rdOffset = s.offset + 1 >> 0;
								s.insertSemi = false;
								_tmp$6 = pos;
								_tmp$7 = 57;
								_tmp$8 = "\n";
								pos = _tmp$6;
								tok = _tmp$7;
								lit = _tmp$8;
								return [pos, tok, lit];
							/* } */ case 61:
							_r$11 = s.scanComment(); /* */ $s = 64; case 64: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							comment = _r$11;
							/* */ if (((s.mode & 1) >>> 0) === 0) { $s = 65; continue; }
							/* */ $s = 66; continue;
							/* if (((s.mode & 1) >>> 0) === 0) { */ case 65:
								s.insertSemi = false;
								/* goto scanAgain */ $s = 1; continue;
							/* } */ case 66:
							tok = 2;
							lit = comment;
							$s = 59; continue;
						/* } else { */ case 58:
							_r$12 = s.switch2(15, 26); /* */ $s = 67; case 67: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
							tok = _r$12;
						/* } */ case 59:
						$s = 40; continue;
					/* } else if (_3 === 37) { */ case 31:
						_r$13 = s.switch2(16, 27); /* */ $s = 68; case 68: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						tok = _r$13;
						$s = 40; continue;
					/* } else if (_3 === 94) { */ case 32:
						_r$14 = s.switch2(19, 30); /* */ $s = 69; case 69: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						tok = _r$14;
						$s = 40; continue;
					/* } else if (_3 === 60) { */ case 33:
						/* */ if (s.ch === 45) { $s = 70; continue; }
						/* */ $s = 71; continue;
						/* if (s.ch === 45) { */ case 70:
							$r = s.next(); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							tok = 36;
							$s = 72; continue;
						/* } else { */ case 71:
							_r$15 = s.switch4(40, 45, 60, 20, 31); /* */ $s = 74; case 74: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							tok = _r$15;
						/* } */ case 72:
						$s = 40; continue;
					/* } else if (_3 === 62) { */ case 34:
						_r$16 = s.switch4(41, 46, 62, 21, 32); /* */ $s = 75; case 75: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						tok = _r$16;
						$s = 40; continue;
					/* } else if (_3 === 61) { */ case 35:
						_r$17 = s.switch2(42, 39); /* */ $s = 76; case 76: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						tok = _r$17;
						$s = 40; continue;
					/* } else if (_3 === 33) { */ case 36:
						_r$18 = s.switch2(43, 44); /* */ $s = 77; case 77: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						tok = _r$18;
						$s = 40; continue;
					/* } else if (_3 === 38) { */ case 37:
						/* */ if (s.ch === 94) { $s = 78; continue; }
						/* */ $s = 79; continue;
						/* if (s.ch === 94) { */ case 78:
							$r = s.next(); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_r$19 = s.switch2(22, 33); /* */ $s = 82; case 82: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							tok = _r$19;
							$s = 80; continue;
						/* } else { */ case 79:
							_r$20 = s.switch3(17, 28, 38, 34); /* */ $s = 83; case 83: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
							tok = _r$20;
						/* } */ case 80:
						$s = 40; continue;
					/* } else if (_3 === 124) { */ case 38:
						_r$21 = s.switch3(18, 29, 124, 35); /* */ $s = 84; case 84: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						tok = _r$21;
						$s = 40; continue;
					/* } else { */ case 39:
						/* */ if (!((ch === 65279))) { $s = 85; continue; }
						/* */ $s = 86; continue;
						/* if (!((ch === 65279))) { */ case 85:
							_arg = s.file.Offset(pos);
							_r$22 = fmt.Sprintf("illegal character %#U", new sliceType$1([new $Int32(ch)])); /* */ $s = 87; case 87: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
							_arg$1 = _r$22;
							$r = s.error(_arg, _arg$1); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 86:
						insertSemi = s.insertSemi;
						tok = 0;
						lit = $encodeRune(ch);
					/* } */ case 40:
				case 11:
			/* } */ case 7:
		case 3:
		if (((s.mode & 2) >>> 0) === 0) {
			s.insertSemi = insertSemi;
		}
		return [pos, tok, lit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scanner.ptr.prototype.Scan }; } $f.$ptr = $ptr; $f._2 = _2; $f._3 = _3; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.ch = ch; $f.comment = comment; $f.insertSemi = insertSemi; $f.lit = lit; $f.pos = pos; $f.s = s; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scanner.prototype.Scan = function() { return this.$val.Scan(); };
	Error.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorList.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Err", name: "Err", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([token.Position, $String], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "RemoveMultiples", name: "RemoveMultiples", pkg: "", typ: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "next", name: "next", pkg: "go/scanner", typ: $funcType([], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([ptrType$2, sliceType, ErrorHandler, Mode], [], false)}, {prop: "error", name: "error", pkg: "go/scanner", typ: $funcType([$Int, $String], [], false)}, {prop: "interpretLineComment", name: "interpretLineComment", pkg: "go/scanner", typ: $funcType([sliceType], [], false)}, {prop: "scanComment", name: "scanComment", pkg: "go/scanner", typ: $funcType([], [$String], false)}, {prop: "findLineEnd", name: "findLineEnd", pkg: "go/scanner", typ: $funcType([], [$Bool], false)}, {prop: "scanIdentifier", name: "scanIdentifier", pkg: "go/scanner", typ: $funcType([], [$String], false)}, {prop: "scanMantissa", name: "scanMantissa", pkg: "go/scanner", typ: $funcType([$Int], [], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "go/scanner", typ: $funcType([$Bool], [token.Token, $String], false)}, {prop: "scanEscape", name: "scanEscape", pkg: "go/scanner", typ: $funcType([$Int32], [$Bool], false)}, {prop: "scanRune", name: "scanRune", pkg: "go/scanner", typ: $funcType([], [$String], false)}, {prop: "scanString", name: "scanString", pkg: "go/scanner", typ: $funcType([], [$String], false)}, {prop: "scanRawString", name: "scanRawString", pkg: "go/scanner", typ: $funcType([], [$String], false)}, {prop: "skipWhitespace", name: "skipWhitespace", pkg: "go/scanner", typ: $funcType([], [], false)}, {prop: "switch2", name: "switch2", pkg: "go/scanner", typ: $funcType([token.Token, token.Token], [token.Token], false)}, {prop: "switch3", name: "switch3", pkg: "go/scanner", typ: $funcType([token.Token, token.Token, $Int32, token.Token], [token.Token], false)}, {prop: "switch4", name: "switch4", pkg: "go/scanner", typ: $funcType([token.Token, token.Token, $Int32, token.Token, token.Token], [token.Token], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([], [token.Pos, token.Token, $String], false)}];
	Error.init([{prop: "Pos", name: "Pos", pkg: "", typ: token.Position, tag: ""}, {prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}]);
	ErrorList.init(ptrType$1);
	ErrorHandler.init([token.Position, $String], [], false);
	Scanner.init([{prop: "file", name: "file", pkg: "go/scanner", typ: ptrType$2, tag: ""}, {prop: "dir", name: "dir", pkg: "go/scanner", typ: $String, tag: ""}, {prop: "src", name: "src", pkg: "go/scanner", typ: sliceType, tag: ""}, {prop: "err", name: "err", pkg: "go/scanner", typ: ErrorHandler, tag: ""}, {prop: "mode", name: "mode", pkg: "go/scanner", typ: Mode, tag: ""}, {prop: "ch", name: "ch", pkg: "go/scanner", typ: $Int32, tag: ""}, {prop: "offset", name: "offset", pkg: "go/scanner", typ: $Int, tag: ""}, {prop: "rdOffset", name: "rdOffset", pkg: "go/scanner", typ: $Int, tag: ""}, {prop: "lineOffset", name: "lineOffset", pkg: "go/scanner", typ: $Int, tag: ""}, {prop: "insertSemi", name: "insertSemi", pkg: "go/scanner", typ: $Bool, tag: ""}, {prop: "ErrorCount", name: "ErrorCount", pkg: "", typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		prefix = new sliceType($stringToBytes("//line "));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/ast"] = (function() {
	var $pkg = {}, $init, bytes, fmt, scanner, token, io, os, reflect, sort, strconv, strings, unicode, utf8, Node, Expr, Stmt, Decl, Comment, CommentGroup, Field, FieldList, BadExpr, Ident, Ellipsis, BasicLit, FuncLit, CompositeLit, ParenExpr, SelectorExpr, IndexExpr, SliceExpr, TypeAssertExpr, CallExpr, StarExpr, UnaryExpr, BinaryExpr, KeyValueExpr, ChanDir, ArrayType, StructType, FuncType, InterfaceType, MapType, ChanType, BadStmt, DeclStmt, EmptyStmt, LabeledStmt, ExprStmt, SendStmt, IncDecStmt, AssignStmt, GoStmt, DeferStmt, ReturnStmt, BranchStmt, BlockStmt, IfStmt, CaseClause, SwitchStmt, TypeSwitchStmt, CommClause, SelectStmt, ForStmt, RangeStmt, Spec, ImportSpec, ValueSpec, TypeSpec, BadDecl, GenDecl, FuncDecl, File, Package, posSpan, byImportSpec, byCommentPos, Scope, Object, ObjKind, Visitor, inspector, sliceType, ptrType, sliceType$1, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, ptrType$6, ptrType$9, ptrType$10, arrayType, arrayType$1, sliceType$4, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, sliceType$5, sliceType$6, ptrType$24, sliceType$7, sliceType$8, sliceType$9, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, sliceType$10, sliceType$11, sliceType$12, sliceType$13, mapType, mapType$1, objKindStrings, isWhitespace, stripTrailingWhitespace, IsExported, SortImports, importPath, importName, importComment, collapse, sortSpecs, NewScope, NewObj, walkIdentList, walkExprList, walkStmtList, walkDeclList, Walk, Inspect;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	scanner = $packages["go/scanner"];
	token = $packages["go/token"];
	io = $packages["io"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Node = $pkg.Node = $newType(8, $kindInterface, "ast.Node", "Node", "go/ast", null);
	Expr = $pkg.Expr = $newType(8, $kindInterface, "ast.Expr", "Expr", "go/ast", null);
	Stmt = $pkg.Stmt = $newType(8, $kindInterface, "ast.Stmt", "Stmt", "go/ast", null);
	Decl = $pkg.Decl = $newType(8, $kindInterface, "ast.Decl", "Decl", "go/ast", null);
	Comment = $pkg.Comment = $newType(0, $kindStruct, "ast.Comment", "Comment", "go/ast", function(Slash_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Slash = 0;
			this.Text = "";
			return;
		}
		this.Slash = Slash_;
		this.Text = Text_;
	});
	CommentGroup = $pkg.CommentGroup = $newType(0, $kindStruct, "ast.CommentGroup", "CommentGroup", "go/ast", function(List_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.List = sliceType$5.nil;
			return;
		}
		this.List = List_;
	});
	Field = $pkg.Field = $newType(0, $kindStruct, "ast.Field", "Field", "go/ast", function(Doc_, Names_, Type_, Tag_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Names = sliceType$8.nil;
			this.Type = $ifaceNil;
			this.Tag = ptrType$1.nil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Names = Names_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Comment = Comment_;
	});
	FieldList = $pkg.FieldList = $newType(0, $kindStruct, "ast.FieldList", "FieldList", "go/ast", function(Opening_, List_, Closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Opening = 0;
			this.List = sliceType$10.nil;
			this.Closing = 0;
			return;
		}
		this.Opening = Opening_;
		this.List = List_;
		this.Closing = Closing_;
	});
	BadExpr = $pkg.BadExpr = $newType(0, $kindStruct, "ast.BadExpr", "BadExpr", "go/ast", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	Ident = $pkg.Ident = $newType(0, $kindStruct, "ast.Ident", "Ident", "go/ast", function(NamePos_, Name_, Obj_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NamePos = 0;
			this.Name = "";
			this.Obj = ptrType$3.nil;
			return;
		}
		this.NamePos = NamePos_;
		this.Name = Name_;
		this.Obj = Obj_;
	});
	Ellipsis = $pkg.Ellipsis = $newType(0, $kindStruct, "ast.Ellipsis", "Ellipsis", "go/ast", function(Ellipsis_, Elt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Ellipsis = 0;
			this.Elt = $ifaceNil;
			return;
		}
		this.Ellipsis = Ellipsis_;
		this.Elt = Elt_;
	});
	BasicLit = $pkg.BasicLit = $newType(0, $kindStruct, "ast.BasicLit", "BasicLit", "go/ast", function(ValuePos_, Kind_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ValuePos = 0;
			this.Kind = 0;
			this.Value = "";
			return;
		}
		this.ValuePos = ValuePos_;
		this.Kind = Kind_;
		this.Value = Value_;
	});
	FuncLit = $pkg.FuncLit = $newType(0, $kindStruct, "ast.FuncLit", "FuncLit", "go/ast", function(Type_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = ptrType$16.nil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Type = Type_;
		this.Body = Body_;
	});
	CompositeLit = $pkg.CompositeLit = $newType(0, $kindStruct, "ast.CompositeLit", "CompositeLit", "go/ast", function(Type_, Lbrace_, Elts_, Rbrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			this.Lbrace = 0;
			this.Elts = sliceType$11.nil;
			this.Rbrace = 0;
			return;
		}
		this.Type = Type_;
		this.Lbrace = Lbrace_;
		this.Elts = Elts_;
		this.Rbrace = Rbrace_;
	});
	ParenExpr = $pkg.ParenExpr = $newType(0, $kindStruct, "ast.ParenExpr", "ParenExpr", "go/ast", function(Lparen_, X_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lparen = 0;
			this.X = $ifaceNil;
			this.Rparen = 0;
			return;
		}
		this.Lparen = Lparen_;
		this.X = X_;
		this.Rparen = Rparen_;
	});
	SelectorExpr = $pkg.SelectorExpr = $newType(0, $kindStruct, "ast.SelectorExpr", "SelectorExpr", "go/ast", function(X_, Sel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Sel = ptrType$4.nil;
			return;
		}
		this.X = X_;
		this.Sel = Sel_;
	});
	IndexExpr = $pkg.IndexExpr = $newType(0, $kindStruct, "ast.IndexExpr", "IndexExpr", "go/ast", function(X_, Lbrack_, Index_, Rbrack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lbrack = 0;
			this.Index = $ifaceNil;
			this.Rbrack = 0;
			return;
		}
		this.X = X_;
		this.Lbrack = Lbrack_;
		this.Index = Index_;
		this.Rbrack = Rbrack_;
	});
	SliceExpr = $pkg.SliceExpr = $newType(0, $kindStruct, "ast.SliceExpr", "SliceExpr", "go/ast", function(X_, Lbrack_, Low_, High_, Max_, Slice3_, Rbrack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lbrack = 0;
			this.Low = $ifaceNil;
			this.High = $ifaceNil;
			this.Max = $ifaceNil;
			this.Slice3 = false;
			this.Rbrack = 0;
			return;
		}
		this.X = X_;
		this.Lbrack = Lbrack_;
		this.Low = Low_;
		this.High = High_;
		this.Max = Max_;
		this.Slice3 = Slice3_;
		this.Rbrack = Rbrack_;
	});
	TypeAssertExpr = $pkg.TypeAssertExpr = $newType(0, $kindStruct, "ast.TypeAssertExpr", "TypeAssertExpr", "go/ast", function(X_, Lparen_, Type_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.Lparen = 0;
			this.Type = $ifaceNil;
			this.Rparen = 0;
			return;
		}
		this.X = X_;
		this.Lparen = Lparen_;
		this.Type = Type_;
		this.Rparen = Rparen_;
	});
	CallExpr = $pkg.CallExpr = $newType(0, $kindStruct, "ast.CallExpr", "CallExpr", "go/ast", function(Fun_, Lparen_, Args_, Ellipsis_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Fun = $ifaceNil;
			this.Lparen = 0;
			this.Args = sliceType$11.nil;
			this.Ellipsis = 0;
			this.Rparen = 0;
			return;
		}
		this.Fun = Fun_;
		this.Lparen = Lparen_;
		this.Args = Args_;
		this.Ellipsis = Ellipsis_;
		this.Rparen = Rparen_;
	});
	StarExpr = $pkg.StarExpr = $newType(0, $kindStruct, "ast.StarExpr", "StarExpr", "go/ast", function(Star_, X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Star = 0;
			this.X = $ifaceNil;
			return;
		}
		this.Star = Star_;
		this.X = X_;
	});
	UnaryExpr = $pkg.UnaryExpr = $newType(0, $kindStruct, "ast.UnaryExpr", "UnaryExpr", "go/ast", function(OpPos_, Op_, X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.OpPos = 0;
			this.Op = 0;
			this.X = $ifaceNil;
			return;
		}
		this.OpPos = OpPos_;
		this.Op = Op_;
		this.X = X_;
	});
	BinaryExpr = $pkg.BinaryExpr = $newType(0, $kindStruct, "ast.BinaryExpr", "BinaryExpr", "go/ast", function(X_, OpPos_, Op_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.OpPos = 0;
			this.Op = 0;
			this.Y = $ifaceNil;
			return;
		}
		this.X = X_;
		this.OpPos = OpPos_;
		this.Op = Op_;
		this.Y = Y_;
	});
	KeyValueExpr = $pkg.KeyValueExpr = $newType(0, $kindStruct, "ast.KeyValueExpr", "KeyValueExpr", "go/ast", function(Key_, Colon_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Key = $ifaceNil;
			this.Colon = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Key = Key_;
		this.Colon = Colon_;
		this.Value = Value_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "ast.ChanDir", "ChanDir", "go/ast", null);
	ArrayType = $pkg.ArrayType = $newType(0, $kindStruct, "ast.ArrayType", "ArrayType", "go/ast", function(Lbrack_, Len_, Elt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lbrack = 0;
			this.Len = $ifaceNil;
			this.Elt = $ifaceNil;
			return;
		}
		this.Lbrack = Lbrack_;
		this.Len = Len_;
		this.Elt = Elt_;
	});
	StructType = $pkg.StructType = $newType(0, $kindStruct, "ast.StructType", "StructType", "go/ast", function(Struct_, Fields_, Incomplete_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Struct = 0;
			this.Fields = ptrType$2.nil;
			this.Incomplete = false;
			return;
		}
		this.Struct = Struct_;
		this.Fields = Fields_;
		this.Incomplete = Incomplete_;
	});
	FuncType = $pkg.FuncType = $newType(0, $kindStruct, "ast.FuncType", "FuncType", "go/ast", function(Func_, Params_, Results_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = 0;
			this.Params = ptrType$2.nil;
			this.Results = ptrType$2.nil;
			return;
		}
		this.Func = Func_;
		this.Params = Params_;
		this.Results = Results_;
	});
	InterfaceType = $pkg.InterfaceType = $newType(0, $kindStruct, "ast.InterfaceType", "InterfaceType", "go/ast", function(Interface_, Methods_, Incomplete_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Interface = 0;
			this.Methods = ptrType$2.nil;
			this.Incomplete = false;
			return;
		}
		this.Interface = Interface_;
		this.Methods = Methods_;
		this.Incomplete = Incomplete_;
	});
	MapType = $pkg.MapType = $newType(0, $kindStruct, "ast.MapType", "MapType", "go/ast", function(Map_, Key_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Map = 0;
			this.Key = $ifaceNil;
			this.Value = $ifaceNil;
			return;
		}
		this.Map = Map_;
		this.Key = Key_;
		this.Value = Value_;
	});
	ChanType = $pkg.ChanType = $newType(0, $kindStruct, "ast.ChanType", "ChanType", "go/ast", function(Begin_, Arrow_, Dir_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Begin = 0;
			this.Arrow = 0;
			this.Dir = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Begin = Begin_;
		this.Arrow = Arrow_;
		this.Dir = Dir_;
		this.Value = Value_;
	});
	BadStmt = $pkg.BadStmt = $newType(0, $kindStruct, "ast.BadStmt", "BadStmt", "go/ast", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	DeclStmt = $pkg.DeclStmt = $newType(0, $kindStruct, "ast.DeclStmt", "DeclStmt", "go/ast", function(Decl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Decl = $ifaceNil;
			return;
		}
		this.Decl = Decl_;
	});
	EmptyStmt = $pkg.EmptyStmt = $newType(0, $kindStruct, "ast.EmptyStmt", "EmptyStmt", "go/ast", function(Semicolon_, Implicit_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Semicolon = 0;
			this.Implicit = false;
			return;
		}
		this.Semicolon = Semicolon_;
		this.Implicit = Implicit_;
	});
	LabeledStmt = $pkg.LabeledStmt = $newType(0, $kindStruct, "ast.LabeledStmt", "LabeledStmt", "go/ast", function(Label_, Colon_, Stmt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Label = ptrType$4.nil;
			this.Colon = 0;
			this.Stmt = $ifaceNil;
			return;
		}
		this.Label = Label_;
		this.Colon = Colon_;
		this.Stmt = Stmt_;
	});
	ExprStmt = $pkg.ExprStmt = $newType(0, $kindStruct, "ast.ExprStmt", "ExprStmt", "go/ast", function(X_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			return;
		}
		this.X = X_;
	});
	SendStmt = $pkg.SendStmt = $newType(0, $kindStruct, "ast.SendStmt", "SendStmt", "go/ast", function(Chan_, Arrow_, Value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Chan = $ifaceNil;
			this.Arrow = 0;
			this.Value = $ifaceNil;
			return;
		}
		this.Chan = Chan_;
		this.Arrow = Arrow_;
		this.Value = Value_;
	});
	IncDecStmt = $pkg.IncDecStmt = $newType(0, $kindStruct, "ast.IncDecStmt", "IncDecStmt", "go/ast", function(X_, TokPos_, Tok_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = $ifaceNil;
			this.TokPos = 0;
			this.Tok = 0;
			return;
		}
		this.X = X_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
	});
	AssignStmt = $pkg.AssignStmt = $newType(0, $kindStruct, "ast.AssignStmt", "AssignStmt", "go/ast", function(Lhs_, TokPos_, Tok_, Rhs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lhs = sliceType$11.nil;
			this.TokPos = 0;
			this.Tok = 0;
			this.Rhs = sliceType$11.nil;
			return;
		}
		this.Lhs = Lhs_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Rhs = Rhs_;
	});
	GoStmt = $pkg.GoStmt = $newType(0, $kindStruct, "ast.GoStmt", "GoStmt", "go/ast", function(Go_, Call_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Go = 0;
			this.Call = ptrType$36.nil;
			return;
		}
		this.Go = Go_;
		this.Call = Call_;
	});
	DeferStmt = $pkg.DeferStmt = $newType(0, $kindStruct, "ast.DeferStmt", "DeferStmt", "go/ast", function(Defer_, Call_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Defer = 0;
			this.Call = ptrType$36.nil;
			return;
		}
		this.Defer = Defer_;
		this.Call = Call_;
	});
	ReturnStmt = $pkg.ReturnStmt = $newType(0, $kindStruct, "ast.ReturnStmt", "ReturnStmt", "go/ast", function(Return_, Results_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Return = 0;
			this.Results = sliceType$11.nil;
			return;
		}
		this.Return = Return_;
		this.Results = Results_;
	});
	BranchStmt = $pkg.BranchStmt = $newType(0, $kindStruct, "ast.BranchStmt", "BranchStmt", "go/ast", function(TokPos_, Tok_, Label_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.TokPos = 0;
			this.Tok = 0;
			this.Label = ptrType$4.nil;
			return;
		}
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Label = Label_;
	});
	BlockStmt = $pkg.BlockStmt = $newType(0, $kindStruct, "ast.BlockStmt", "BlockStmt", "go/ast", function(Lbrace_, List_, Rbrace_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lbrace = 0;
			this.List = sliceType$12.nil;
			this.Rbrace = 0;
			return;
		}
		this.Lbrace = Lbrace_;
		this.List = List_;
		this.Rbrace = Rbrace_;
	});
	IfStmt = $pkg.IfStmt = $newType(0, $kindStruct, "ast.IfStmt", "IfStmt", "go/ast", function(If_, Init_, Cond_, Body_, Else_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.If = 0;
			this.Init = $ifaceNil;
			this.Cond = $ifaceNil;
			this.Body = ptrType$5.nil;
			this.Else = $ifaceNil;
			return;
		}
		this.If = If_;
		this.Init = Init_;
		this.Cond = Cond_;
		this.Body = Body_;
		this.Else = Else_;
	});
	CaseClause = $pkg.CaseClause = $newType(0, $kindStruct, "ast.CaseClause", "CaseClause", "go/ast", function(Case_, List_, Colon_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Case = 0;
			this.List = sliceType$11.nil;
			this.Colon = 0;
			this.Body = sliceType$12.nil;
			return;
		}
		this.Case = Case_;
		this.List = List_;
		this.Colon = Colon_;
		this.Body = Body_;
	});
	SwitchStmt = $pkg.SwitchStmt = $newType(0, $kindStruct, "ast.SwitchStmt", "SwitchStmt", "go/ast", function(Switch_, Init_, Tag_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Switch = 0;
			this.Init = $ifaceNil;
			this.Tag = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Switch = Switch_;
		this.Init = Init_;
		this.Tag = Tag_;
		this.Body = Body_;
	});
	TypeSwitchStmt = $pkg.TypeSwitchStmt = $newType(0, $kindStruct, "ast.TypeSwitchStmt", "TypeSwitchStmt", "go/ast", function(Switch_, Init_, Assign_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Switch = 0;
			this.Init = $ifaceNil;
			this.Assign = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Switch = Switch_;
		this.Init = Init_;
		this.Assign = Assign_;
		this.Body = Body_;
	});
	CommClause = $pkg.CommClause = $newType(0, $kindStruct, "ast.CommClause", "CommClause", "go/ast", function(Case_, Comm_, Colon_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Case = 0;
			this.Comm = $ifaceNil;
			this.Colon = 0;
			this.Body = sliceType$12.nil;
			return;
		}
		this.Case = Case_;
		this.Comm = Comm_;
		this.Colon = Colon_;
		this.Body = Body_;
	});
	SelectStmt = $pkg.SelectStmt = $newType(0, $kindStruct, "ast.SelectStmt", "SelectStmt", "go/ast", function(Select_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Select = 0;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Select = Select_;
		this.Body = Body_;
	});
	ForStmt = $pkg.ForStmt = $newType(0, $kindStruct, "ast.ForStmt", "ForStmt", "go/ast", function(For_, Init_, Cond_, Post_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Init = $ifaceNil;
			this.Cond = $ifaceNil;
			this.Post = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.For = For_;
		this.Init = Init_;
		this.Cond = Cond_;
		this.Post = Post_;
		this.Body = Body_;
	});
	RangeStmt = $pkg.RangeStmt = $newType(0, $kindStruct, "ast.RangeStmt", "RangeStmt", "go/ast", function(For_, Key_, Value_, TokPos_, Tok_, X_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.For = 0;
			this.Key = $ifaceNil;
			this.Value = $ifaceNil;
			this.TokPos = 0;
			this.Tok = 0;
			this.X = $ifaceNil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.For = For_;
		this.Key = Key_;
		this.Value = Value_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.X = X_;
		this.Body = Body_;
	});
	Spec = $pkg.Spec = $newType(8, $kindInterface, "ast.Spec", "Spec", "go/ast", null);
	ImportSpec = $pkg.ImportSpec = $newType(0, $kindStruct, "ast.ImportSpec", "ImportSpec", "go/ast", function(Doc_, Name_, Path_, Comment_, EndPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Name = ptrType$4.nil;
			this.Path = ptrType$1.nil;
			this.Comment = ptrType.nil;
			this.EndPos = 0;
			return;
		}
		this.Doc = Doc_;
		this.Name = Name_;
		this.Path = Path_;
		this.Comment = Comment_;
		this.EndPos = EndPos_;
	});
	ValueSpec = $pkg.ValueSpec = $newType(0, $kindStruct, "ast.ValueSpec", "ValueSpec", "go/ast", function(Doc_, Names_, Type_, Values_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Names = sliceType$8.nil;
			this.Type = $ifaceNil;
			this.Values = sliceType$11.nil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Names = Names_;
		this.Type = Type_;
		this.Values = Values_;
		this.Comment = Comment_;
	});
	TypeSpec = $pkg.TypeSpec = $newType(0, $kindStruct, "ast.TypeSpec", "TypeSpec", "go/ast", function(Doc_, Name_, Type_, Comment_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Name = ptrType$4.nil;
			this.Type = $ifaceNil;
			this.Comment = ptrType.nil;
			return;
		}
		this.Doc = Doc_;
		this.Name = Name_;
		this.Type = Type_;
		this.Comment = Comment_;
	});
	BadDecl = $pkg.BadDecl = $newType(0, $kindStruct, "ast.BadDecl", "BadDecl", "go/ast", function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	GenDecl = $pkg.GenDecl = $newType(0, $kindStruct, "ast.GenDecl", "GenDecl", "go/ast", function(Doc_, TokPos_, Tok_, Lparen_, Specs_, Rparen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.TokPos = 0;
			this.Tok = 0;
			this.Lparen = 0;
			this.Specs = sliceType$13.nil;
			this.Rparen = 0;
			return;
		}
		this.Doc = Doc_;
		this.TokPos = TokPos_;
		this.Tok = Tok_;
		this.Lparen = Lparen_;
		this.Specs = Specs_;
		this.Rparen = Rparen_;
	});
	FuncDecl = $pkg.FuncDecl = $newType(0, $kindStruct, "ast.FuncDecl", "FuncDecl", "go/ast", function(Doc_, Recv_, Name_, Type_, Body_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Recv = ptrType$2.nil;
			this.Name = ptrType$4.nil;
			this.Type = ptrType$16.nil;
			this.Body = ptrType$5.nil;
			return;
		}
		this.Doc = Doc_;
		this.Recv = Recv_;
		this.Name = Name_;
		this.Type = Type_;
		this.Body = Body_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "ast.File", "File", "go/ast", function(Doc_, Package_, Name_, Decls_, Scope_, Imports_, Unresolved_, Comments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doc = ptrType.nil;
			this.Package = 0;
			this.Name = ptrType$4.nil;
			this.Decls = sliceType$6.nil;
			this.Scope = ptrType$26.nil;
			this.Imports = sliceType$7.nil;
			this.Unresolved = sliceType$8.nil;
			this.Comments = sliceType$2.nil;
			return;
		}
		this.Doc = Doc_;
		this.Package = Package_;
		this.Name = Name_;
		this.Decls = Decls_;
		this.Scope = Scope_;
		this.Imports = Imports_;
		this.Unresolved = Unresolved_;
		this.Comments = Comments_;
	});
	Package = $pkg.Package = $newType(0, $kindStruct, "ast.Package", "Package", "go/ast", function(Name_, Scope_, Imports_, Files_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Scope = ptrType$26.nil;
			this.Imports = false;
			this.Files = false;
			return;
		}
		this.Name = Name_;
		this.Scope = Scope_;
		this.Imports = Imports_;
		this.Files = Files_;
	});
	posSpan = $pkg.posSpan = $newType(0, $kindStruct, "ast.posSpan", "posSpan", "go/ast", function(Start_, End_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Start = 0;
			this.End = 0;
			return;
		}
		this.Start = Start_;
		this.End = End_;
	});
	byImportSpec = $pkg.byImportSpec = $newType(12, $kindSlice, "ast.byImportSpec", "byImportSpec", "go/ast", null);
	byCommentPos = $pkg.byCommentPos = $newType(12, $kindSlice, "ast.byCommentPos", "byCommentPos", "go/ast", null);
	Scope = $pkg.Scope = $newType(0, $kindStruct, "ast.Scope", "Scope", "go/ast", function(Outer_, Objects_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Outer = ptrType$26.nil;
			this.Objects = false;
			return;
		}
		this.Outer = Outer_;
		this.Objects = Objects_;
	});
	Object = $pkg.Object = $newType(0, $kindStruct, "ast.Object", "Object", "go/ast", function(Kind_, Name_, Decl_, Data_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Kind = 0;
			this.Name = "";
			this.Decl = $ifaceNil;
			this.Data = $ifaceNil;
			this.Type = $ifaceNil;
			return;
		}
		this.Kind = Kind_;
		this.Name = Name_;
		this.Decl = Decl_;
		this.Data = Data_;
		this.Type = Type_;
	});
	ObjKind = $pkg.ObjKind = $newType(4, $kindInt, "ast.ObjKind", "ObjKind", "go/ast", null);
	Visitor = $pkg.Visitor = $newType(8, $kindInterface, "ast.Visitor", "Visitor", "go/ast", null);
	inspector = $pkg.inspector = $newType(4, $kindFunc, "ast.inspector", "inspector", "go/ast", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(CommentGroup);
	sliceType$1 = $sliceType($String);
	ptrType$1 = $ptrType(BasicLit);
	ptrType$2 = $ptrType(FieldList);
	ptrType$3 = $ptrType(Object);
	ptrType$4 = $ptrType(Ident);
	ptrType$5 = $ptrType(BlockStmt);
	sliceType$2 = $sliceType(ptrType);
	ptrType$6 = $ptrType(Comment);
	ptrType$9 = $ptrType(File);
	ptrType$10 = $ptrType(Field);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$11 = $ptrType(SelectorExpr);
	ptrType$12 = $ptrType(StarExpr);
	ptrType$13 = $ptrType(ParenExpr);
	ptrType$14 = $ptrType(ArrayType);
	ptrType$15 = $ptrType(StructType);
	ptrType$16 = $ptrType(FuncType);
	ptrType$17 = $ptrType(InterfaceType);
	ptrType$18 = $ptrType(MapType);
	ptrType$19 = $ptrType(ChanType);
	ptrType$20 = $ptrType(ValueSpec);
	ptrType$21 = $ptrType(TypeSpec);
	ptrType$22 = $ptrType(GenDecl);
	ptrType$23 = $ptrType(FuncDecl);
	sliceType$5 = $sliceType(ptrType$6);
	sliceType$6 = $sliceType(Decl);
	ptrType$24 = $ptrType(ImportSpec);
	sliceType$7 = $sliceType(ptrType$24);
	sliceType$8 = $sliceType(ptrType$4);
	sliceType$9 = $sliceType(posSpan);
	ptrType$26 = $ptrType(Scope);
	ptrType$27 = $ptrType(LabeledStmt);
	ptrType$28 = $ptrType(AssignStmt);
	ptrType$29 = $ptrType(BadExpr);
	ptrType$30 = $ptrType(Ellipsis);
	ptrType$31 = $ptrType(FuncLit);
	ptrType$32 = $ptrType(CompositeLit);
	ptrType$33 = $ptrType(IndexExpr);
	ptrType$34 = $ptrType(SliceExpr);
	ptrType$35 = $ptrType(TypeAssertExpr);
	ptrType$36 = $ptrType(CallExpr);
	ptrType$37 = $ptrType(UnaryExpr);
	ptrType$38 = $ptrType(BinaryExpr);
	ptrType$39 = $ptrType(KeyValueExpr);
	ptrType$40 = $ptrType(BadStmt);
	ptrType$41 = $ptrType(DeclStmt);
	ptrType$42 = $ptrType(EmptyStmt);
	ptrType$43 = $ptrType(ExprStmt);
	ptrType$44 = $ptrType(SendStmt);
	ptrType$45 = $ptrType(IncDecStmt);
	ptrType$46 = $ptrType(GoStmt);
	ptrType$47 = $ptrType(DeferStmt);
	ptrType$48 = $ptrType(ReturnStmt);
	ptrType$49 = $ptrType(BranchStmt);
	ptrType$50 = $ptrType(IfStmt);
	ptrType$51 = $ptrType(CaseClause);
	ptrType$52 = $ptrType(SwitchStmt);
	ptrType$53 = $ptrType(TypeSwitchStmt);
	ptrType$54 = $ptrType(CommClause);
	ptrType$55 = $ptrType(SelectStmt);
	ptrType$56 = $ptrType(ForStmt);
	ptrType$57 = $ptrType(RangeStmt);
	ptrType$58 = $ptrType(BadDecl);
	ptrType$59 = $ptrType(Package);
	sliceType$10 = $sliceType(ptrType$10);
	sliceType$11 = $sliceType(Expr);
	sliceType$12 = $sliceType(Stmt);
	sliceType$13 = $sliceType(Spec);
	mapType = $mapType($String, ptrType$3);
	mapType$1 = $mapType($String, ptrType$9);
	Comment.ptr.prototype.Pos = function() {
		var $ptr, c;
		c = this;
		return c.Slash;
	};
	Comment.prototype.Pos = function() { return this.$val.Pos(); };
	Comment.ptr.prototype.End = function() {
		var $ptr, c;
		c = this;
		return (((c.Slash >> 0) + c.Text.length >> 0) >> 0);
	};
	Comment.prototype.End = function() { return this.$val.End(); };
	CommentGroup.ptr.prototype.Pos = function() {
		var $ptr, g, x;
		g = this;
		return (x = g.List, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos();
	};
	CommentGroup.prototype.Pos = function() { return this.$val.Pos(); };
	CommentGroup.ptr.prototype.End = function() {
		var $ptr, g, x, x$1;
		g = this;
		return (x = g.List, x$1 = g.List.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End();
	};
	CommentGroup.prototype.End = function() { return this.$val.End(); };
	isWhitespace = function(ch) {
		var $ptr, ch;
		return (ch === 32) || (ch === 9) || (ch === 10) || (ch === 13);
	};
	stripTrailingWhitespace = function(s) {
		var $ptr, i, s;
		i = s.length;
		while (true) {
			if (!(i > 0 && isWhitespace(s.charCodeAt((i - 1 >> 0))))) { break; }
			i = i - (1) >> 0;
		}
		return s.substring(0, i);
	};
	CommentGroup.ptr.prototype.Text = function() {
		var $ptr, _1, _i, _i$1, _i$2, _i$3, _ref, _ref$1, _ref$2, _ref$3, c, c$1, cl, comments, g, i, l, line, lines, n, x, x$1;
		g = this;
		if (g === ptrType.nil) {
			return "";
		}
		comments = $makeSlice(sliceType$1, g.List.$length);
		_ref = g.List;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= comments.$length) ? $throwRuntimeError("index out of range") : comments.$array[comments.$offset + i] = c.Text);
			_i++;
		}
		lines = $makeSlice(sliceType$1, 0, 10);
		_ref$1 = comments;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_1 = c$1.charCodeAt(1);
			if (_1 === 47) {
				c$1 = c$1.substring(2);
				if (c$1.length > 0 && (c$1.charCodeAt(0) === 32)) {
					c$1 = c$1.substring(1);
				}
			} else if (_1 === 42) {
				c$1 = c$1.substring(2, (c$1.length - 2 >> 0));
			}
			cl = strings.Split(c$1, "\n");
			_ref$2 = cl;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				l = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				lines = $append(lines, stripTrailingWhitespace(l));
				_i$2++;
			}
			_i$1++;
		}
		n = 0;
		_ref$3 = lines;
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			line = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
			if (!(line === "") || n > 0 && !((x = n - 1 >> 0, ((x < 0 || x >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x])) === "")) {
				((n < 0 || n >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + n] = line);
				n = n + (1) >> 0;
			}
			_i$3++;
		}
		lines = $subslice(lines, 0, n);
		if (n > 0 && !((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x$1])) === "")) {
			lines = $append(lines, "");
		}
		return strings.Join(lines, "\n");
	};
	CommentGroup.prototype.Text = function() { return this.$val.Text(); };
	Field.ptr.prototype.Pos = function() {
		var $ptr, _r, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.Names.$length > 0) {
			return (x = f.Names, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos();
		}
		_r = f.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.Pos = function() { return this.$val.Pos(); };
	Field.ptr.prototype.End = function() {
		var $ptr, _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (!(f.Tag === ptrType$1.nil)) {
			return f.Tag.End();
		}
		_r = f.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Field.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Field.prototype.End = function() { return this.$val.End(); };
	FieldList.ptr.prototype.Pos = function() {
		var $ptr, _r, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (new token.Pos(f.Opening).IsValid()) {
			return f.Opening;
		}
		/* */ if (f.List.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.List.$length > 0) { */ case 1:
			_r = (x = f.List, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FieldList.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FieldList.prototype.Pos = function() { return this.$val.Pos(); };
	FieldList.ptr.prototype.End = function() {
		var $ptr, _r, f, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (new token.Pos(f.Closing).IsValid()) {
			return f.Closing + 1 >> 0;
		}
		n = f.List.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = f.List, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FieldList.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	FieldList.prototype.End = function() { return this.$val.End(); };
	FieldList.ptr.prototype.NumFields = function() {
		var $ptr, _i, _ref, f, g, m, n;
		f = this;
		n = 0;
		if (!(f === ptrType$2.nil)) {
			_ref = f.List;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				g = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				m = g.Names.$length;
				if (m === 0) {
					m = 1;
				}
				n = n + (m) >> 0;
				_i++;
			}
		}
		return n;
	};
	FieldList.prototype.NumFields = function() { return this.$val.NumFields(); };
	BadExpr.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.From;
	};
	BadExpr.prototype.Pos = function() { return this.$val.Pos(); };
	Ident.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.NamePos;
	};
	Ident.prototype.Pos = function() { return this.$val.Pos(); };
	Ellipsis.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Ellipsis;
	};
	Ellipsis.prototype.Pos = function() { return this.$val.Pos(); };
	BasicLit.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.ValuePos;
	};
	BasicLit.prototype.Pos = function() { return this.$val.Pos(); };
	FuncLit.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncLit.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncLit.prototype.Pos = function() { return this.$val.Pos(); };
	CompositeLit.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!($interfaceIsEqual(x.Type, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(x.Type, $ifaceNil))) { */ case 1:
			_r = x.Type.Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return x.Lbrace;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CompositeLit.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CompositeLit.prototype.Pos = function() { return this.$val.Pos(); };
	ParenExpr.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Lparen;
	};
	ParenExpr.prototype.Pos = function() { return this.$val.Pos(); };
	SelectorExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SelectorExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SelectorExpr.prototype.Pos = function() { return this.$val.Pos(); };
	IndexExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IndexExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	IndexExpr.prototype.Pos = function() { return this.$val.Pos(); };
	SliceExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SliceExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	SliceExpr.prototype.Pos = function() { return this.$val.Pos(); };
	TypeAssertExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeAssertExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeAssertExpr.prototype.Pos = function() { return this.$val.Pos(); };
	CallExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Fun.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CallExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	CallExpr.prototype.Pos = function() { return this.$val.Pos(); };
	StarExpr.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Star;
	};
	StarExpr.prototype.Pos = function() { return this.$val.Pos(); };
	UnaryExpr.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.OpPos;
	};
	UnaryExpr.prototype.Pos = function() { return this.$val.Pos(); };
	BinaryExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpr.prototype.Pos = function() { return this.$val.Pos(); };
	KeyValueExpr.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Key.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyValueExpr.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyValueExpr.prototype.Pos = function() { return this.$val.Pos(); };
	ArrayType.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Lbrack;
	};
	ArrayType.prototype.Pos = function() { return this.$val.Pos(); };
	StructType.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Struct;
	};
	StructType.prototype.Pos = function() { return this.$val.Pos(); };
	FuncType.ptr.prototype.Pos = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (new token.Pos(x.Func).IsValid() || x.Params === ptrType$2.nil) {
			return x.Func;
		}
		_r = x.Params.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncType.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncType.prototype.Pos = function() { return this.$val.Pos(); };
	InterfaceType.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Interface;
	};
	InterfaceType.prototype.Pos = function() { return this.$val.Pos(); };
	MapType.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Map;
	};
	MapType.prototype.Pos = function() { return this.$val.Pos(); };
	ChanType.ptr.prototype.Pos = function() {
		var $ptr, x;
		x = this;
		return x.Begin;
	};
	ChanType.prototype.Pos = function() { return this.$val.Pos(); };
	BadExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.To;
	};
	BadExpr.prototype.End = function() { return this.$val.End(); };
	Ident.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return (((x.NamePos >> 0) + x.Name.length >> 0) >> 0);
	};
	Ident.prototype.End = function() { return this.$val.End(); };
	Ellipsis.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!($interfaceIsEqual(x.Elt, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(x.Elt, $ifaceNil))) { */ case 1:
			_r = x.Elt.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return x.Ellipsis + 3 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ellipsis.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Ellipsis.prototype.End = function() { return this.$val.End(); };
	BasicLit.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return (((x.ValuePos >> 0) + x.Value.length >> 0) >> 0);
	};
	BasicLit.prototype.End = function() { return this.$val.End(); };
	FuncLit.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Body.End();
	};
	FuncLit.prototype.End = function() { return this.$val.End(); };
	CompositeLit.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rbrace + 1 >> 0;
	};
	CompositeLit.prototype.End = function() { return this.$val.End(); };
	ParenExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	ParenExpr.prototype.End = function() { return this.$val.End(); };
	SelectorExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Sel.End();
	};
	SelectorExpr.prototype.End = function() { return this.$val.End(); };
	IndexExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	IndexExpr.prototype.End = function() { return this.$val.End(); };
	SliceExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rbrack + 1 >> 0;
	};
	SliceExpr.prototype.End = function() { return this.$val.End(); };
	TypeAssertExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	TypeAssertExpr.prototype.End = function() { return this.$val.End(); };
	CallExpr.ptr.prototype.End = function() {
		var $ptr, x;
		x = this;
		return x.Rparen + 1 >> 0;
	};
	CallExpr.prototype.End = function() { return this.$val.End(); };
	StarExpr.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StarExpr.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StarExpr.prototype.End = function() { return this.$val.End(); };
	UnaryExpr.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnaryExpr.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnaryExpr.prototype.End = function() { return this.$val.End(); };
	BinaryExpr.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Y.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BinaryExpr.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	BinaryExpr.prototype.End = function() { return this.$val.End(); };
	KeyValueExpr.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: KeyValueExpr.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	KeyValueExpr.prototype.End = function() { return this.$val.End(); };
	ArrayType.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Elt.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ArrayType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ArrayType.prototype.End = function() { return this.$val.End(); };
	StructType.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Fields.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StructType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	StructType.prototype.End = function() { return this.$val.End(); };
	FuncType.ptr.prototype.End = function() {
		var $ptr, _r, _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (!(x.Results === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(x.Results === ptrType$2.nil)) { */ case 1:
			_r = x.Results.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = x.Params.End(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncType.prototype.End = function() { return this.$val.End(); };
	InterfaceType.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Methods.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InterfaceType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	InterfaceType.prototype.End = function() { return this.$val.End(); };
	MapType.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MapType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	MapType.prototype.End = function() { return this.$val.End(); };
	ChanType.ptr.prototype.End = function() {
		var $ptr, _r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r = x.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChanType.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ChanType.prototype.End = function() { return this.$val.End(); };
	IsExported = function(name) {
		var $ptr, _tuple, ch, name;
		_tuple = utf8.DecodeRuneInString(name);
		ch = _tuple[0];
		return unicode.IsUpper(ch);
	};
	$pkg.IsExported = IsExported;
	Ident.ptr.prototype.IsExported = function() {
		var $ptr, id;
		id = this;
		return IsExported(id.Name);
	};
	Ident.prototype.IsExported = function() { return this.$val.IsExported(); };
	Ident.ptr.prototype.String = function() {
		var $ptr, id;
		id = this;
		if (!(id === ptrType$4.nil)) {
			return id.Name;
		}
		return "<nil>";
	};
	Ident.prototype.String = function() { return this.$val.String(); };
	BadStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.From;
	};
	BadStmt.prototype.Pos = function() { return this.$val.Pos(); };
	DeclStmt.ptr.prototype.Pos = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Decl.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeclStmt.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeclStmt.prototype.Pos = function() { return this.$val.Pos(); };
	EmptyStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Semicolon;
	};
	EmptyStmt.prototype.Pos = function() { return this.$val.Pos(); };
	LabeledStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Label.Pos();
	};
	LabeledStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ExprStmt.ptr.prototype.Pos = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExprStmt.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExprStmt.prototype.Pos = function() { return this.$val.Pos(); };
	SendStmt.ptr.prototype.Pos = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Chan.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendStmt.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SendStmt.prototype.Pos = function() { return this.$val.Pos(); };
	IncDecStmt.ptr.prototype.Pos = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IncDecStmt.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	IncDecStmt.prototype.Pos = function() { return this.$val.Pos(); };
	AssignStmt.ptr.prototype.Pos = function() {
		var $ptr, _r, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = (x = s.Lhs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignStmt.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignStmt.prototype.Pos = function() { return this.$val.Pos(); };
	GoStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Go;
	};
	GoStmt.prototype.Pos = function() { return this.$val.Pos(); };
	DeferStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Defer;
	};
	DeferStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ReturnStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Return;
	};
	ReturnStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BranchStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.TokPos;
	};
	BranchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BlockStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Lbrace;
	};
	BlockStmt.prototype.Pos = function() { return this.$val.Pos(); };
	IfStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.If;
	};
	IfStmt.prototype.Pos = function() { return this.$val.Pos(); };
	CaseClause.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Case;
	};
	CaseClause.prototype.Pos = function() { return this.$val.Pos(); };
	SwitchStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Switch;
	};
	SwitchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	TypeSwitchStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Switch;
	};
	TypeSwitchStmt.prototype.Pos = function() { return this.$val.Pos(); };
	CommClause.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Case;
	};
	CommClause.prototype.Pos = function() { return this.$val.Pos(); };
	SelectStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Select;
	};
	SelectStmt.prototype.Pos = function() { return this.$val.Pos(); };
	ForStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.For;
	};
	ForStmt.prototype.Pos = function() { return this.$val.Pos(); };
	RangeStmt.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.For;
	};
	RangeStmt.prototype.Pos = function() { return this.$val.Pos(); };
	BadStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.To;
	};
	BadStmt.prototype.End = function() { return this.$val.End(); };
	DeclStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Decl.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DeclStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	DeclStmt.prototype.End = function() { return this.$val.End(); };
	EmptyStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		if (s.Implicit) {
			return s.Semicolon;
		}
		return s.Semicolon + 1 >> 0;
	};
	EmptyStmt.prototype.End = function() { return this.$val.End(); };
	LabeledStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Stmt.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LabeledStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	LabeledStmt.prototype.End = function() { return this.$val.End(); };
	ExprStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.X.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExprStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExprStmt.prototype.End = function() { return this.$val.End(); };
	SendStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Value.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	SendStmt.prototype.End = function() { return this.$val.End(); };
	IncDecStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.TokPos + 2 >> 0;
	};
	IncDecStmt.prototype.End = function() { return this.$val.End(); };
	AssignStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = (x = s.Rhs, x$1 = s.Rhs.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: AssignStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	AssignStmt.prototype.End = function() { return this.$val.End(); };
	GoStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Call.End();
	};
	GoStmt.prototype.End = function() { return this.$val.End(); };
	DeferStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Call.End();
	};
	DeferStmt.prototype.End = function() { return this.$val.End(); };
	ReturnStmt.ptr.prototype.End = function() {
		var $ptr, _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Results.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Results, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return s.Return + 6 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReturnStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	ReturnStmt.prototype.End = function() { return this.$val.End(); };
	BranchStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		if (!(s.Label === ptrType$4.nil)) {
			return s.Label.End();
		}
		return (((s.TokPos >> 0) + new token.Token(s.Tok).String().length >> 0) >> 0);
	};
	BranchStmt.prototype.End = function() { return this.$val.End(); };
	BlockStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Rbrace + 1 >> 0;
	};
	BlockStmt.prototype.End = function() { return this.$val.End(); };
	IfStmt.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (!($interfaceIsEqual(s.Else, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s.Else, $ifaceNil))) { */ case 1:
			_r = s.Else.End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return s.Body.End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: IfStmt.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	IfStmt.prototype.End = function() { return this.$val.End(); };
	CaseClause.ptr.prototype.End = function() {
		var $ptr, _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Body.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Body, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return s.Colon + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CaseClause.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CaseClause.prototype.End = function() { return this.$val.End(); };
	SwitchStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Body.End();
	};
	SwitchStmt.prototype.End = function() { return this.$val.End(); };
	TypeSwitchStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Body.End();
	};
	TypeSwitchStmt.prototype.End = function() { return this.$val.End(); };
	CommClause.ptr.prototype.End = function() {
		var $ptr, _r, n, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Body.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Body, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return s.Colon + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommClause.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommClause.prototype.End = function() { return this.$val.End(); };
	SelectStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Body.End();
	};
	SelectStmt.prototype.End = function() { return this.$val.End(); };
	ForStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Body.End();
	};
	ForStmt.prototype.End = function() { return this.$val.End(); };
	RangeStmt.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		return s.Body.End();
	};
	RangeStmt.prototype.End = function() { return this.$val.End(); };
	ImportSpec.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		if (!(s.Name === ptrType$4.nil)) {
			return s.Name.Pos();
		}
		return s.Path.Pos();
	};
	ImportSpec.prototype.Pos = function() { return this.$val.Pos(); };
	ValueSpec.ptr.prototype.Pos = function() {
		var $ptr, s, x;
		s = this;
		return (x = s.Names, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos();
	};
	ValueSpec.prototype.Pos = function() { return this.$val.Pos(); };
	TypeSpec.ptr.prototype.Pos = function() {
		var $ptr, s;
		s = this;
		return s.Name.Pos();
	};
	TypeSpec.prototype.Pos = function() { return this.$val.Pos(); };
	ImportSpec.ptr.prototype.End = function() {
		var $ptr, s;
		s = this;
		if (!((s.EndPos === 0))) {
			return s.EndPos;
		}
		return s.Path.End();
	};
	ImportSpec.prototype.End = function() { return this.$val.End(); };
	ValueSpec.ptr.prototype.End = function() {
		var $ptr, _r, _r$1, n, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		n = s.Values.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = s.Values, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		/* */ if (!($interfaceIsEqual(s.Type, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(s.Type, $ifaceNil))) { */ case 5:
			_r$1 = s.Type.End(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$1;
		/* } */ case 6:
		return (x$2 = s.Names, x$3 = s.Names.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])).End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueSpec.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	ValueSpec.prototype.End = function() { return this.$val.End(); };
	TypeSpec.ptr.prototype.End = function() {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TypeSpec.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	TypeSpec.prototype.End = function() { return this.$val.End(); };
	BadDecl.ptr.prototype.Pos = function() {
		var $ptr, d;
		d = this;
		return d.From;
	};
	BadDecl.prototype.Pos = function() { return this.$val.Pos(); };
	GenDecl.ptr.prototype.Pos = function() {
		var $ptr, d;
		d = this;
		return d.TokPos;
	};
	GenDecl.prototype.Pos = function() { return this.$val.Pos(); };
	FuncDecl.ptr.prototype.Pos = function() {
		var $ptr, _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = d.Type.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncDecl.ptr.prototype.Pos }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncDecl.prototype.Pos = function() { return this.$val.Pos(); };
	BadDecl.ptr.prototype.End = function() {
		var $ptr, d;
		d = this;
		return d.To;
	};
	BadDecl.prototype.End = function() { return this.$val.End(); };
	GenDecl.ptr.prototype.End = function() {
		var $ptr, _r, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (new token.Pos(d.Rparen).IsValid()) {
			return d.Rparen + 1 >> 0;
		}
		_r = (x = d.Specs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GenDecl.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	GenDecl.prototype.End = function() { return this.$val.End(); };
	FuncDecl.ptr.prototype.End = function() {
		var $ptr, _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!(d.Body === ptrType$5.nil)) {
			return d.Body.End();
		}
		_r = d.Type.End(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncDecl.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	FuncDecl.prototype.End = function() { return this.$val.End(); };
	File.ptr.prototype.Pos = function() {
		var $ptr, f;
		f = this;
		return f.Package;
	};
	File.prototype.Pos = function() { return this.$val.Pos(); };
	File.ptr.prototype.End = function() {
		var $ptr, _r, f, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = f.Decls.$length;
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			_r = (x = f.Decls, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		return f.Name.End();
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.End }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.End = function() { return this.$val.End(); };
	Package.ptr.prototype.Pos = function() {
		var $ptr, p;
		p = this;
		return 0;
	};
	Package.prototype.Pos = function() { return this.$val.Pos(); };
	Package.ptr.prototype.End = function() {
		var $ptr, p;
		p = this;
		return 0;
	};
	Package.prototype.End = function() { return this.$val.End(); };
	SortImports = function(fset, f) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _v, d, d$1, f, fset, i, j, lastLine, lastSpec, ok, rParenLine, s, specs, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _v = $f._v; d = $f.d; d$1 = $f.d$1; f = $f.f; fset = $f.fset; i = $f.i; j = $f.j; lastLine = $f.lastLine; lastSpec = $f.lastSpec; ok = $f.ok; rParenLine = $f.rParenLine; s = $f.s; specs = $f.specs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = f.Decls;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(d, ptrType$22, true);
			d$1 = _tuple[0];
			ok = _tuple[1];
			if (!ok || !((d$1.Tok === 75))) {
				/* break; */ $s = 2; continue;
			}
			/* */ if (!new token.Pos(d$1.Lparen).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!new token.Pos(d$1.Lparen).IsValid()) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			i = 0;
			specs = $subslice(d$1.Specs, 0, 0);
			_ref$1 = d$1.Specs;
			_i$1 = 0;
			/* while (true) { */ case 5:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
				j = _i$1;
				s = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!(j > i)) { _v = false; $s = 9; continue s; }
				_r = s.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = fset.Position(_r); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = (x = d$1.Specs, x$1 = j - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).End(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = fset.Position(_r$2); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = _r$1.Line > (1 + _r$3.Line >> 0); case 9:
				/* */ if (_v) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_v) { */ case 7:
					_arg = specs;
					_r$4 = sortSpecs(fset, f, $subslice(d$1.Specs, i, j)); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg$1 = _r$4;
					specs = $appendSlice(_arg, _arg$1);
					i = j;
				/* } */ case 8:
				_i$1++;
			/* } */ $s = 5; continue; case 6:
			_arg$2 = specs;
			_r$5 = sortSpecs(fset, f, $subslice(d$1.Specs, i)); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$3 = _r$5;
			specs = $appendSlice(_arg$2, _arg$3);
			d$1.Specs = specs;
			/* */ if (d$1.Specs.$length > 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (d$1.Specs.$length > 0) { */ case 16:
				lastSpec = (x$2 = d$1.Specs, x$3 = d$1.Specs.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3]));
				_r$6 = lastSpec.Pos(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = fset.Position(_r$6); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				lastLine = _r$7.Line;
				_r$8 = fset.Position(d$1.Rparen); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				rParenLine = _r$8.Line;
				/* while (true) { */ case 21:
					/* if (!(rParenLine > (lastLine + 1 >> 0))) { break; } */ if(!(rParenLine > (lastLine + 1 >> 0))) { $s = 22; continue; }
					rParenLine = rParenLine - (1) >> 0;
					_r$9 = fset.File(d$1.Rparen); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = _r$9.MergeLine(rParenLine); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 21; continue; case 22:
			/* } */ case 17:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: SortImports }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._v = _v; $f.d = d; $f.d$1 = d$1; $f.f = f; $f.fset = fset; $f.i = i; $f.j = j; $f.lastLine = lastLine; $f.lastSpec = lastSpec; $f.ok = ok; $f.rParenLine = rParenLine; $f.s = s; $f.specs = specs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SortImports = SortImports;
	importPath = function(s) {
		var $ptr, _tuple, err, s, t;
		_tuple = strconv.Unquote($assertType(s, ptrType$24).Path.Value);
		t = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return t;
		}
		return "";
	};
	importName = function(s) {
		var $ptr, n, s;
		n = $assertType(s, ptrType$24).Name;
		if (n === ptrType$4.nil) {
			return "";
		}
		return n.Name;
	};
	importComment = function(s) {
		var $ptr, c, s;
		c = $assertType(s, ptrType$24).Comment;
		if (c === ptrType.nil) {
			return "";
		}
		return c.Text();
	};
	collapse = function(prev, next) {
		var $ptr, next, prev;
		if (!(importPath(next) === importPath(prev)) || !(importName(next) === importName(prev))) {
			return false;
		}
		return $assertType(prev, ptrType$24).Comment === ptrType.nil;
	};
	sortSpecs = function(fset, f, specs) {
		var $ptr, _entry, _entry$1, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, c, cend, comments, cstart, deduped, f, fset, g, g$1, g$2, i, i$1, i$2, i$3, importComment$1, lastLine, p, pos, s, s$1, s$2, s$3, s$4, specIndex, specs, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _i$6 = $f._i$6; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _ref$6 = $f._ref$6; c = $f.c; cend = $f.cend; comments = $f.comments; cstart = $f.cstart; deduped = $f.deduped; f = $f.f; fset = $f.fset; g = $f.g; g$1 = $f.g$1; g$2 = $f.g$2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; importComment$1 = $f.importComment$1; lastLine = $f.lastLine; p = $f.p; pos = $f.pos; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; s$4 = $f.s$4; specIndex = $f.specIndex; specs = $f.specs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (specs.$length <= 1) {
			return specs;
		}
		pos = $makeSlice(sliceType$9, specs.$length);
		_ref = specs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = s.Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = s.End(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			posSpan.copy(((i < 0 || i >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + i]), new posSpan.ptr(_r, _r$1));
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$2 = fset.Position((x = pos.$length - 1 >> 0, ((x < 0 || x >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + x])).End); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lastLine = _r$2.Line;
		cstart = f.Comments.$length;
		cend = f.Comments.$length;
		_ref$1 = f.Comments;
		_i$1 = 0;
		/* while (true) { */ case 6:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
			i$1 = _i$1;
			g = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (g.Pos() < (0 >= pos.$length ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + 0]).Start) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (g.Pos() < (0 >= pos.$length ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + 0]).Start) { */ case 8:
				_i$1++;
				/* continue; */ $s = 6; continue;
			/* } */ case 9:
			if (i$1 < cstart) {
				cstart = i$1;
			}
			_r$3 = fset.Position(g.End()); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3.Line > lastLine) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$3.Line > lastLine) { */ case 10:
				cend = i$1;
				/* break; */ $s = 7; continue;
			/* } */ case 11:
			_i$1++;
		/* } */ $s = 6; continue; case 7:
		comments = $subslice(f.Comments, cstart, cend);
		importComment$1 = $makeMap(ptrType$24.keyFor, []);
		specIndex = 0;
		_ref$2 = comments;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			g$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			while (true) {
				if (!((specIndex + 1 >> 0) < specs.$length && (x$1 = specIndex + 1 >> 0, ((x$1 < 0 || x$1 >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + x$1])).Start <= g$1.Pos())) { break; }
				specIndex = specIndex + (1) >> 0;
			}
			s$1 = $assertType(((specIndex < 0 || specIndex >= specs.$length) ? $throwRuntimeError("index out of range") : specs.$array[specs.$offset + specIndex]), ptrType$24);
			_key = s$1; (importComment$1 || $throwRuntimeError("assignment to entry in nil map"))[ptrType$24.keyFor(_key)] = { k: _key, v: $append((_entry = importComment$1[ptrType$24.keyFor(s$1)], _entry !== undefined ? _entry.v : sliceType$2.nil), g$1) };
			_i$2++;
		}
		$r = sort.Sort($subslice(new byImportSpec(specs.$array), specs.$offset, specs.$offset + specs.$length)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		deduped = $subslice(specs, 0, 0);
		_ref$3 = specs;
		_i$3 = 0;
		/* while (true) { */ case 14:
			/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 15; continue; }
			i$2 = _i$3;
			s$2 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
			/* */ if ((i$2 === (specs.$length - 1 >> 0)) || !collapse(s$2, (x$2 = i$2 + 1 >> 0, ((x$2 < 0 || x$2 >= specs.$length) ? $throwRuntimeError("index out of range") : specs.$array[specs.$offset + x$2])))) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ((i$2 === (specs.$length - 1 >> 0)) || !collapse(s$2, (x$2 = i$2 + 1 >> 0, ((x$2 < 0 || x$2 >= specs.$length) ? $throwRuntimeError("index out of range") : specs.$array[specs.$offset + x$2])))) { */ case 16:
				deduped = $append(deduped, s$2);
				$s = 18; continue;
			/* } else { */ case 17:
				_r$4 = s$2.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				p = _r$4;
				_r$5 = fset.File(p); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = fset.Position(p); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$r = _r$5.MergeLine(_r$6.Line); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			_i$3++;
		/* } */ $s = 14; continue; case 15:
		specs = deduped;
		_ref$4 = specs;
		_i$4 = 0;
		while (true) {
			if (!(_i$4 < _ref$4.$length)) { break; }
			i$3 = _i$4;
			s$3 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
			s$4 = $assertType(s$3, ptrType$24);
			if (!(s$4.Name === ptrType$4.nil)) {
				s$4.Name.NamePos = ((i$3 < 0 || i$3 >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + i$3]).Start;
			}
			s$4.Path.ValuePos = ((i$3 < 0 || i$3 >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + i$3]).Start;
			s$4.EndPos = ((i$3 < 0 || i$3 >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + i$3]).End;
			_ref$5 = (_entry$1 = importComment$1[ptrType$24.keyFor(s$4)], _entry$1 !== undefined ? _entry$1.v : sliceType$2.nil);
			_i$5 = 0;
			while (true) {
				if (!(_i$5 < _ref$5.$length)) { break; }
				g$2 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$5]);
				_ref$6 = g$2.List;
				_i$6 = 0;
				while (true) {
					if (!(_i$6 < _ref$6.$length)) { break; }
					c = ((_i$6 < 0 || _i$6 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$6]);
					c.Slash = ((i$3 < 0 || i$3 >= pos.$length) ? $throwRuntimeError("index out of range") : pos.$array[pos.$offset + i$3]).End;
					_i$6++;
				}
				_i$5++;
			}
			_i$4++;
		}
		$r = sort.Sort($subslice(new byCommentPos(comments.$array), comments.$offset, comments.$offset + comments.$length)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return specs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortSpecs }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._i$6 = _i$6; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._ref$6 = _ref$6; $f.c = c; $f.cend = cend; $f.comments = comments; $f.cstart = cstart; $f.deduped = deduped; $f.f = f; $f.fset = fset; $f.g = g; $f.g$1 = g$1; $f.g$2 = g$2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.importComment$1 = importComment$1; $f.lastLine = lastLine; $f.p = p; $f.pos = pos; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.s$4 = s$4; $f.specIndex = specIndex; $f.specs = specs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	byImportSpec.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byImportSpec).prototype.Len = function() { return this.$get().Len(); };
	byImportSpec.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(byImportSpec).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byImportSpec.prototype.Less = function(i, j) {
		var $ptr, i, iname, ipath, j, jname, jpath, x;
		x = this;
		ipath = importPath(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		jpath = importPath(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
		if (!(ipath === jpath)) {
			return ipath < jpath;
		}
		iname = importName(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		jname = importName(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
		if (!(iname === jname)) {
			return iname < jname;
		}
		return importComment(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) < importComment(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]));
	};
	$ptrType(byImportSpec).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byCommentPos.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(byCommentPos).prototype.Len = function() { return this.$get().Len(); };
	byCommentPos.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(byCommentPos).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byCommentPos.prototype.Less = function(i, j) {
		var $ptr, i, j, x;
		x = this;
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).Pos() < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).Pos();
	};
	$ptrType(byCommentPos).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	NewScope = function(outer) {
		var $ptr, outer;
		return new Scope.ptr(outer, {});
	};
	$pkg.NewScope = NewScope;
	Scope.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, name, s;
		s = this;
		return (_entry = s.Objects[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
	};
	Scope.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Scope.ptr.prototype.Insert = function(obj) {
		var $ptr, _entry, _key, alt, obj, s;
		alt = ptrType$3.nil;
		s = this;
		alt = (_entry = s.Objects[$String.keyFor(obj.Name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		if (alt === ptrType$3.nil) {
			_key = obj.Name; (s.Objects || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: obj };
		}
		return alt;
	};
	Scope.prototype.Insert = function(obj) { return this.$val.Insert(obj); };
	Scope.ptr.prototype.String = function() {
		var $ptr, _entry, _i, _keys, _r, _r$1, _r$2, _r$3, _ref, buf, obj, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; buf = $f.buf; obj = $f.obj; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		s = this;
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r = fmt.Fprintf(buf[0], "scope %p {", new sliceType$4([s])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (!(s === ptrType$26.nil) && $keys(s.Objects).length > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(s === ptrType$26.nil) && $keys(s.Objects).length > 0) { */ case 2:
			_r$1 = fmt.Fprintln(buf[0], new sliceType$4([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_ref = s.Objects;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 5:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					/* continue; */ $s = 5; continue;
				}
				obj = _entry.v;
				_r$2 = fmt.Fprintf(buf[0], "\t%s %s\n", new sliceType$4([new ObjKind(obj.Kind), new $String(obj.Name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i++;
			/* } */ $s = 5; continue; case 6:
		/* } */ case 3:
		_r$3 = fmt.Fprintf(buf[0], "}\n", new sliceType$4([])); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		return buf[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Scope.ptr.prototype.String }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.buf = buf; $f.obj = obj; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Scope.prototype.String = function() { return this.$val.String(); };
	NewObj = function(kind, name) {
		var $ptr, kind, name;
		return new Object.ptr(kind, name, $ifaceNil, $ifaceNil, $ifaceNil);
	};
	$pkg.NewObj = NewObj;
	Object.ptr.prototype.Pos = function() {
		var $ptr, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, _tuple, d, d$1, d$2, d$3, d$4, d$5, d$6, d$7, ident, isIdent, n, n$1, name, obj, x;
		obj = this;
		name = obj.Name;
		_ref = obj.Decl;
		if ($assertType(_ref, ptrType$10, true)[1]) {
			d = _ref.$val;
			_ref$1 = d.Names;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				n = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (n.Name === name) {
					return n.Pos();
				}
				_i++;
			}
		} else if ($assertType(_ref, ptrType$24, true)[1]) {
			d$1 = _ref.$val;
			if (!(d$1.Name === ptrType$4.nil) && d$1.Name.Name === name) {
				return d$1.Name.Pos();
			}
			return d$1.Path.Pos();
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			d$2 = _ref.$val;
			_ref$2 = d$2.Names;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				n$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (n$1.Name === name) {
					return n$1.Pos();
				}
				_i$1++;
			}
		} else if ($assertType(_ref, ptrType$21, true)[1]) {
			d$3 = _ref.$val;
			if (d$3.Name.Name === name) {
				return d$3.Name.Pos();
			}
		} else if ($assertType(_ref, ptrType$23, true)[1]) {
			d$4 = _ref.$val;
			if (d$4.Name.Name === name) {
				return d$4.Name.Pos();
			}
		} else if ($assertType(_ref, ptrType$27, true)[1]) {
			d$5 = _ref.$val;
			if (d$5.Label.Name === name) {
				return d$5.Label.Pos();
			}
		} else if ($assertType(_ref, ptrType$28, true)[1]) {
			d$6 = _ref.$val;
			_ref$3 = d$6.Lhs;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				x = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
				_tuple = $assertType(x, ptrType$4, true);
				ident = _tuple[0];
				isIdent = _tuple[1];
				if (isIdent && ident.Name === name) {
					return ident.Pos();
				}
				_i$2++;
			}
		} else if ($assertType(_ref, ptrType$26, true)[1]) {
			d$7 = _ref.$val;
		}
		return 0;
	};
	Object.prototype.Pos = function() { return this.$val.Pos(); };
	ObjKind.prototype.String = function() {
		var $ptr, kind;
		kind = this.$val;
		return ((kind < 0 || kind >= objKindStrings.length) ? $throwRuntimeError("index out of range") : objKindStrings[kind]);
	};
	$ptrType(ObjKind).prototype.String = function() { return new ObjKind(this.$get()).String(); };
	walkIdentList = function(v, list) {
		var $ptr, _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: walkIdentList }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkExprList = function(v, list) {
		var $ptr, _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: walkExprList }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkStmtList = function(v, list) {
		var $ptr, _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: walkStmtList }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	walkDeclList = function(v, list) {
		var $ptr, _i, _ref, list, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; list = $f.list; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$r = Walk(v, x); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: walkDeclList }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.list = list; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Walk = function(v, node) {
		var $ptr, _entry, _i, _i$1, _i$2, _i$3, _keys, _r, _r$1, _r$2, _ref, _ref$1, _ref$2, _ref$3, _ref$4, c, f, f$1, n, n$1, n$10, n$11, n$12, n$13, n$14, n$15, n$16, n$17, n$18, n$19, n$2, n$20, n$21, n$22, n$23, n$24, n$25, n$26, n$27, n$28, n$29, n$3, n$30, n$31, n$32, n$33, n$34, n$35, n$36, n$37, n$38, n$39, n$4, n$40, n$41, n$42, n$43, n$44, n$45, n$46, n$47, n$48, n$49, n$5, n$50, n$51, n$52, n$53, n$6, n$7, n$8, n$9, node, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; c = $f.c; f = $f.f; f$1 = $f.f$1; n = $f.n; n$1 = $f.n$1; n$10 = $f.n$10; n$11 = $f.n$11; n$12 = $f.n$12; n$13 = $f.n$13; n$14 = $f.n$14; n$15 = $f.n$15; n$16 = $f.n$16; n$17 = $f.n$17; n$18 = $f.n$18; n$19 = $f.n$19; n$2 = $f.n$2; n$20 = $f.n$20; n$21 = $f.n$21; n$22 = $f.n$22; n$23 = $f.n$23; n$24 = $f.n$24; n$25 = $f.n$25; n$26 = $f.n$26; n$27 = $f.n$27; n$28 = $f.n$28; n$29 = $f.n$29; n$3 = $f.n$3; n$30 = $f.n$30; n$31 = $f.n$31; n$32 = $f.n$32; n$33 = $f.n$33; n$34 = $f.n$34; n$35 = $f.n$35; n$36 = $f.n$36; n$37 = $f.n$37; n$38 = $f.n$38; n$39 = $f.n$39; n$4 = $f.n$4; n$40 = $f.n$40; n$41 = $f.n$41; n$42 = $f.n$42; n$43 = $f.n$43; n$44 = $f.n$44; n$45 = $f.n$45; n$46 = $f.n$46; n$47 = $f.n$47; n$48 = $f.n$48; n$49 = $f.n$49; n$5 = $f.n$5; n$50 = $f.n$50; n$51 = $f.n$51; n$52 = $f.n$52; n$53 = $f.n$53; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; node = $f.node; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = v.Visit(node); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		if ($interfaceIsEqual(v, $ifaceNil)) {
			return;
		}
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$35, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$36, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$37, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$38, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, ptrType$41, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, ptrType$42, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, ptrType$43, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, ptrType$44, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, ptrType$45, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 34; continue; }
		/* */ if ($assertType(_ref, ptrType$47, true)[1]) { $s = 35; continue; }
		/* */ if ($assertType(_ref, ptrType$48, true)[1]) { $s = 36; continue; }
		/* */ if ($assertType(_ref, ptrType$49, true)[1]) { $s = 37; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 38; continue; }
		/* */ if ($assertType(_ref, ptrType$50, true)[1]) { $s = 39; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 40; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 41; continue; }
		/* */ if ($assertType(_ref, ptrType$53, true)[1]) { $s = 42; continue; }
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 43; continue; }
		/* */ if ($assertType(_ref, ptrType$55, true)[1]) { $s = 44; continue; }
		/* */ if ($assertType(_ref, ptrType$56, true)[1]) { $s = 45; continue; }
		/* */ if ($assertType(_ref, ptrType$57, true)[1]) { $s = 46; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 47; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 48; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 49; continue; }
		/* */ if ($assertType(_ref, ptrType$58, true)[1]) { $s = 50; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 51; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 52; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 53; continue; }
		/* */ if ($assertType(_ref, ptrType$59, true)[1]) { $s = 54; continue; }
		/* */ $s = 55; continue;
		/* if ($assertType(_ref, ptrType$6, true)[1]) { */ case 2:
			n = _ref.$val;
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 3:
			n$1 = _ref.$val;
			_ref$1 = n$1.List;
			_i = 0;
			/* while (true) { */ case 57:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 58; continue; }
				c = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				$r = Walk(v, c); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 57; continue; case 58:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 4:
			n$2 = _ref.$val;
			/* */ if (!(n$2.Doc === ptrType.nil)) { $s = 60; continue; }
			/* */ $s = 61; continue;
			/* if (!(n$2.Doc === ptrType.nil)) { */ case 60:
				$r = Walk(v, n$2.Doc); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 61:
			$r = walkIdentList(v, n$2.Names); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$2.Type); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$2.Tag === ptrType$1.nil)) { $s = 65; continue; }
			/* */ $s = 66; continue;
			/* if (!(n$2.Tag === ptrType$1.nil)) { */ case 65:
				$r = Walk(v, n$2.Tag); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 66:
			/* */ if (!(n$2.Comment === ptrType.nil)) { $s = 68; continue; }
			/* */ $s = 69; continue;
			/* if (!(n$2.Comment === ptrType.nil)) { */ case 68:
				$r = Walk(v, n$2.Comment); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 69:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 5:
			n$3 = _ref.$val;
			_ref$2 = n$3.List;
			_i$1 = 0;
			/* while (true) { */ case 71:
				/* if (!(_i$1 < _ref$2.$length)) { break; } */ if(!(_i$1 < _ref$2.$length)) { $s = 72; continue; }
				f = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				$r = Walk(v, f); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 71; continue; case 72:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$29, true)[1] || $assertType(_ref, ptrType$4, true)[1] || $assertType(_ref, ptrType$1, true)[1]) { */ case 6:
			n$4 = _ref;
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 7:
			n$5 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$5.Elt, $ifaceNil))) { $s = 74; continue; }
			/* */ $s = 75; continue;
			/* if (!($interfaceIsEqual(n$5.Elt, $ifaceNil))) { */ case 74:
				$r = Walk(v, n$5.Elt); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 75:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 8:
			n$6 = _ref.$val;
			$r = Walk(v, n$6.Type); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$6.Body); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 9:
			n$7 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$7.Type, $ifaceNil))) { $s = 79; continue; }
			/* */ $s = 80; continue;
			/* if (!($interfaceIsEqual(n$7.Type, $ifaceNil))) { */ case 79:
				$r = Walk(v, n$7.Type); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 80:
			$r = walkExprList(v, n$7.Elts); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 10:
			n$8 = _ref.$val;
			$r = Walk(v, n$8.X); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 11:
			n$9 = _ref.$val;
			$r = Walk(v, n$9.X); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$9.Sel); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$33, true)[1]) { */ case 12:
			n$10 = _ref.$val;
			$r = Walk(v, n$10.X); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$10.Index); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$34, true)[1]) { */ case 13:
			n$11 = _ref.$val;
			$r = Walk(v, n$11.X); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$11.Low, $ifaceNil))) { $s = 89; continue; }
			/* */ $s = 90; continue;
			/* if (!($interfaceIsEqual(n$11.Low, $ifaceNil))) { */ case 89:
				$r = Walk(v, n$11.Low); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 90:
			/* */ if (!($interfaceIsEqual(n$11.High, $ifaceNil))) { $s = 92; continue; }
			/* */ $s = 93; continue;
			/* if (!($interfaceIsEqual(n$11.High, $ifaceNil))) { */ case 92:
				$r = Walk(v, n$11.High); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 93:
			/* */ if (!($interfaceIsEqual(n$11.Max, $ifaceNil))) { $s = 95; continue; }
			/* */ $s = 96; continue;
			/* if (!($interfaceIsEqual(n$11.Max, $ifaceNil))) { */ case 95:
				$r = Walk(v, n$11.Max); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 96:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$35, true)[1]) { */ case 14:
			n$12 = _ref.$val;
			$r = Walk(v, n$12.X); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$12.Type, $ifaceNil))) { $s = 99; continue; }
			/* */ $s = 100; continue;
			/* if (!($interfaceIsEqual(n$12.Type, $ifaceNil))) { */ case 99:
				$r = Walk(v, n$12.Type); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 100:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$36, true)[1]) { */ case 15:
			n$13 = _ref.$val;
			$r = Walk(v, n$13.Fun); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkExprList(v, n$13.Args); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 16:
			n$14 = _ref.$val;
			$r = Walk(v, n$14.X); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$37, true)[1]) { */ case 17:
			n$15 = _ref.$val;
			$r = Walk(v, n$15.X); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$38, true)[1]) { */ case 18:
			n$16 = _ref.$val;
			$r = Walk(v, n$16.X); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$16.Y); /* */ $s = 107; case 107: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 19:
			n$17 = _ref.$val;
			$r = Walk(v, n$17.Key); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$17.Value); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 20:
			n$18 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$18.Len, $ifaceNil))) { $s = 110; continue; }
			/* */ $s = 111; continue;
			/* if (!($interfaceIsEqual(n$18.Len, $ifaceNil))) { */ case 110:
				$r = Walk(v, n$18.Len); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 111:
			$r = Walk(v, n$18.Elt); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 21:
			n$19 = _ref.$val;
			$r = Walk(v, n$19.Fields); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 22:
			n$20 = _ref.$val;
			/* */ if (!(n$20.Params === ptrType$2.nil)) { $s = 115; continue; }
			/* */ $s = 116; continue;
			/* if (!(n$20.Params === ptrType$2.nil)) { */ case 115:
				$r = Walk(v, n$20.Params); /* */ $s = 117; case 117: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 116:
			/* */ if (!(n$20.Results === ptrType$2.nil)) { $s = 118; continue; }
			/* */ $s = 119; continue;
			/* if (!(n$20.Results === ptrType$2.nil)) { */ case 118:
				$r = Walk(v, n$20.Results); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 119:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 23:
			n$21 = _ref.$val;
			$r = Walk(v, n$21.Methods); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 24:
			n$22 = _ref.$val;
			$r = Walk(v, n$22.Key); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$22.Value); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 25:
			n$23 = _ref.$val;
			$r = Walk(v, n$23.Value); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 26:
			n$24 = _ref.$val;
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$41, true)[1]) { */ case 27:
			n$25 = _ref.$val;
			$r = Walk(v, n$25.Decl); /* */ $s = 125; case 125: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$42, true)[1]) { */ case 28:
			n$26 = _ref.$val;
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 29:
			n$27 = _ref.$val;
			$r = Walk(v, n$27.Label); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$27.Stmt); /* */ $s = 127; case 127: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$43, true)[1]) { */ case 30:
			n$28 = _ref.$val;
			$r = Walk(v, n$28.X); /* */ $s = 128; case 128: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$44, true)[1]) { */ case 31:
			n$29 = _ref.$val;
			$r = Walk(v, n$29.Chan); /* */ $s = 129; case 129: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$29.Value); /* */ $s = 130; case 130: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$45, true)[1]) { */ case 32:
			n$30 = _ref.$val;
			$r = Walk(v, n$30.X); /* */ $s = 131; case 131: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$28, true)[1]) { */ case 33:
			n$31 = _ref.$val;
			$r = walkExprList(v, n$31.Lhs); /* */ $s = 132; case 132: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkExprList(v, n$31.Rhs); /* */ $s = 133; case 133: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 34:
			n$32 = _ref.$val;
			$r = Walk(v, n$32.Call); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$47, true)[1]) { */ case 35:
			n$33 = _ref.$val;
			$r = Walk(v, n$33.Call); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$48, true)[1]) { */ case 36:
			n$34 = _ref.$val;
			$r = walkExprList(v, n$34.Results); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$49, true)[1]) { */ case 37:
			n$35 = _ref.$val;
			/* */ if (!(n$35.Label === ptrType$4.nil)) { $s = 137; continue; }
			/* */ $s = 138; continue;
			/* if (!(n$35.Label === ptrType$4.nil)) { */ case 137:
				$r = Walk(v, n$35.Label); /* */ $s = 139; case 139: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 138:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 38:
			n$36 = _ref.$val;
			$r = walkStmtList(v, n$36.List); /* */ $s = 140; case 140: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$50, true)[1]) { */ case 39:
			n$37 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$37.Init, $ifaceNil))) { $s = 141; continue; }
			/* */ $s = 142; continue;
			/* if (!($interfaceIsEqual(n$37.Init, $ifaceNil))) { */ case 141:
				$r = Walk(v, n$37.Init); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 142:
			$r = Walk(v, n$37.Cond); /* */ $s = 144; case 144: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$37.Body); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$37.Else, $ifaceNil))) { $s = 146; continue; }
			/* */ $s = 147; continue;
			/* if (!($interfaceIsEqual(n$37.Else, $ifaceNil))) { */ case 146:
				$r = Walk(v, n$37.Else); /* */ $s = 148; case 148: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 147:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 40:
			n$38 = _ref.$val;
			$r = walkExprList(v, n$38.List); /* */ $s = 149; case 149: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkStmtList(v, n$38.Body); /* */ $s = 150; case 150: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 41:
			n$39 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$39.Init, $ifaceNil))) { $s = 151; continue; }
			/* */ $s = 152; continue;
			/* if (!($interfaceIsEqual(n$39.Init, $ifaceNil))) { */ case 151:
				$r = Walk(v, n$39.Init); /* */ $s = 153; case 153: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 152:
			/* */ if (!($interfaceIsEqual(n$39.Tag, $ifaceNil))) { $s = 154; continue; }
			/* */ $s = 155; continue;
			/* if (!($interfaceIsEqual(n$39.Tag, $ifaceNil))) { */ case 154:
				$r = Walk(v, n$39.Tag); /* */ $s = 156; case 156: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 155:
			$r = Walk(v, n$39.Body); /* */ $s = 157; case 157: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$53, true)[1]) { */ case 42:
			n$40 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$40.Init, $ifaceNil))) { $s = 158; continue; }
			/* */ $s = 159; continue;
			/* if (!($interfaceIsEqual(n$40.Init, $ifaceNil))) { */ case 158:
				$r = Walk(v, n$40.Init); /* */ $s = 160; case 160: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 159:
			$r = Walk(v, n$40.Assign); /* */ $s = 161; case 161: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$40.Body); /* */ $s = 162; case 162: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$54, true)[1]) { */ case 43:
			n$41 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$41.Comm, $ifaceNil))) { $s = 163; continue; }
			/* */ $s = 164; continue;
			/* if (!($interfaceIsEqual(n$41.Comm, $ifaceNil))) { */ case 163:
				$r = Walk(v, n$41.Comm); /* */ $s = 165; case 165: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 164:
			$r = walkStmtList(v, n$41.Body); /* */ $s = 166; case 166: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$55, true)[1]) { */ case 44:
			n$42 = _ref.$val;
			$r = Walk(v, n$42.Body); /* */ $s = 167; case 167: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$56, true)[1]) { */ case 45:
			n$43 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$43.Init, $ifaceNil))) { $s = 168; continue; }
			/* */ $s = 169; continue;
			/* if (!($interfaceIsEqual(n$43.Init, $ifaceNil))) { */ case 168:
				$r = Walk(v, n$43.Init); /* */ $s = 170; case 170: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 169:
			/* */ if (!($interfaceIsEqual(n$43.Cond, $ifaceNil))) { $s = 171; continue; }
			/* */ $s = 172; continue;
			/* if (!($interfaceIsEqual(n$43.Cond, $ifaceNil))) { */ case 171:
				$r = Walk(v, n$43.Cond); /* */ $s = 173; case 173: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 172:
			/* */ if (!($interfaceIsEqual(n$43.Post, $ifaceNil))) { $s = 174; continue; }
			/* */ $s = 175; continue;
			/* if (!($interfaceIsEqual(n$43.Post, $ifaceNil))) { */ case 174:
				$r = Walk(v, n$43.Post); /* */ $s = 176; case 176: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 175:
			$r = Walk(v, n$43.Body); /* */ $s = 177; case 177: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$57, true)[1]) { */ case 46:
			n$44 = _ref.$val;
			/* */ if (!($interfaceIsEqual(n$44.Key, $ifaceNil))) { $s = 178; continue; }
			/* */ $s = 179; continue;
			/* if (!($interfaceIsEqual(n$44.Key, $ifaceNil))) { */ case 178:
				$r = Walk(v, n$44.Key); /* */ $s = 180; case 180: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 179:
			/* */ if (!($interfaceIsEqual(n$44.Value, $ifaceNil))) { $s = 181; continue; }
			/* */ $s = 182; continue;
			/* if (!($interfaceIsEqual(n$44.Value, $ifaceNil))) { */ case 181:
				$r = Walk(v, n$44.Value); /* */ $s = 183; case 183: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 182:
			$r = Walk(v, n$44.X); /* */ $s = 184; case 184: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$44.Body); /* */ $s = 185; case 185: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 47:
			n$45 = _ref.$val;
			/* */ if (!(n$45.Doc === ptrType.nil)) { $s = 186; continue; }
			/* */ $s = 187; continue;
			/* if (!(n$45.Doc === ptrType.nil)) { */ case 186:
				$r = Walk(v, n$45.Doc); /* */ $s = 188; case 188: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 187:
			/* */ if (!(n$45.Name === ptrType$4.nil)) { $s = 189; continue; }
			/* */ $s = 190; continue;
			/* if (!(n$45.Name === ptrType$4.nil)) { */ case 189:
				$r = Walk(v, n$45.Name); /* */ $s = 191; case 191: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 190:
			$r = Walk(v, n$45.Path); /* */ $s = 192; case 192: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$45.Comment === ptrType.nil)) { $s = 193; continue; }
			/* */ $s = 194; continue;
			/* if (!(n$45.Comment === ptrType.nil)) { */ case 193:
				$r = Walk(v, n$45.Comment); /* */ $s = 195; case 195: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 194:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 48:
			n$46 = _ref.$val;
			/* */ if (!(n$46.Doc === ptrType.nil)) { $s = 196; continue; }
			/* */ $s = 197; continue;
			/* if (!(n$46.Doc === ptrType.nil)) { */ case 196:
				$r = Walk(v, n$46.Doc); /* */ $s = 198; case 198: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 197:
			$r = walkIdentList(v, n$46.Names); /* */ $s = 199; case 199: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(n$46.Type, $ifaceNil))) { $s = 200; continue; }
			/* */ $s = 201; continue;
			/* if (!($interfaceIsEqual(n$46.Type, $ifaceNil))) { */ case 200:
				$r = Walk(v, n$46.Type); /* */ $s = 202; case 202: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 201:
			$r = walkExprList(v, n$46.Values); /* */ $s = 203; case 203: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$46.Comment === ptrType.nil)) { $s = 204; continue; }
			/* */ $s = 205; continue;
			/* if (!(n$46.Comment === ptrType.nil)) { */ case 204:
				$r = Walk(v, n$46.Comment); /* */ $s = 206; case 206: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 205:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 49:
			n$47 = _ref.$val;
			/* */ if (!(n$47.Doc === ptrType.nil)) { $s = 207; continue; }
			/* */ $s = 208; continue;
			/* if (!(n$47.Doc === ptrType.nil)) { */ case 207:
				$r = Walk(v, n$47.Doc); /* */ $s = 209; case 209: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 208:
			$r = Walk(v, n$47.Name); /* */ $s = 210; case 210: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$47.Type); /* */ $s = 211; case 211: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$47.Comment === ptrType.nil)) { $s = 212; continue; }
			/* */ $s = 213; continue;
			/* if (!(n$47.Comment === ptrType.nil)) { */ case 212:
				$r = Walk(v, n$47.Comment); /* */ $s = 214; case 214: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 213:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$58, true)[1]) { */ case 50:
			n$48 = _ref.$val;
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 51:
			n$49 = _ref.$val;
			/* */ if (!(n$49.Doc === ptrType.nil)) { $s = 215; continue; }
			/* */ $s = 216; continue;
			/* if (!(n$49.Doc === ptrType.nil)) { */ case 215:
				$r = Walk(v, n$49.Doc); /* */ $s = 217; case 217: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 216:
			_ref$3 = n$49.Specs;
			_i$2 = 0;
			/* while (true) { */ case 218:
				/* if (!(_i$2 < _ref$3.$length)) { break; } */ if(!(_i$2 < _ref$3.$length)) { $s = 219; continue; }
				s = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
				$r = Walk(v, s); /* */ $s = 220; case 220: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$2++;
			/* } */ $s = 218; continue; case 219:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 52:
			n$50 = _ref.$val;
			/* */ if (!(n$50.Doc === ptrType.nil)) { $s = 221; continue; }
			/* */ $s = 222; continue;
			/* if (!(n$50.Doc === ptrType.nil)) { */ case 221:
				$r = Walk(v, n$50.Doc); /* */ $s = 223; case 223: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 222:
			/* */ if (!(n$50.Recv === ptrType$2.nil)) { $s = 224; continue; }
			/* */ $s = 225; continue;
			/* if (!(n$50.Recv === ptrType$2.nil)) { */ case 224:
				$r = Walk(v, n$50.Recv); /* */ $s = 226; case 226: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 225:
			$r = Walk(v, n$50.Name); /* */ $s = 227; case 227: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = Walk(v, n$50.Type); /* */ $s = 228; case 228: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(n$50.Body === ptrType$5.nil)) { $s = 229; continue; }
			/* */ $s = 230; continue;
			/* if (!(n$50.Body === ptrType$5.nil)) { */ case 229:
				$r = Walk(v, n$50.Body); /* */ $s = 231; case 231: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 230:
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 53:
			n$51 = _ref.$val;
			/* */ if (!(n$51.Doc === ptrType.nil)) { $s = 232; continue; }
			/* */ $s = 233; continue;
			/* if (!(n$51.Doc === ptrType.nil)) { */ case 232:
				$r = Walk(v, n$51.Doc); /* */ $s = 234; case 234: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 233:
			$r = Walk(v, n$51.Name); /* */ $s = 235; case 235: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = walkDeclList(v, n$51.Decls); /* */ $s = 236; case 236: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 56; continue;
		/* } else if ($assertType(_ref, ptrType$59, true)[1]) { */ case 54:
			n$52 = _ref.$val;
			_ref$4 = n$52.Files;
			_i$3 = 0;
			_keys = $keys(_ref$4);
			/* while (true) { */ case 237:
				/* if (!(_i$3 < _keys.length)) { break; } */ if(!(_i$3 < _keys.length)) { $s = 238; continue; }
				_entry = _ref$4[_keys[_i$3]];
				if (_entry === undefined) {
					_i$3++;
					/* continue; */ $s = 237; continue;
				}
				f$1 = _entry.v;
				$r = Walk(v, f$1); /* */ $s = 239; case 239: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$3++;
			/* } */ $s = 237; continue; case 238:
			$s = 56; continue;
		/* } else { */ case 55:
			n$53 = _ref;
			_r$1 = fmt.Sprintf("ast.Walk: unexpected node type %T", new sliceType$4([n$53])); /* */ $s = 240; case 240: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(_r$1));
		/* } */ case 56:
		_r$2 = v.Visit($ifaceNil); /* */ $s = 241; case 241: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Walk }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f.c = c; $f.f = f; $f.f$1 = f$1; $f.n = n; $f.n$1 = n$1; $f.n$10 = n$10; $f.n$11 = n$11; $f.n$12 = n$12; $f.n$13 = n$13; $f.n$14 = n$14; $f.n$15 = n$15; $f.n$16 = n$16; $f.n$17 = n$17; $f.n$18 = n$18; $f.n$19 = n$19; $f.n$2 = n$2; $f.n$20 = n$20; $f.n$21 = n$21; $f.n$22 = n$22; $f.n$23 = n$23; $f.n$24 = n$24; $f.n$25 = n$25; $f.n$26 = n$26; $f.n$27 = n$27; $f.n$28 = n$28; $f.n$29 = n$29; $f.n$3 = n$3; $f.n$30 = n$30; $f.n$31 = n$31; $f.n$32 = n$32; $f.n$33 = n$33; $f.n$34 = n$34; $f.n$35 = n$35; $f.n$36 = n$36; $f.n$37 = n$37; $f.n$38 = n$38; $f.n$39 = n$39; $f.n$4 = n$4; $f.n$40 = n$40; $f.n$41 = n$41; $f.n$42 = n$42; $f.n$43 = n$43; $f.n$44 = n$44; $f.n$45 = n$45; $f.n$46 = n$46; $f.n$47 = n$47; $f.n$48 = n$48; $f.n$49 = n$49; $f.n$5 = n$5; $f.n$50 = n$50; $f.n$51 = n$51; $f.n$52 = n$52; $f.n$53 = n$53; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.node = node; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Walk = Walk;
	inspector.prototype.Visit = function(node) {
		var $ptr, _r, f, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		_r = f(node); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			return new inspector(f);
		/* } */ case 2:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inspector.prototype.Visit }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(inspector).prototype.Visit = function(node) { return new inspector(this.$get()).Visit(node); };
	Inspect = function(node, f) {
		var $ptr, f, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; f = $f.f; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Walk(new inspector(f), node); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Inspect }; } $f.$ptr = $ptr; $f.f = f; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Inspect = Inspect;
	ptrType$6.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType$2.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "NumFields", name: "NumFields", pkg: "", typ: $funcType([], [$Int], false)}];
	ptrType$29.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}, {prop: "IsExported", name: "IsExported", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$30.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$31.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$32.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$13.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$11.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$33.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$34.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$35.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$36.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$12.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$37.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$38.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$39.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$14.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$16.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$17.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$19.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$40.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$41.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$42.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$27.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$43.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$44.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$45.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$28.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$46.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$47.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$48.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$49.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$5.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$50.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$51.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$52.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$53.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$54.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$55.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$56.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$57.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$24.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$20.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$21.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$58.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$22.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$23.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "go/ast", typ: $funcType([], [], false)}];
	ptrType$9.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ptrType$59.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}];
	byImportSpec.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	byCommentPos.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$26.methods = [{prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([ptrType$3], [ptrType$3], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}];
	ObjKind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	inspector.methods = [{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([Node], [Visitor], false)}];
	Node.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}]);
	Expr.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "exprNode", name: "exprNode", pkg: "go/ast", typ: $funcType([], [], false)}]);
	Stmt.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "stmtNode", name: "stmtNode", pkg: "go/ast", typ: $funcType([], [], false)}]);
	Decl.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "declNode", name: "declNode", pkg: "go/ast", typ: $funcType([], [], false)}]);
	Comment.init([{prop: "Slash", name: "Slash", pkg: "", typ: token.Pos, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: ""}]);
	CommentGroup.init([{prop: "List", name: "List", pkg: "", typ: sliceType$5, tag: ""}]);
	Field.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Names", name: "Names", pkg: "", typ: sliceType$8, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Expr, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Comment", name: "Comment", pkg: "", typ: ptrType, tag: ""}]);
	FieldList.init([{prop: "Opening", name: "Opening", pkg: "", typ: token.Pos, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$10, tag: ""}, {prop: "Closing", name: "Closing", pkg: "", typ: token.Pos, tag: ""}]);
	BadExpr.init([{prop: "From", name: "From", pkg: "", typ: token.Pos, tag: ""}, {prop: "To", name: "To", pkg: "", typ: token.Pos, tag: ""}]);
	Ident.init([{prop: "NamePos", name: "NamePos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Obj", name: "Obj", pkg: "", typ: ptrType$3, tag: ""}]);
	Ellipsis.init([{prop: "Ellipsis", name: "Ellipsis", pkg: "", typ: token.Pos, tag: ""}, {prop: "Elt", name: "Elt", pkg: "", typ: Expr, tag: ""}]);
	BasicLit.init([{prop: "ValuePos", name: "ValuePos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: token.Token, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	FuncLit.init([{prop: "Type", name: "Type", pkg: "", typ: ptrType$16, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	CompositeLit.init([{prop: "Type", name: "Type", pkg: "", typ: Expr, tag: ""}, {prop: "Lbrace", name: "Lbrace", pkg: "", typ: token.Pos, tag: ""}, {prop: "Elts", name: "Elts", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Rbrace", name: "Rbrace", pkg: "", typ: token.Pos, tag: ""}]);
	ParenExpr.init([{prop: "Lparen", name: "Lparen", pkg: "", typ: token.Pos, tag: ""}, {prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Rparen", name: "Rparen", pkg: "", typ: token.Pos, tag: ""}]);
	SelectorExpr.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Sel", name: "Sel", pkg: "", typ: ptrType$4, tag: ""}]);
	IndexExpr.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Lbrack", name: "Lbrack", pkg: "", typ: token.Pos, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: Expr, tag: ""}, {prop: "Rbrack", name: "Rbrack", pkg: "", typ: token.Pos, tag: ""}]);
	SliceExpr.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Lbrack", name: "Lbrack", pkg: "", typ: token.Pos, tag: ""}, {prop: "Low", name: "Low", pkg: "", typ: Expr, tag: ""}, {prop: "High", name: "High", pkg: "", typ: Expr, tag: ""}, {prop: "Max", name: "Max", pkg: "", typ: Expr, tag: ""}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $Bool, tag: ""}, {prop: "Rbrack", name: "Rbrack", pkg: "", typ: token.Pos, tag: ""}]);
	TypeAssertExpr.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Lparen", name: "Lparen", pkg: "", typ: token.Pos, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Expr, tag: ""}, {prop: "Rparen", name: "Rparen", pkg: "", typ: token.Pos, tag: ""}]);
	CallExpr.init([{prop: "Fun", name: "Fun", pkg: "", typ: Expr, tag: ""}, {prop: "Lparen", name: "Lparen", pkg: "", typ: token.Pos, tag: ""}, {prop: "Args", name: "Args", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Ellipsis", name: "Ellipsis", pkg: "", typ: token.Pos, tag: ""}, {prop: "Rparen", name: "Rparen", pkg: "", typ: token.Pos, tag: ""}]);
	StarExpr.init([{prop: "Star", name: "Star", pkg: "", typ: token.Pos, tag: ""}, {prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}]);
	UnaryExpr.init([{prop: "OpPos", name: "OpPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Op", name: "Op", pkg: "", typ: token.Token, tag: ""}, {prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}]);
	BinaryExpr.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "OpPos", name: "OpPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Op", name: "Op", pkg: "", typ: token.Token, tag: ""}, {prop: "Y", name: "Y", pkg: "", typ: Expr, tag: ""}]);
	KeyValueExpr.init([{prop: "Key", name: "Key", pkg: "", typ: Expr, tag: ""}, {prop: "Colon", name: "Colon", pkg: "", typ: token.Pos, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expr, tag: ""}]);
	ArrayType.init([{prop: "Lbrack", name: "Lbrack", pkg: "", typ: token.Pos, tag: ""}, {prop: "Len", name: "Len", pkg: "", typ: Expr, tag: ""}, {prop: "Elt", name: "Elt", pkg: "", typ: Expr, tag: ""}]);
	StructType.init([{prop: "Struct", name: "Struct", pkg: "", typ: token.Pos, tag: ""}, {prop: "Fields", name: "Fields", pkg: "", typ: ptrType$2, tag: ""}, {prop: "Incomplete", name: "Incomplete", pkg: "", typ: $Bool, tag: ""}]);
	FuncType.init([{prop: "Func", name: "Func", pkg: "", typ: token.Pos, tag: ""}, {prop: "Params", name: "Params", pkg: "", typ: ptrType$2, tag: ""}, {prop: "Results", name: "Results", pkg: "", typ: ptrType$2, tag: ""}]);
	InterfaceType.init([{prop: "Interface", name: "Interface", pkg: "", typ: token.Pos, tag: ""}, {prop: "Methods", name: "Methods", pkg: "", typ: ptrType$2, tag: ""}, {prop: "Incomplete", name: "Incomplete", pkg: "", typ: $Bool, tag: ""}]);
	MapType.init([{prop: "Map", name: "Map", pkg: "", typ: token.Pos, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: Expr, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expr, tag: ""}]);
	ChanType.init([{prop: "Begin", name: "Begin", pkg: "", typ: token.Pos, tag: ""}, {prop: "Arrow", name: "Arrow", pkg: "", typ: token.Pos, tag: ""}, {prop: "Dir", name: "Dir", pkg: "", typ: ChanDir, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expr, tag: ""}]);
	BadStmt.init([{prop: "From", name: "From", pkg: "", typ: token.Pos, tag: ""}, {prop: "To", name: "To", pkg: "", typ: token.Pos, tag: ""}]);
	DeclStmt.init([{prop: "Decl", name: "Decl", pkg: "", typ: Decl, tag: ""}]);
	EmptyStmt.init([{prop: "Semicolon", name: "Semicolon", pkg: "", typ: token.Pos, tag: ""}, {prop: "Implicit", name: "Implicit", pkg: "", typ: $Bool, tag: ""}]);
	LabeledStmt.init([{prop: "Label", name: "Label", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Colon", name: "Colon", pkg: "", typ: token.Pos, tag: ""}, {prop: "Stmt", name: "Stmt", pkg: "", typ: Stmt, tag: ""}]);
	ExprStmt.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}]);
	SendStmt.init([{prop: "Chan", name: "Chan", pkg: "", typ: Expr, tag: ""}, {prop: "Arrow", name: "Arrow", pkg: "", typ: token.Pos, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expr, tag: ""}]);
	IncDecStmt.init([{prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "TokPos", name: "TokPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", pkg: "", typ: token.Token, tag: ""}]);
	AssignStmt.init([{prop: "Lhs", name: "Lhs", pkg: "", typ: sliceType$11, tag: ""}, {prop: "TokPos", name: "TokPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", pkg: "", typ: token.Token, tag: ""}, {prop: "Rhs", name: "Rhs", pkg: "", typ: sliceType$11, tag: ""}]);
	GoStmt.init([{prop: "Go", name: "Go", pkg: "", typ: token.Pos, tag: ""}, {prop: "Call", name: "Call", pkg: "", typ: ptrType$36, tag: ""}]);
	DeferStmt.init([{prop: "Defer", name: "Defer", pkg: "", typ: token.Pos, tag: ""}, {prop: "Call", name: "Call", pkg: "", typ: ptrType$36, tag: ""}]);
	ReturnStmt.init([{prop: "Return", name: "Return", pkg: "", typ: token.Pos, tag: ""}, {prop: "Results", name: "Results", pkg: "", typ: sliceType$11, tag: ""}]);
	BranchStmt.init([{prop: "TokPos", name: "TokPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", pkg: "", typ: token.Token, tag: ""}, {prop: "Label", name: "Label", pkg: "", typ: ptrType$4, tag: ""}]);
	BlockStmt.init([{prop: "Lbrace", name: "Lbrace", pkg: "", typ: token.Pos, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$12, tag: ""}, {prop: "Rbrace", name: "Rbrace", pkg: "", typ: token.Pos, tag: ""}]);
	IfStmt.init([{prop: "If", name: "If", pkg: "", typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", pkg: "", typ: Stmt, tag: ""}, {prop: "Cond", name: "Cond", pkg: "", typ: Expr, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}, {prop: "Else", name: "Else", pkg: "", typ: Stmt, tag: ""}]);
	CaseClause.init([{prop: "Case", name: "Case", pkg: "", typ: token.Pos, tag: ""}, {prop: "List", name: "List", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Colon", name: "Colon", pkg: "", typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: sliceType$12, tag: ""}]);
	SwitchStmt.init([{prop: "Switch", name: "Switch", pkg: "", typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", pkg: "", typ: Stmt, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: Expr, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	TypeSwitchStmt.init([{prop: "Switch", name: "Switch", pkg: "", typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", pkg: "", typ: Stmt, tag: ""}, {prop: "Assign", name: "Assign", pkg: "", typ: Stmt, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	CommClause.init([{prop: "Case", name: "Case", pkg: "", typ: token.Pos, tag: ""}, {prop: "Comm", name: "Comm", pkg: "", typ: Stmt, tag: ""}, {prop: "Colon", name: "Colon", pkg: "", typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: sliceType$12, tag: ""}]);
	SelectStmt.init([{prop: "Select", name: "Select", pkg: "", typ: token.Pos, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	ForStmt.init([{prop: "For", name: "For", pkg: "", typ: token.Pos, tag: ""}, {prop: "Init", name: "Init", pkg: "", typ: Stmt, tag: ""}, {prop: "Cond", name: "Cond", pkg: "", typ: Expr, tag: ""}, {prop: "Post", name: "Post", pkg: "", typ: Stmt, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	RangeStmt.init([{prop: "For", name: "For", pkg: "", typ: token.Pos, tag: ""}, {prop: "Key", name: "Key", pkg: "", typ: Expr, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: Expr, tag: ""}, {prop: "TokPos", name: "TokPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", pkg: "", typ: token.Token, tag: ""}, {prop: "X", name: "X", pkg: "", typ: Expr, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	Spec.init([{prop: "End", name: "End", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "Pos", name: "Pos", pkg: "", typ: $funcType([], [token.Pos], false)}, {prop: "specNode", name: "specNode", pkg: "go/ast", typ: $funcType([], [], false)}]);
	ImportSpec.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: ptrType$1, tag: ""}, {prop: "Comment", name: "Comment", pkg: "", typ: ptrType, tag: ""}, {prop: "EndPos", name: "EndPos", pkg: "", typ: token.Pos, tag: ""}]);
	ValueSpec.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Names", name: "Names", pkg: "", typ: sliceType$8, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Expr, tag: ""}, {prop: "Values", name: "Values", pkg: "", typ: sliceType$11, tag: ""}, {prop: "Comment", name: "Comment", pkg: "", typ: ptrType, tag: ""}]);
	TypeSpec.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Expr, tag: ""}, {prop: "Comment", name: "Comment", pkg: "", typ: ptrType, tag: ""}]);
	BadDecl.init([{prop: "From", name: "From", pkg: "", typ: token.Pos, tag: ""}, {prop: "To", name: "To", pkg: "", typ: token.Pos, tag: ""}]);
	GenDecl.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "TokPos", name: "TokPos", pkg: "", typ: token.Pos, tag: ""}, {prop: "Tok", name: "Tok", pkg: "", typ: token.Token, tag: ""}, {prop: "Lparen", name: "Lparen", pkg: "", typ: token.Pos, tag: ""}, {prop: "Specs", name: "Specs", pkg: "", typ: sliceType$13, tag: ""}, {prop: "Rparen", name: "Rparen", pkg: "", typ: token.Pos, tag: ""}]);
	FuncDecl.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Recv", name: "Recv", pkg: "", typ: ptrType$2, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: ptrType$16, tag: ""}, {prop: "Body", name: "Body", pkg: "", typ: ptrType$5, tag: ""}]);
	File.init([{prop: "Doc", name: "Doc", pkg: "", typ: ptrType, tag: ""}, {prop: "Package", name: "Package", pkg: "", typ: token.Pos, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: ptrType$4, tag: ""}, {prop: "Decls", name: "Decls", pkg: "", typ: sliceType$6, tag: ""}, {prop: "Scope", name: "Scope", pkg: "", typ: ptrType$26, tag: ""}, {prop: "Imports", name: "Imports", pkg: "", typ: sliceType$7, tag: ""}, {prop: "Unresolved", name: "Unresolved", pkg: "", typ: sliceType$8, tag: ""}, {prop: "Comments", name: "Comments", pkg: "", typ: sliceType$2, tag: ""}]);
	Package.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Scope", name: "Scope", pkg: "", typ: ptrType$26, tag: ""}, {prop: "Imports", name: "Imports", pkg: "", typ: mapType, tag: ""}, {prop: "Files", name: "Files", pkg: "", typ: mapType$1, tag: ""}]);
	posSpan.init([{prop: "Start", name: "Start", pkg: "", typ: token.Pos, tag: ""}, {prop: "End", name: "End", pkg: "", typ: token.Pos, tag: ""}]);
	byImportSpec.init(Spec);
	byCommentPos.init(ptrType);
	Scope.init([{prop: "Outer", name: "Outer", pkg: "", typ: ptrType$26, tag: ""}, {prop: "Objects", name: "Objects", pkg: "", typ: mapType, tag: ""}]);
	Object.init([{prop: "Kind", name: "Kind", pkg: "", typ: ObjKind, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Decl", name: "Decl", pkg: "", typ: $emptyInterface, tag: ""}, {prop: "Data", name: "Data", pkg: "", typ: $emptyInterface, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $emptyInterface, tag: ""}]);
	Visitor.init([{prop: "Visit", name: "Visit", pkg: "", typ: $funcType([Node], [Visitor], false)}]);
	inspector.init([Node], [$Bool], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = scanner.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		objKindStrings = $toNativeArray($kindString, ["bad", "package", "const", "type", "var", "func", "label"]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadFile;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $ptr, _r, _tmp, _tmp$1, _tuple, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType$1.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType$1, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var $ptr, _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true);
			panicErr = _tuple[0];
			ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err[0] = _tuple[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ReadFile = function(filename) {
		var $ptr, _r, _r$1, _tuple, _tuple$1, err, err$1, f, fi, filename, n, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; f = $f.f; fi = $f.fi; filename = $f.filename; n = $f.n; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		_tuple = os.Open(filename);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 0);
		_tuple$1 = f.Stat();
		fi = _tuple$1[0];
		err$1 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 1:
			_r = fi.Size(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			size = _r;
			if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) {
				n = size;
			}
		/* } */ case 2:
		_r$1 = readAll(f, new $Int64(n.$high + 0, n.$low + 512)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType$1.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ReadFile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.fi = fi; $f.filename = filename; $f.n = n; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ReadFile = ReadFile;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var $ptr, b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/parser"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, ast, scanner, token, io, ioutil, os, filepath, strconv, strings, unicode, Mode, parser, bailout, parseSpecFunction, sliceType, ptrType, arrayType, arrayType$1, ptrType$1, ptrType$2, ptrType$3, sliceType$1, ptrType$4, ptrType$5, sliceType$2, ptrType$6, sliceType$3, sliceType$4, sliceType$5, ptrType$7, ptrType$9, sliceType$7, ptrType$10, sliceType$8, sliceType$9, ptrType$11, ptrType$12, ptrType$13, sliceType$10, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, sliceType$11, ptrType$21, arrayType$2, arrayType$3, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, sliceType$12, ptrType$43, ptrType$44, ptrType$45, ptrType$46, funcType, unresolved, readSource, ParseFile, trace, un, assert, syncStmt, syncDecl, isTypeName, isLiteralType, deref, unparen, isTypeSwitchAssert, isValidImport;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	ast = $packages["go/ast"];
	scanner = $packages["go/scanner"];
	token = $packages["go/token"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	Mode = $pkg.Mode = $newType(4, $kindUint, "parser.Mode", "Mode", "go/parser", null);
	parser = $pkg.parser = $newType(0, $kindStruct, "parser.parser", "parser", "go/parser", function(file_, errors_, scanner_, mode_, trace_, indent_, comments_, leadComment_, lineComment_, pos_, tok_, lit_, syncPos_, syncCnt_, exprLev_, inRhs_, pkgScope_, topScope_, unresolved_, imports_, labelScope_, targetStack_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$2.nil;
			this.errors = scanner.ErrorList.nil;
			this.scanner = new scanner.Scanner.ptr(ptrType$2.nil, "", sliceType.nil, $throwNilPointerError, 0, 0, 0, 0, 0, false, 0);
			this.mode = 0;
			this.trace = false;
			this.indent = 0;
			this.comments = sliceType$1.nil;
			this.leadComment = ptrType$3.nil;
			this.lineComment = ptrType$3.nil;
			this.pos = 0;
			this.tok = 0;
			this.lit = "";
			this.syncPos = 0;
			this.syncCnt = 0;
			this.exprLev = 0;
			this.inRhs = false;
			this.pkgScope = ptrType$4.nil;
			this.topScope = ptrType$4.nil;
			this.unresolved = sliceType$2.nil;
			this.imports = sliceType$3.nil;
			this.labelScope = ptrType$4.nil;
			this.targetStack = sliceType$4.nil;
			return;
		}
		this.file = file_;
		this.errors = errors_;
		this.scanner = scanner_;
		this.mode = mode_;
		this.trace = trace_;
		this.indent = indent_;
		this.comments = comments_;
		this.leadComment = leadComment_;
		this.lineComment = lineComment_;
		this.pos = pos_;
		this.tok = tok_;
		this.lit = lit_;
		this.syncPos = syncPos_;
		this.syncCnt = syncCnt_;
		this.exprLev = exprLev_;
		this.inRhs = inRhs_;
		this.pkgScope = pkgScope_;
		this.topScope = topScope_;
		this.unresolved = unresolved_;
		this.imports = imports_;
		this.labelScope = labelScope_;
		this.targetStack = targetStack_;
	});
	bailout = $pkg.bailout = $newType(0, $kindStruct, "parser.bailout", "bailout", "go/parser", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	parseSpecFunction = $pkg.parseSpecFunction = $newType(4, $kindFunc, "parser.parseSpecFunction", "parseSpecFunction", "go/parser", null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(bytes.Buffer);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(ast.File);
	ptrType$2 = $ptrType(token.File);
	ptrType$3 = $ptrType(ast.CommentGroup);
	sliceType$1 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(ast.Scope);
	ptrType$5 = $ptrType(ast.Ident);
	sliceType$2 = $sliceType(ptrType$5);
	ptrType$6 = $ptrType(ast.ImportSpec);
	sliceType$3 = $sliceType(ptrType$6);
	sliceType$4 = $sliceType(sliceType$2);
	sliceType$5 = $sliceType(ast.Decl);
	ptrType$7 = $ptrType(ast.Object);
	ptrType$9 = $ptrType(scanner.ErrorList);
	sliceType$7 = $sliceType($emptyInterface);
	ptrType$10 = $ptrType(ast.Comment);
	sliceType$8 = $sliceType(ptrType$10);
	sliceType$9 = $sliceType(ast.Expr);
	ptrType$11 = $ptrType(ast.BadExpr);
	ptrType$12 = $ptrType(ast.BasicLit);
	ptrType$13 = $ptrType(ast.Field);
	sliceType$10 = $sliceType(ptrType$13);
	ptrType$14 = $ptrType(ast.FieldList);
	ptrType$15 = $ptrType(ast.StructType);
	ptrType$16 = $ptrType(ast.StarExpr);
	ptrType$17 = $ptrType(ast.FuncType);
	ptrType$18 = $ptrType(ast.InterfaceType);
	ptrType$19 = $ptrType(ast.MapType);
	ptrType$20 = $ptrType(ast.ChanType);
	sliceType$11 = $sliceType(ast.Stmt);
	ptrType$21 = $ptrType(ast.BlockStmt);
	arrayType$2 = $arrayType(ast.Expr, 3);
	arrayType$3 = $arrayType(token.Pos, 2);
	ptrType$22 = $ptrType(ast.CallExpr);
	ptrType$23 = $ptrType(ast.FuncLit);
	ptrType$24 = $ptrType(ast.CompositeLit);
	ptrType$25 = $ptrType(ast.ParenExpr);
	ptrType$26 = $ptrType(ast.SelectorExpr);
	ptrType$27 = $ptrType(ast.IndexExpr);
	ptrType$28 = $ptrType(ast.SliceExpr);
	ptrType$29 = $ptrType(ast.TypeAssertExpr);
	ptrType$30 = $ptrType(ast.UnaryExpr);
	ptrType$31 = $ptrType(ast.BinaryExpr);
	ptrType$32 = $ptrType(ast.ArrayType);
	ptrType$33 = $ptrType(ast.Ellipsis);
	ptrType$34 = $ptrType(ast.ReturnStmt);
	ptrType$35 = $ptrType(ast.BranchStmt);
	ptrType$36 = $ptrType(ast.ExprStmt);
	ptrType$37 = $ptrType(ast.IfStmt);
	ptrType$38 = $ptrType(ast.CaseClause);
	ptrType$39 = $ptrType(ast.AssignStmt);
	ptrType$40 = $ptrType(ast.CommClause);
	ptrType$41 = $ptrType(ast.SelectStmt);
	ptrType$42 = $ptrType(ast.LabeledStmt);
	sliceType$12 = $sliceType(ast.Spec);
	ptrType$43 = $ptrType(ast.GenDecl);
	ptrType$44 = $ptrType(ast.FuncDecl);
	ptrType$45 = $ptrType(token.FileSet);
	ptrType$46 = $ptrType(parser);
	funcType = $funcType([ptrType$46], [], false);
	readSource = function(filename, src) {
		var $ptr, _r, _r$1, _ref, _tuple, buf, err, filename, s, s$1, s$2, s$3, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; err = $f.err; filename = $f.filename; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		/* */ if (!($interfaceIsEqual(src, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(src, $ifaceNil))) { */ case 1:
			_ref = src;
			/* */ if ($assertType(_ref, $String, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref, sliceType, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, io.Reader, true)[1]) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($assertType(_ref, $String, true)[1]) { */ case 3:
				s = _ref.$val;
				return [new sliceType($stringToBytes(s)), $ifaceNil];
			/* } else if ($assertType(_ref, sliceType, true)[1]) { */ case 4:
				s$1 = _ref.$val;
				return [s$1, $ifaceNil];
			/* } else if ($assertType(_ref, ptrType, true)[1]) { */ case 5:
				s$2 = _ref.$val;
				if (!(s$2 === ptrType.nil)) {
					return [s$2.Bytes(), $ifaceNil];
				}
				$s = 7; continue;
			/* } else if ($assertType(_ref, io.Reader, true)[1]) { */ case 6:
				s$3 = _ref;
				buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
				_r = io.Copy(buf[0], s$3); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [sliceType.nil, err];
				}
				return [buf[0].Bytes(), $ifaceNil];
			/* } */ case 7:
			return [sliceType.nil, errors.New("invalid source")];
		/* } */ case 2:
		_r$1 = ioutil.ReadFile(filename); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: readSource }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.filename = filename; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	ParseFile = function(fset, filename, src, mode) {
		var $ptr, _r, _r$1, _tmp, _tmp$1, _tuple, err, f, filename, fset, mode, p, src, text, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; filename = $f.filename; fset = $f.fset; mode = $f.mode; p = $f.p; src = $f.src; text = $f.text; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		f = [f];
		p = [p];
		f[0] = ptrType$1.nil;
		err[0] = $ifaceNil;
		_r = readSource(filename, src); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		text = _tuple[0];
		err[0] = _tuple[1];
		if (!($interfaceIsEqual(err[0], $ifaceNil))) {
			_tmp = ptrType$1.nil;
			_tmp$1 = err[0];
			f[0] = _tmp;
			err[0] = _tmp$1;
			return [f[0], err[0]];
		}
		p[0] = new parser.ptr(ptrType$2.nil, scanner.ErrorList.nil, new scanner.Scanner.ptr(ptrType$2.nil, "", sliceType.nil, $throwNilPointerError, 0, 0, 0, 0, 0, false, 0), 0, false, 0, sliceType$1.nil, ptrType$3.nil, ptrType$3.nil, 0, 0, "", 0, 0, 0, false, ptrType$4.nil, ptrType$4.nil, sliceType$2.nil, sliceType$3.nil, ptrType$4.nil, sliceType$4.nil);
		$deferred.push([(function(err, f, p) { return function $b() {
			var $ptr, _tuple$1, e, ok, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple$1 = $f._tuple$1; e = $f.e; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple$1 = $assertType(e, bailout, true);
				ok = _tuple$1[1];
				if (!ok) {
					$panic(e);
				}
			}
			if (f[0] === ptrType$1.nil) {
				f[0] = new ast.File.ptr(ptrType$3.nil, 0, new ast.Ident.ptr(0, "", ptrType$7.nil), sliceType$5.nil, ast.NewScope(ptrType$4.nil), sliceType$3.nil, sliceType$2.nil, sliceType$1.nil);
			}
			$r = p[0].errors.Sort(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			err[0] = p[0].errors.Err();
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._tuple$1 = _tuple$1; $f.e = e; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
		}; })(err, f, p), []]);
		$r = p[0].init(fset, filename, text, mode); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = p[0].parseFile(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		f[0] = _r$1;
		return [f[0], err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [f[0], err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ParseFile }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.filename = filename; $f.fset = fset; $f.mode = mode; $f.p = p; $f.src = src; $f.text = text; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.ParseFile = ParseFile;
	parser.ptr.prototype.init = function(fset, filename, src, mode) {
		var $ptr, eh, filename, fset, m, mode, p, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; eh = $f.eh; filename = $f.filename; fset = $f.fset; m = $f.m; mode = $f.mode; p = $f.p; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		p[0] = this;
		p[0].file = fset.AddFile(filename, -1, src.$length);
		m = 0;
		if (!((((mode & 4) >>> 0) === 0))) {
			m = 1;
		}
		eh = (function(p) { return function(pos, msg) {
			var $ptr, msg, pos;
			pos = $clone(pos, token.Position);
			(p[0].$ptr_errors || (p[0].$ptr_errors = new ptrType$9(function() { return this.$target.errors; }, function($v) { this.$target.errors = $v; }, p[0]))).Add(pos, msg);
		}; })(p);
		$r = p[0].scanner.Init(p[0].file, src, eh, m); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p[0].mode = mode;
		p[0].trace = !((((mode & 8) >>> 0) === 0));
		$r = p[0].next(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.init }; } $f.$ptr = $ptr; $f.eh = eh; $f.filename = filename; $f.fset = fset; $f.m = m; $f.mode = mode; $f.p = p; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.init = function(fset, filename, src, mode) { return this.$val.init(fset, filename, src, mode); };
	parser.ptr.prototype.openScope = function() {
		var $ptr, p;
		p = this;
		p.topScope = ast.NewScope(p.topScope);
	};
	parser.prototype.openScope = function() { return this.$val.openScope(); };
	parser.ptr.prototype.closeScope = function() {
		var $ptr, p;
		p = this;
		p.topScope = p.topScope.Outer;
	};
	parser.prototype.closeScope = function() { return this.$val.closeScope(); };
	parser.ptr.prototype.openLabelScope = function() {
		var $ptr, p;
		p = this;
		p.labelScope = ast.NewScope(p.labelScope);
		p.targetStack = $append(p.targetStack, sliceType$2.nil);
	};
	parser.prototype.openLabelScope = function() { return this.$val.openLabelScope(); };
	parser.ptr.prototype.closeLabelScope = function() {
		var $ptr, _arg, _arg$1, _i, _r, _ref, ident, n, p, scope, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _ref = $f._ref; ident = $f.ident; n = $f.n; p = $f.p; scope = $f.scope; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = p.targetStack.$length - 1 >> 0;
		scope = p.labelScope;
		_ref = (x = p.targetStack, ((n < 0 || n >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + n]));
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			ident = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			ident.Obj = scope.Lookup(ident.Name);
			/* */ if (ident.Obj === ptrType$7.nil && !((((p.mode & 16) >>> 0) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ident.Obj === ptrType$7.nil && !((((p.mode & 16) >>> 0) === 0))) { */ case 3:
				_arg = ident.Pos();
				_r = fmt.Sprintf("label %s undefined", new sliceType$7([new $String(ident.Name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = _r;
				$r = p.error(_arg, _arg$1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		p.targetStack = $subslice(p.targetStack, 0, n);
		p.labelScope = p.labelScope.Outer;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.closeLabelScope }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.ident = ident; $f.n = n; $f.p = p; $f.scope = scope; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.closeLabelScope = function() { return this.$val.closeLabelScope(); };
	parser.ptr.prototype.declare = function(decl, data, scope, kind, idents) {
		var $ptr, _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$2, _ref, alt, data, decl, ident, idents, kind, obj, p, pos, prevDecl, scope, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; alt = $f.alt; data = $f.data; decl = $f.decl; ident = $f.ident; idents = $f.idents; kind = $f.kind; obj = $f.obj; p = $f.p; pos = $f.pos; prevDecl = $f.prevDecl; scope = $f.scope; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = idents;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			ident = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			assert(ident.Obj === ptrType$7.nil, "identifier already declared or resolved");
			obj = ast.NewObj(kind, ident.Name);
			obj.Decl = decl;
			obj.Data = data;
			ident.Obj = obj;
			/* */ if (!(ident.Name === "_")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(ident.Name === "_")) { */ case 3:
				alt = scope.Insert(obj);
				/* */ if (!(alt === ptrType$7.nil) && !((((p.mode & 16) >>> 0) === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(alt === ptrType$7.nil) && !((((p.mode & 16) >>> 0) === 0))) { */ case 5:
					prevDecl = "";
					pos = alt.Pos();
					/* */ if (new token.Pos(pos).IsValid()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (new token.Pos(pos).IsValid()) { */ case 7:
						_r = p.file.Position(pos); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_arg = (x = _r, new x.constructor.elem(x));
						_r$1 = fmt.Sprintf("\n\tprevious declaration at %s", new sliceType$7([_arg])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						prevDecl = _r$1;
					/* } */ case 8:
					_arg$1 = ident.Pos();
					_r$2 = fmt.Sprintf("%s redeclared in this block%s", new sliceType$7([new $String(ident.Name), new $String(prevDecl)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$2 = _r$2;
					$r = p.error(_arg$1, _arg$2); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.declare }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.alt = alt; $f.data = data; $f.decl = decl; $f.ident = ident; $f.idents = idents; $f.kind = kind; $f.obj = obj; $f.p = p; $f.pos = pos; $f.prevDecl = prevDecl; $f.scope = scope; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.declare = function(decl, data, scope, kind, idents) { return this.$val.declare(decl, data, scope, kind, idents); };
	parser.ptr.prototype.shortVarDecl = function(decl, list) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, alt, decl, ident, isIdent, list, n, obj, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; alt = $f.alt; decl = $f.decl; ident = $f.ident; isIdent = $f.isIdent; list = $f.list; n = $f.n; obj = $f.obj; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = 0;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(x, ptrType$5, true);
			ident = _tuple[0];
			isIdent = _tuple[1];
			/* */ if (isIdent) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (isIdent) { */ case 3:
				assert(ident.Obj === ptrType$7.nil, "identifier already declared or resolved");
				obj = ast.NewObj(4, ident.Name);
				obj.Decl = decl;
				ident.Obj = obj;
				if (!(ident.Name === "_")) {
					alt = p.topScope.Insert(obj);
					if (!(alt === ptrType$7.nil)) {
						ident.Obj = alt;
					} else {
						n = n + (1) >> 0;
					}
				}
				$s = 5; continue;
			/* } else { */ case 4:
				_r = x.Pos(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.errorExpected(_r, "identifier on left side of :="); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if ((n === 0) && !((((p.mode & 16) >>> 0) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((n === 0) && !((((p.mode & 16) >>> 0) === 0))) { */ case 8:
			_r$1 = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]).Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = p.error(_r$1, "no new variables on left side of :="); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.shortVarDecl }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.alt = alt; $f.decl = decl; $f.ident = ident; $f.isIdent = isIdent; $f.list = list; $f.n = n; $f.obj = obj; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.shortVarDecl = function(decl, list) { return this.$val.shortVarDecl(decl, list); };
	parser.ptr.prototype.tryResolve = function(x, collectUnresolved) {
		var $ptr, _tuple, collectUnresolved, ident, obj, p, s, x;
		p = this;
		_tuple = $assertType(x, ptrType$5, true);
		ident = _tuple[0];
		if (ident === ptrType$5.nil) {
			return;
		}
		assert(ident.Obj === ptrType$7.nil, "identifier already declared or resolved");
		if (ident.Name === "_") {
			return;
		}
		s = p.topScope;
		while (true) {
			if (!(!(s === ptrType$4.nil))) { break; }
			obj = s.Lookup(ident.Name);
			if (!(obj === ptrType$7.nil)) {
				ident.Obj = obj;
				return;
			}
			s = s.Outer;
		}
		if (collectUnresolved) {
			ident.Obj = unresolved;
			p.unresolved = $append(p.unresolved, ident);
		}
	};
	parser.prototype.tryResolve = function(x, collectUnresolved) { return this.$val.tryResolve(x, collectUnresolved); };
	parser.ptr.prototype.resolve = function(x) {
		var $ptr, p, x;
		p = this;
		p.tryResolve(x, true);
	};
	parser.prototype.resolve = function(x) { return this.$val.resolve(x); };
	parser.ptr.prototype.printTrace = function(a) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, a, i, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; a = $f.a; i = $f.i; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.file.Position(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = $clone(_r, token.Position);
		_r$1 = fmt.Printf("%5d:%3d: ", new sliceType$7([new $Int(pos.Line), new $Int(pos.Column)])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		i = $imul(2, p.indent);
		/* while (true) { */ case 3:
			/* if (!(i > 64)) { break; } */ if(!(i > 64)) { $s = 4; continue; }
			_r$2 = fmt.Print(new sliceType$7([new $String(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			i = i - (64) >> 0;
		/* } */ $s = 3; continue; case 4:
		_r$3 = fmt.Print(new sliceType$7([new $String(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ".substring(0, i))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = fmt.Println(a); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.printTrace }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.a = a; $f.i = i; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.printTrace = function(a) { return this.$val.printTrace(a); };
	trace = function(p, msg) {
		var $ptr, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = p.printTrace(new sliceType$7([new $String(msg), new $String("(")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.indent = p.indent + (1) >> 0;
		return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: trace }; } $f.$ptr = $ptr; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	un = function(p) {
		var $ptr, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p.indent = p.indent - (1) >> 0;
		$r = p.printTrace(new sliceType$7([new $String(")")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: un }; } $f.$ptr = $ptr; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.next0 = function() {
		var $ptr, _r, _tuple, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.trace && new token.Pos(p.pos).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace && new token.Pos(p.pos).IsValid()) { */ case 1:
			s = new token.Token(p.tok).String();
				/* */ if (new token.Token(p.tok).IsLiteral()) { $s = 4; continue; }
				/* */ if ((new token.Token(p.tok).IsOperator()) || (new token.Token(p.tok).IsKeyword())) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (new token.Token(p.tok).IsLiteral()) { */ case 4:
					$r = p.printTrace(new sliceType$7([new $String(s), new $String(p.lit)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if ((new token.Token(p.tok).IsOperator()) || (new token.Token(p.tok).IsKeyword())) { */ case 5:
					$r = p.printTrace(new sliceType$7([new $String("\"" + s + "\"")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = p.printTrace(new sliceType$7([new $String(s)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			case 3:
		/* } */ case 2:
		_r = p.scanner.Scan(); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		p.pos = _tuple[0];
		p.tok = _tuple[1];
		p.lit = _tuple[2];
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.next0 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.next0 = function() { return this.$val.next0(); };
	parser.ptr.prototype.consumeComment = function() {
		var $ptr, _r, comment, endline, i, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; comment = $f.comment; endline = $f.endline; i = $f.i; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comment = ptrType$10.nil;
		endline = 0;
		p = this;
		_r = p.file.Line(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		endline = _r;
		if (p.lit.charCodeAt(1) === 42) {
			i = 0;
			while (true) {
				if (!(i < p.lit.length)) { break; }
				if (p.lit.charCodeAt(i) === 10) {
					endline = endline + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
		}
		comment = new ast.Comment.ptr(p.pos, p.lit);
		$r = p.next0(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return [comment, endline];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.consumeComment }; } $f.$ptr = $ptr; $f._r = _r; $f.comment = comment; $f.endline = endline; $f.i = i; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.consumeComment = function() { return this.$val.consumeComment(); };
	parser.ptr.prototype.consumeCommentGroup = function(n) {
		var $ptr, _r, _r$1, _r$2, _tuple, _v, comment, comments, endline, list, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _v = $f._v; comment = $f.comment; comments = $f.comments; endline = $f.endline; list = $f.list; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comments = ptrType$3.nil;
		endline = 0;
		p = this;
		list = sliceType$8.nil;
		_r = p.file.Line(p.pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		endline = _r;
		/* while (true) { */ case 2:
			if (!(p.tok === 2)) { _v = false; $s = 4; continue s; }
			_r$1 = p.file.Line(p.pos); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 <= (endline + n >> 0); case 4:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 3; continue; }
			comment = ptrType$10.nil;
			_r$2 = p.consumeComment(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			comment = _tuple[0];
			endline = _tuple[1];
			list = $append(list, comment);
		/* } */ $s = 2; continue; case 3:
		comments = new ast.CommentGroup.ptr(list);
		p.comments = $append(p.comments, comments);
		return [comments, endline];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.consumeCommentGroup }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._v = _v; $f.comment = comment; $f.comments = comments; $f.endline = endline; $f.list = list; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.consumeCommentGroup = function(n) { return this.$val.consumeCommentGroup(n); };
	parser.ptr.prototype.next = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, comment, endline, p, prev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; comment = $f.comment; endline = $f.endline; p = $f.p; prev = $f.prev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.leadComment = ptrType$3.nil;
		p.lineComment = ptrType$3.nil;
		prev = p.pos;
		$r = p.next0(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (p.tok === 2) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.tok === 2) { */ case 2:
			comment = ptrType$3.nil;
			endline = 0;
			_r = p.file.Line(p.pos); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = p.file.Line(prev); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r === _r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r === _r$1) { */ case 4:
				_r$2 = p.consumeCommentGroup(0); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				comment = _tuple[0];
				endline = _tuple[1];
				_r$3 = p.file.Line(p.pos); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (!((_r$3 === endline))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((_r$3 === endline))) { */ case 9:
					p.lineComment = comment;
				/* } */ case 10:
			/* } */ case 5:
			endline = -1;
			/* while (true) { */ case 12:
				/* if (!(p.tok === 2)) { break; } */ if(!(p.tok === 2)) { $s = 13; continue; }
				_r$4 = p.consumeCommentGroup(1); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				comment = _tuple$1[0];
				endline = _tuple$1[1];
			/* } */ $s = 12; continue; case 13:
			_r$5 = p.file.Line(p.pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ((endline + 1 >> 0) === _r$5) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ((endline + 1 >> 0) === _r$5) { */ case 15:
				p.leadComment = comment;
			/* } */ case 16:
		/* } */ case 3:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.comment = comment; $f.endline = endline; $f.p = p; $f.prev = prev; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.next = function() { return this.$val.next(); };
	parser.ptr.prototype.error = function(pos, msg) {
		var $ptr, _r, epos, msg, n, p, pos, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; epos = $f.epos; msg = $f.msg; n = $f.n; p = $f.p; pos = $f.pos; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.file.Position(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		epos = $clone(_r, token.Position);
		if (((p.mode & 32) >>> 0) === 0) {
			n = p.errors.$length;
			if (n > 0 && ((x = p.errors, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).Pos.Line === epos.Line)) {
				return;
			}
			if (n > 10) {
				$panic((x$2 = new bailout.ptr(), new x$2.constructor.elem(x$2)));
			}
		}
		(p.$ptr_errors || (p.$ptr_errors = new ptrType$9(function() { return this.$target.errors; }, function($v) { this.$target.errors = $v; }, p))).Add(epos, msg);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.error }; } $f.$ptr = $ptr; $f._r = _r; $f.epos = epos; $f.msg = msg; $f.n = n; $f.p = p; $f.pos = pos; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.error = function(pos, msg) { return this.$val.error(pos, msg); };
	parser.ptr.prototype.errorExpected = function(pos, msg) {
		var $ptr, msg, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; msg = $f.msg; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		msg = "expected " + msg;
		if (pos === p.pos) {
			if ((p.tok === 57) && p.lit === "\n") {
				msg = msg + (", found newline");
			} else {
				msg = msg + (", found '" + new token.Token(p.tok).String() + "'");
				if (new token.Token(p.tok).IsLiteral()) {
					msg = msg + (" " + p.lit);
				}
			}
		}
		$r = p.error(pos, msg); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.errorExpected }; } $f.$ptr = $ptr; $f.msg = msg; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.errorExpected = function(pos, msg) { return this.$val.errorExpected(pos, msg); };
	parser.ptr.prototype.expect = function(tok) {
		var $ptr, p, pos, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; pos = $f.pos; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		pos = p.pos;
		/* */ if (!((p.tok === tok))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === tok))) { */ case 1:
			$r = p.errorExpected(pos, "'" + new token.Token(tok).String() + "'"); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expect }; } $f.$ptr = $ptr; $f.p = p; $f.pos = pos; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expect = function(tok) { return this.$val.expect(tok); };
	parser.ptr.prototype.expectClosing = function(tok, context) {
		var $ptr, _r, context, p, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; context = $f.context; p = $f.p; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!((p.tok === tok)) && (p.tok === 57) && p.lit === "\n") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === tok)) && (p.tok === 57) && p.lit === "\n") { */ case 1:
			$r = p.error(p.pos, "missing ',' before newline in " + context); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r = p.expect(tok); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expectClosing }; } $f.$ptr = $ptr; $f._r = _r; $f.context = context; $f.p = p; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expectClosing = function(tok, context) { return this.$val.expectClosing(tok, context); };
	parser.ptr.prototype.expectSemi = function() {
		var $ptr, _1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!((p.tok === 54)) && !((p.tok === 56))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === 54)) && !((p.tok === 56))) { */ case 1:
				_1 = p.tok;
				/* */ if (_1 === 52) { $s = 4; continue; }
				/* */ if (_1 === 57) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === 52) { */ case 4:
					$r = p.errorExpected(p.pos, "';'"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if (_1 === 57) { */ case 5:
					$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else { */ case 6:
					$r = p.errorExpected(p.pos, "';'"); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = syncStmt(p); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 7:
			case 3:
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.expectSemi }; } $f.$ptr = $ptr; $f._1 = _1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.expectSemi = function() { return this.$val.expectSemi(); };
	parser.ptr.prototype.atComma = function(context, follow) {
		var $ptr, context, follow, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; follow = $f.follow; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.tok === 52) {
			return true;
		}
		/* */ if (!((p.tok === follow))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((p.tok === follow))) { */ case 1:
			msg = "missing ','";
			if ((p.tok === 57) && p.lit === "\n") {
				msg = msg + (" before newline");
			}
			$r = p.error(p.pos, msg + " in " + context); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return true;
		/* } */ case 2:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.atComma }; } $f.$ptr = $ptr; $f.context = context; $f.follow = follow; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.atComma = function(context, follow) { return this.$val.atComma(context, follow); };
	assert = function(cond, msg) {
		var $ptr, cond, msg;
		if (!cond) {
			$panic(new $String("go/parser internal error: " + msg));
		}
	};
	syncStmt = function(p) {
		var $ptr, _2, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_2 = p.tok;
			if ((_2 === 61) || (_2 === 64) || (_2 === 65) || (_2 === 67) || (_2 === 69) || (_2 === 70) || (_2 === 72) || (_2 === 73) || (_2 === 74) || (_2 === 80) || (_2 === 81) || (_2 === 83) || (_2 === 84) || (_2 === 85)) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + (1) >> 0;
					return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					return;
				}
			} else if (_2 === 1) {
				return;
			}
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: syncStmt }; } $f.$ptr = $ptr; $f._2 = _2; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	syncDecl = function(p) {
		var $ptr, _3, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_3 = p.tok;
			if ((_3 === 64) || (_3 === 84) || (_3 === 85)) {
				if ((p.pos === p.syncPos) && p.syncCnt < 10) {
					p.syncCnt = p.syncCnt + (1) >> 0;
					return;
				}
				if (p.pos > p.syncPos) {
					p.syncPos = p.pos;
					p.syncCnt = 0;
					return;
				}
			} else if (_3 === 1) {
				return;
			}
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: syncDecl }; } $f.$ptr = $ptr; $f._3 = _3; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.safePos = function(pos) {
		var $ptr, p, pos, res, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		res = 0;
		p = this;
		$deferred.push([(function() {
			var $ptr;
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				res = ((p.file.Base() + p.file.Size() >> 0) >> 0);
			}
		}), []]);
		p.file.Offset(pos);
		res = pos;
		return res;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  res; } }
	};
	parser.prototype.safePos = function(pos) { return this.$val.safePos(pos); };
	parser.ptr.prototype.parseIdent = function() {
		var $ptr, _r, name, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; name = $f.name; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		pos = p.pos;
		name = "_";
		/* */ if (p.tok === 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.tok === 4) { */ case 1:
			name = p.lit;
			$r = p.next(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			_r = p.expect(4); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 3:
		return new ast.Ident.ptr(pos, name, ptrType$7.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIdent }; } $f.$ptr = $ptr; $f._r = _r; $f.name = name; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseIdent = function() { return this.$val.parseIdent(); };
	parser.ptr.prototype.parseIdentList = function() {
		var $ptr, _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$2.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IdentList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = $append(list, _r$1);
		/* while (true) { */ case 5:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 6; continue; }
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
		/* } */ $s = 5; continue; case 6:
		return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIdentList }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIdentList = function() { return this.$val.parseIdentList(); };
	parser.ptr.prototype.parseExprList = function(lhs) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, lhs, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lhs = $f.lhs; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ExpressionList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseExpr(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = p.checkExpr(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = $append(list, _r$2);
		/* while (true) { */ case 6:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 7; continue; }
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = p.parseExpr(lhs); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = p.checkExpr(_r$3); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			list = $append(list, _r$4);
		/* } */ $s = 6; continue; case 7:
		return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseExprList }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lhs = lhs; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseExprList = function(lhs) { return this.$val.parseExprList(lhs); };
	parser.ptr.prototype.parseLhsList = function() {
		var $ptr, _4, _i, _r, _ref, list, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _i = $f._i; _r = $f._r; _ref = $f._ref; list = $f.list; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = false;
		_r = p.parseExprList(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		list = _r;
		_4 = p.tok;
		if (_4 === 47) {
		} else if (_4 === 58) {
		} else {
			_ref = list;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				p.resolve(x);
				_i++;
			}
		}
		p.inRhs = old;
		return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseLhsList }; } $f.$ptr = $ptr; $f._4 = _4; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.list = list; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseLhsList = function() { return this.$val.parseLhsList(); };
	parser.ptr.prototype.parseRhsList = function() {
		var $ptr, _r, list, old, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; list = $f.list; old = $f.old; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExprList(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		list = _r;
		p.inRhs = old;
		return list;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhsList }; } $f.$ptr = $ptr; $f._r = _r; $f.list = list; $f.old = old; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhsList = function() { return this.$val.parseRhsList(); };
	parser.ptr.prototype.parseType = function() {
		var $ptr, _r, _r$1, p, pos, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Type"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.tryType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		typ = _r$1;
		/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 5:
			pos = p.pos;
			$r = p.errorExpected(pos, "type"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return new ast.BadExpr.ptr(pos, p.pos);
		/* } */ case 6:
		return typ;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseType = function() { return this.$val.parseType(); };
	parser.ptr.prototype.parseTypeName = function() {
		var $ptr, _r, _r$1, _r$2, ident, p, sel, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ident = $f.ident; p = $f.p; sel = $f.sel; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeName"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ident = _r$1;
		/* */ if (p.tok === 53) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 53) { */ case 5:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.resolve(ident);
			_r$2 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			sel = _r$2;
			return new ast.SelectorExpr.ptr(ident, sel);
		/* } */ case 6:
		return ident;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeName }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ident = ident; $f.p = p; $f.sel = sel; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeName = function() { return this.$val.parseTypeName(); };
	parser.ptr.prototype.parseArrayType = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, elt, lbrack, len, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; elt = $f.elt; lbrack = $f.lbrack; len = $f.len; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ArrayType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(50); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrack = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		len = $ifaceNil;
		/* */ if (p.tok === 48) { $s = 5; continue; }
		/* */ if (!((p.tok === 55))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.tok === 48) { */ case 5:
			len = new ast.Ellipsis.ptr(p.pos, $ifaceNil);
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else if (!((p.tok === 55))) { */ case 6:
			_r$2 = p.parseRhs(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			len = _r$2;
		/* } */ case 7:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$3 = p.expect(55); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		_r$4 = p.parseType(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		elt = _r$4;
		return new ast.ArrayType.ptr(lbrack, len, elt);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseArrayType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.elt = elt; $f.lbrack = lbrack; $f.len = len; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseArrayType = function() { return this.$val.parseArrayType(); };
	parser.ptr.prototype.makeIdentList = function(list) {
		var $ptr, _i, _r, _r$1, _ref, _tuple, _tuple$1, i, ident, idents, isBad, isIdent, list, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; i = $f.i; ident = $f.ident; idents = $f.idents; isBad = $f.isBad; isIdent = $f.isIdent; list = $f.list; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		idents = $makeSlice(sliceType$2, list.$length);
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(x, ptrType$5, true);
			ident = _tuple[0];
			isIdent = _tuple[1];
			/* */ if (!isIdent) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isIdent) { */ case 3:
				_tuple$1 = $assertType(x, ptrType$11, true);
				isBad = _tuple$1[1];
				/* */ if (!isBad) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!isBad) { */ case 5:
					_r = x.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r, "identifier"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				_r$1 = x.Pos(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ident = new ast.Ident.ptr(_r$1, "_", ptrType$7.nil);
			/* } */ case 4:
			((i < 0 || i >= idents.$length) ? $throwRuntimeError("index out of range") : idents.$array[idents.$offset + i] = ident);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return idents;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.makeIdentList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.i = i; $f.ident = ident; $f.idents = idents; $f.isBad = isBad; $f.isIdent = isIdent; $f.list = list; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.makeIdentList = function(list) { return this.$val.makeIdentList(list); };
	parser.ptr.prototype.parseFieldDecl = function(scope) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, doc, field, idents, list, n, p, scope, tag, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; doc = $f.doc; field = $f.field; idents = $f.idents; list = $f.list; n = $f.n; p = $f.p; scope = $f.scope; tag = $f.tag; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FieldDecl"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		list = sliceType$9.nil;
		/* while (true) { */ case 4:
			_r$1 = p.parseVarType(false); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			if (!((p.tok === 52))) {
				/* break; */ $s = 5; continue;
			}
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 4; continue; case 5:
		_r$2 = p.tryVarType(false); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		idents = sliceType$2.nil;
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 9:
			_r$3 = p.makeIdentList(list); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			idents = _r$3;
			$s = 11; continue;
		/* } else { */ case 10:
			typ = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]);
			n = list.$length;
			/* */ if (n > 1) { $s = 13; continue; }
			/* */ if (!isTypeName(deref(typ))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (n > 1) { */ case 13:
				$r = p.errorExpected(p.pos, "type"); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(p.pos, p.pos);
				$s = 15; continue;
			/* } else if (!isTypeName(deref(typ))) { */ case 14:
				_r$4 = typ.Pos(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = p.errorExpected(_r$4, "anonymous field"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = typ.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = typ.End(); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = p.safePos(_r$6); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(_r$5, _r$7);
			/* } */ case 15:
		/* } */ case 11:
		tag = ptrType$12.nil;
		/* */ if (p.tok === 9) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (p.tok === 9) { */ case 22:
			tag = new ast.BasicLit.ptr(p.pos, p.tok, p.lit);
			$r = p.next(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		$r = p.expectSemi(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		field = new ast.Field.ptr(doc, idents, typ, tag, p.lineComment);
		$r = p.declare(field, $ifaceNil, scope, 4, idents); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.resolve(typ);
		return field;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$13.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFieldDecl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.doc = doc; $f.field = field; $f.idents = idents; $f.list = list; $f.n = n; $f.p = p; $f.scope = scope; $f.tag = tag; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFieldDecl = function(scope) { return this.$val.parseFieldDecl(scope); };
	parser.ptr.prototype.parseStructType = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, lbrace, list, p, pos, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "StructType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(82); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		scope = ast.NewScope(ptrType$4.nil);
		list = sliceType$10.nil;
		/* while (true) { */ case 6:
			/* if (!((p.tok === 4) || (p.tok === 14) || (p.tok === 49))) { break; } */ if(!((p.tok === 4) || (p.tok === 14) || (p.tok === 49))) { $s = 7; continue; }
			_r$3 = p.parseFieldDecl(scope); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		return new ast.StructType.ptr(pos, new ast.FieldList.ptr(lbrace, list, rbrace), false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$15.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStructType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStructType = function() { return this.$val.parseStructType(); };
	parser.ptr.prototype.parsePointerType = function() {
		var $ptr, _r, _r$1, _r$2, base, p, star, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; base = $f.base; p = $f.p; star = $f.star; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "PointerType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(14); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		star = _r$1;
		_r$2 = p.parseType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		base = _r$2;
		return new ast.StarExpr.ptr(star, base);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$16.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePointerType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.base = base; $f.p = p; $f.star = star; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parsePointerType = function() { return this.$val.parsePointerType(); };
	parser.ptr.prototype.tryVarType = function(isParam) {
		var $ptr, _r, _r$1, isParam, p, pos, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; isParam = $f.isParam; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (isParam && (p.tok === 48)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isParam && (p.tok === 48)) { */ case 1:
			pos = p.pos;
			$r = p.next(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = p.tryIdentOrType(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			typ = _r;
			/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 5:
				p.resolve(typ);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.error(pos, "'...' parameter is missing type"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				typ = new ast.BadExpr.ptr(pos, p.pos);
			/* } */ case 7:
			return new ast.Ellipsis.ptr(pos, typ);
		/* } */ case 2:
		_r$1 = p.tryIdentOrType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryVarType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.isParam = isParam; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryVarType = function(isParam) { return this.$val.tryVarType(isParam); };
	parser.ptr.prototype.parseVarType = function(isParam) {
		var $ptr, _r, isParam, p, pos, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; isParam = $f.isParam; p = $f.p; pos = $f.pos; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.tryVarType(isParam); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		/* */ if ($interfaceIsEqual(typ, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(typ, $ifaceNil)) { */ case 2:
			pos = p.pos;
			$r = p.errorExpected(pos, "type"); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.next(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			typ = new ast.BadExpr.ptr(pos, p.pos);
		/* } */ case 3:
		return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseVarType }; } $f.$ptr = $ptr; $f._r = _r; $f.isParam = isParam; $f.p = p; $f.pos = pos; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseVarType = function(isParam) { return this.$val.parseVarType(isParam); };
	parser.ptr.prototype.parseParameterList = function(scope, ellipsisOk) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, ellipsisOk, field, field$1, i, idents, idents$1, list, p, params, scope, typ, typ$1, typ$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; ellipsisOk = $f.ellipsisOk; field = $f.field; field$1 = $f.field$1; i = $f.i; idents = $f.idents; idents$1 = $f.idents$1; list = $f.list; p = $f.p; params = $f.params; scope = $f.scope; typ = $f.typ; typ$1 = $f.typ$1; typ$2 = $f.typ$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		params = sliceType$10.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ParameterList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		list = sliceType$9.nil;
		/* while (true) { */ case 4:
			_r$1 = p.parseVarType(ellipsisOk); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			if (!((p.tok === 52))) {
				/* break; */ $s = 5; continue;
			}
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (p.tok === 54) {
				/* break; */ $s = 5; continue;
			}
		/* } */ $s = 4; continue; case 5:
		_r$2 = p.tryVarType(ellipsisOk); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		/* */ if (!($interfaceIsEqual(typ, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(typ, $ifaceNil))) { */ case 9:
			_r$3 = p.makeIdentList(list); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			idents = _r$3;
			field = new ast.Field.ptr(ptrType$3.nil, idents, typ, ptrType$12.nil, ptrType$3.nil);
			params = $append(params, field);
			$r = p.declare(field, $ifaceNil, scope, 4, idents); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.resolve(typ);
			_r$4 = p.atComma("parameter list", 54); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!_r$4) { */ case 13:
				return params;
			/* } */ case 14:
			$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 17:
				/* if (!(!((p.tok === 54)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)))) { $s = 18; continue; }
				_r$5 = p.parseIdentList(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				idents$1 = _r$5;
				_r$6 = p.parseVarType(ellipsisOk); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				typ$1 = _r$6;
				field$1 = new ast.Field.ptr(ptrType$3.nil, idents$1, typ$1, ptrType$12.nil, ptrType$3.nil);
				params = $append(params, field$1);
				$r = p.declare(field$1, $ifaceNil, scope, 4, idents$1); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.resolve(typ$1);
				_r$7 = p.atComma("parameter list", 54); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (!_r$7) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!_r$7) { */ case 22:
					/* break; */ $s = 18; continue;
				/* } */ case 23:
				$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 17; continue; case 18:
			return params;
		/* } */ case 10:
		params = $makeSlice(sliceType$10, list.$length);
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			typ$2 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			p.resolve(typ$2);
			((i < 0 || i >= params.$length) ? $throwRuntimeError("index out of range") : params.$array[params.$offset + i] = new ast.Field.ptr(ptrType$3.nil, sliceType$2.nil, typ$2, ptrType$12.nil, ptrType$3.nil));
			_i++;
		}
		return params;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  params; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseParameterList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.ellipsisOk = ellipsisOk; $f.field = field; $f.field$1 = field$1; $f.i = i; $f.idents = idents; $f.idents$1 = idents$1; $f.list = list; $f.p = p; $f.params = params; $f.scope = scope; $f.typ = typ; $f.typ$1 = typ$1; $f.typ$2 = typ$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseParameterList = function(scope, ellipsisOk) { return this.$val.parseParameterList(scope, ellipsisOk); };
	parser.ptr.prototype.parseParameters = function(scope, ellipsisOk) {
		var $ptr, _r, _r$1, _r$2, _r$3, ellipsisOk, lparen, p, params, rparen, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; ellipsisOk = $f.ellipsisOk; lparen = $f.lparen; p = $f.p; params = $f.params; rparen = $f.rparen; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Parameters"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		params = sliceType$10.nil;
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		/* */ if (!((p.tok === 54))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 54))) { */ case 5:
			_r$2 = p.parseParameterList(scope, ellipsisOk); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			params = _r$2;
		/* } */ case 6:
		_r$3 = p.expect(54); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rparen = _r$3;
		return new ast.FieldList.ptr(lparen, params, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$14.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseParameters }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ellipsisOk = ellipsisOk; $f.lparen = lparen; $f.p = p; $f.params = params; $f.rparen = rparen; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseParameters = function(scope, ellipsisOk) { return this.$val.parseParameters(scope, ellipsisOk); };
	parser.ptr.prototype.parseResult = function(scope) {
		var $ptr, _r, _r$1, _r$2, list, p, scope, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; scope = $f.scope; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Result"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* */ if (p.tok === 49) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 49) { */ case 4:
			_r$1 = p.parseParameters(scope, false); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$1;
		/* } */ case 5:
		_r$2 = p.tryType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			list = $makeSlice(sliceType$10, 1);
			(0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0] = new ast.Field.ptr(ptrType$3.nil, sliceType$2.nil, typ, ptrType$12.nil, ptrType$3.nil));
			return new ast.FieldList.ptr(0, list, 0);
		}
		return ptrType$14.nil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$14.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseResult }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.scope = scope; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseResult = function(scope) { return this.$val.parseResult(scope); };
	parser.ptr.prototype.parseSignature = function(scope) {
		var $ptr, _r, _r$1, _r$2, p, params, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; params = $f.params; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		params = ptrType$14.nil;
		results = ptrType$14.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Signature"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseParameters(scope, true); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		params = _r$1;
		_r$2 = p.parseResult(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		results = _r$2;
		return [params, results];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [params, results]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSignature }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.params = params; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSignature = function(scope) { return this.$val.parseSignature(scope); };
	parser.ptr.prototype.parseFuncType = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, p, params, pos, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; p = $f.p; params = $f.params; pos = $f.pos; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FuncType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(71); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		scope = ast.NewScope(p.topScope);
		_r$2 = p.parseSignature(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		params = _tuple[0];
		results = _tuple[1];
		return [new ast.FuncType.ptr(pos, params, results), scope];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$17.nil, ptrType$4.nil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.p = p; $f.params = params; $f.pos = pos; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncType = function() { return this.$val.parseFuncType(); };
	parser.ptr.prototype.parseMethodSpec = function(scope) {
		var $ptr, _r, _r$1, _r$2, _tuple, _tuple$1, doc, ident, idents, isIdent, p, params, results, scope, scope$1, spec, typ, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; doc = $f.doc; ident = $f.ident; idents = $f.idents; isIdent = $f.isIdent; p = $f.p; params = $f.params; results = $f.results; scope = $f.scope; scope$1 = $f.scope$1; spec = $f.spec; typ = $f.typ; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "MethodSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		idents = sliceType$2.nil;
		typ = $ifaceNil;
		_r$1 = p.parseTypeName(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		_tuple = $assertType(x, ptrType$5, true);
		ident = _tuple[0];
		isIdent = _tuple[1];
		/* */ if (isIdent && (p.tok === 49)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (isIdent && (p.tok === 49)) { */ case 5:
			idents = new sliceType$2([ident]);
			scope$1 = ast.NewScope(ptrType$4.nil);
			_r$2 = p.parseSignature(scope$1); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			params = _tuple$1[0];
			results = _tuple$1[1];
			typ = new ast.FuncType.ptr(0, params, results);
			$s = 7; continue;
		/* } else { */ case 6:
			typ = x;
			p.resolve(typ);
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec = new ast.Field.ptr(doc, idents, typ, ptrType$12.nil, p.lineComment);
		$r = p.declare(spec, $ifaceNil, scope, 5, idents); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$13.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseMethodSpec }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.doc = doc; $f.ident = ident; $f.idents = idents; $f.isIdent = isIdent; $f.p = p; $f.params = params; $f.results = results; $f.scope = scope; $f.scope$1 = scope$1; $f.spec = spec; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseMethodSpec = function(scope) { return this.$val.parseMethodSpec(scope); };
	parser.ptr.prototype.parseInterfaceType = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, lbrace, list, p, pos, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "InterfaceType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(76); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		scope = ast.NewScope(ptrType$4.nil);
		list = sliceType$10.nil;
		/* while (true) { */ case 6:
			/* if (!(p.tok === 4)) { break; } */ if(!(p.tok === 4)) { $s = 7; continue; }
			_r$3 = p.parseMethodSpec(scope); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		return new ast.InterfaceType.ptr(pos, new ast.FieldList.ptr(lbrace, list, rbrace), false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$18.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseInterfaceType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseInterfaceType = function() { return this.$val.parseInterfaceType(); };
	parser.ptr.prototype.parseMapType = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, key, p, pos, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; key = $f.key; p = $f.p; pos = $f.pos; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "MapType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(77); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(50); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_r$3 = p.parseType(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		key = _r$3;
		_r$4 = p.expect(55); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = p.parseType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		value = _r$5;
		return new ast.MapType.ptr(pos, key, value);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$19.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseMapType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.key = key; $f.p = p; $f.pos = pos; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseMapType = function() { return this.$val.parseMapType(); };
	parser.ptr.prototype.parseChanType = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, arrow, dir, p, pos, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; arrow = $f.arrow; dir = $f.dir; p = $f.p; pos = $f.pos; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ChanType"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		dir = 3;
		arrow = 0;
		/* */ if (p.tok === 63) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 63) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (p.tok === 36) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (p.tok === 36) { */ case 8:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				dir = 1;
			/* } */ case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$1 = p.expect(36); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			arrow = _r$1;
			_r$2 = p.expect(63); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			dir = 2;
		/* } */ case 6:
		_r$3 = p.parseType(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		return new ast.ChanType.ptr(pos, arrow, dir, value);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$20.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseChanType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.arrow = arrow; $f.dir = dir; $f.p = p; $f.pos = pos; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseChanType = function() { return this.$val.parseChanType(); };
	parser.ptr.prototype.tryIdentOrType = function() {
		var $ptr, _5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, lparen, p, rparen, typ, typ$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; typ = $f.typ; typ$1 = $f.typ$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_5 = p.tok;
			/* */ if (_5 === 4) { $s = 2; continue; }
			/* */ if (_5 === 50) { $s = 3; continue; }
			/* */ if (_5 === 82) { $s = 4; continue; }
			/* */ if (_5 === 14) { $s = 5; continue; }
			/* */ if (_5 === 71) { $s = 6; continue; }
			/* */ if (_5 === 76) { $s = 7; continue; }
			/* */ if (_5 === 77) { $s = 8; continue; }
			/* */ if ((_5 === 63) || (_5 === 36)) { $s = 9; continue; }
			/* */ if (_5 === 49) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_5 === 4) { */ case 2:
				_r = p.parseTypeName(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 13; case 13:
				return _r;
			/* } else if (_5 === 50) { */ case 3:
				_r$1 = p.parseArrayType(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 15; case 15:
				return _r$1;
			/* } else if (_5 === 82) { */ case 4:
				_r$2 = p.parseStructType(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 17; case 17:
				return _r$2;
			/* } else if (_5 === 14) { */ case 5:
				_r$3 = p.parsePointerType(); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ $s = 19; case 19:
				return _r$3;
			/* } else if (_5 === 71) { */ case 6:
				_r$4 = p.parseFuncType(); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple = _r$4;
				typ = _tuple[0];
				return typ;
			/* } else if (_5 === 76) { */ case 7:
				_r$5 = p.parseInterfaceType(); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 22; case 22:
				return _r$5;
			/* } else if (_5 === 77) { */ case 8:
				_r$6 = p.parseMapType(); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 24; case 24:
				return _r$6;
			/* } else if ((_5 === 63) || (_5 === 36)) { */ case 9:
				_r$7 = p.parseChanType(); /* */ $s = 25; case 25: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 26; case 26:
				return _r$7;
			/* } else if (_5 === 49) { */ case 10:
				lparen = p.pos;
				$r = p.next(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$8 = p.parseType(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				typ$1 = _r$8;
				_r$9 = p.expect(54); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				rparen = _r$9;
				return new ast.ParenExpr.ptr(lparen, typ$1, rparen);
			/* } */ case 11:
		case 1:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryIdentOrType }; } $f.$ptr = $ptr; $f._5 = _5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.typ = typ; $f.typ$1 = typ$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryIdentOrType = function() { return this.$val.tryIdentOrType(); };
	parser.ptr.prototype.tryType = function() {
		var $ptr, _r, p, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.tryIdentOrType(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			p.resolve(typ);
		}
		return typ;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.tryType }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.tryType = function() { return this.$val.tryType(); };
	parser.ptr.prototype.parseStmtList = function() {
		var $ptr, _r, _r$1, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$11.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "StatementList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(!((p.tok === 62)) && !((p.tok === 66)) && !((p.tok === 56)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 62)) && !((p.tok === 66)) && !((p.tok === 56)) && !((p.tok === 1)))) { $s = 5; continue; }
			_r$1 = p.parseStmt(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
		/* } */ $s = 4; continue; case 5:
		return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStmtList }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStmtList = function() { return this.$val.parseStmtList(); };
	parser.ptr.prototype.parseBody = function(scope) {
		var $ptr, _r, _r$1, _r$2, _r$3, lbrace, list, p, rbrace, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lbrace = $f.lbrace; list = $f.list; p = $f.p; rbrace = $f.rbrace; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Body"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		p.topScope = scope;
		p.openLabelScope();
		_r$2 = p.parseStmtList(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = _r$2;
		$r = p.closeLabelScope(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		p.closeScope();
		_r$3 = p.expect(56); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		return new ast.BlockStmt.ptr(lbrace, list, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$21.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBody }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.rbrace = rbrace; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBody = function(scope) { return this.$val.parseBody(scope); };
	parser.ptr.prototype.parseBlockStmt = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, lbrace, list, p, rbrace, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lbrace = $f.lbrace; list = $f.list; p = $f.p; rbrace = $f.rbrace; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BlockStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		p.openScope();
		_r$2 = p.parseStmtList(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		list = _r$2;
		p.closeScope();
		_r$3 = p.expect(56); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		return new ast.BlockStmt.ptr(lbrace, list, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$21.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBlockStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.rbrace = rbrace; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBlockStmt = function() { return this.$val.parseBlockStmt(); };
	parser.ptr.prototype.parseFuncTypeOrLit = function() {
		var $ptr, _r, _r$1, _r$2, _tuple, body, p, scope, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; body = $f.body; p = $f.p; scope = $f.scope; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FuncTypeOrLit"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseFuncType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		typ = _tuple[0];
		scope = _tuple[1];
		if (!((p.tok === 51))) {
			return typ;
		}
		p.exprLev = p.exprLev + (1) >> 0;
		_r$2 = p.parseBody(scope); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		body = _r$2;
		p.exprLev = p.exprLev - (1) >> 0;
		return new ast.FuncLit.ptr(typ, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncTypeOrLit }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.body = body; $f.p = p; $f.scope = scope; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncTypeOrLit = function() { return this.$val.parseFuncTypeOrLit(); };
	parser.ptr.prototype.parseOperand = function(lhs) {
		var $ptr, _6, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, isIdent, lhs, lparen, p, pos, rparen, typ, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; isIdent = $f.isIdent; lhs = $f.lhs; lparen = $f.lparen; p = $f.p; pos = $f.pos; rparen = $f.rparen; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Operand"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_6 = p.tok;
			/* */ if (_6 === 4) { $s = 5; continue; }
			/* */ if ((_6 === 5) || (_6 === 6) || (_6 === 7) || (_6 === 8) || (_6 === 9)) { $s = 6; continue; }
			/* */ if (_6 === 49) { $s = 7; continue; }
			/* */ if (_6 === 71) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_6 === 4) { */ case 5:
				_r$1 = p.parseIdent(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				if (!lhs) {
					p.resolve(x);
				}
				return x;
			/* } else if ((_6 === 5) || (_6 === 6) || (_6 === 7) || (_6 === 8) || (_6 === 9)) { */ case 6:
				x$1 = new ast.BasicLit.ptr(p.pos, p.tok, p.lit);
				$r = p.next(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return x$1;
			/* } else if (_6 === 49) { */ case 7:
				lparen = p.pos;
				$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.exprLev = p.exprLev + (1) >> 0;
				_r$2 = p.parseRhsOrType(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x$2 = _r$2;
				p.exprLev = p.exprLev - (1) >> 0;
				_r$3 = p.expect(54); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				rparen = _r$3;
				return new ast.ParenExpr.ptr(lparen, x$2, rparen);
			/* } else if (_6 === 71) { */ case 8:
				_r$4 = p.parseFuncTypeOrLit(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 16; case 16:
				return _r$4;
			/* } */ case 9:
		case 4:
		_r$5 = p.tryIdentOrType(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		typ = _r$5;
		if (!($interfaceIsEqual(typ, $ifaceNil))) {
			_tuple = $assertType(typ, ptrType$5, true);
			isIdent = _tuple[1];
			assert(!isIdent, "type cannot be identifier");
			return typ;
		}
		pos = p.pos;
		$r = p.errorExpected(pos, "operand"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syncStmt(p); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.BadExpr.ptr(pos, p.pos);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseOperand }; } $f.$ptr = $ptr; $f._6 = _6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.isIdent = isIdent; $f.lhs = lhs; $f.lparen = lparen; $f.p = p; $f.pos = pos; $f.rparen = rparen; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseOperand = function(lhs) { return this.$val.parseOperand(lhs); };
	parser.ptr.prototype.parseSelector = function(x) {
		var $ptr, _r, _r$1, p, sel, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; p = $f.p; sel = $f.sel; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Selector"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		sel = _r$1;
		return new ast.SelectorExpr.ptr(x, sel);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSelector }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.sel = sel; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSelector = function(x) { return this.$val.parseSelector(x); };
	parser.ptr.prototype.parseTypeAssertion = function(x) {
		var $ptr, _r, _r$1, _r$2, _r$3, lparen, p, rparen, typ, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; typ = $f.typ; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeAssertion"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		typ = $ifaceNil;
		/* */ if (p.tok === 84) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 84) { */ case 5:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = p.parseType(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			typ = _r$2;
		/* } */ case 7:
		_r$3 = p.expect(54); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rparen = _r$3;
		return new ast.TypeAssertExpr.ptr(x, lparen, typ, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeAssertion }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.typ = typ; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeAssertion = function(x) { return this.$val.parseTypeAssertion(x); };
	parser.ptr.prototype.parseIndexOrSlice = function(x) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, colons, index, lbrack, ncolons, p, rbrack, slice3, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; colons = $f.colons; index = $f.index; lbrack = $f.lbrack; ncolons = $f.ncolons; p = $f.p; rbrack = $f.rbrack; slice3 = $f.slice3; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IndexOrSlice"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(50); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrack = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		index = arrayType$2.zero();
		colons = arrayType$3.zero();
		/* */ if (!((p.tok === 58))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 58))) { */ case 5:
			_r$2 = p.parseRhs(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			index[0] = _r$2;
		/* } */ case 6:
		ncolons = 0;
		/* while (true) { */ case 8:
			/* if (!((p.tok === 58) && ncolons < 2)) { break; } */ if(!((p.tok === 58) && ncolons < 2)) { $s = 9; continue; }
			((ncolons < 0 || ncolons >= colons.length) ? $throwRuntimeError("index out of range") : colons[ncolons] = p.pos);
			ncolons = ncolons + (1) >> 0;
			$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!((p.tok === 58)) && !((p.tok === 55)) && !((p.tok === 1))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!((p.tok === 58)) && !((p.tok === 55)) && !((p.tok === 1))) { */ case 11:
				_r$3 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				((ncolons < 0 || ncolons >= index.length) ? $throwRuntimeError("index out of range") : index[ncolons] = _r$3);
			/* } */ case 12:
		/* } */ $s = 8; continue; case 9:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$4 = p.expect(55); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrack = _r$4;
		/* */ if (ncolons > 0) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (ncolons > 0) { */ case 15:
			slice3 = false;
			/* */ if (ncolons === 2) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (ncolons === 2) { */ case 17:
				slice3 = true;
				/* */ if ($interfaceIsEqual(index[1], $ifaceNil)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if ($interfaceIsEqual(index[1], $ifaceNil)) { */ case 19:
					$r = p.error(colons[0], "2nd index required in 3-index slice"); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					index[1] = new ast.BadExpr.ptr(colons[0] + 1 >> 0, colons[1]);
				/* } */ case 20:
				/* */ if ($interfaceIsEqual(index[2], $ifaceNil)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if ($interfaceIsEqual(index[2], $ifaceNil)) { */ case 22:
					$r = p.error(colons[1], "3rd index required in 3-index slice"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					index[2] = new ast.BadExpr.ptr(colons[1] + 1 >> 0, rbrack);
				/* } */ case 23:
			/* } */ case 18:
			return new ast.SliceExpr.ptr(x, lbrack, index[0], index[1], index[2], slice3, rbrack);
		/* } */ case 16:
		return new ast.IndexExpr.ptr(x, lbrack, index[0], rbrack);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIndexOrSlice }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.colons = colons; $f.index = index; $f.lbrack = lbrack; $f.ncolons = ncolons; $f.p = p; $f.rbrack = rbrack; $f.slice3 = slice3; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIndexOrSlice = function(x) { return this.$val.parseIndexOrSlice(x); };
	parser.ptr.prototype.parseCallOrConversion = function(fun) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, ellipsis, fun, list, lparen, p, rparen, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; ellipsis = $f.ellipsis; fun = $f.fun; list = $f.list; lparen = $f.lparen; p = $f.p; rparen = $f.rparen; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CallOrConversion"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(49); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lparen = _r$1;
		p.exprLev = p.exprLev + (1) >> 0;
		list = sliceType$9.nil;
		ellipsis = 0;
		/* while (true) { */ case 5:
			/* if (!(!((p.tok === 54)) && !((p.tok === 1)) && !new token.Pos(ellipsis).IsValid())) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)) && !new token.Pos(ellipsis).IsValid())) { $s = 6; continue; }
			_r$2 = p.parseRhsOrType(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
			/* */ if (p.tok === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (p.tok === 48) { */ case 8:
				ellipsis = p.pos;
				$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			_r$3 = p.atComma("argument list", 54); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!_r$3) { */ case 11:
				/* break; */ $s = 6; continue;
			/* } */ case 12:
			$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 5; continue; case 6:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$4 = p.expectClosing(54, "argument list"); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rparen = _r$4;
		return new ast.CallExpr.ptr(fun, lparen, list, ellipsis, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$22.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCallOrConversion }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.ellipsis = ellipsis; $f.fun = fun; $f.list = list; $f.lparen = lparen; $f.p = p; $f.rparen = rparen; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCallOrConversion = function(fun) { return this.$val.parseCallOrConversion(fun); };
	parser.ptr.prototype.parseValue = function(keyOk) {
		var $ptr, _r, _r$1, _r$2, _r$3, keyOk, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; keyOk = $f.keyOk; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Element"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* */ if (p.tok === 51) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 51) { */ case 4:
			_r$1 = p.parseLiteralValue($ifaceNil); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return _r$1;
		/* } */ case 5:
		_r$2 = p.parseExpr(keyOk); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.checkExpr(_r$2); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		x = _r$3;
		if (keyOk) {
			if (p.tok === 58) {
				p.tryResolve(x, false);
			} else {
				p.resolve(x);
			}
		}
		return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.keyOk = keyOk; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseValue = function(keyOk) { return this.$val.parseValue(keyOk); };
	parser.ptr.prototype.parseElement = function() {
		var $ptr, _r, _r$1, _r$2, colon, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; colon = $f.colon; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Element"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseValue(true); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		/* */ if (p.tok === 58) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 58) { */ case 5:
			colon = p.pos;
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseValue(false); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = new ast.KeyValueExpr.ptr(x, colon, _r$2);
		/* } */ case 6:
		return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseElement }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.colon = colon; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseElement = function() { return this.$val.parseElement(); };
	parser.ptr.prototype.parseElementList = function() {
		var $ptr, _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ElementList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		/* while (true) { */ case 4:
			/* if (!(!((p.tok === 56)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 56)) && !((p.tok === 1)))) { $s = 5; continue; }
			_r$1 = p.parseElement(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			list = $append(list, _r$1);
			_r$2 = p.atComma("composite literal", 56); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$2) { */ case 7:
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			$r = p.next(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 4; continue; case 5:
		return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseElementList }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseElementList = function() { return this.$val.parseElementList(); };
	parser.ptr.prototype.parseLiteralValue = function(typ) {
		var $ptr, _r, _r$1, _r$2, _r$3, elts, lbrace, p, rbrace, typ, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; elts = $f.elts; lbrace = $f.lbrace; p = $f.p; rbrace = $f.rbrace; typ = $f.typ; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "LiteralValue"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(51); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		lbrace = _r$1;
		elts = sliceType$9.nil;
		p.exprLev = p.exprLev + (1) >> 0;
		/* */ if (!((p.tok === 56))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 56))) { */ case 5:
			_r$2 = p.parseElementList(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			elts = _r$2;
		/* } */ case 6:
		p.exprLev = p.exprLev - (1) >> 0;
		_r$3 = p.expectClosing(56, "composite literal"); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rbrace = _r$3;
		return new ast.CompositeLit.ptr(typ, lbrace, elts, rbrace);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseLiteralValue }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.elts = elts; $f.lbrace = lbrace; $f.p = p; $f.rbrace = rbrace; $f.typ = typ; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseLiteralValue = function(typ) { return this.$val.parseLiteralValue(typ); };
	parser.ptr.prototype.checkExpr = function(x) {
		var $ptr, _r, _r$1, _r$2, _r$3, _ref, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = unparen(x);
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$25, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$26, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if ($assertType(_ref, ptrType$11, true)[1]) { */ case 1:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 2:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 3:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 4:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 5:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$25, true)[1]) { */ case 6:
			$panic(new $String("unreachable"));
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$26, true)[1]) { */ case 7:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 8:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$28, true)[1]) { */ case 9:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$29, true)[1]) { */ case 10:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 11:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 12:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 13:
			$s = 16; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 14:
			$s = 16; continue;
		/* } else { */ case 15:
			_r = x.Pos(); /* */ $s = 17; case 17: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = p.errorExpected(_r, "expression"); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = x.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = x.End(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.safePos(_r$2); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			x = new ast.BadExpr.ptr(_r$1, _r$3);
		/* } */ case 16:
		return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.checkExpr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.checkExpr = function(x) { return this.$val.checkExpr(x); };
	isTypeName = function(x) {
		var $ptr, _ref, _tuple, isIdent, t, t$1, t$2, t$3, x;
		_ref = x;
		if ($assertType(_ref, ptrType$11, true)[1]) {
			t = _ref.$val;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			t$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$26, true)[1]) {
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.X, ptrType$5, true);
			isIdent = _tuple[1];
			return isIdent;
		} else {
			t$3 = _ref;
			return false;
		}
		return true;
	};
	isLiteralType = function(x) {
		var $ptr, _ref, _tuple, isIdent, t, t$1, t$2, t$3, t$4, t$5, t$6, x;
		_ref = x;
		if ($assertType(_ref, ptrType$11, true)[1]) {
			t = _ref.$val;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			t$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$26, true)[1]) {
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.X, ptrType$5, true);
			isIdent = _tuple[1];
			return isIdent;
		} else if ($assertType(_ref, ptrType$32, true)[1]) {
			t$3 = _ref.$val;
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			t$4 = _ref.$val;
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			t$5 = _ref.$val;
		} else {
			t$6 = _ref;
			return false;
		}
		return true;
	};
	deref = function(x) {
		var $ptr, _tuple, isPtr, p, x;
		_tuple = $assertType(x, ptrType$16, true);
		p = _tuple[0];
		isPtr = _tuple[1];
		if (isPtr) {
			x = p.X;
		}
		return x;
	};
	unparen = function(x) {
		var $ptr, _tuple, isParen, p, x;
		_tuple = $assertType(x, ptrType$25, true);
		p = _tuple[0];
		isParen = _tuple[1];
		if (isParen) {
			x = unparen(p.X);
		}
		return x;
	};
	parser.ptr.prototype.checkExprOrType = function(x) {
		var $ptr, _r, _r$1, _r$2, _ref, _tuple, isEllipsis, len, p, t, t$1, t$2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; isEllipsis = $f.isEllipsis; len = $f.len; p = $f.p; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = unparen(x);
		/* */ if ($assertType(_ref, ptrType$25, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$25, true)[1]) { */ case 1:
			t = _ref.$val;
			$panic(new $String("unreachable"));
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 2:
			t$1 = _ref.$val;
			$s = 4; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 3:
			t$2 = _ref.$val;
			_tuple = $assertType(t$2.Len, ptrType$33, true);
			len = _tuple[0];
			isEllipsis = _tuple[1];
			/* */ if (isEllipsis) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (isEllipsis) { */ case 5:
				$r = p.error(len.Pos(), "expected array length, found '...'"); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r = x.Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = x.End(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = p.safePos(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = new ast.BadExpr.ptr(_r, _r$2);
			/* } */ case 6:
		/* } */ case 4:
		return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.checkExprOrType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.isEllipsis = isEllipsis; $f.len = len; $f.p = p; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.checkExprOrType = function(x) { return this.$val.checkExprOrType(x); };
	parser.ptr.prototype.parsePrimaryExpr = function(lhs) {
		var $ptr, _7, _8, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, lhs, p, pos, sel, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; _8 = $f._8; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; lhs = $f.lhs; p = $f.p; pos = $f.pos; sel = $f.sel; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "PrimaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseOperand(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		/* while (true) { */ case 5:
				_7 = p.tok;
				/* */ if (_7 === 53) { $s = 8; continue; }
				/* */ if (_7 === 50) { $s = 9; continue; }
				/* */ if (_7 === 49) { $s = 10; continue; }
				/* */ if (_7 === 51) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_7 === 53) { */ case 8:
					$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (lhs) {
						p.resolve(x);
					}
						_8 = p.tok;
						/* */ if (_8 === 4) { $s = 16; continue; }
						/* */ if (_8 === 49) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (_8 === 4) { */ case 16:
							_r$2 = p.checkExprOrType(x); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$3 = p.parseSelector(_r$2); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							x = _r$3;
							$s = 19; continue;
						/* } else if (_8 === 49) { */ case 17:
							_r$4 = p.checkExpr(x); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_r$5 = p.parseTypeAssertion(_r$4); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							x = _r$5;
							$s = 19; continue;
						/* } else { */ case 18:
							pos = p.pos;
							$r = p.errorExpected(pos, "selector or type assertion"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							sel = new ast.Ident.ptr(pos, "_", ptrType$7.nil);
							x = new ast.SelectorExpr.ptr(x, sel);
						/* } */ case 19:
					case 15:
					$s = 13; continue;
				/* } else if (_7 === 50) { */ case 9:
					if (lhs) {
						p.resolve(x);
					}
					_r$6 = p.checkExpr(x); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = p.parseIndexOrSlice(_r$6); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					x = _r$7;
					$s = 13; continue;
				/* } else if (_7 === 49) { */ case 10:
					if (lhs) {
						p.resolve(x);
					}
					_r$8 = p.checkExprOrType(x); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = p.parseCallOrConversion(_r$8); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					x = _r$9;
					$s = 13; continue;
				/* } else if (_7 === 51) { */ case 11:
					/* */ if (isLiteralType(x) && (p.exprLev >= 0 || !isTypeName(x))) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (isLiteralType(x) && (p.exprLev >= 0 || !isTypeName(x))) { */ case 30:
						if (lhs) {
							p.resolve(x);
						}
						_r$10 = p.parseLiteralValue(x); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						x = _r$10;
						$s = 32; continue;
					/* } else { */ case 31:
						/* break L; */ $s = 6; continue s;
					/* } */ case 32:
					$s = 13; continue;
				/* } else { */ case 12:
					/* break L; */ $s = 6; continue s;
				/* } */ case 13:
			case 7:
			lhs = false;
		/* } */ $s = 5; continue; case 6:
		return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePrimaryExpr }; } $f.$ptr = $ptr; $f._7 = _7; $f._8 = _8; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.lhs = lhs; $f.p = p; $f.pos = pos; $f.sel = sel; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parsePrimaryExpr = function(lhs) { return this.$val.parsePrimaryExpr(lhs); };
	parser.ptr.prototype.parseUnaryExpr = function(lhs) {
		var $ptr, _9, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, arrow, dir, lhs, ok, op, p, pos, pos$1, typ, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _9 = $f._9; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arrow = $f.arrow; dir = $f.dir; lhs = $f.lhs; ok = $f.ok; op = $f.op; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; typ = $f.typ; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "UnaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_9 = p.tok;
			/* */ if ((_9 === 12) || (_9 === 13) || (_9 === 43) || (_9 === 19) || (_9 === 17)) { $s = 5; continue; }
			/* */ if (_9 === 36) { $s = 6; continue; }
			/* */ if (_9 === 14) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_9 === 12) || (_9 === 13) || (_9 === 43) || (_9 === 19) || (_9 === 17)) { */ case 5:
				_tmp = p.pos;
				_tmp$1 = p.tok;
				pos = _tmp;
				op = _tmp$1;
				$r = p.next(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = p.parseUnaryExpr(false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				x = _r$1;
				_r$2 = p.checkExpr(x); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ $s = 12; case 12:
				return new ast.UnaryExpr.ptr(pos, op, _r$2);
			/* } else if (_9 === 36) { */ case 6:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p.parseUnaryExpr(false); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				x$1 = _r$3;
				_tuple = $assertType(x$1, ptrType$20, true);
				typ = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (ok) { */ case 15:
					dir = 1;
					/* while (true) { */ case 17:
						/* if (!(ok && (dir === 1))) { break; } */ if(!(ok && (dir === 1))) { $s = 18; continue; }
						/* */ if (typ.Dir === 2) { $s = 19; continue; }
						/* */ $s = 20; continue;
						/* if (typ.Dir === 2) { */ case 19:
							$r = p.errorExpected(typ.Arrow, "'chan'"); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 20:
						_tmp$2 = typ.Arrow;
						_tmp$3 = arrow;
						_tmp$4 = arrow;
						arrow = _tmp$2;
						typ.Begin = _tmp$3;
						typ.Arrow = _tmp$4;
						_tmp$5 = typ.Dir;
						_tmp$6 = 2;
						dir = _tmp$5;
						typ.Dir = _tmp$6;
						_tuple$1 = $assertType(typ.Value, ptrType$20, true);
						typ = _tuple$1[0];
						ok = _tuple$1[1];
					/* } */ $s = 17; continue; case 18:
					/* */ if (dir === 1) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if (dir === 1) { */ case 22:
						$r = p.errorExpected(arrow, "channel type"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 23:
					return x$1;
				/* } */ case 16:
				_r$4 = p.checkExpr(x$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 26; case 26:
				return new ast.UnaryExpr.ptr(arrow, 36, _r$4);
			/* } else if (_9 === 14) { */ case 7:
				pos$1 = p.pos;
				$r = p.next(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = p.parseUnaryExpr(false); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				x$2 = _r$5;
				_r$6 = p.checkExprOrType(x$2); /* */ $s = 29; case 29: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 30; case 30:
				return new ast.StarExpr.ptr(pos$1, _r$6);
			/* } */ case 8:
		case 4:
		_r$7 = p.parsePrimaryExpr(lhs); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 32; case 32:
		return _r$7;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseUnaryExpr }; } $f.$ptr = $ptr; $f._9 = _9; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arrow = arrow; $f.dir = dir; $f.lhs = lhs; $f.ok = ok; $f.op = op; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.typ = typ; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseUnaryExpr = function(lhs) { return this.$val.parseUnaryExpr(lhs); };
	parser.ptr.prototype.tokPrec = function() {
		var $ptr, p, tok;
		p = this;
		tok = p.tok;
		if (p.inRhs && (tok === 42)) {
			tok = 39;
		}
		return [tok, new token.Token(tok).Precedence()];
	};
	parser.prototype.tokPrec = function() { return this.$val.tokPrec(); };
	parser.ptr.prototype.parseBinaryExpr = function(lhs, prec1) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, lhs, op, oprec, p, pos, prec, prec1, x, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; lhs = $f.lhs; op = $f.op; oprec = $f.oprec; p = $f.p; pos = $f.pos; prec = $f.prec; prec1 = $f.prec1; x = $f.x; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BinaryExpr"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseUnaryExpr(lhs); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		_tuple = p.tokPrec();
		prec = _tuple[1];
		/* while (true) { */ case 5:
			/* if (!(prec >= prec1)) { break; } */ if(!(prec >= prec1)) { $s = 6; continue; }
			/* while (true) { */ case 7:
				_tuple$1 = p.tokPrec();
				op = _tuple$1[0];
				oprec = _tuple$1[1];
				if (!((oprec === prec))) {
					/* break; */ $s = 8; continue;
				}
				_r$2 = p.expect(op); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				pos = _r$2;
				if (lhs) {
					p.resolve(x);
					lhs = false;
				}
				_r$3 = p.parseBinaryExpr(false, prec + 1 >> 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				y = _r$3;
				_r$4 = p.checkExpr(x); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = p.checkExpr(y); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				x = new ast.BinaryExpr.ptr(_r$4, pos, op, _r$5);
			/* } */ $s = 7; continue; case 8:
			prec = prec - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		return x;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBinaryExpr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.lhs = lhs; $f.op = op; $f.oprec = oprec; $f.p = p; $f.pos = pos; $f.prec = prec; $f.prec1 = prec1; $f.x = x; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBinaryExpr = function(lhs, prec1) { return this.$val.parseBinaryExpr(lhs, prec1); };
	parser.ptr.prototype.parseExpr = function(lhs) {
		var $ptr, _r, _r$1, lhs, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; lhs = $f.lhs; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Expression"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseBinaryExpr(lhs, 1); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseExpr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.lhs = lhs; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseExpr = function(lhs) { return this.$val.parseExpr(lhs); };
	parser.ptr.prototype.parseRhs = function() {
		var $ptr, _r, _r$1, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExpr(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.checkExpr(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		p.inRhs = old;
		return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhs }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhs = function() { return this.$val.parseRhs(); };
	parser.ptr.prototype.parseRhsOrType = function() {
		var $ptr, _r, _r$1, old, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; old = $f.old; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		old = p.inRhs;
		p.inRhs = true;
		_r = p.parseExpr(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.checkExprOrType(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
		p.inRhs = old;
		return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRhsOrType }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.old = old; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRhsOrType = function() { return this.$val.parseRhsOrType(); };
	parser.ptr.prototype.parseSimpleStmt = function(mode) {
		var $ptr, _10, _11, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tuple, arrow, as, colon, isIdent, isRange, label, mode, p, pos, pos$1, s, stmt, tok, x, y, y$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _11 = $f._11; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arrow = $f.arrow; as = $f.as; colon = $f.colon; isIdent = $f.isIdent; isRange = $f.isRange; label = $f.label; mode = $f.mode; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; s = $f.s; stmt = $f.stmt; tok = $f.tok; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SimpleStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseLhsList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		x = _r$1;
			_10 = p.tok;
			/* */ if ((_10 === 47) || (_10 === 42) || (_10 === 23) || (_10 === 24) || (_10 === 25) || (_10 === 26) || (_10 === 27) || (_10 === 28) || (_10 === 29) || (_10 === 30) || (_10 === 31) || (_10 === 32) || (_10 === 33)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_10 === 47) || (_10 === 42) || (_10 === 23) || (_10 === 24) || (_10 === 25) || (_10 === 26) || (_10 === 27) || (_10 === 28) || (_10 === 29) || (_10 === 30) || (_10 === 31) || (_10 === 32) || (_10 === 33)) { */ case 6:
				_tmp = p.pos;
				_tmp$1 = p.tok;
				pos = _tmp;
				tok = _tmp$1;
				$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				y = sliceType$9.nil;
				isRange = false;
				/* */ if ((mode === 2) && (p.tok === 79) && ((tok === 47) || (tok === 42))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((mode === 2) && (p.tok === 79) && ((tok === 47) || (tok === 42))) { */ case 9:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$2 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					y = new sliceType$9([new ast.UnaryExpr.ptr(pos$1, 79, _r$2)]);
					isRange = true;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$3 = p.parseRhsList(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					y = _r$3;
				/* } */ case 11:
				as = new ast.AssignStmt.ptr(x, pos, tok, y);
				/* */ if (tok === 47) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (tok === 47) { */ case 15:
					$r = p.shortVarDecl(as, x); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				return [as, isRange];
			/* } */ case 7:
		case 5:
		/* */ if (x.$length > 1) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (x.$length > 1) { */ case 18:
			_r$4 = (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]).Pos(); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.errorExpected(_r$4, "1 expression"); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 19:
			_11 = p.tok;
			/* */ if (_11 === 58) { $s = 23; continue; }
			/* */ if (_11 === 36) { $s = 24; continue; }
			/* */ if ((_11 === 37) || (_11 === 38)) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_11 === 58) { */ case 23:
				colon = p.pos;
				$r = p.next(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple = $assertType((0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]), ptrType$5, true);
				label = _tuple[0];
				isIdent = _tuple[1];
				/* */ if ((mode === 1) && isIdent) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if ((mode === 1) && isIdent) { */ case 28:
					_r$5 = p.parseStmt(); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					stmt = new ast.LabeledStmt.ptr(label, colon, _r$5);
					$r = p.declare(stmt, $ifaceNil, p.labelScope, 6, new sliceType$2([label])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return [stmt, false];
				/* } */ case 29:
				$r = p.error(colon, "illegal label declaration"); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$6 = (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]).Pos(); /* */ $s = 33; case 33: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ $s = 34; case 34:
				return [new ast.BadStmt.ptr(_r$6, colon + 1 >> 0), false];
			/* } else if (_11 === 36) { */ case 24:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = p.parseRhs(); /* */ $s = 36; case 36: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				y$1 = _r$7;
				return [new ast.SendStmt.ptr((0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]), arrow, y$1), false];
			/* } else if ((_11 === 37) || (_11 === 38)) { */ case 25:
				s = new ast.IncDecStmt.ptr((0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]), p.pos, p.tok);
				$r = p.next(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return [s, false];
			/* } */ case 26:
		case 22:
		return [new ast.ExprStmt.ptr((0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), false];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSimpleStmt }; } $f.$ptr = $ptr; $f._10 = _10; $f._11 = _11; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arrow = arrow; $f.as = as; $f.colon = colon; $f.isIdent = isIdent; $f.isRange = isRange; $f.label = label; $f.mode = mode; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.s = s; $f.stmt = stmt; $f.tok = tok; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSimpleStmt = function(mode) { return this.$val.parseSimpleStmt(mode); };
	parser.ptr.prototype.parseCallExpr = function(callType) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, call, callType, isBad, isCall, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; call = $f.call; callType = $f.callType; isBad = $f.isBad; isCall = $f.isCall; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.parseRhsOrType(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		_tuple = $assertType(x, ptrType$22, true);
		call = _tuple[0];
		isCall = _tuple[1];
		if (isCall) {
			return call;
		}
		_tuple$1 = $assertType(x, ptrType$11, true);
		isBad = _tuple$1[1];
		/* */ if (!isBad) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!isBad) { */ case 2:
			_r$1 = x.End(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = p.safePos(_r$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = _r$2;
			_r$3 = fmt.Sprintf("function must be invoked in %s statement", new sliceType$7([new $String(callType)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			$r = p.error(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		return ptrType$22.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCallExpr }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.call = call; $f.callType = callType; $f.isBad = isBad; $f.isCall = isCall; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseCallExpr = function(callType) { return this.$val.parseCallExpr(callType); };
	parser.ptr.prototype.parseGoStmt = function() {
		var $ptr, _r, _r$1, _r$2, call, p, pos, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; call = $f.call; p = $f.p; pos = $f.pos; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "GoStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(72); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseCallExpr("go"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		call = _r$2;
		$r = p.expectSemi(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (call === ptrType$22.nil) {
			return new ast.BadStmt.ptr(pos, pos + 2 >> 0);
		}
		return new ast.GoStmt.ptr(pos, call);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseGoStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.call = call; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseGoStmt = function() { return this.$val.parseGoStmt(); };
	parser.ptr.prototype.parseDeferStmt = function() {
		var $ptr, _r, _r$1, _r$2, call, p, pos, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; call = $f.call; p = $f.p; pos = $f.pos; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "DeferStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(67); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseCallExpr("defer"); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		call = _r$2;
		$r = p.expectSemi(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (call === ptrType$22.nil) {
			return new ast.BadStmt.ptr(pos, pos + 5 >> 0);
		}
		return new ast.DeferStmt.ptr(pos, call);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseDeferStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.call = call; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseDeferStmt = function() { return this.$val.parseDeferStmt(); };
	parser.ptr.prototype.parseReturnStmt = function() {
		var $ptr, _r, _r$1, _r$2, p, pos, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; pos = $f.pos; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ReturnStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		_r$1 = p.expect(80); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		x = sliceType$9.nil;
		/* */ if (!((p.tok === 57)) && !((p.tok === 56))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 57)) && !((p.tok === 56))) { */ case 5:
			_r$2 = p.parseRhsList(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = _r$2;
		/* } */ case 6:
		$r = p.expectSemi(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.ReturnStmt.ptr(pos, x);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$34.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseReturnStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseReturnStmt = function() { return this.$val.parseReturnStmt(); };
	parser.ptr.prototype.parseBranchStmt = function(tok) {
		var $ptr, _r, _r$1, _r$2, label, n, p, pos, tok, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; label = $f.label; n = $f.n; p = $f.p; pos = $f.pos; tok = $f.tok; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "BranchStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(tok); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		label = ptrType$5.nil;
		/* */ if (!((tok === 69)) && (p.tok === 4)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((tok === 69)) && (p.tok === 4)) { */ case 5:
			_r$2 = p.parseIdent(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			label = _r$2;
			n = p.targetStack.$length - 1 >> 0;
			(x$1 = p.targetStack, ((n < 0 || n >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + n] = $append((x = p.targetStack, ((n < 0 || n >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + n])), label)));
		/* } */ case 6:
		$r = p.expectSemi(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return new ast.BranchStmt.ptr(pos, tok, label);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$35.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseBranchStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.label = label; $f.n = n; $f.p = p; $f.pos = pos; $f.tok = tok; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseBranchStmt = function(tok) { return this.$val.parseBranchStmt(tok); };
	parser.ptr.prototype.makeExpr = function(s, kind) {
		var $ptr, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, es, isExpr, kind, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; es = $f.es; isExpr = $f.isExpr; kind = $f.kind; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if ($interfaceIsEqual(s, $ifaceNil)) {
			return $ifaceNil;
		}
		_tuple = $assertType(s, ptrType$36, true);
		es = _tuple[0];
		isExpr = _tuple[1];
		/* */ if (isExpr) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isExpr) { */ case 1:
			_r = p.checkExpr(es.X); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = s.Pos(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = _r$1;
		_r$2 = fmt.Sprintf("expected %s, found simple statement (missing parentheses around composite literal?)", new sliceType$7([new $String(kind)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		$r = p.error(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = s.Pos(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = s.End(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = p.safePos(_r$4); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 11; case 11:
		return new ast.BadExpr.ptr(_r$3, _r$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.makeExpr }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.es = es; $f.isExpr = isExpr; $f.kind = kind; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.makeExpr = function(s, kind) { return this.$val.makeExpr(s, kind); };
	parser.ptr.prototype.parseIfStmt = function() {
		var $ptr, _12, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, body, else_, p, pos, prevLev, s, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _12 = $f._12; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; body = $f.body; else_ = $f.else_; p = $f.p; pos = $f.pos; prevLev = $f.prevLev; s = $f.s; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "IfStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(74); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		s = $ifaceNil;
		x = $ifaceNil;
		prevLev = p.exprLev;
		p.exprLev = -1;
		/* */ if (p.tok === 57) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 57) { */ case 5:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseRhs(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			x = _r$2;
			$s = 7; continue;
		/* } else { */ case 6:
			_r$3 = p.parseSimpleStmt(0); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			s = _tuple[0];
			/* */ if (p.tok === 57) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (p.tok === 57) { */ case 11:
				$r = p.next(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = p.parseRhs(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				x = _r$4;
				$s = 13; continue;
			/* } else { */ case 12:
				_r$5 = p.makeExpr(s, "boolean expression"); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				x = _r$5;
				s = $ifaceNil;
			/* } */ case 13:
		/* } */ case 7:
		p.exprLev = prevLev;
		_r$6 = p.parseBlockStmt(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		body = _r$6;
		else_ = $ifaceNil;
		/* */ if (p.tok === 68) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (p.tok === 68) { */ case 18:
			$r = p.next(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_12 = p.tok;
				/* */ if (_12 === 74) { $s = 23; continue; }
				/* */ if (_12 === 51) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_12 === 74) { */ case 23:
					_r$7 = p.parseIfStmt(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					else_ = _r$7;
					$s = 26; continue;
				/* } else if (_12 === 51) { */ case 24:
					_r$8 = p.parseBlockStmt(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					else_ = _r$8;
					$r = p.expectSemi(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 26; continue;
				/* } else { */ case 25:
					$r = p.errorExpected(p.pos, "if statement or block"); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					else_ = new ast.BadStmt.ptr(p.pos, p.pos);
				/* } */ case 26:
			case 22:
			$s = 20; continue;
		/* } else { */ case 19:
			$r = p.expectSemi(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 20:
		return new ast.IfStmt.ptr(pos, s, x, body, else_);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$37.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseIfStmt }; } $f.$ptr = $ptr; $f._12 = _12; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.body = body; $f.else_ = else_; $f.p = p; $f.pos = pos; $f.prevLev = prevLev; $f.s = s; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseIfStmt = function() { return this.$val.parseIfStmt(); };
	parser.ptr.prototype.parseTypeList = function() {
		var $ptr, _r, _r$1, _r$2, list, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; list = $f.list; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		list = sliceType$9.nil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeList"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseType(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = $append(list, _r$1);
		/* while (true) { */ case 5:
			/* if (!(p.tok === 52)) { break; } */ if(!(p.tok === 52)) { $s = 6; continue; }
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = p.parseType(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			list = $append(list, _r$2);
		/* } */ $s = 5; continue; case 6:
		return list;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  list; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeList }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.list = list; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeList = function() { return this.$val.parseTypeList(); };
	parser.ptr.prototype.parseCaseClause = function(typeSwitch) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, body, colon, list, p, pos, typeSwitch, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; body = $f.body; colon = $f.colon; list = $f.list; p = $f.p; pos = $f.pos; typeSwitch = $f.typeSwitch; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CaseClause"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		list = sliceType$9.nil;
		/* */ if (p.tok === 62) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 62) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (typeSwitch) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (typeSwitch) { */ case 8:
				_r$1 = p.parseTypeList(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				list = _r$1;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$2 = p.parseRhsList(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				list = _r$2;
			/* } */ case 10:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$3 = p.expect(66); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
		/* } */ case 6:
		_r$4 = p.expect(58); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		colon = _r$4;
		p.openScope();
		_r$5 = p.parseStmtList(); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		body = _r$5;
		p.closeScope();
		return new ast.CaseClause.ptr(pos, list, colon, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$38.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCaseClause }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.body = body; $f.colon = colon; $f.list = list; $f.p = p; $f.pos = pos; $f.typeSwitch = typeSwitch; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCaseClause = function(typeSwitch) { return this.$val.parseCaseClause(typeSwitch); };
	isTypeSwitchAssert = function(x) {
		var $ptr, _tuple, a, ok, x;
		_tuple = $assertType(x, ptrType$29, true);
		a = _tuple[0];
		ok = _tuple[1];
		return ok && $interfaceIsEqual(a.Type, $ifaceNil);
	};
	parser.ptr.prototype.isTypeSwitchGuard = function(s) {
		var $ptr, _13, _ref, p, s, t, t$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _13 = $f._13; _ref = $f._ref; p = $f.p; s = $f.s; t = $f.t; t$1 = $f.t$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = s;
		/* */ if ($assertType(_ref, ptrType$36, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($assertType(_ref, ptrType$36, true)[1]) { */ case 1:
			t = _ref.$val;
			return isTypeSwitchAssert(t.X);
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 2:
			t$1 = _ref.$val;
			/* */ if ((t$1.Lhs.$length === 1) && (t$1.Rhs.$length === 1) && isTypeSwitchAssert((x = t$1.Rhs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((t$1.Lhs.$length === 1) && (t$1.Rhs.$length === 1) && isTypeSwitchAssert((x = t$1.Rhs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])))) { */ case 4:
					_13 = t$1.Tok;
					/* */ if (_13 === 42) { $s = 7; continue; }
					/* */ if (_13 === 47) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (_13 === 42) { */ case 7:
						$r = p.error(t$1.TokPos, "expected ':=', found '='"); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						return true;
					/* } else if (_13 === 47) { */ case 8:
						return true;
					/* } */ case 9:
				case 6:
			/* } */ case 5:
		/* } */ case 3:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.isTypeSwitchGuard }; } $f.$ptr = $ptr; $f._13 = _13; $f._ref = _ref; $f.p = p; $f.s = s; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.isTypeSwitchGuard = function(s) { return this.$val.isTypeSwitchGuard(s); };
	parser.ptr.prototype.parseSwitchStmt = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tuple, _tuple$1, body, lbrace, list, p, pos, prevLev, rbrace, s1, s2, typeSwitch, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; body = $f.body; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; prevLev = $f.prevLev; rbrace = $f.rbrace; s1 = $f.s1; s2 = $f.s2; typeSwitch = $f.typeSwitch; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SwitchStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(83); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		s1 = _tmp;
		s2 = _tmp$1;
		/* */ if (!((p.tok === 51))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 51))) { */ case 5:
			prevLev = p.exprLev;
			p.exprLev = -1;
			/* */ if (!((p.tok === 57))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((p.tok === 57))) { */ case 7:
				_r$2 = p.parseSimpleStmt(0); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				s2 = _tuple[0];
			/* } */ case 8:
			/* */ if (p.tok === 57) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (p.tok === 57) { */ case 10:
				$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s1 = s2;
				s2 = $ifaceNil;
				/* */ if (!((p.tok === 51))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!((p.tok === 51))) { */ case 13:
					p.openScope();
					$deferred.push([$methodVal(p, "closeScope"), []]);
					_r$3 = p.parseSimpleStmt(0); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$1 = _r$3;
					s2 = _tuple$1[0];
				/* } */ case 14:
			/* } */ case 11:
			p.exprLev = prevLev;
		/* } */ case 6:
		_r$4 = p.isTypeSwitchGuard(s2); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		typeSwitch = _r$4;
		_r$5 = p.expect(51); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		lbrace = _r$5;
		list = sliceType$11.nil;
		/* while (true) { */ case 18:
			/* if (!((p.tok === 62) || (p.tok === 66))) { break; } */ if(!((p.tok === 62) || (p.tok === 66))) { $s = 19; continue; }
			_r$6 = p.parseCaseClause(typeSwitch); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			list = $append(list, _r$6);
		/* } */ $s = 18; continue; case 19:
		_r$7 = p.expect(56); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		rbrace = _r$7;
		$r = p.expectSemi(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		body = new ast.BlockStmt.ptr(lbrace, list, rbrace);
		if (typeSwitch) {
			return new ast.TypeSwitchStmt.ptr(pos, s1, s2, body);
		}
		_r$8 = p.makeExpr(s2, "switch expression"); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ $s = 24; case 24:
		return new ast.SwitchStmt.ptr(pos, s1, _r$8, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSwitchStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.body = body; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.prevLev = prevLev; $f.rbrace = rbrace; $f.s1 = s1; $f.s2 = s2; $f.typeSwitch = typeSwitch; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSwitchStmt = function() { return this.$val.parseSwitchStmt(); };
	parser.ptr.prototype.parseCommClause = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, arrow, as, body, colon, comm, lhs, p, pos, pos$1, rhs, rhs$1, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; arrow = $f.arrow; as = $f.as; body = $f.body; colon = $f.colon; comm = $f.comm; lhs = $f.lhs; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; rhs = $f.rhs; rhs$1 = $f.rhs$1; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "CommClause"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		p.openScope();
		pos = p.pos;
		comm = $ifaceNil;
		/* */ if (p.tok === 62) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.tok === 62) { */ case 4:
			$r = p.next(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = p.parseLhsList(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			lhs = _r$1;
			/* */ if (p.tok === 36) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (p.tok === 36) { */ case 9:
				/* */ if (lhs.$length > 1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (lhs.$length > 1) { */ case 12:
					_r$2 = (0 >= lhs.$length ? $throwRuntimeError("index out of range") : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r$2, "1 expression"); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
				arrow = p.pos;
				$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = p.parseRhs(); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				rhs = _r$3;
				comm = new ast.SendStmt.ptr((0 >= lhs.$length ? $throwRuntimeError("index out of range") : lhs.$array[lhs.$offset + 0]), arrow, rhs);
				$s = 11; continue;
			/* } else { */ case 10:
				tok = p.tok;
				/* */ if ((tok === 42) || (tok === 47)) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if ((tok === 42) || (tok === 47)) { */ case 18:
					/* */ if (lhs.$length > 2) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (lhs.$length > 2) { */ case 21:
						_r$4 = (0 >= lhs.$length ? $throwRuntimeError("index out of range") : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$r = p.errorExpected(_r$4, "1 or 2 expressions"); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						lhs = $subslice(lhs, 0, 2);
					/* } */ case 22:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$5 = p.parseRhs(); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					rhs$1 = _r$5;
					as = new ast.AssignStmt.ptr(lhs, pos$1, tok, new sliceType$9([rhs$1]));
					/* */ if (tok === 47) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (tok === 47) { */ case 27:
						$r = p.shortVarDecl(as, lhs); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 28:
					comm = as;
					$s = 20; continue;
				/* } else { */ case 19:
					/* */ if (lhs.$length > 1) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (lhs.$length > 1) { */ case 30:
						_r$6 = (0 >= lhs.$length ? $throwRuntimeError("index out of range") : lhs.$array[lhs.$offset + 0]).Pos(); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						$r = p.errorExpected(_r$6, "1 expression"); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 31:
					comm = new ast.ExprStmt.ptr((0 >= lhs.$length ? $throwRuntimeError("index out of range") : lhs.$array[lhs.$offset + 0]));
				/* } */ case 20:
			/* } */ case 11:
			$s = 6; continue;
		/* } else { */ case 5:
			_r$7 = p.expect(66); /* */ $s = 34; case 34: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$7;
		/* } */ case 6:
		_r$8 = p.expect(58); /* */ $s = 35; case 35: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		colon = _r$8;
		_r$9 = p.parseStmtList(); /* */ $s = 36; case 36: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		body = _r$9;
		p.closeScope();
		return new ast.CommClause.ptr(pos, comm, colon, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$40.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseCommClause }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.arrow = arrow; $f.as = as; $f.body = body; $f.colon = colon; $f.comm = comm; $f.lhs = lhs; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.rhs = rhs; $f.rhs$1 = rhs$1; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseCommClause = function() { return this.$val.parseCommClause(); };
	parser.ptr.prototype.parseSelectStmt = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, body, lbrace, list, p, pos, rbrace, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; body = $f.body; lbrace = $f.lbrace; list = $f.list; p = $f.p; pos = $f.pos; rbrace = $f.rbrace; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "SelectStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(81); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.expect(51); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		lbrace = _r$2;
		list = sliceType$11.nil;
		/* while (true) { */ case 6:
			/* if (!((p.tok === 62) || (p.tok === 66))) { break; } */ if(!((p.tok === 62) || (p.tok === 66))) { $s = 7; continue; }
			_r$3 = p.parseCommClause(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			list = $append(list, _r$3);
		/* } */ $s = 6; continue; case 7:
		_r$4 = p.expect(56); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		rbrace = _r$4;
		$r = p.expectSemi(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		body = new ast.BlockStmt.ptr(lbrace, list, rbrace);
		return new ast.SelectStmt.ptr(pos, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$41.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseSelectStmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.body = body; $f.lbrace = lbrace; $f.list = list; $f.p = p; $f.pos = pos; $f.rbrace = rbrace; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseSelectStmt = function() { return this.$val.parseSelectStmt(); };
	parser.ptr.prototype.parseForStmt = function() {
		var $ptr, _14, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tuple, _tuple$1, _tuple$2, as, body, isRange, key, p, pos, pos$1, prevLev, s1, s2, s3, value, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _14 = $f._14; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; as = $f.as; body = $f.body; isRange = $f.isRange; key = $f.key; p = $f.p; pos = $f.pos; pos$1 = $f.pos$1; prevLev = $f.prevLev; s1 = $f.s1; s2 = $f.s2; s3 = $f.s3; value = $f.value; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ForStmt"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.expect(70); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		p.openScope();
		$deferred.push([$methodVal(p, "closeScope"), []]);
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		_tmp$2 = $ifaceNil;
		s1 = _tmp;
		s2 = _tmp$1;
		s3 = _tmp$2;
		isRange = false;
		/* */ if (!((p.tok === 51))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((p.tok === 51))) { */ case 5:
			prevLev = p.exprLev;
			p.exprLev = -1;
			/* */ if (!((p.tok === 57))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!((p.tok === 57))) { */ case 7:
				/* */ if (p.tok === 79) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (p.tok === 79) { */ case 9:
					pos$1 = p.pos;
					$r = p.next(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$2 = p.parseRhs(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					y = new sliceType$9([new ast.UnaryExpr.ptr(pos$1, 79, _r$2)]);
					s2 = new ast.AssignStmt.ptr(sliceType$9.nil, 0, 0, y);
					isRange = true;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$3 = p.parseSimpleStmt(2); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					s2 = _tuple[0];
					isRange = _tuple[1];
				/* } */ case 11:
			/* } */ case 8:
			/* */ if (!isRange && (p.tok === 57)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!isRange && (p.tok === 57)) { */ case 15:
				$r = p.next(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s1 = s2;
				s2 = $ifaceNil;
				/* */ if (!((p.tok === 57))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (!((p.tok === 57))) { */ case 18:
					_r$4 = p.parseSimpleStmt(0); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$1 = _r$4;
					s2 = _tuple$1[0];
				/* } */ case 19:
				$r = p.expectSemi(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!((p.tok === 51))) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!((p.tok === 51))) { */ case 22:
					_r$5 = p.parseSimpleStmt(0); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					s3 = _tuple$2[0];
				/* } */ case 23:
			/* } */ case 16:
			p.exprLev = prevLev;
		/* } */ case 6:
		_r$6 = p.parseBlockStmt(); /* */ $s = 25; case 25: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		body = _r$6;
		$r = p.expectSemi(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (isRange) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (isRange) { */ case 27:
			as = $assertType(s2, ptrType$39);
			_tmp$3 = $ifaceNil;
			_tmp$4 = $ifaceNil;
			key = _tmp$3;
			value = _tmp$4;
				_14 = as.Lhs.$length;
				/* */ if (_14 === 0) { $s = 30; continue; }
				/* */ if (_14 === 1) { $s = 31; continue; }
				/* */ if (_14 === 2) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (_14 === 0) { */ case 30:
					$s = 34; continue;
				/* } else if (_14 === 1) { */ case 31:
					key = (x = as.Lhs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
					$s = 34; continue;
				/* } else if (_14 === 2) { */ case 32:
					_tmp$5 = (x$1 = as.Lhs, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
					_tmp$6 = (x$2 = as.Lhs, (1 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1]));
					key = _tmp$5;
					value = _tmp$6;
					$s = 34; continue;
				/* } else { */ case 33:
					_r$7 = (x$3 = as.Lhs, x$4 = as.Lhs.$length - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])).Pos(); /* */ $s = 35; case 35: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = p.errorExpected(_r$7, "at most 2 expressions"); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					return new ast.BadStmt.ptr(pos, p.safePos(body.End()));
				/* } */ case 34:
			case 29:
			x$6 = $assertType((x$5 = as.Rhs, (0 >= x$5.$length ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 0])), ptrType$30).X;
			return new ast.RangeStmt.ptr(pos, key, value, as.TokPos, as.Tok, x$6, body);
		/* } */ case 28:
		_r$8 = p.makeExpr(s2, "boolean or range expression"); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ $s = 38; case 38:
		return new ast.ForStmt.ptr(pos, s1, _r$8, s3, body);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseForStmt }; } $f.$ptr = $ptr; $f._14 = _14; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.as = as; $f.body = body; $f.isRange = isRange; $f.key = key; $f.p = p; $f.pos = pos; $f.pos$1 = pos$1; $f.prevLev = prevLev; $f.s1 = s1; $f.s2 = s2; $f.s3 = s3; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseForStmt = function() { return this.$val.parseForStmt(); };
	parser.ptr.prototype.parseStmt = function() {
		var $ptr, _15, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, isLabeledStmt, p, pos, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _15 = $f._15; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; isLabeledStmt = $f.isLabeledStmt; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		s = $ifaceNil;
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Statement"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
			_15 = p.tok;
			/* */ if ((_15 === 64) || (_15 === 84) || (_15 === 85)) { $s = 5; continue; }
			/* */ if ((_15 === 4) || (_15 === 5) || (_15 === 6) || (_15 === 7) || (_15 === 8) || (_15 === 9) || (_15 === 71) || (_15 === 49) || (_15 === 50) || (_15 === 82) || (_15 === 77) || (_15 === 63) || (_15 === 76) || (_15 === 12) || (_15 === 13) || (_15 === 14) || (_15 === 17) || (_15 === 19) || (_15 === 36) || (_15 === 43)) { $s = 6; continue; }
			/* */ if (_15 === 72) { $s = 7; continue; }
			/* */ if (_15 === 67) { $s = 8; continue; }
			/* */ if (_15 === 80) { $s = 9; continue; }
			/* */ if ((_15 === 61) || (_15 === 65) || (_15 === 73) || (_15 === 69)) { $s = 10; continue; }
			/* */ if (_15 === 51) { $s = 11; continue; }
			/* */ if (_15 === 74) { $s = 12; continue; }
			/* */ if (_15 === 83) { $s = 13; continue; }
			/* */ if (_15 === 81) { $s = 14; continue; }
			/* */ if (_15 === 70) { $s = 15; continue; }
			/* */ if (_15 === 57) { $s = 16; continue; }
			/* */ if (_15 === 56) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if ((_15 === 64) || (_15 === 84) || (_15 === 85)) { */ case 5:
				_r$1 = p.parseDecl(syncStmt); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				s = new ast.DeclStmt.ptr(_r$1);
				$s = 19; continue;
			/* } else if ((_15 === 4) || (_15 === 5) || (_15 === 6) || (_15 === 7) || (_15 === 8) || (_15 === 9) || (_15 === 71) || (_15 === 49) || (_15 === 50) || (_15 === 82) || (_15 === 77) || (_15 === 63) || (_15 === 76) || (_15 === 12) || (_15 === 13) || (_15 === 14) || (_15 === 17) || (_15 === 19) || (_15 === 36) || (_15 === 43)) { */ case 6:
				_r$2 = p.parseSimpleStmt(1); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				s = _tuple[0];
				_tuple$1 = $assertType(s, ptrType$42, true);
				isLabeledStmt = _tuple$1[1];
				/* */ if (!isLabeledStmt) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (!isLabeledStmt) { */ case 22:
					$r = p.expectSemi(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
				$s = 19; continue;
			/* } else if (_15 === 72) { */ case 7:
				_r$3 = p.parseGoStmt(); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				s = _r$3;
				$s = 19; continue;
			/* } else if (_15 === 67) { */ case 8:
				_r$4 = p.parseDeferStmt(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				s = _r$4;
				$s = 19; continue;
			/* } else if (_15 === 80) { */ case 9:
				_r$5 = p.parseReturnStmt(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				s = _r$5;
				$s = 19; continue;
			/* } else if ((_15 === 61) || (_15 === 65) || (_15 === 73) || (_15 === 69)) { */ case 10:
				_r$6 = p.parseBranchStmt(p.tok); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				s = _r$6;
				$s = 19; continue;
			/* } else if (_15 === 51) { */ case 11:
				_r$7 = p.parseBlockStmt(); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				s = _r$7;
				$r = p.expectSemi(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 19; continue;
			/* } else if (_15 === 74) { */ case 12:
				_r$8 = p.parseIfStmt(); /* */ $s = 31; case 31: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				s = _r$8;
				$s = 19; continue;
			/* } else if (_15 === 83) { */ case 13:
				_r$9 = p.parseSwitchStmt(); /* */ $s = 32; case 32: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				s = _r$9;
				$s = 19; continue;
			/* } else if (_15 === 81) { */ case 14:
				_r$10 = p.parseSelectStmt(); /* */ $s = 33; case 33: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				s = _r$10;
				$s = 19; continue;
			/* } else if (_15 === 70) { */ case 15:
				_r$11 = p.parseForStmt(); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				s = _r$11;
				$s = 19; continue;
			/* } else if (_15 === 57) { */ case 16:
				s = new ast.EmptyStmt.ptr(p.pos, p.lit === "\n");
				$r = p.next(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 19; continue;
			/* } else if (_15 === 56) { */ case 17:
				s = new ast.EmptyStmt.ptr(p.pos, true);
				$s = 19; continue;
			/* } else { */ case 18:
				pos = p.pos;
				$r = p.errorExpected(pos, "statement"); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = syncStmt(p); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s = new ast.BadStmt.ptr(pos, p.pos);
			/* } */ case 19:
		case 4:
		return s;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  s; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseStmt }; } $f.$ptr = $ptr; $f._15 = _15; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.isLabeledStmt = isLabeledStmt; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseStmt = function() { return this.$val.parseStmt(); };
	isValidImport = function(lit) {
		var $ptr, _i, _ref, _rune, _tuple, lit, r, s;
		_tuple = strconv.Unquote(lit);
		s = _tuple[0];
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) {
				return false;
			}
			_i += _rune[1];
		}
		return !(s === "");
	};
	parser.ptr.prototype.parseImportSpec = function(doc, param, param$1) {
		var $ptr, _16, _r, _r$1, _r$2, doc, ident, p, param, param$1, path, pos, spec, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _16 = $f._16; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; doc = $f.doc; ident = $f.ident; p = $f.p; param = $f.param; param$1 = $f.param$1; path = $f.path; pos = $f.pos; spec = $f.spec; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "ImportSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		ident = ptrType$5.nil;
			_16 = p.tok;
			/* */ if (_16 === 53) { $s = 5; continue; }
			/* */ if (_16 === 4) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_16 === 53) { */ case 5:
				ident = new ast.Ident.ptr(p.pos, ".", ptrType$7.nil);
				$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_16 === 4) { */ case 6:
				_r$1 = p.parseIdent(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				ident = _r$1;
			/* } */ case 7:
		case 4:
		pos = p.pos;
		path = "";
		/* */ if (p.tok === 9) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (p.tok === 9) { */ case 10:
			path = p.lit;
			/* */ if (!isValidImport(path)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!isValidImport(path)) { */ case 13:
				$r = p.error(pos, "invalid import path: " + path); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$r = p.next(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 12; continue;
		/* } else { */ case 11:
			_r$2 = p.expect(9); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ case 12:
		$r = p.expectSemi(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec = new ast.ImportSpec.ptr(doc, ident, new ast.BasicLit.ptr(pos, 9, path), p.lineComment, 0);
		p.imports = $append(p.imports, spec);
		return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseImportSpec }; } $f.$ptr = $ptr; $f._16 = _16; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.doc = doc; $f.ident = ident; $f.p = p; $f.param = param; $f.param$1 = param$1; $f.path = path; $f.pos = pos; $f.spec = spec; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseImportSpec = function(doc, param, param$1) { return this.$val.parseImportSpec(doc, param, param$1); };
	parser.ptr.prototype.parseValueSpec = function(doc, keyword, iota) {
		var $ptr, _17, _r, _r$1, _r$2, _r$3, doc, idents, iota, keyword, kind, p, pos, spec, typ, values, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _17 = $f._17; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; doc = $f.doc; idents = $f.idents; iota = $f.iota; keyword = $f.keyword; kind = $f.kind; p = $f.p; pos = $f.pos; spec = $f.spec; typ = $f.typ; values = $f.values; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, new token.Token(keyword).String() + "Spec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		pos = p.pos;
		_r$1 = p.parseIdentList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		idents = _r$1;
		_r$2 = p.tryType(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		typ = _r$2;
		values = sliceType$9.nil;
		/* */ if (p.tok === 42) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.tok === 42) { */ case 6:
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = p.parseRhsList(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			values = _r$3;
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_17 = keyword;
			/* */ if (_17 === 85) { $s = 12; continue; }
			/* */ if (_17 === 64) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_17 === 85) { */ case 12:
				/* */ if ($interfaceIsEqual(typ, $ifaceNil) && values === sliceType$9.nil) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if ($interfaceIsEqual(typ, $ifaceNil) && values === sliceType$9.nil) { */ case 15:
					$r = p.error(pos, "missing variable type or initialization"); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				$s = 14; continue;
			/* } else if (_17 === 64) { */ case 13:
				/* */ if (values === sliceType$9.nil && ((iota === 0) || !($interfaceIsEqual(typ, $ifaceNil)))) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (values === sliceType$9.nil && ((iota === 0) || !($interfaceIsEqual(typ, $ifaceNil)))) { */ case 18:
					$r = p.error(pos, "missing constant value"); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 19:
			/* } */ case 14:
		case 11:
		spec = new ast.ValueSpec.ptr(doc, idents, typ, values, p.lineComment);
		kind = 2;
		if (keyword === 85) {
			kind = 4;
		}
		$r = p.declare(spec, new $Int(iota), p.topScope, kind, idents); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseValueSpec }; } $f.$ptr = $ptr; $f._17 = _17; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.doc = doc; $f.idents = idents; $f.iota = iota; $f.keyword = keyword; $f.kind = kind; $f.p = p; $f.pos = pos; $f.spec = spec; $f.typ = typ; $f.values = values; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseValueSpec = function(doc, keyword, iota) { return this.$val.parseValueSpec(doc, keyword, iota); };
	parser.ptr.prototype.parseTypeSpec = function(doc, param, param$1) {
		var $ptr, _r, _r$1, _r$2, doc, ident, p, param, param$1, spec, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; doc = $f.doc; ident = $f.ident; p = $f.p; param = $f.param; param$1 = $f.param$1; spec = $f.spec; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "TypeSpec"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		_r$1 = p.parseIdent(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ident = _r$1;
		spec = new ast.TypeSpec.ptr(doc, ident, $ifaceNil, ptrType$3.nil);
		$r = p.declare(spec, $ifaceNil, p.topScope, 3, new sliceType$2([ident])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = p.parseType(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		spec.Type = _r$2;
		$r = p.expectSemi(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		spec.Comment = p.lineComment;
		return spec;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseTypeSpec }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.doc = doc; $f.ident = ident; $f.p = p; $f.param = param; $f.param$1 = param$1; $f.spec = spec; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseTypeSpec = function(doc, param, param$1) { return this.$val.parseTypeSpec(doc, param, param$1); };
	parser.ptr.prototype.parseGenDecl = function(keyword, f) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, doc, f, iota, keyword, list, lparen, p, pos, rparen, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; doc = $f.doc; f = $f.f; iota = $f.iota; keyword = $f.keyword; list = $f.list; lparen = $f.lparen; p = $f.p; pos = $f.pos; rparen = $f.rparen; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "GenDecl(" + new token.Token(keyword).String() + ")"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		_r$1 = p.expect(keyword); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_tmp = 0;
		_tmp$1 = 0;
		lparen = _tmp;
		rparen = _tmp$1;
		list = sliceType$12.nil;
		/* */ if (p.tok === 49) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 49) { */ case 5:
			lparen = p.pos;
			$r = p.next(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			iota = 0;
			/* while (true) { */ case 9:
				/* if (!(!((p.tok === 54)) && !((p.tok === 1)))) { break; } */ if(!(!((p.tok === 54)) && !((p.tok === 1)))) { $s = 10; continue; }
				_r$2 = f(p.leadComment, keyword, iota); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				list = $append(list, _r$2);
				iota = iota + (1) >> 0;
			/* } */ $s = 9; continue; case 10:
			_r$3 = p.expect(54); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			rparen = _r$3;
			$r = p.expectSemi(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			_r$4 = f(ptrType$3.nil, keyword, 0); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			list = $append(list, _r$4);
		/* } */ case 7:
		return new ast.GenDecl.ptr(doc, pos, keyword, lparen, list, rparen);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$43.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseGenDecl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.doc = doc; $f.f = f; $f.iota = iota; $f.keyword = keyword; $f.list = list; $f.lparen = lparen; $f.p = p; $f.pos = pos; $f.rparen = rparen; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseGenDecl = function(keyword, f) { return this.$val.parseGenDecl(keyword, f); };
	parser.ptr.prototype.parseFuncDecl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, body, decl, doc, ident, p, params, pos, recv, results, scope, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; body = $f.body; decl = $f.decl; doc = $f.doc; ident = $f.ident; p = $f.p; params = $f.params; pos = $f.pos; recv = $f.recv; results = $f.results; scope = $f.scope; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "FunctionDecl"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		doc = p.leadComment;
		_r$1 = p.expect(71); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		scope = ast.NewScope(p.topScope);
		recv = ptrType$14.nil;
		/* */ if (p.tok === 49) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (p.tok === 49) { */ case 5:
			_r$2 = p.parseParameters(scope, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			recv = _r$2;
		/* } */ case 6:
		_r$3 = p.parseIdent(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		ident = _r$3;
		_r$4 = p.parseSignature(scope); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		params = _tuple[0];
		results = _tuple[1];
		body = ptrType$21.nil;
		/* */ if (p.tok === 51) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (p.tok === 51) { */ case 10:
			_r$5 = p.parseBody(scope); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			body = _r$5;
		/* } */ case 11:
		$r = p.expectSemi(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		decl = new ast.FuncDecl.ptr(doc, recv, ident, new ast.FuncType.ptr(pos, params, results), body);
		/* */ if (recv === ptrType$14.nil) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (recv === ptrType$14.nil) { */ case 14:
			/* */ if (!(ident.Name === "init")) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!(ident.Name === "init")) { */ case 16:
				$r = p.declare(decl, $ifaceNil, p.pkgScope, 5, new sliceType$2([ident])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 17:
		/* } */ case 15:
		return decl;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$44.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFuncDecl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.body = body; $f.decl = decl; $f.doc = doc; $f.ident = ident; $f.p = p; $f.params = params; $f.pos = pos; $f.recv = recv; $f.results = results; $f.scope = scope; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFuncDecl = function() { return this.$val.parseFuncDecl(); };
	parser.ptr.prototype.parseDecl = function(sync) {
		var $ptr, _18, _r, _r$1, _r$2, f, p, pos, sync, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _18 = $f._18; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; p = $f.p; pos = $f.pos; sync = $f.sync; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "Declaration"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		f = $throwNilPointerError;
			_18 = p.tok;
			/* */ if ((_18 === 64) || (_18 === 85)) { $s = 5; continue; }
			/* */ if (_18 === 84) { $s = 6; continue; }
			/* */ if (_18 === 71) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_18 === 64) || (_18 === 85)) { */ case 5:
				f = $methodVal(p, "parseValueSpec");
				$s = 9; continue;
			/* } else if (_18 === 84) { */ case 6:
				f = $methodVal(p, "parseTypeSpec");
				$s = 9; continue;
			/* } else if (_18 === 71) { */ case 7:
				_r$1 = p.parseFuncDecl(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 11; case 11:
				return _r$1;
			/* } else { */ case 8:
				pos = p.pos;
				$r = p.errorExpected(pos, "declaration"); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = sync(p); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return new ast.BadDecl.ptr(pos, p.pos);
			/* } */ case 9:
		case 4:
		_r$2 = p.parseGenDecl(p.tok, f); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 15; case 15:
		return _r$2;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseDecl }; } $f.$ptr = $ptr; $f._18 = _18; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.p = p; $f.pos = pos; $f.sync = sync; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseDecl = function(sync) { return this.$val.parseDecl(sync); };
	parser.ptr.prototype.parseFile = function() {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, decls, doc, i, ident, ident$1, p, pos, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; decls = $f.decls; doc = $f.doc; i = $f.i; ident = $f.ident; ident$1 = $f.ident$1; p = $f.p; pos = $f.pos; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = this;
		/* */ if (p.trace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.trace) { */ case 1:
			_r = trace(p, "File"); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$deferred.push([un, [_r]]);
		/* } */ case 2:
		if (!((p.errors.Len() === 0))) {
			return ptrType$1.nil;
		}
		doc = p.leadComment;
		_r$1 = p.expect(78); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		pos = _r$1;
		_r$2 = p.parseIdent(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		ident = _r$2;
		/* */ if (ident.Name === "_" && !((((p.mode & 16) >>> 0) === 0))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (ident.Name === "_" && !((((p.mode & 16) >>> 0) === 0))) { */ case 6:
			$r = p.error(p.pos, "invalid package name _"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$r = p.expectSemi(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!((p.errors.Len() === 0))) {
			return ptrType$1.nil;
		}
		p.openScope();
		p.pkgScope = p.topScope;
		decls = sliceType$5.nil;
		/* */ if (((p.mode & 1) >>> 0) === 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (((p.mode & 1) >>> 0) === 0) { */ case 10:
			/* while (true) { */ case 12:
				/* if (!(p.tok === 75)) { break; } */ if(!(p.tok === 75)) { $s = 13; continue; }
				_r$3 = p.parseGenDecl(75, $methodVal(p, "parseImportSpec")); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				decls = $append(decls, _r$3);
			/* } */ $s = 12; continue; case 13:
			/* */ if (((p.mode & 2) >>> 0) === 0) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (((p.mode & 2) >>> 0) === 0) { */ case 15:
				/* while (true) { */ case 17:
					/* if (!(!((p.tok === 1)))) { break; } */ if(!(!((p.tok === 1)))) { $s = 18; continue; }
					_r$4 = p.parseDecl(syncDecl); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					decls = $append(decls, _r$4);
				/* } */ $s = 17; continue; case 18:
			/* } */ case 16:
		/* } */ case 11:
		p.closeScope();
		assert(p.topScope === ptrType$4.nil, "unbalanced scopes");
		assert(p.labelScope === ptrType$4.nil, "unbalanced label scopes");
		i = 0;
		_ref = p.unresolved;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ident$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			assert(ident$1.Obj === unresolved, "object already resolved");
			ident$1.Obj = p.pkgScope.Lookup(ident$1.Name);
			if (ident$1.Obj === ptrType$7.nil) {
				(x = p.unresolved, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = ident$1));
				i = i + (1) >> 0;
			}
			_i++;
		}
		return new ast.File.ptr(doc, pos, ident, decls, p.pkgScope, p.imports, $subslice(p.unresolved, 0, i), p.comments);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$1.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseFile }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.decls = decls; $f.doc = doc; $f.i = i; $f.ident = ident; $f.ident$1 = ident$1; $f.p = p; $f.pos = pos; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	parser.prototype.parseFile = function() { return this.$val.parseFile(); };
	ptrType$46.methods = [{prop: "init", name: "init", pkg: "go/parser", typ: $funcType([ptrType$45, $String, sliceType, Mode], [], false)}, {prop: "openScope", name: "openScope", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "closeScope", name: "closeScope", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "openLabelScope", name: "openLabelScope", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "closeLabelScope", name: "closeLabelScope", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "declare", name: "declare", pkg: "go/parser", typ: $funcType([$emptyInterface, $emptyInterface, ptrType$4, ast.ObjKind, sliceType$2], [], true)}, {prop: "shortVarDecl", name: "shortVarDecl", pkg: "go/parser", typ: $funcType([ptrType$39, sliceType$9], [], false)}, {prop: "tryResolve", name: "tryResolve", pkg: "go/parser", typ: $funcType([ast.Expr, $Bool], [], false)}, {prop: "resolve", name: "resolve", pkg: "go/parser", typ: $funcType([ast.Expr], [], false)}, {prop: "printTrace", name: "printTrace", pkg: "go/parser", typ: $funcType([sliceType$7], [], true)}, {prop: "next0", name: "next0", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "consumeComment", name: "consumeComment", pkg: "go/parser", typ: $funcType([], [ptrType$10, $Int], false)}, {prop: "consumeCommentGroup", name: "consumeCommentGroup", pkg: "go/parser", typ: $funcType([$Int], [ptrType$3, $Int], false)}, {prop: "next", name: "next", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "go/parser", typ: $funcType([token.Pos, $String], [], false)}, {prop: "errorExpected", name: "errorExpected", pkg: "go/parser", typ: $funcType([token.Pos, $String], [], false)}, {prop: "expect", name: "expect", pkg: "go/parser", typ: $funcType([token.Token], [token.Pos], false)}, {prop: "expectClosing", name: "expectClosing", pkg: "go/parser", typ: $funcType([token.Token, $String], [token.Pos], false)}, {prop: "expectSemi", name: "expectSemi", pkg: "go/parser", typ: $funcType([], [], false)}, {prop: "atComma", name: "atComma", pkg: "go/parser", typ: $funcType([$String, token.Token], [$Bool], false)}, {prop: "safePos", name: "safePos", pkg: "go/parser", typ: $funcType([token.Pos], [token.Pos], false)}, {prop: "parseIdent", name: "parseIdent", pkg: "go/parser", typ: $funcType([], [ptrType$5], false)}, {prop: "parseIdentList", name: "parseIdentList", pkg: "go/parser", typ: $funcType([], [sliceType$2], false)}, {prop: "parseExprList", name: "parseExprList", pkg: "go/parser", typ: $funcType([$Bool], [sliceType$9], false)}, {prop: "parseLhsList", name: "parseLhsList", pkg: "go/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseRhsList", name: "parseRhsList", pkg: "go/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseType", name: "parseType", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseTypeName", name: "parseTypeName", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseArrayType", name: "parseArrayType", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "makeIdentList", name: "makeIdentList", pkg: "go/parser", typ: $funcType([sliceType$9], [sliceType$2], false)}, {prop: "parseFieldDecl", name: "parseFieldDecl", pkg: "go/parser", typ: $funcType([ptrType$4], [ptrType$13], false)}, {prop: "parseStructType", name: "parseStructType", pkg: "go/parser", typ: $funcType([], [ptrType$15], false)}, {prop: "parsePointerType", name: "parsePointerType", pkg: "go/parser", typ: $funcType([], [ptrType$16], false)}, {prop: "tryVarType", name: "tryVarType", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseVarType", name: "parseVarType", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseParameterList", name: "parseParameterList", pkg: "go/parser", typ: $funcType([ptrType$4, $Bool], [sliceType$10], false)}, {prop: "parseParameters", name: "parseParameters", pkg: "go/parser", typ: $funcType([ptrType$4, $Bool], [ptrType$14], false)}, {prop: "parseResult", name: "parseResult", pkg: "go/parser", typ: $funcType([ptrType$4], [ptrType$14], false)}, {prop: "parseSignature", name: "parseSignature", pkg: "go/parser", typ: $funcType([ptrType$4], [ptrType$14, ptrType$14], false)}, {prop: "parseFuncType", name: "parseFuncType", pkg: "go/parser", typ: $funcType([], [ptrType$17, ptrType$4], false)}, {prop: "parseMethodSpec", name: "parseMethodSpec", pkg: "go/parser", typ: $funcType([ptrType$4], [ptrType$13], false)}, {prop: "parseInterfaceType", name: "parseInterfaceType", pkg: "go/parser", typ: $funcType([], [ptrType$18], false)}, {prop: "parseMapType", name: "parseMapType", pkg: "go/parser", typ: $funcType([], [ptrType$19], false)}, {prop: "parseChanType", name: "parseChanType", pkg: "go/parser", typ: $funcType([], [ptrType$20], false)}, {prop: "tryIdentOrType", name: "tryIdentOrType", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "tryType", name: "tryType", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseStmtList", name: "parseStmtList", pkg: "go/parser", typ: $funcType([], [sliceType$11], false)}, {prop: "parseBody", name: "parseBody", pkg: "go/parser", typ: $funcType([ptrType$4], [ptrType$21], false)}, {prop: "parseBlockStmt", name: "parseBlockStmt", pkg: "go/parser", typ: $funcType([], [ptrType$21], false)}, {prop: "parseFuncTypeOrLit", name: "parseFuncTypeOrLit", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseOperand", name: "parseOperand", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseSelector", name: "parseSelector", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseTypeAssertion", name: "parseTypeAssertion", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseIndexOrSlice", name: "parseIndexOrSlice", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parseCallOrConversion", name: "parseCallOrConversion", pkg: "go/parser", typ: $funcType([ast.Expr], [ptrType$22], false)}, {prop: "parseValue", name: "parseValue", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseElement", name: "parseElement", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseElementList", name: "parseElementList", pkg: "go/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseLiteralValue", name: "parseLiteralValue", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "checkExpr", name: "checkExpr", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "checkExprOrType", name: "checkExprOrType", pkg: "go/parser", typ: $funcType([ast.Expr], [ast.Expr], false)}, {prop: "parsePrimaryExpr", name: "parsePrimaryExpr", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseUnaryExpr", name: "parseUnaryExpr", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "tokPrec", name: "tokPrec", pkg: "go/parser", typ: $funcType([], [token.Token, $Int], false)}, {prop: "parseBinaryExpr", name: "parseBinaryExpr", pkg: "go/parser", typ: $funcType([$Bool, $Int], [ast.Expr], false)}, {prop: "parseExpr", name: "parseExpr", pkg: "go/parser", typ: $funcType([$Bool], [ast.Expr], false)}, {prop: "parseRhs", name: "parseRhs", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseRhsOrType", name: "parseRhsOrType", pkg: "go/parser", typ: $funcType([], [ast.Expr], false)}, {prop: "parseSimpleStmt", name: "parseSimpleStmt", pkg: "go/parser", typ: $funcType([$Int], [ast.Stmt, $Bool], false)}, {prop: "parseCallExpr", name: "parseCallExpr", pkg: "go/parser", typ: $funcType([$String], [ptrType$22], false)}, {prop: "parseGoStmt", name: "parseGoStmt", pkg: "go/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseDeferStmt", name: "parseDeferStmt", pkg: "go/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseReturnStmt", name: "parseReturnStmt", pkg: "go/parser", typ: $funcType([], [ptrType$34], false)}, {prop: "parseBranchStmt", name: "parseBranchStmt", pkg: "go/parser", typ: $funcType([token.Token], [ptrType$35], false)}, {prop: "makeExpr", name: "makeExpr", pkg: "go/parser", typ: $funcType([ast.Stmt, $String], [ast.Expr], false)}, {prop: "parseIfStmt", name: "parseIfStmt", pkg: "go/parser", typ: $funcType([], [ptrType$37], false)}, {prop: "parseTypeList", name: "parseTypeList", pkg: "go/parser", typ: $funcType([], [sliceType$9], false)}, {prop: "parseCaseClause", name: "parseCaseClause", pkg: "go/parser", typ: $funcType([$Bool], [ptrType$38], false)}, {prop: "isTypeSwitchGuard", name: "isTypeSwitchGuard", pkg: "go/parser", typ: $funcType([ast.Stmt], [$Bool], false)}, {prop: "parseSwitchStmt", name: "parseSwitchStmt", pkg: "go/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseCommClause", name: "parseCommClause", pkg: "go/parser", typ: $funcType([], [ptrType$40], false)}, {prop: "parseSelectStmt", name: "parseSelectStmt", pkg: "go/parser", typ: $funcType([], [ptrType$41], false)}, {prop: "parseForStmt", name: "parseForStmt", pkg: "go/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseStmt", name: "parseStmt", pkg: "go/parser", typ: $funcType([], [ast.Stmt], false)}, {prop: "parseImportSpec", name: "parseImportSpec", pkg: "go/parser", typ: $funcType([ptrType$3, token.Token, $Int], [ast.Spec], false)}, {prop: "parseValueSpec", name: "parseValueSpec", pkg: "go/parser", typ: $funcType([ptrType$3, token.Token, $Int], [ast.Spec], false)}, {prop: "parseTypeSpec", name: "parseTypeSpec", pkg: "go/parser", typ: $funcType([ptrType$3, token.Token, $Int], [ast.Spec], false)}, {prop: "parseGenDecl", name: "parseGenDecl", pkg: "go/parser", typ: $funcType([token.Token, parseSpecFunction], [ptrType$43], false)}, {prop: "parseFuncDecl", name: "parseFuncDecl", pkg: "go/parser", typ: $funcType([], [ptrType$44], false)}, {prop: "parseDecl", name: "parseDecl", pkg: "go/parser", typ: $funcType([funcType], [ast.Decl], false)}, {prop: "parseFile", name: "parseFile", pkg: "go/parser", typ: $funcType([], [ptrType$1], false)}];
	parser.init([{prop: "file", name: "file", pkg: "go/parser", typ: ptrType$2, tag: ""}, {prop: "errors", name: "errors", pkg: "go/parser", typ: scanner.ErrorList, tag: ""}, {prop: "scanner", name: "scanner", pkg: "go/parser", typ: scanner.Scanner, tag: ""}, {prop: "mode", name: "mode", pkg: "go/parser", typ: Mode, tag: ""}, {prop: "trace", name: "trace", pkg: "go/parser", typ: $Bool, tag: ""}, {prop: "indent", name: "indent", pkg: "go/parser", typ: $Int, tag: ""}, {prop: "comments", name: "comments", pkg: "go/parser", typ: sliceType$1, tag: ""}, {prop: "leadComment", name: "leadComment", pkg: "go/parser", typ: ptrType$3, tag: ""}, {prop: "lineComment", name: "lineComment", pkg: "go/parser", typ: ptrType$3, tag: ""}, {prop: "pos", name: "pos", pkg: "go/parser", typ: token.Pos, tag: ""}, {prop: "tok", name: "tok", pkg: "go/parser", typ: token.Token, tag: ""}, {prop: "lit", name: "lit", pkg: "go/parser", typ: $String, tag: ""}, {prop: "syncPos", name: "syncPos", pkg: "go/parser", typ: token.Pos, tag: ""}, {prop: "syncCnt", name: "syncCnt", pkg: "go/parser", typ: $Int, tag: ""}, {prop: "exprLev", name: "exprLev", pkg: "go/parser", typ: $Int, tag: ""}, {prop: "inRhs", name: "inRhs", pkg: "go/parser", typ: $Bool, tag: ""}, {prop: "pkgScope", name: "pkgScope", pkg: "go/parser", typ: ptrType$4, tag: ""}, {prop: "topScope", name: "topScope", pkg: "go/parser", typ: ptrType$4, tag: ""}, {prop: "unresolved", name: "unresolved", pkg: "go/parser", typ: sliceType$2, tag: ""}, {prop: "imports", name: "imports", pkg: "go/parser", typ: sliceType$3, tag: ""}, {prop: "labelScope", name: "labelScope", pkg: "go/parser", typ: ptrType$4, tag: ""}, {prop: "targetStack", name: "targetStack", pkg: "go/parser", typ: sliceType$4, tag: ""}]);
	bailout.init([]);
	parseSpecFunction.init([ptrType$3, token.Token, $Int], [ast.Spec], false);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = scanner.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		unresolved = new ast.Object.ptr(0, "", $ifaceNil, $ifaceNil, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/tabwriter"] = (function() {
	var $pkg = {}, $init, bytes, io, utf8, cell, Writer, osError, sliceType, sliceType$1, ptrType, ptrType$1, arrayType, arrayType$1, arrayType$2, sliceType$2, sliceType$3, ptrType$2, newline, tabs, vbar, hbar, handlePanic, NewWriter;
	bytes = $packages["bytes"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	cell = $pkg.cell = $newType(0, $kindStruct, "tabwriter.cell", "cell", "text/tabwriter", function(size_, width_, htab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.width = 0;
			this.htab = false;
			return;
		}
		this.size = size_;
		this.width = width_;
		this.htab = htab_;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "tabwriter.Writer", "Writer", "text/tabwriter", function(output_, minwidth_, tabwidth_, padding_, padbytes_, flags_, buf_, pos_, cell_, endChar_, lines_, widths_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.output = $ifaceNil;
			this.minwidth = 0;
			this.tabwidth = 0;
			this.padding = 0;
			this.padbytes = arrayType.zero();
			this.flags = 0;
			this.buf = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0);
			this.pos = 0;
			this.cell = new cell.ptr(0, 0, false);
			this.endChar = 0;
			this.lines = sliceType$2.nil;
			this.widths = sliceType$3.nil;
			return;
		}
		this.output = output_;
		this.minwidth = minwidth_;
		this.tabwidth = tabwidth_;
		this.padding = padding_;
		this.padbytes = padbytes_;
		this.flags = flags_;
		this.buf = buf_;
		this.pos = pos_;
		this.cell = cell_;
		this.endChar = endChar_;
		this.lines = lines_;
		this.widths = widths_;
	});
	osError = $pkg.osError = $newType(0, $kindStruct, "tabwriter.osError", "osError", "text/tabwriter", function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType(cell);
	ptrType = $ptrType(sliceType$1);
	ptrType$1 = $ptrType($error);
	arrayType = $arrayType($Uint8, 8);
	arrayType$1 = $arrayType($Uint8, 4);
	arrayType$2 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType(sliceType$1);
	sliceType$3 = $sliceType($Int);
	ptrType$2 = $ptrType(Writer);
	Writer.ptr.prototype.addLine = function() {
		var $ptr, b;
		b = this;
		b.lines = $append(b.lines, new sliceType$1([]));
	};
	Writer.prototype.addLine = function() { return this.$val.addLine(); };
	Writer.ptr.prototype.reset = function() {
		var $ptr, b;
		b = this;
		b.buf.Reset();
		b.pos = 0;
		cell.copy(b.cell, new cell.ptr(0, 0, false));
		b.endChar = 0;
		b.lines = $subslice(b.lines, 0, 0);
		b.widths = $subslice(b.widths, 0, 0);
		b.addLine();
	};
	Writer.prototype.reset = function() { return this.$val.reset(); };
	Writer.ptr.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) {
		var $ptr, _i, _ref, b, flags, i, minwidth, output, padchar, padding, tabwidth, x;
		b = this;
		if (minwidth < 0 || tabwidth < 0 || padding < 0) {
			$panic(new $String("negative minwidth, tabwidth, or padding"));
		}
		b.output = output;
		b.minwidth = minwidth;
		b.tabwidth = tabwidth;
		b.padding = padding;
		_ref = b.padbytes;
		_i = 0;
		while (true) {
			if (!(_i < 8)) { break; }
			i = _i;
			(x = b.padbytes, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = padchar));
			_i++;
		}
		if (padchar === 9) {
			flags = (flags & ~(4)) >>> 0;
		}
		b.flags = flags;
		b.reset();
		return b;
	};
	Writer.prototype.Init = function(output, minwidth, tabwidth, padding, padchar, flags) { return this.$val.Init(output, minwidth, tabwidth, padding, padchar, flags); };
	Writer.ptr.prototype.write0 = function(buf) {
		var $ptr, _r, _tuple, b, buf, err, n, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; b = $f.b; buf = $f.buf; err = $f.err; n = $f.n; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.output.Write(buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!((n === buf.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic((x = new osError.ptr(err), new x.constructor.elem(x)));
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.write0 }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.err = err; $f.n = n; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.write0 = function(buf) { return this.$val.write0(buf); };
	Writer.ptr.prototype.writeN = function(src, n) {
		var $ptr, b, n, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; n = $f.n; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* while (true) { */ case 1:
			/* if (!(n > src.$length)) { break; } */ if(!(n > src.$length)) { $s = 2; continue; }
			$r = b.write0(src); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = n - (src.$length) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = b.write0($subslice(src, 0, n)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writeN }; } $f.$ptr = $ptr; $f.b = b; $f.n = n; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writeN = function(src, n) { return this.$val.writeN(src, n); };
	Writer.ptr.prototype.writePadding = function(textw, cellw, useTabs) {
		var $ptr, _q, _q$1, b, cellw, n, textw, useTabs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _q = $f._q; _q$1 = $f._q$1; b = $f.b; cellw = $f.cellw; n = $f.n; textw = $f.textw; useTabs = $f.useTabs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		/* */ if ((b.padbytes[0] === 9) || useTabs) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((b.padbytes[0] === 9) || useTabs) { */ case 1:
			if (b.tabwidth === 0) {
				return;
			}
			cellw = $imul((_q = (((cellw + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), b.tabwidth);
			n = cellw - textw >> 0;
			if (n < 0) {
				$panic(new $String("internal error"));
			}
			$r = b.writeN(tabs, (_q$1 = (((n + b.tabwidth >> 0) - 1 >> 0)) / b.tabwidth, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		$r = b.writeN($subslice(new sliceType(b.padbytes), 0), cellw - textw >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writePadding }; } $f.$ptr = $ptr; $f._q = _q; $f._q$1 = _q$1; $f.b = b; $f.cellw = cellw; $f.n = n; $f.textw = textw; $f.useTabs = useTabs; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writePadding = function(textw, cellw, useTabs) { return this.$val.writePadding(textw, cellw, useTabs); };
	Writer.ptr.prototype.writeLines = function(pos0, line0, line1) {
		var $ptr, _i, _ref, b, c, i, j, line, line0, line1, pos, pos0, useTabs, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; b = $f.b; c = $f.c; i = $f.i; j = $f.j; line = $f.line; line0 = $f.line0; line1 = $f.line1; pos = $f.pos; pos0 = $f.pos0; useTabs = $f.useTabs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		b = this;
		pos = pos0;
		i = line0;
		/* while (true) { */ case 1:
			/* if (!(i < line1)) { break; } */ if(!(i < line1)) { $s = 2; continue; }
			line = (x = b.lines, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			useTabs = !((((b.flags & 16) >>> 0) === 0));
			_ref = line;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				j = _i;
				c = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), cell);
				/* */ if (j > 0 && !((((b.flags & 32) >>> 0) === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (j > 0 && !((((b.flags & 32) >>> 0) === 0))) { */ case 5:
					$r = b.write0(vbar); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				/* */ if (c.size === 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (c.size === 0) { */ case 8:
					/* */ if (j < b.widths.$length) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (j < b.widths.$length) { */ case 11:
						$r = b.writePadding(c.width, (x$1 = b.widths, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j])), useTabs); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
					$s = 10; continue;
				/* } else { */ case 9:
					useTabs = false;
					/* */ if (((b.flags & 4) >>> 0) === 0) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (((b.flags & 4) >>> 0) === 0) { */ case 14:
						$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + c.size >> 0))); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						pos = pos + (c.size) >> 0;
						/* */ if (j < b.widths.$length) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (j < b.widths.$length) { */ case 18:
							$r = b.writePadding(c.width, (x$2 = b.widths, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])), false); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 19:
						$s = 16; continue;
					/* } else { */ case 15:
						/* */ if (j < b.widths.$length) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if (j < b.widths.$length) { */ case 21:
							$r = b.writePadding(c.width, (x$3 = b.widths, ((j < 0 || j >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j])), false); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 22:
						$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + c.size >> 0))); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						pos = pos + (c.size) >> 0;
					/* } */ case 16:
				/* } */ case 10:
				_i++;
			/* } */ $s = 3; continue; case 4:
			/* */ if ((i + 1 >> 0) === b.lines.$length) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((i + 1 >> 0) === b.lines.$length) { */ case 25:
				$r = b.write0($subslice(b.buf.Bytes(), pos, (pos + b.cell.size >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				pos = pos + (b.cell.size) >> 0;
				$s = 27; continue;
			/* } else { */ case 26:
				$r = b.write0(newline); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 27:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.writeLines }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.b = b; $f.c = c; $f.i = i; $f.j = j; $f.line = line; $f.line0 = line0; $f.line1 = line1; $f.pos = pos; $f.pos0 = pos0; $f.useTabs = useTabs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.writeLines = function(pos0, line0, line1) { return this.$val.writeLines(pos0, line0, line1); };
	Writer.ptr.prototype.format = function(pos0, line0, line1) {
		var $ptr, _r, _r$1, _r$2, b, c, column, discardable, line, line0, line1, pos, pos0, this$1, w, width, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; c = $f.c; column = $f.column; discardable = $f.discardable; line = $f.line; line0 = $f.line0; line1 = $f.line1; pos = $f.pos; pos0 = $f.pos0; this$1 = $f.this$1; w = $f.w; width = $f.width; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = 0;
		b = this;
		pos = pos0;
		column = b.widths.$length;
		this$1 = line0;
		/* while (true) { */ case 1:
			/* if (!(this$1 < line1)) { break; } */ if(!(this$1 < line1)) { $s = 2; continue; }
			line = (x = b.lines, ((this$1 < 0 || this$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + this$1]));
			/* */ if (column < (line.$length - 1 >> 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (column < (line.$length - 1 >> 0)) { */ case 3:
				_r = b.writeLines(pos, line0, this$1); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				pos = _r;
				line0 = this$1;
				width = b.minwidth;
				discardable = true;
				while (true) {
					if (!(this$1 < line1)) { break; }
					line = (x$1 = b.lines, ((this$1 < 0 || this$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + this$1]));
					if (column < (line.$length - 1 >> 0)) {
						c = $clone(((column < 0 || column >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + column]), cell);
						w = c.width + b.padding >> 0;
						if (w > width) {
							width = w;
						}
						if (c.width > 0 || c.htab) {
							discardable = false;
						}
					} else {
						break;
					}
					this$1 = this$1 + (1) >> 0;
				}
				if (discardable && !((((b.flags & 8) >>> 0) === 0))) {
					width = 0;
				}
				b.widths = $append(b.widths, width);
				_r$1 = b.format(pos, line0, this$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				pos = _r$1;
				b.widths = $subslice(b.widths, 0, (b.widths.$length - 1 >> 0));
				line0 = this$1;
			/* } */ case 4:
			this$1 = this$1 + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = b.writeLines(pos, line0, line1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pos = _r$2;
		/* */ $s = 8; case 8:
		return pos;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.format }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.c = c; $f.column = column; $f.discardable = discardable; $f.line = line; $f.line0 = line0; $f.line1 = line1; $f.pos = pos; $f.pos0 = pos0; $f.this$1 = this$1; $f.w = w; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Writer.prototype.format = function(pos0, line0, line1) { return this.$val.format(pos0, line0, line1); };
	Writer.ptr.prototype.append = function(text) {
		var $ptr, b, text;
		b = this;
		b.buf.Write(text);
		b.cell.size = b.cell.size + (text.$length) >> 0;
	};
	Writer.prototype.append = function(text) { return this.$val.append(text); };
	Writer.ptr.prototype.updateWidth = function() {
		var $ptr, b;
		b = this;
		b.cell.width = b.cell.width + (utf8.RuneCount($subslice(b.buf.Bytes(), b.pos, b.buf.Len()))) >> 0;
		b.pos = b.buf.Len();
	};
	Writer.prototype.updateWidth = function() { return this.$val.updateWidth(); };
	Writer.ptr.prototype.startEscape = function(ch) {
		var $ptr, _1, b, ch;
		b = this;
		_1 = ch;
		if (_1 === 255) {
			b.endChar = 255;
		} else if (_1 === 60) {
			b.endChar = 62;
		} else if (_1 === 38) {
			b.endChar = 59;
		}
	};
	Writer.prototype.startEscape = function(ch) { return this.$val.startEscape(ch); };
	Writer.ptr.prototype.endEscape = function() {
		var $ptr, _2, b;
		b = this;
		_2 = b.endChar;
		if (_2 === 255) {
			b.updateWidth();
			if (((b.flags & 2) >>> 0) === 0) {
				b.cell.width = b.cell.width - (2) >> 0;
			}
		} else if (_2 === 62) {
		} else if (_2 === 59) {
			b.cell.width = b.cell.width + (1) >> 0;
		}
		b.pos = b.buf.Len();
		b.endChar = 0;
	};
	Writer.prototype.endEscape = function() { return this.$val.endEscape(); };
	Writer.ptr.prototype.terminateCell = function(htab) {
		var $ptr, b, htab, line, x;
		b = this;
		b.cell.htab = htab;
		line = (x = b.lines, $indexPtr(x.$array, x.$offset + (b.lines.$length - 1 >> 0), ptrType));
		line.$set($append(line.$get(), b.cell));
		cell.copy(b.cell, new cell.ptr(0, 0, false));
		return line.$get().$length;
	};
	Writer.prototype.terminateCell = function(htab) { return this.$val.terminateCell(htab); };
	handlePanic = function(err, op) {
		var $ptr, _tuple, e, err, nerr, ok, op;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, osError, true);
			nerr = $clone(_tuple[0], osError);
			ok = _tuple[1];
			if (ok) {
				err.$set(nerr.err);
				return;
			}
			$panic(new $String("tabwriter: panic during " + op));
		}
	};
	Writer.ptr.prototype.Flush = function() {
		var $ptr, _r, b, err, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; b = $f.b; err = $f.err; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		b = this;
		$deferred.push([$methodVal(b, "reset"), []]);
		$deferred.push([handlePanic, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err))), "Flush"]]);
		if (b.cell.size > 0) {
			if (!((b.endChar === 0))) {
				b.endEscape();
			}
			b.terminateCell(false);
		}
		_r = b.format(0, 0, b.lines.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Flush }; } $f.$ptr = $ptr; $f._r = _r; $f.b = b; $f.err = err; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.Write = function(buf) {
		var $ptr, _3, _i, _r, _ref, b, buf, ch, err, i, j, n, ncells, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; buf = $f.buf; ch = $f.ch; err = $f.err; i = $f.i; j = $f.j; n = $f.n; ncells = $f.ncells; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		n = 0;
		err[0] = $ifaceNil;
		b = this;
		$deferred.push([handlePanic, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err))), "Write"]]);
		n = 0;
		_ref = buf;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			/* */ if (b.endChar === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (b.endChar === 0) { */ case 3:
					_3 = ch;
					/* */ if ((_3 === 9) || (_3 === 11) || (_3 === 10) || (_3 === 12)) { $s = 7; continue; }
					/* */ if (_3 === 255) { $s = 8; continue; }
					/* */ if ((_3 === 60) || (_3 === 38)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((_3 === 9) || (_3 === 11) || (_3 === 10) || (_3 === 12)) { */ case 7:
						b.append($subslice(buf, n, i));
						b.updateWidth();
						n = i + 1 >> 0;
						ncells = b.terminateCell(ch === 9);
						/* */ if ((ch === 10) || (ch === 12)) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if ((ch === 10) || (ch === 12)) { */ case 11:
							b.addLine();
							/* */ if ((ch === 12) || (ncells === 1)) { $s = 13; continue; }
							/* */ $s = 14; continue;
							/* if ((ch === 12) || (ncells === 1)) { */ case 13:
								_r = b.Flush(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
								err[0] = _r;
								if (!($interfaceIsEqual(err[0], $ifaceNil))) {
									return [n, err[0]];
								}
								/* */ if ((ch === 12) && !((((b.flags & 32) >>> 0) === 0))) { $s = 16; continue; }
								/* */ $s = 17; continue;
								/* if ((ch === 12) && !((((b.flags & 32) >>> 0) === 0))) { */ case 16:
									$r = b.write0(hbar); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 17:
							/* } */ case 14:
						/* } */ case 12:
						$s = 10; continue;
					/* } else if (_3 === 255) { */ case 8:
						b.append($subslice(buf, n, i));
						b.updateWidth();
						n = i;
						if (!((((b.flags & 2) >>> 0) === 0))) {
							n = n + (1) >> 0;
						}
						b.startEscape(255);
						$s = 10; continue;
					/* } else if ((_3 === 60) || (_3 === 38)) { */ case 9:
						if (!((((b.flags & 1) >>> 0) === 0))) {
							b.append($subslice(buf, n, i));
							b.updateWidth();
							n = i;
							b.startEscape(ch);
						}
					/* } */ case 10:
				case 6:
				$s = 5; continue;
			/* } else { */ case 4:
				if (ch === b.endChar) {
					j = i + 1 >> 0;
					if ((ch === 255) && !((((b.flags & 2) >>> 0) === 0))) {
						j = i;
					}
					b.append($subslice(buf, n, j));
					n = i + 1 >> 0;
					b.endEscape();
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		b.append($subslice(buf, n));
		n = buf.$length;
		return [n, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [n, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Writer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.buf = buf; $f.ch = ch; $f.err = err; $f.i = i; $f.j = j; $f.n = n; $f.ncells = ncells; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Writer.prototype.Write = function(buf) { return this.$val.Write(buf); };
	NewWriter = function(output, minwidth, tabwidth, padding, padchar, flags) {
		var $ptr, flags, minwidth, output, padchar, padding, tabwidth;
		return new Writer.ptr($ifaceNil, 0, 0, 0, arrayType.zero(), 0, new bytes.Buffer.ptr(sliceType.nil, 0, arrayType$1.zero(), arrayType$2.zero(), 0), 0, new cell.ptr(0, 0, false), 0, sliceType$2.nil, sliceType$3.nil).Init(output, minwidth, tabwidth, padding, padchar, flags);
	};
	$pkg.NewWriter = NewWriter;
	ptrType$2.methods = [{prop: "addLine", name: "addLine", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "reset", name: "reset", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([io.Writer, $Int, $Int, $Int, $Uint8, $Uint], [ptrType$2], false)}, {prop: "dump", name: "dump", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "write0", name: "write0", pkg: "text/tabwriter", typ: $funcType([sliceType], [], false)}, {prop: "writeN", name: "writeN", pkg: "text/tabwriter", typ: $funcType([sliceType, $Int], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Bool], [], false)}, {prop: "writeLines", name: "writeLines", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Int], [$Int], false)}, {prop: "format", name: "format", pkg: "text/tabwriter", typ: $funcType([$Int, $Int, $Int], [$Int], false)}, {prop: "append", name: "append", pkg: "text/tabwriter", typ: $funcType([sliceType], [], false)}, {prop: "updateWidth", name: "updateWidth", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "startEscape", name: "startEscape", pkg: "text/tabwriter", typ: $funcType([$Uint8], [], false)}, {prop: "endEscape", name: "endEscape", pkg: "text/tabwriter", typ: $funcType([], [], false)}, {prop: "terminateCell", name: "terminateCell", pkg: "text/tabwriter", typ: $funcType([$Bool], [$Int], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	cell.init([{prop: "size", name: "size", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "width", name: "width", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "htab", name: "htab", pkg: "text/tabwriter", typ: $Bool, tag: ""}]);
	Writer.init([{prop: "output", name: "output", pkg: "text/tabwriter", typ: io.Writer, tag: ""}, {prop: "minwidth", name: "minwidth", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "tabwidth", name: "tabwidth", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "padding", name: "padding", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "padbytes", name: "padbytes", pkg: "text/tabwriter", typ: arrayType, tag: ""}, {prop: "flags", name: "flags", pkg: "text/tabwriter", typ: $Uint, tag: ""}, {prop: "buf", name: "buf", pkg: "text/tabwriter", typ: bytes.Buffer, tag: ""}, {prop: "pos", name: "pos", pkg: "text/tabwriter", typ: $Int, tag: ""}, {prop: "cell", name: "cell", pkg: "text/tabwriter", typ: cell, tag: ""}, {prop: "endChar", name: "endChar", pkg: "text/tabwriter", typ: $Uint8, tag: ""}, {prop: "lines", name: "lines", pkg: "text/tabwriter", typ: sliceType$2, tag: ""}, {prop: "widths", name: "widths", pkg: "text/tabwriter", typ: sliceType$3, tag: ""}]);
	osError.init([{prop: "err", name: "err", pkg: "text/tabwriter", typ: $error, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		newline = new sliceType([10]);
		tabs = new sliceType($stringToBytes("\t\t\t\t\t\t\t\t"));
		vbar = new sliceType([124]);
		hbar = new sliceType($stringToBytes("---\n"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/printer"] = (function() {
	var $pkg = {}, $init, bytes, fmt, ast, token, io, os, strconv, strings, tabwriter, unicode, utf8, exprListMode, whiteSpace, pmode, commentInfo, printer, trimmer, Mode, Config, CommentedNode, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, ptrType$1, ptrType$2, ptrType$3, sliceType$4, ptrType$4, ptrType$5, sliceType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, sliceType$6, ptrType$47, ptrType$48, ptrType$49, arrayType, arrayType$1, ptrType$50, ptrType$51, ptrType$52, sliceType$7, ptrType$53, ptrType$54, ptrType$55, sliceType$8, sliceType$9, ptrType$56, ptrType$57, sliceType$10, ptrType$58, mapType, ptrType$59, ptrType$60, aNewline, identListSize, walkBinary, cutoff, diffPrec, reduceDepth, isBinary, isTypeName, stripParens, stripParensAlways, keepTypeColumn, sanitizeImportPath, declToken, isBlank, commonPrefix, trimRight, stripCommonPrefix, nlimit, mayCombine, getDoc;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	ast = $packages["go/ast"];
	token = $packages["go/token"];
	io = $packages["io"];
	os = $packages["os"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	tabwriter = $packages["text/tabwriter"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	exprListMode = $pkg.exprListMode = $newType(4, $kindUint, "printer.exprListMode", "exprListMode", "go/printer", null);
	whiteSpace = $pkg.whiteSpace = $newType(1, $kindUint8, "printer.whiteSpace", "whiteSpace", "go/printer", null);
	pmode = $pkg.pmode = $newType(4, $kindInt, "printer.pmode", "pmode", "go/printer", null);
	commentInfo = $pkg.commentInfo = $newType(0, $kindStruct, "printer.commentInfo", "commentInfo", "go/printer", function(cindex_, comment_, commentOffset_, commentNewline_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cindex = 0;
			this.comment = ptrType.nil;
			this.commentOffset = 0;
			this.commentNewline = false;
			return;
		}
		this.cindex = cindex_;
		this.comment = comment_;
		this.commentOffset = commentOffset_;
		this.commentNewline = commentNewline_;
	});
	printer = $pkg.printer = $newType(0, $kindStruct, "printer.printer", "printer", "go/printer", function(Config_, fset_, output_, indent_, mode_, impliedSemi_, lastTok_, prevOpen_, wsbuf_, pos_, out_, last_, linePtr_, comments_, useNodeComments_, commentInfo_, nodeSizes_, cachedPos_, cachedLine_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Config = new Config.ptr(0, 0, 0);
			this.fset = ptrType$56.nil;
			this.output = sliceType.nil;
			this.indent = 0;
			this.mode = 0;
			this.impliedSemi = false;
			this.lastTok = 0;
			this.prevOpen = 0;
			this.wsbuf = sliceType$7.nil;
			this.pos = new token.Position.ptr("", 0, 0, 0);
			this.out = new token.Position.ptr("", 0, 0, 0);
			this.last = new token.Position.ptr("", 0, 0, 0);
			this.linePtr = ptrType$6.nil;
			this.comments = sliceType$2.nil;
			this.useNodeComments = false;
			this.commentInfo = new commentInfo.ptr(0, ptrType.nil, 0, false);
			this.nodeSizes = false;
			this.cachedPos = 0;
			this.cachedLine = 0;
			return;
		}
		this.Config = Config_;
		this.fset = fset_;
		this.output = output_;
		this.indent = indent_;
		this.mode = mode_;
		this.impliedSemi = impliedSemi_;
		this.lastTok = lastTok_;
		this.prevOpen = prevOpen_;
		this.wsbuf = wsbuf_;
		this.pos = pos_;
		this.out = out_;
		this.last = last_;
		this.linePtr = linePtr_;
		this.comments = comments_;
		this.useNodeComments = useNodeComments_;
		this.commentInfo = commentInfo_;
		this.nodeSizes = nodeSizes_;
		this.cachedPos = cachedPos_;
		this.cachedLine = cachedLine_;
	});
	trimmer = $pkg.trimmer = $newType(0, $kindStruct, "printer.trimmer", "trimmer", "go/printer", function(output_, state_, space_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.output = $ifaceNil;
			this.state = 0;
			this.space = sliceType.nil;
			return;
		}
		this.output = output_;
		this.state = state_;
		this.space = space_;
	});
	Mode = $pkg.Mode = $newType(4, $kindUint, "printer.Mode", "Mode", "go/printer", null);
	Config = $pkg.Config = $newType(0, $kindStruct, "printer.Config", "Config", "go/printer", function(Mode_, Tabwidth_, Indent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mode = 0;
			this.Tabwidth = 0;
			this.Indent = 0;
			return;
		}
		this.Mode = Mode_;
		this.Tabwidth = Tabwidth_;
		this.Indent = Indent_;
	});
	CommentedNode = $pkg.CommentedNode = $newType(0, $kindStruct, "printer.CommentedNode", "CommentedNode", "go/printer", function(Node_, Comments_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Node = $ifaceNil;
			this.Comments = sliceType$2.nil;
			return;
		}
		this.Node = Node_;
		this.Comments = Comments_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType = $ptrType(ast.CommentGroup);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(ast.Expr);
	ptrType$1 = $ptrType(ast.KeyValueExpr);
	ptrType$2 = $ptrType(ast.FieldList);
	ptrType$3 = $ptrType(ast.Ident);
	sliceType$4 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(ast.BasicLit);
	ptrType$5 = $ptrType(ast.Comment);
	sliceType$5 = $sliceType(ptrType$5);
	ptrType$6 = $ptrType($Int);
	ptrType$7 = $ptrType(ast.FuncType);
	ptrType$8 = $ptrType(ast.BinaryExpr);
	ptrType$9 = $ptrType(ast.StarExpr);
	ptrType$10 = $ptrType(ast.UnaryExpr);
	ptrType$11 = $ptrType(ast.BadExpr);
	ptrType$12 = $ptrType(ast.FuncLit);
	ptrType$13 = $ptrType(ast.ParenExpr);
	ptrType$14 = $ptrType(ast.SelectorExpr);
	ptrType$15 = $ptrType(ast.TypeAssertExpr);
	ptrType$16 = $ptrType(ast.IndexExpr);
	ptrType$17 = $ptrType(ast.SliceExpr);
	ptrType$18 = $ptrType(ast.CallExpr);
	ptrType$19 = $ptrType(ast.CompositeLit);
	ptrType$20 = $ptrType(ast.Ellipsis);
	ptrType$21 = $ptrType(ast.ArrayType);
	ptrType$22 = $ptrType(ast.StructType);
	ptrType$23 = $ptrType(ast.InterfaceType);
	ptrType$24 = $ptrType(ast.MapType);
	ptrType$25 = $ptrType(ast.ChanType);
	ptrType$26 = $ptrType(ast.EmptyStmt);
	ptrType$27 = $ptrType(ast.LabeledStmt);
	ptrType$28 = $ptrType(ast.BadStmt);
	ptrType$29 = $ptrType(ast.DeclStmt);
	ptrType$30 = $ptrType(ast.ExprStmt);
	ptrType$31 = $ptrType(ast.SendStmt);
	ptrType$32 = $ptrType(ast.IncDecStmt);
	ptrType$33 = $ptrType(ast.AssignStmt);
	ptrType$34 = $ptrType(ast.GoStmt);
	ptrType$35 = $ptrType(ast.DeferStmt);
	ptrType$36 = $ptrType(ast.ReturnStmt);
	ptrType$37 = $ptrType(ast.BranchStmt);
	ptrType$38 = $ptrType(ast.BlockStmt);
	ptrType$39 = $ptrType(ast.IfStmt);
	ptrType$40 = $ptrType(ast.CaseClause);
	ptrType$41 = $ptrType(ast.SwitchStmt);
	ptrType$42 = $ptrType(ast.TypeSwitchStmt);
	ptrType$43 = $ptrType(ast.CommClause);
	ptrType$44 = $ptrType(ast.SelectStmt);
	ptrType$45 = $ptrType(ast.ForStmt);
	ptrType$46 = $ptrType(ast.RangeStmt);
	sliceType$6 = $sliceType($Bool);
	ptrType$47 = $ptrType(ast.ValueSpec);
	ptrType$48 = $ptrType(ast.ImportSpec);
	ptrType$49 = $ptrType(ast.TypeSpec);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$50 = $ptrType(ast.BadDecl);
	ptrType$51 = $ptrType(ast.GenDecl);
	ptrType$52 = $ptrType(ast.FuncDecl);
	sliceType$7 = $sliceType(whiteSpace);
	ptrType$53 = $ptrType(ast.Field);
	ptrType$54 = $ptrType(ast.File);
	ptrType$55 = $ptrType(CommentedNode);
	sliceType$8 = $sliceType(ast.Stmt);
	sliceType$9 = $sliceType(ast.Decl);
	ptrType$56 = $ptrType(token.FileSet);
	ptrType$57 = $ptrType(tabwriter.Writer);
	sliceType$10 = $sliceType(ptrType$53);
	ptrType$58 = $ptrType(Config);
	mapType = $mapType(ast.Node, $Int);
	ptrType$59 = $ptrType(printer);
	ptrType$60 = $ptrType(trimmer);
	printer.ptr.prototype.linebreak = function(line, min, ws, newSection) {
		var $ptr, line, min, n, newSection, p, printedBreak, ws, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; line = $f.line; min = $f.min; n = $f.n; newSection = $f.newSection; p = $f.p; printedBreak = $f.printedBreak; ws = $f.ws; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		printedBreak = false;
		p = this;
		n = nlimit(line - p.pos.Line >> 0);
		if (n < min) {
			n = min;
		}
		/* */ if (n > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n > 0) { */ case 1:
			$r = p.print(new sliceType$1([new whiteSpace(ws)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (newSection) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (newSection) { */ case 4:
				$r = p.print(new sliceType$1([new whiteSpace(12)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				n = n - (1) >> 0;
			/* } */ case 5:
			/* while (true) { */ case 7:
				/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 8; continue; }
				$r = p.print(new sliceType$1([new whiteSpace(10)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				n = n - (1) >> 0;
			/* } */ $s = 7; continue; case 8:
			printedBreak = true;
		/* } */ case 2:
		return printedBreak;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.linebreak }; } $f.$ptr = $ptr; $f.line = line; $f.min = min; $f.n = n; $f.newSection = newSection; $f.p = p; $f.printedBreak = printedBreak; $f.ws = ws; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.linebreak = function(line, min, ws, newSection) { return this.$val.linebreak(line, min, ws, newSection); };
	printer.ptr.prototype.setComment = function(g) {
		var $ptr, _r, _r$1, g, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; g = $f.g; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (g === ptrType.nil || !p.useNodeComments) {
			return;
		}
		/* */ if (p.comments === sliceType$2.nil) { $s = 1; continue; }
		/* */ if (p.commentInfo.cindex < p.comments.$length) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (p.comments === sliceType$2.nil) { */ case 1:
			p.comments = $makeSlice(sliceType$2, 1);
			$s = 3; continue;
		/* } else if (p.commentInfo.cindex < p.comments.$length) { */ case 2:
			_r = p.posFor((x = g.List, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = p.flush(_r, 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			p.comments = $subslice(p.comments, 0, 1);
			$r = p.internalError(new sliceType$1([new $String("setComment found pending comments")])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		(x$1 = p.comments, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = g));
		p.commentInfo.cindex = 0;
		/* */ if (p.commentInfo.commentOffset === 1073741824) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (p.commentInfo.commentOffset === 1073741824) { */ case 7:
			$r = p.nextComment(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.setComment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.setComment = function(g) { return this.$val.setComment(g); };
	printer.ptr.prototype.identList = function(list, indent) {
		var $ptr, _i, _ref, i, indent, list, mode, p, x, xlist, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; i = $f.i; indent = $f.indent; list = $f.list; mode = $f.mode; p = $f.p; x = $f.x; xlist = $f.xlist; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		xlist = $makeSlice(sliceType$3, list.$length);
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= xlist.$length) ? $throwRuntimeError("index out of range") : xlist.$array[xlist.$offset + i] = x);
			_i++;
		}
		mode = 0;
		if (!indent) {
			mode = 2;
		}
		$r = p.exprList(0, xlist, 1, mode, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.identList }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.i = i; $f.indent = indent; $f.list = list; $f.mode = mode; $f.p = p; $f.x = x; $f.xlist = xlist; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.identList = function(list, indent) { return this.$val.identList(list, indent); };
	printer.ptr.prototype.exprList = function(prev0, list, depth, mode, next0) {
		var $ptr, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _v, depth, endLine, i, i$1, isPair, line, list, mode, needsBlank, needsLinebreak, next, next0, p, pair, prev, prev0, prevBreak, prevLine, prevSize, ratio, size, useFF, ws, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _v = $f._v; depth = $f.depth; endLine = $f.endLine; i = $f.i; i$1 = $f.i$1; isPair = $f.isPair; line = $f.line; list = $f.list; mode = $f.mode; needsBlank = $f.needsBlank; needsLinebreak = $f.needsLinebreak; next = $f.next; next0 = $f.next0; p = $f.p; pair = $f.pair; prev = $f.prev; prev0 = $f.prev0; prevBreak = $f.prevBreak; prevLine = $f.prevLine; prevSize = $f.prevSize; ratio = $f.ratio; size = $f.size; useFF = $f.useFF; ws = $f.ws; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (list.$length === 0) {
			return;
		}
		_r = p.posFor(prev0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		prev = $clone(_r, token.Position);
		_r$1 = p.posFor(next0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		next = $clone(_r$1, token.Position);
		_r$2 = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]).Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.lineFor(_r$2); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		line = _r$3;
		_r$4 = (x = list.$length - 1 >> 0, ((x < 0 || x >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + x])).End(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = p.lineFor(_r$4); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		endLine = _r$5;
		/* */ if (prev.IsValid() && (prev.Line === line) && (line === endLine)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (prev.IsValid() && (prev.Line === line) && (line === endLine)) { */ case 7:
			_ref = list;
			_i = 0;
			/* while (true) { */ case 9:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
				i = _i;
				x$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				/* */ if (i > 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (i > 0) { */ case 11:
					_r$6 = x$1.Pos(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new token.Pos(_r$6), new token.Token(52), new whiteSpace(32)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				$r = p.expr0(x$1, depth); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 9; continue; case 10:
			return;
		/* } */ case 8:
		ws = 0;
		if (((mode & 2) >>> 0) === 0) {
			ws = 62;
		}
		prevBreak = -1;
		if (!(prev.IsValid() && prev.Line < line)) { _v = false; $s = 18; continue s; }
		_r$7 = p.linebreak(line, 0, ws, true); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = _r$7; case 18:
		/* */ if (_v) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (_v) { */ case 16:
			ws = 0;
			prevBreak = 0;
		/* } */ case 17:
		size = 0;
		prevLine = prev.Line;
		_ref$1 = list;
		_i$1 = 0;
		/* while (true) { */ case 20:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 21; continue; }
			i$1 = _i$1;
			x$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r$8 = x$2.Pos(); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = p.lineFor(_r$8); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			line = _r$9;
			useFF = true;
			prevSize = size;
			_r$10 = p.nodeSize(x$2, 1000000); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			size = _r$10;
			_tuple = $assertType(x$2, ptrType$1, true);
			pair = _tuple[0];
			isPair = _tuple[1];
			/* */ if (size <= 1000000 && prev.IsValid() && next.IsValid()) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (size <= 1000000 && prev.IsValid() && next.IsValid()) { */ case 25:
				/* */ if (isPair) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (isPair) { */ case 28:
					_r$11 = p.nodeSize(pair.Key, 1000000); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					size = _r$11;
				/* } */ case 29:
				$s = 27; continue;
			/* } else { */ case 26:
				size = 0;
			/* } */ case 27:
			if (prevSize > 0 && size > 0) {
				if (prevSize <= 20 && size <= 20) {
					useFF = false;
				} else {
					ratio = size / prevSize;
					useFF = ratio <= 0.25 || 4 <= ratio;
				}
			}
			needsLinebreak = 0 < prevLine && prevLine < line;
			/* */ if (i$1 > 0) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (i$1 > 0) { */ case 31:
				/* */ if (!needsLinebreak) { $s = 33; continue; }
				/* */ $s = 34; continue;
				/* if (!needsLinebreak) { */ case 33:
					_r$12 = x$2.Pos(); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new token.Pos(_r$12)])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 34:
				$r = p.print(new sliceType$1([new token.Token(52)])); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				needsBlank = true;
				/* */ if (needsLinebreak) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (needsLinebreak) { */ case 38:
					_r$13 = p.linebreak(line, 0, ws, useFF || (prevBreak + 1 >> 0) < i$1); /* */ $s = 42; case 42: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					/* */ if (_r$13) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (_r$13) { */ case 40:
						ws = 0;
						prevBreak = i$1;
						needsBlank = false;
					/* } */ case 41:
				/* } */ case 39:
				/* */ if (needsBlank) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (needsBlank) { */ case 43:
					$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 44:
			/* } */ case 32:
			/* */ if (list.$length > 1 && isPair && size > 0 && needsLinebreak) { $s = 46; continue; }
			/* */ $s = 47; continue;
			/* if (list.$length > 1 && isPair && size > 0 && needsLinebreak) { */ case 46:
				$r = p.expr(pair.Key); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Pos(pair.Colon), new token.Token(58), new whiteSpace(11)])); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(pair.Value); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 48; continue;
			/* } else { */ case 47:
				$r = p.expr0(x$2, depth); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 48:
			prevLine = line;
			_i$1++;
		/* } */ $s = 20; continue; case 21:
		/* */ if (!((((mode & 1) >>> 0) === 0)) && next.IsValid() && p.pos.Line < next.Line) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (!((((mode & 1) >>> 0) === 0)) && next.IsValid() && p.pos.Line < next.Line) { */ case 53:
			$r = p.print(new sliceType$1([new token.Token(52)])); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((ws === 0) && (((mode & 2) >>> 0) === 0)) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if ((ws === 0) && (((mode & 2) >>> 0) === 0)) { */ case 56:
				$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 57:
			$r = p.print(new sliceType$1([new whiteSpace(12)])); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 54:
		/* */ if ((ws === 0) && (((mode & 2) >>> 0) === 0)) { $s = 60; continue; }
		/* */ $s = 61; continue;
		/* if ((ws === 0) && (((mode & 2) >>> 0) === 0)) { */ case 60:
			$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 62; case 62: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 61:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.exprList }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._v = _v; $f.depth = depth; $f.endLine = endLine; $f.i = i; $f.i$1 = i$1; $f.isPair = isPair; $f.line = line; $f.list = list; $f.mode = mode; $f.needsBlank = needsBlank; $f.needsLinebreak = needsLinebreak; $f.next = next; $f.next0 = next0; $f.p = p; $f.pair = pair; $f.prev = prev; $f.prev0 = prev0; $f.prevBreak = prevBreak; $f.prevLine = prevLine; $f.prevSize = prevSize; $f.ratio = ratio; $f.size = size; $f.useFF = useFF; $f.ws = ws; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.exprList = function(prev0, list, depth, mode, next0) { return this.$val.exprList(prev0, list, depth, mode, next0); };
	printer.ptr.prototype.parameters = function(fields) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _v, closing, fields, i, needsLinebreak, p, par, parLineBeg, parLineEnd, prevLine, ws, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _v = $f._v; closing = $f.closing; fields = $f.fields; i = $f.i; needsLinebreak = $f.needsLinebreak; p = $f.p; par = $f.par; parLineBeg = $f.parLineBeg; parLineEnd = $f.parLineEnd; prevLine = $f.prevLine; ws = $f.ws; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.print(new sliceType$1([new token.Pos(fields.Opening), new token.Token(49)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (fields.List.$length > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (fields.List.$length > 0) { */ case 2:
			_r = p.lineFor(fields.Opening); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			prevLine = _r;
			ws = 62;
			_ref = fields.List;
			_i = 0;
			/* while (true) { */ case 5:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
				i = _i;
				par = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				parLineBeg = 0;
				/* */ if (par.Names.$length > 0) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (par.Names.$length > 0) { */ case 7:
					_r$1 = p.lineFor((x = par.Names, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Pos()); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					parLineBeg = _r$1;
					$s = 9; continue;
				/* } else { */ case 8:
					_r$2 = par.Type.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = p.lineFor(_r$2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					parLineBeg = _r$3;
				/* } */ case 9:
				_r$4 = par.Type.End(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = p.lineFor(_r$4); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				parLineEnd = _r$5;
				needsLinebreak = 0 < prevLine && prevLine < parLineBeg;
				/* */ if (i > 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (i > 0) { */ case 15:
					/* */ if (!needsLinebreak) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!needsLinebreak) { */ case 17:
						_r$6 = par.Pos(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						$r = p.print(new sliceType$1([new token.Pos(_r$6)])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 18:
					$r = p.print(new sliceType$1([new token.Token(52)])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				if (!(needsLinebreak)) { _v = false; $s = 25; continue s; }
				_r$7 = p.linebreak(parLineBeg, 0, ws, true); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_v = _r$7; case 25:
				/* */ if (_v) { $s = 22; continue; }
				/* */ if (i > 0) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if (_v) { */ case 22:
					ws = 0;
					$s = 24; continue;
				/* } else if (i > 0) { */ case 23:
					$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
				/* */ if (par.Names.$length > 0) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (par.Names.$length > 0) { */ case 28:
					$r = p.identList(par.Names, ws === 62); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 29:
				$r = p.expr(stripParensAlways(par.Type)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				prevLine = parLineEnd;
				_i++;
			/* } */ $s = 5; continue; case 6:
			_r$8 = p.lineFor(fields.Closing); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			closing = _r$8;
			/* */ if (0 < prevLine && prevLine < closing) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (0 < prevLine && prevLine < closing) { */ case 34:
				$r = p.print(new sliceType$1([new token.Token(52)])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$9 = p.linebreak(closing, 0, 0, true); /* */ $s = 37; case 37: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 35:
			/* */ if (ws === 0) { $s = 38; continue; }
			/* */ $s = 39; continue;
			/* if (ws === 0) { */ case 38:
				$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 39:
		/* } */ case 3:
		$r = p.print(new sliceType$1([new token.Pos(fields.Closing), new token.Token(54)])); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.parameters }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._v = _v; $f.closing = closing; $f.fields = fields; $f.i = i; $f.needsLinebreak = needsLinebreak; $f.p = p; $f.par = par; $f.parLineBeg = parLineBeg; $f.parLineEnd = parLineEnd; $f.prevLine = prevLine; $f.ws = ws; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.parameters = function(fields) { return this.$val.parameters(fields); };
	printer.ptr.prototype.signature = function(params, result) {
		var $ptr, n, p, params, result, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; n = $f.n; p = $f.p; params = $f.params; result = $f.result; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!(params === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(params === ptrType$2.nil)) { */ case 1:
			$r = p.parameters(params); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.print(new sliceType$1([new token.Token(49), new token.Token(54)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		n = result.NumFields();
		/* */ if (n > 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (n > 0) { */ case 6:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ((n === 1) && (x = result.List, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Names === sliceType$4.nil) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ((n === 1) && (x = result.List, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Names === sliceType$4.nil) { */ case 9:
				$r = p.expr(stripParensAlways((x$1 = result.List, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])).Type)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 10:
			$r = p.parameters(result); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.signature }; } $f.$ptr = $ptr; $f.n = n; $f.p = p; $f.params = params; $f.result = result; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.signature = function(params, result) { return this.$val.signature(params, result); };
	identListSize = function(list, maxSize) {
		var $ptr, _i, _ref, i, list, maxSize, size, x;
		size = 0;
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				size = size + (2) >> 0;
			}
			size = size + (utf8.RuneCountInString(x.Name)) >> 0;
			if (size >= maxSize) {
				break;
			}
			_i++;
		}
		return size;
	};
	printer.ptr.prototype.isOneLineFieldList = function(list) {
		var $ptr, _r, f, list, namesSize, p, typeSize, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; list = $f.list; namesSize = $f.namesSize; p = $f.p; typeSize = $f.typeSize; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!((list.$length === 1))) {
			return false;
		}
		f = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]);
		if (!(f.Tag === ptrType$4.nil) || !(f.Comment === ptrType.nil)) {
			return false;
		}
		namesSize = identListSize(f.Names, 30);
		if (namesSize > 0) {
			namesSize = 1;
		}
		_r = p.nodeSize(f.Type, 30); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typeSize = _r;
		return (namesSize + typeSize >> 0) <= 30;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.isOneLineFieldList }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.list = list; $f.namesSize = namesSize; $f.p = p; $f.typeSize = typeSize; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.isOneLineFieldList = function(list) { return this.$val.isOneLineFieldList(list); };
	printer.ptr.prototype.setLineComment = function(text) {
		var $ptr, p, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.setComment(new ast.CommentGroup.ptr(new sliceType$5([new ast.Comment.ptr(0, text)]))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.setLineComment }; } $f.$ptr = $ptr; $f.p = p; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.setLineComment = function(text) { return this.$val.setLineComment(text); };
	printer.ptr.prototype.fieldList = function(fields, isStruct, isIncomplete) {
		var $ptr, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _v, _v$1, _v$2, extraTabs, f, f$1, f$2, fields, ftyp, hasComments, i, i$1, i$2, isFtyp, isIncomplete, isStruct, lbrace, line, line$1, list, p, rbrace, sep, srcIsOneLine, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; extraTabs = $f.extraTabs; f = $f.f; f$1 = $f.f$1; f$2 = $f.f$2; fields = $f.fields; ftyp = $f.ftyp; hasComments = $f.hasComments; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; isFtyp = $f.isFtyp; isIncomplete = $f.isIncomplete; isStruct = $f.isStruct; lbrace = $f.lbrace; line = $f.line; line$1 = $f.line$1; list = $f.list; p = $f.p; rbrace = $f.rbrace; sep = $f.sep; srcIsOneLine = $f.srcIsOneLine; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = [line];
		line$1 = [line$1];
		p = this;
		lbrace = fields.Opening;
		list = fields.List;
		rbrace = fields.Closing;
		if (isIncomplete) { _v = true; $s = 1; continue s; }
		_r = p.posFor(rbrace); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.commentBefore(_r); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1; case 1:
		hasComments = _v;
		if (!(new token.Pos(lbrace).IsValid() && new token.Pos(rbrace).IsValid())) { _v$1 = false; $s = 4; continue s; }
		_r$2 = p.lineFor(lbrace); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.lineFor(rbrace); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$2 === _r$3; case 4:
		srcIsOneLine = _v$1;
		/* */ if (!hasComments && srcIsOneLine) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!hasComments && srcIsOneLine) { */ case 7:
			/* */ if (list.$length === 0) { $s = 9; continue; }
			if (!(isStruct)) { _v$2 = false; $s = 12; continue s; }
			_r$4 = p.isOneLineFieldList(list); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v$2 = _r$4; case 12:
			/* */ if (_v$2) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (list.$length === 0) { */ case 9:
				$r = p.print(new sliceType$1([new token.Pos(lbrace), new token.Token(51), new token.Pos(rbrace), new token.Token(56)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } else if (_v$2) { */ case 10:
				$r = p.print(new sliceType$1([new token.Pos(lbrace), new token.Token(51), new whiteSpace(32)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				f = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]);
				_ref = f.Names;
				_i = 0;
				/* while (true) { */ case 16:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 17; continue; }
					i = _i;
					x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					/* */ if (i > 0) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (i > 0) { */ case 18:
						$r = p.print(new sliceType$1([new token.Token(52), new whiteSpace(32)])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 19:
					$r = p.expr(x); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 16; continue; case 17:
				/* */ if (f.Names.$length > 0) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (f.Names.$length > 0) { */ case 22:
					$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
				$r = p.expr(f.Type); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new whiteSpace(32), new token.Pos(rbrace), new token.Token(56)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return;
			/* } */ case 11:
		/* } */ case 8:
		$r = p.print(new sliceType$1([new whiteSpace(32), new token.Pos(lbrace), new token.Token(51), new whiteSpace(62)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (hasComments || list.$length > 0) { $s = 28; continue; }
		/* */ $s = 29; continue;
		/* if (hasComments || list.$length > 0) { */ case 28:
			$r = p.print(new sliceType$1([new whiteSpace(12)])); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 29:
		/* */ if (isStruct) { $s = 31; continue; }
		/* */ $s = 32; continue;
		/* if (isStruct) { */ case 31:
			sep = 11;
			if (list.$length === 1) {
				sep = 32;
			}
			line[0] = 0;
			_ref$1 = list;
			_i$1 = 0;
			/* while (true) { */ case 34:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 35; continue; }
				i$1 = _i$1;
				f$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				/* */ if (i$1 > 0) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (i$1 > 0) { */ case 36:
					_r$5 = f$1.Pos(); /* */ $s = 38; case 38: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = p.lineFor(_r$5); /* */ $s = 39; case 39: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = p.linebreak(_r$6, 1, 0, p.linesFrom(line[0]) > 0); /* */ $s = 40; case 40: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$7;
				/* } */ case 37:
				extraTabs = 0;
				$r = p.setComment(f$1.Doc); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.recordLine((line.$ptr || (line.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, line))));
				/* */ if (f$1.Names.$length > 0) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (f$1.Names.$length > 0) { */ case 42:
					$r = p.identList(f$1.Names, false); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new whiteSpace(sep)])); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.expr(f$1.Type); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					extraTabs = 1;
					$s = 44; continue;
				/* } else { */ case 43:
					$r = p.expr(f$1.Type); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					extraTabs = 2;
				/* } */ case 44:
				/* */ if (!(f$1.Tag === ptrType$4.nil)) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (!(f$1.Tag === ptrType$4.nil)) { */ case 49:
					/* */ if (f$1.Names.$length > 0 && (sep === 11)) { $s = 51; continue; }
					/* */ $s = 52; continue;
					/* if (f$1.Names.$length > 0 && (sep === 11)) { */ case 51:
						$r = p.print(new sliceType$1([new whiteSpace(sep)])); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 52:
					$r = p.print(new sliceType$1([new whiteSpace(sep)])); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.expr(f$1.Tag); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					extraTabs = 0;
				/* } */ case 50:
				/* */ if (!(f$1.Comment === ptrType.nil)) { $s = 56; continue; }
				/* */ $s = 57; continue;
				/* if (!(f$1.Comment === ptrType.nil)) { */ case 56:
					/* while (true) { */ case 58:
						/* if (!(extraTabs > 0)) { break; } */ if(!(extraTabs > 0)) { $s = 59; continue; }
						$r = p.print(new sliceType$1([new whiteSpace(sep)])); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						extraTabs = extraTabs - (1) >> 0;
					/* } */ $s = 58; continue; case 59:
					$r = p.setComment(f$1.Comment); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 57:
				_i$1++;
			/* } */ $s = 34; continue; case 35:
			/* */ if (isIncomplete) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (isIncomplete) { */ case 62:
				/* */ if (list.$length > 0) { $s = 64; continue; }
				/* */ $s = 65; continue;
				/* if (list.$length > 0) { */ case 64:
					$r = p.print(new sliceType$1([new whiteSpace(12)])); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 65:
				_r$8 = p.posFor(rbrace); /* */ $s = 67; case 67: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = p.flush(_r$8, 56); /* */ $s = 68; case 68: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
				$r = p.setLineComment("// contains filtered or unexported fields"); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
			$s = 33; continue;
		/* } else { */ case 32:
			line$1[0] = 0;
			_ref$2 = list;
			_i$2 = 0;
			/* while (true) { */ case 70:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 71; continue; }
				i$2 = _i$2;
				f$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				/* */ if (i$2 > 0) { $s = 72; continue; }
				/* */ $s = 73; continue;
				/* if (i$2 > 0) { */ case 72:
					_r$10 = f$2.Pos(); /* */ $s = 74; case 74: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = p.lineFor(_r$10); /* */ $s = 75; case 75: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_r$12 = p.linebreak(_r$11, 1, 0, p.linesFrom(line$1[0]) > 0); /* */ $s = 76; case 76: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
				/* } */ case 73:
				$r = p.setComment(f$2.Doc); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.recordLine((line$1.$ptr || (line$1.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, line$1))));
				_tuple = $assertType(f$2.Type, ptrType$7, true);
				ftyp = _tuple[0];
				isFtyp = _tuple[1];
				/* */ if (isFtyp) { $s = 78; continue; }
				/* */ $s = 79; continue;
				/* if (isFtyp) { */ case 78:
					$r = p.expr((x$1 = f$2.Names, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]))); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.signature(ftyp.Params, ftyp.Results); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 80; continue;
				/* } else { */ case 79:
					$r = p.expr(f$2.Type); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 80:
				$r = p.setComment(f$2.Comment); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$2++;
			/* } */ $s = 70; continue; case 71:
			/* */ if (isIncomplete) { $s = 85; continue; }
			/* */ $s = 86; continue;
			/* if (isIncomplete) { */ case 85:
				/* */ if (list.$length > 0) { $s = 87; continue; }
				/* */ $s = 88; continue;
				/* if (list.$length > 0) { */ case 87:
					$r = p.print(new sliceType$1([new whiteSpace(12)])); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 88:
				_r$13 = p.posFor(rbrace); /* */ $s = 90; case 90: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$14 = p.flush(_r$13, 56); /* */ $s = 91; case 91: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
				$r = p.setLineComment("// contains filtered or unexported methods"); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 86:
		/* } */ case 33:
		$r = p.print(new sliceType$1([new whiteSpace(60), new whiteSpace(12), new token.Pos(rbrace), new token.Token(56)])); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.fieldList }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.extraTabs = extraTabs; $f.f = f; $f.f$1 = f$1; $f.f$2 = f$2; $f.fields = fields; $f.ftyp = ftyp; $f.hasComments = hasComments; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.isFtyp = isFtyp; $f.isIncomplete = isIncomplete; $f.isStruct = isStruct; $f.lbrace = lbrace; $f.line = line; $f.line$1 = line$1; $f.list = list; $f.p = p; $f.rbrace = rbrace; $f.sep = sep; $f.srcIsOneLine = srcIsOneLine; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.fieldList = function(fields, isStruct, isIncomplete) { return this.$val.fieldList(fields, isStruct, isIncomplete); };
	walkBinary = function(e) {
		var $ptr, _1, _2, _ref, _ref$1, _tuple, _tuple$1, e, h4, h4$1, h5, h5$1, has4, has5, l, maxProblem, mp, mp$1, r, r$1, r$2;
		has4 = false;
		has5 = false;
		maxProblem = 0;
		_1 = new token.Token(e.Op).Precedence();
		if (_1 === 4) {
			has4 = true;
		} else if (_1 === 5) {
			has5 = true;
		}
		_ref = e.X;
		switch (0) { default: if ($assertType(_ref, ptrType$8, true)[1]) {
			l = _ref.$val;
			if (new token.Token(l.Op).Precedence() < new token.Token(e.Op).Precedence()) {
				break;
			}
			_tuple = walkBinary(l);
			h4 = _tuple[0];
			h5 = _tuple[1];
			mp = _tuple[2];
			has4 = has4 || h4;
			has5 = has5 || h5;
			if (maxProblem < mp) {
				maxProblem = mp;
			}
		} }
		_ref$1 = e.Y;
		switch (0) { default: if ($assertType(_ref$1, ptrType$8, true)[1]) {
			r = _ref$1.$val;
			if (new token.Token(r.Op).Precedence() <= new token.Token(e.Op).Precedence()) {
				break;
			}
			_tuple$1 = walkBinary(r);
			h4$1 = _tuple$1[0];
			h5$1 = _tuple$1[1];
			mp$1 = _tuple$1[2];
			has4 = has4 || h4$1;
			has5 = has5 || h5$1;
			if (maxProblem < mp$1) {
				maxProblem = mp$1;
			}
		} else if ($assertType(_ref$1, ptrType$9, true)[1]) {
			r$1 = _ref$1.$val;
			if (e.Op === 15) {
				maxProblem = 5;
			}
		} else if ($assertType(_ref$1, ptrType$10, true)[1]) {
			r$2 = _ref$1.$val;
			_2 = new token.Token(e.Op).String() + new token.Token(r$2.Op).String();
			if (_2 === "/*" || _2 === "&&" || _2 === "&^") {
				maxProblem = 5;
			} else if (_2 === "++" || _2 === "--") {
				if (maxProblem < 4) {
					maxProblem = 4;
				}
			}
		} }
		return [has4, has5, maxProblem];
	};
	cutoff = function(e, depth) {
		var $ptr, _tuple, depth, e, has4, has5, maxProblem;
		_tuple = walkBinary(e);
		has4 = _tuple[0];
		has5 = _tuple[1];
		maxProblem = _tuple[2];
		if (maxProblem > 0) {
			return maxProblem + 1 >> 0;
		}
		if (has4 && has5) {
			if (depth === 1) {
				return 5;
			}
			return 4;
		}
		if (depth === 1) {
			return 6;
		}
		return 4;
	};
	diffPrec = function(expr, prec) {
		var $ptr, _tuple, expr, ok, prec, x;
		_tuple = $assertType(expr, ptrType$8, true);
		x = _tuple[0];
		ok = _tuple[1];
		if (!ok || !((prec === new token.Token(x.Op).Precedence()))) {
			return 1;
		}
		return 0;
	};
	reduceDepth = function(depth) {
		var $ptr, depth;
		depth = depth - (1) >> 0;
		if (depth < 1) {
			depth = 1;
		}
		return depth;
	};
	printer.ptr.prototype.binaryExpr = function(x, prec1, cutoff$1, depth) {
		var $ptr, _r, _r$1, _r$2, cutoff$1, depth, p, prec, prec1, printBlank, ws, x, xline, yline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; cutoff$1 = $f.cutoff$1; depth = $f.depth; p = $f.p; prec = $f.prec; prec1 = $f.prec1; printBlank = $f.printBlank; ws = $f.ws; x = $f.x; xline = $f.xline; yline = $f.yline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prec = new token.Token(x.Op).Precedence();
		/* */ if (prec < prec1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (prec < prec1) { */ case 1:
			$r = p.print(new sliceType$1([new token.Token(49)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr0(x, reduceDepth(depth)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Token(54)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		printBlank = prec < cutoff$1;
		ws = 62;
		$r = p.expr1(x.X, prec, depth + diffPrec(x.X, prec) >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (printBlank) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (printBlank) { */ case 7:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		xline = p.pos.Line;
		_r = x.Y.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.lineFor(_r); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		yline = _r$1;
		$r = p.print(new sliceType$1([new token.Pos(x.OpPos), new token.Token(x.Op)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!((xline === yline)) && xline > 0 && yline > 0) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((xline === yline)) && xline > 0 && yline > 0) { */ case 13:
			_r$2 = p.linebreak(yline, 1, ws, true); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (_r$2) { */ case 15:
				ws = 0;
				printBlank = false;
			/* } */ case 16:
		/* } */ case 14:
		/* */ if (printBlank) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (printBlank) { */ case 18:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 19:
		$r = p.expr1(x.Y, prec + 1 >> 0, depth + 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (ws === 0) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (ws === 0) { */ case 22:
			$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 23:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.binaryExpr }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.cutoff$1 = cutoff$1; $f.depth = depth; $f.p = p; $f.prec = prec; $f.prec1 = prec1; $f.printBlank = printBlank; $f.ws = ws; $f.x = x; $f.xline = xline; $f.yline = yline; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.binaryExpr = function(x, prec1, cutoff$1, depth) { return this.$val.binaryExpr(x, prec1, cutoff$1, depth); };
	isBinary = function(expr) {
		var $ptr, _tuple, expr, ok;
		_tuple = $assertType(expr, ptrType$8, true);
		ok = _tuple[1];
		return ok;
	};
	printer.ptr.prototype.expr1 = function(expr, prec1, depth) {
		var $ptr, _3, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _ref$1, _tuple, _tuple$1, _v, depth, expr, hasParens, i, indices, mode, ok, p, prec1, wasIndented, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; depth = $f.depth; expr = $f.expr; hasParens = $f.hasParens; i = $f.i; indices = $f.indices; mode = $f.mode; ok = $f.ok; p = $f.p; prec1 = $f.prec1; wasIndented = $f.wasIndented; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = expr.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Pos(_r)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = expr;
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$23, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$24, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, ptrType$25, true)[1]) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ($assertType(_ref, ptrType$11, true)[1]) { */ case 3:
			x = _ref.$val;
			$r = p.print(new sliceType$1([new $String("BadExpr")])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 4:
			x$1 = _ref.$val;
			$r = p.print(new sliceType$1([x$1])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 5:
			x$2 = _ref.$val;
			/* */ if (depth < 1) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (depth < 1) { */ case 29:
				$r = p.internalError(new sliceType$1([new $String("depth < 1:"), new $Int(depth)])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				depth = 1;
			/* } */ case 30:
			$r = p.binaryExpr(x$2, prec1, cutoff(x$2, depth), depth); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 6:
			x$3 = _ref.$val;
			$r = p.expr(x$3.Key); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(x$3.Colon), new token.Token(58), new whiteSpace(32)])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(x$3.Value); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 7:
			x$4 = _ref.$val;
			/* */ if (6 < prec1) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (6 < prec1) { */ case 36:
				$r = p.print(new sliceType$1([new token.Token(49)])); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Token(14)])); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(x$4.X); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Token(54)])); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 38; continue;
			/* } else { */ case 37:
				$r = p.print(new sliceType$1([new token.Token(14)])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(x$4.X); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 38:
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 8:
			x$5 = _ref.$val;
			/* */ if (6 < prec1) { $s = 45; continue; }
			/* */ $s = 46; continue;
			/* if (6 < prec1) { */ case 45:
				$r = p.print(new sliceType$1([new token.Token(49)])); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(x$5); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Token(54)])); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 47; continue;
			/* } else { */ case 46:
				$r = p.print(new sliceType$1([new token.Token(x$5.Op)])); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (x$5.Op === 79) { $s = 52; continue; }
				/* */ $s = 53; continue;
				/* if (x$5.Op === 79) { */ case 52:
					$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 53:
				$r = p.expr1(x$5.X, 6, depth); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 47:
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 9:
			x$6 = _ref.$val;
			$r = p.print(new sliceType$1([x$6])); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 10:
			x$7 = _ref.$val;
			$r = p.expr(x$7.Type); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = x$7.Type.Pos(); /* */ $s = 58; case 58: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = p.distanceFrom(_r$1); /* */ $s = 59; case 59: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = p.adjBlock(_r$2, 32, x$7.Body); /* */ $s = 60; case 60: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 11:
			x$8 = _ref.$val;
			_tuple = $assertType(x$8.X, ptrType$13, true);
			hasParens = _tuple[1];
			/* */ if (hasParens) { $s = 61; continue; }
			/* */ $s = 62; continue;
			/* if (hasParens) { */ case 61:
				$r = p.expr0(x$8.X, depth); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 63; continue;
			/* } else { */ case 62:
				$r = p.print(new sliceType$1([new token.Token(49)])); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr0(x$8.X, reduceDepth(depth)); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Pos(x$8.Rparen), new token.Token(54)])); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 12:
			x$9 = _ref.$val;
			_r$3 = p.selectorExpr(x$9, depth, false); /* */ $s = 68; case 68: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 13:
			x$10 = _ref.$val;
			$r = p.expr1(x$10.X, 7, depth); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Token(53), new token.Pos(x$10.Lparen), new token.Token(49)])); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(x$10.Type, $ifaceNil))) { $s = 71; continue; }
			/* */ $s = 72; continue;
			/* if (!($interfaceIsEqual(x$10.Type, $ifaceNil))) { */ case 71:
				$r = p.expr(x$10.Type); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 73; continue;
			/* } else { */ case 72:
				$r = p.print(new sliceType$1([new token.Token(84)])); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 73:
			$r = p.print(new sliceType$1([new token.Pos(x$10.Rparen), new token.Token(54)])); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 14:
			x$11 = _ref.$val;
			$r = p.expr1(x$11.X, 7, 1); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(x$11.Lbrack), new token.Token(50)])); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr0(x$11.Index, depth + 1 >> 0); /* */ $s = 79; case 79: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(x$11.Rbrack), new token.Token(55)])); /* */ $s = 80; case 80: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 15:
			x$12 = _ref.$val;
			$r = p.expr1(x$12.X, 7, 1); /* */ $s = 81; case 81: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(x$12.Lbrack), new token.Token(50)])); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			indices = new sliceType$3([x$12.Low, x$12.High]);
			if (!($interfaceIsEqual(x$12.Max, $ifaceNil))) {
				indices = $append(indices, x$12.Max);
			}
			_ref$1 = indices;
			_i = 0;
			/* while (true) { */ case 83:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 84; continue; }
				i = _i;
				y = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				/* */ if (i > 0) { $s = 85; continue; }
				/* */ $s = 86; continue;
				/* if (i > 0) { */ case 85:
					x$24 = (x$23 = i - 1 >> 0, ((x$23 < 0 || x$23 >= indices.$length) ? $throwRuntimeError("index out of range") : indices.$array[indices.$offset + x$23]));
					/* */ if (depth <= 1 && !($interfaceIsEqual(x$24, $ifaceNil)) && !($interfaceIsEqual(y, $ifaceNil)) && (isBinary(x$24) || isBinary(y))) { $s = 87; continue; }
					/* */ $s = 88; continue;
					/* if (depth <= 1 && !($interfaceIsEqual(x$24, $ifaceNil)) && !($interfaceIsEqual(y, $ifaceNil)) && (isBinary(x$24) || isBinary(y))) { */ case 87:
						$r = p.print(new sliceType$1([new whiteSpace(32), new token.Token(58), new whiteSpace(32)])); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 89; continue;
					/* } else { */ case 88:
						$r = p.print(new sliceType$1([new token.Token(58)])); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 89:
				/* } */ case 86:
				/* */ if (!($interfaceIsEqual(y, $ifaceNil))) { $s = 92; continue; }
				/* */ $s = 93; continue;
				/* if (!($interfaceIsEqual(y, $ifaceNil))) { */ case 92:
					$r = p.expr0(y, depth + 1 >> 0); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 93:
				_i++;
			/* } */ $s = 83; continue; case 84:
			$r = p.print(new sliceType$1([new token.Pos(x$12.Rbrack), new token.Token(55)])); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$18, true)[1]) { */ case 16:
			x$13 = _ref.$val;
			if (x$13.Args.$length > 1) {
				depth = depth + (1) >> 0;
			}
			wasIndented = false;
			_tuple$1 = $assertType(x$13.Fun, ptrType$7, true);
			ok = _tuple$1[1];
			/* */ if (ok) { $s = 96; continue; }
			/* */ $s = 97; continue;
			/* if (ok) { */ case 96:
				$r = p.print(new sliceType$1([new token.Token(49)])); /* */ $s = 99; case 99: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$4 = p.possibleSelectorExpr(x$13.Fun, 7, depth); /* */ $s = 100; case 100: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				wasIndented = _r$4;
				$r = p.print(new sliceType$1([new token.Token(54)])); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 98; continue;
			/* } else { */ case 97:
				_r$5 = p.possibleSelectorExpr(x$13.Fun, 7, depth); /* */ $s = 102; case 102: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				wasIndented = _r$5;
			/* } */ case 98:
			$r = p.print(new sliceType$1([new token.Pos(x$13.Lparen), new token.Token(49)])); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (new token.Pos(x$13.Ellipsis).IsValid()) { $s = 104; continue; }
			/* */ $s = 105; continue;
			/* if (new token.Pos(x$13.Ellipsis).IsValid()) { */ case 104:
				$r = p.exprList(x$13.Lparen, x$13.Args, depth, 0, x$13.Ellipsis); /* */ $s = 107; case 107: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Pos(x$13.Ellipsis), new token.Token(48)])); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				if (!(new token.Pos(x$13.Rparen).IsValid())) { _v = false; $s = 111; continue s; }
				_r$6 = p.lineFor(x$13.Ellipsis); /* */ $s = 112; case 112: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$7 = p.lineFor(x$13.Rparen); /* */ $s = 113; case 113: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_v = _r$6 < _r$7; case 111:
				/* */ if (_v) { $s = 109; continue; }
				/* */ $s = 110; continue;
				/* if (_v) { */ case 109:
					$r = p.print(new sliceType$1([new token.Token(52), new whiteSpace(12)])); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 110:
				$s = 106; continue;
			/* } else { */ case 105:
				$r = p.exprList(x$13.Lparen, x$13.Args, depth, 1, x$13.Rparen); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 106:
			$r = p.print(new sliceType$1([new token.Pos(x$13.Rparen), new token.Token(54)])); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (wasIndented) { $s = 117; continue; }
			/* */ $s = 118; continue;
			/* if (wasIndented) { */ case 117:
				$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 118:
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 17:
			x$14 = _ref.$val;
			/* */ if (!($interfaceIsEqual(x$14.Type, $ifaceNil))) { $s = 120; continue; }
			/* */ $s = 121; continue;
			/* if (!($interfaceIsEqual(x$14.Type, $ifaceNil))) { */ case 120:
				$r = p.expr1(x$14.Type, 7, depth); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 121:
			$r = p.print(new sliceType$1([new token.Pos(x$14.Lbrace), new token.Token(51)])); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.exprList(x$14.Lbrace, x$14.Elts, 1, 1, x$14.Rbrace); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			mode = 2;
			if (x$14.Elts.$length > 0) {
				mode = mode | (1);
			}
			$r = p.print(new sliceType$1([new pmode(mode), new token.Pos(x$14.Rbrace), new token.Token(56), new pmode(mode)])); /* */ $s = 125; case 125: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 18:
			x$15 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(48)])); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(x$15.Elt, $ifaceNil))) { $s = 127; continue; }
			/* */ $s = 128; continue;
			/* if (!($interfaceIsEqual(x$15.Elt, $ifaceNil))) { */ case 127:
				$r = p.expr(x$15.Elt); /* */ $s = 129; case 129: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 128:
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 19:
			x$16 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(50)])); /* */ $s = 130; case 130: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(x$16.Len, $ifaceNil))) { $s = 131; continue; }
			/* */ $s = 132; continue;
			/* if (!($interfaceIsEqual(x$16.Len, $ifaceNil))) { */ case 131:
				$r = p.expr(x$16.Len); /* */ $s = 133; case 133: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 132:
			$r = p.print(new sliceType$1([new token.Token(55)])); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(x$16.Elt); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 20:
			x$17 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(82)])); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.fieldList(x$17.Fields, true, x$17.Incomplete); /* */ $s = 137; case 137: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 21:
			x$18 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(71)])); /* */ $s = 138; case 138: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.signature(x$18.Params, x$18.Results); /* */ $s = 139; case 139: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$23, true)[1]) { */ case 22:
			x$19 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(76)])); /* */ $s = 140; case 140: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.fieldList(x$19.Methods, false, x$19.Incomplete); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$24, true)[1]) { */ case 23:
			x$20 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(77), new token.Token(50)])); /* */ $s = 142; case 142: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(x$20.Key); /* */ $s = 143; case 143: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Token(55)])); /* */ $s = 144; case 144: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(x$20.Value); /* */ $s = 145; case 145: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else if ($assertType(_ref, ptrType$25, true)[1]) { */ case 24:
			x$21 = _ref.$val;
				_3 = x$21.Dir;
				/* */ if (_3 === 3) { $s = 147; continue; }
				/* */ if (_3 === 2) { $s = 148; continue; }
				/* */ if (_3 === 1) { $s = 149; continue; }
				/* */ $s = 150; continue;
				/* if (_3 === 3) { */ case 147:
					$r = p.print(new sliceType$1([new token.Token(63)])); /* */ $s = 151; case 151: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 150; continue;
				/* } else if (_3 === 2) { */ case 148:
					$r = p.print(new sliceType$1([new token.Token(36), new token.Token(63)])); /* */ $s = 152; case 152: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 150; continue;
				/* } else if (_3 === 1) { */ case 149:
					$r = p.print(new sliceType$1([new token.Token(63), new token.Pos(x$21.Arrow), new token.Token(36)])); /* */ $s = 153; case 153: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 150:
			case 146:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 154; case 154: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(x$21.Value); /* */ $s = 155; case 155: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 26; continue;
		/* } else { */ case 25:
			x$22 = _ref;
			$panic(new $String("unreachable"));
		/* } */ case 26:
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.expr1 }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.depth = depth; $f.expr = expr; $f.hasParens = hasParens; $f.i = i; $f.indices = indices; $f.mode = mode; $f.ok = ok; $f.p = p; $f.prec1 = prec1; $f.wasIndented = wasIndented; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.expr1 = function(expr, prec1, depth) { return this.$val.expr1(expr, prec1, depth); };
	printer.ptr.prototype.possibleSelectorExpr = function(expr, prec1, depth) {
		var $ptr, _r, _tuple, depth, expr, ok, p, prec1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; depth = $f.depth; expr = $f.expr; ok = $f.ok; p = $f.p; prec1 = $f.prec1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_tuple = $assertType(expr, ptrType$14, true);
		x = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = p.selectorExpr(x, depth, true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		$r = p.expr1(expr, prec1, depth); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.possibleSelectorExpr }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.depth = depth; $f.expr = expr; $f.ok = ok; $f.p = p; $f.prec1 = prec1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.possibleSelectorExpr = function(expr, prec1, depth) { return this.$val.possibleSelectorExpr(expr, prec1, depth); };
	printer.ptr.prototype.selectorExpr = function(x, depth, isMethod) {
		var $ptr, _r, depth, isMethod, line, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; depth = $f.depth; isMethod = $f.isMethod; line = $f.line; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.expr1(x.X, 7, depth); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Token(53)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = p.lineFor(x.Sel.Pos()); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		line = _r;
		/* */ if (p.pos.IsValid() && p.pos.Line < line) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.pos.IsValid() && p.pos.Line < line) { */ case 4:
			$r = p.print(new sliceType$1([new whiteSpace(62), new whiteSpace(10), new token.Pos(x.Sel.Pos()), x.Sel])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!isMethod) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!isMethod) { */ case 7:
				$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			return true;
		/* } */ case 5:
		$r = p.print(new sliceType$1([new token.Pos(x.Sel.Pos()), x.Sel])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.selectorExpr }; } $f.$ptr = $ptr; $f._r = _r; $f.depth = depth; $f.isMethod = isMethod; $f.line = line; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.selectorExpr = function(x, depth, isMethod) { return this.$val.selectorExpr(x, depth, isMethod); };
	printer.ptr.prototype.expr0 = function(x, depth) {
		var $ptr, depth, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; depth = $f.depth; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.expr1(x, 0, depth); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.expr0 }; } $f.$ptr = $ptr; $f.depth = depth; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.expr0 = function(x, depth) { return this.$val.expr0(x, depth); };
	printer.ptr.prototype.expr = function(x) {
		var $ptr, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.expr1(x, 0, 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.expr }; } $f.$ptr = $ptr; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.expr = function(x) { return this.$val.expr(x); };
	printer.ptr.prototype.stmtList = function(list, nindent, nextIsRBrace) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, i, isEmpty, line, list, lt, nextIsRBrace, nindent, p, s, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; i = $f.i; isEmpty = $f.isEmpty; line = $f.line; list = $f.list; lt = $f.lt; nextIsRBrace = $f.nextIsRBrace; nindent = $f.nindent; p = $f.p; s = $f.s; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = [line];
		p = this;
		/* */ if (nindent > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (nindent > 0) { */ case 1:
			$r = p.print(new sliceType$1([new whiteSpace(62)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		line[0] = 0;
		i = 0;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = $assertType(s, ptrType$26, true);
			isEmpty = _tuple[1];
			/* */ if (!isEmpty) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!isEmpty) { */ case 6:
				/* */ if (p.output.$length > 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (p.output.$length > 0) { */ case 8:
					_r = s.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = p.lineFor(_r); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = p.linebreak(_r$1, 1, 0, (i === 0) || (nindent === 0) || p.linesFrom(line[0]) > 0); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
				/* } */ case 9:
				p.recordLine((line.$ptr || (line.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, line))));
				$r = p.stmt(s, nextIsRBrace && (i === (list.$length - 1 >> 0))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				t = s;
				while (true) {
					_tuple$1 = $assertType(t, ptrType$27, true);
					lt = _tuple$1[0];
					if (lt === ptrType$27.nil) {
						break;
					}
					line[0] = line[0] + (1) >> 0;
					t = lt.Stmt;
				}
				i = i + (1) >> 0;
			/* } */ case 7:
			_i++;
		/* } */ $s = 4; continue; case 5:
		/* */ if (nindent > 0) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (nindent > 0) { */ case 14:
			$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 15:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.stmtList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.i = i; $f.isEmpty = isEmpty; $f.line = line; $f.list = list; $f.lt = lt; $f.nextIsRBrace = nextIsRBrace; $f.nindent = nindent; $f.p = p; $f.s = s; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.stmtList = function(list, nindent, nextIsRBrace) { return this.$val.stmtList(list, nindent, nextIsRBrace); };
	printer.ptr.prototype.block = function(b, nindent) {
		var $ptr, _r, _r$1, b, nindent, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; b = $f.b; nindent = $f.nindent; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.print(new sliceType$1([new token.Pos(b.Lbrace), new token.Token(51)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.stmtList(b.List, nindent, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = p.lineFor(b.Rbrace); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.linebreak(_r, 1, 0, true); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$r = p.print(new sliceType$1([new token.Pos(b.Rbrace), new token.Token(56)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.block }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.nindent = nindent; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.block = function(b, nindent) { return this.$val.block(b, nindent); };
	isTypeName = function(x) {
		var $ptr, _ref, t, t$1, x;
		_ref = x;
		if ($assertType(_ref, ptrType$3, true)[1]) {
			t = _ref.$val;
			return true;
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			t$1 = _ref.$val;
			return isTypeName(t$1.X);
		}
		return false;
	};
	stripParens = function(x) {
		var $ptr, _r, _tuple, px, strip, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; px = $f.px; strip = $f.strip; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		strip = [strip];
		_tuple = $assertType(x, ptrType$13, true);
		px = _tuple[0];
		strip[0] = _tuple[1];
		/* */ if (strip[0]) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (strip[0]) { */ case 1:
			$r = ast.Inspect(px.X, (function(strip) { return function(node) {
				var $ptr, _ref, node, x$1, x$2;
				_ref = node;
				if ($assertType(_ref, ptrType$13, true)[1]) {
					x$1 = _ref.$val;
					return false;
				} else if ($assertType(_ref, ptrType$19, true)[1]) {
					x$2 = _ref.$val;
					if (isTypeName(x$2.Type)) {
						strip[0] = false;
					}
					return false;
				}
				return true;
			}; })(strip)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (strip[0]) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (strip[0]) { */ case 4:
				_r = stripParens(px.X); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return _r;
			/* } */ case 5:
		/* } */ case 2:
		return x;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stripParens }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.px = px; $f.strip = strip; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	stripParensAlways = function(x) {
		var $ptr, _tuple, ok, x, x$1;
		_tuple = $assertType(x, ptrType$13, true);
		x$1 = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return stripParensAlways(x$1.X);
		}
		return x;
	};
	printer.ptr.prototype.controlClause = function(isForStmt, init, expr, post) {
		var $ptr, _r, _r$1, expr, init, isForStmt, needsBlank, p, post, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; expr = $f.expr; init = $f.init; isForStmt = $f.isForStmt; needsBlank = $f.needsBlank; p = $f.p; post = $f.post; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		needsBlank = false;
		/* */ if ($interfaceIsEqual(init, $ifaceNil) && $interfaceIsEqual(post, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(init, $ifaceNil) && $interfaceIsEqual(post, $ifaceNil)) { */ case 2:
			/* */ if (!($interfaceIsEqual(expr, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(expr, $ifaceNil))) { */ case 5:
				_r = stripParens(expr); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.expr(_r); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				needsBlank = true;
			/* } */ case 6:
			$s = 4; continue;
		/* } else { */ case 3:
			/* */ if (!($interfaceIsEqual(init, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(init, $ifaceNil))) { */ case 9:
				$r = p.stmt(init, false); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			$r = p.print(new sliceType$1([new token.Token(57), new whiteSpace(32)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(expr, $ifaceNil))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!($interfaceIsEqual(expr, $ifaceNil))) { */ case 13:
				_r$1 = stripParens(expr); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.expr(_r$1); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				needsBlank = true;
			/* } */ case 14:
			/* */ if (isForStmt) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (isForStmt) { */ case 17:
				$r = p.print(new sliceType$1([new token.Token(57), new whiteSpace(32)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				needsBlank = false;
				/* */ if (!($interfaceIsEqual(post, $ifaceNil))) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!($interfaceIsEqual(post, $ifaceNil))) { */ case 20:
					$r = p.stmt(post, false); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					needsBlank = true;
				/* } */ case 21:
			/* } */ case 18:
		/* } */ case 4:
		/* */ if (needsBlank) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (needsBlank) { */ case 23:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 24:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.controlClause }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.expr = expr; $f.init = init; $f.isForStmt = isForStmt; $f.needsBlank = needsBlank; $f.p = p; $f.post = post; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.controlClause = function(isForStmt, init, expr, post) { return this.$val.controlClause(isForStmt, init, expr, post); };
	printer.ptr.prototype.indentList = function(list) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, b, e, line, list, n, p, x, x$1, xb, xe, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; b = $f.b; e = $f.e; line = $f.line; list = $f.list; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; xb = $f.xb; xe = $f.xe; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (list.$length >= 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (list.$length >= 2) { */ case 1:
			_r = (0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]).Pos(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = p.lineFor(_r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b = _r$1;
			_r$2 = (x = list.$length - 1 >> 0, ((x < 0 || x >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + x])).End(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = p.lineFor(_r$2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			e = _r$3;
			/* */ if (0 < b && b < e) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (0 < b && b < e) { */ case 7:
				n = 0;
				line = b;
				_ref = list;
				_i = 0;
				/* while (true) { */ case 9:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
					x$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_r$4 = x$1.Pos(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_r$5 = p.lineFor(_r$4); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					xb = _r$5;
					_r$6 = x$1.End(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = p.lineFor(_r$6); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					xe = _r$7;
					if (line < xb) {
						return true;
					}
					if (xb < xe) {
						n = n + (1) >> 0;
					}
					line = xe;
					_i++;
				/* } */ $s = 9; continue; case 10:
				return n > 1;
			/* } */ case 8:
		/* } */ case 2:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.indentList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.b = b; $f.e = e; $f.line = line; $f.list = list; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.xb = xb; $f.xe = xe; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.indentList = function(list) { return this.$val.indentList(list); };
	printer.ptr.prototype.stmt = function(stmt, nextIsRBrace) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _v, body, depth, e, isEmpty, nextIsRBrace, p, s, s$1, s$10, s$11, s$12, s$13, s$14, s$15, s$16, s$17, s$18, s$19, s$2, s$20, s$21, s$3, s$4, s$5, s$6, s$7, s$8, s$9, stmt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _v = $f._v; body = $f.body; depth = $f.depth; e = $f.e; isEmpty = $f.isEmpty; nextIsRBrace = $f.nextIsRBrace; p = $f.p; s = $f.s; s$1 = $f.s$1; s$10 = $f.s$10; s$11 = $f.s$11; s$12 = $f.s$12; s$13 = $f.s$13; s$14 = $f.s$14; s$15 = $f.s$15; s$16 = $f.s$16; s$17 = $f.s$17; s$18 = $f.s$18; s$19 = $f.s$19; s$2 = $f.s$2; s$20 = $f.s$20; s$21 = $f.s$21; s$3 = $f.s$3; s$4 = $f.s$4; s$5 = $f.s$5; s$6 = $f.s$6; s$7 = $f.s$7; s$8 = $f.s$8; s$9 = $f.s$9; stmt = $f.stmt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = stmt.Pos(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Pos(_r)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = stmt;
		/* */ if ($assertType(_ref, ptrType$28, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$29, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$26, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$27, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$30, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$31, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$32, true)[1]) { $s = 9; continue; }
		/* */ if ($assertType(_ref, ptrType$33, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ptrType$34, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ptrType$35, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ptrType$36, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, ptrType$37, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, ptrType$38, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$39, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, ptrType$40, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, ptrType$41, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, ptrType$42, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, ptrType$43, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, ptrType$44, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, ptrType$45, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, ptrType$46, true)[1]) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* switch (0) { default: if ($assertType(_ref, ptrType$28, true)[1]) { */ case 3:
			s = _ref.$val;
			$r = p.print(new sliceType$1([new $String("BadStmt")])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$29, true)[1]) { */ case 4:
			s$1 = _ref.$val;
			$r = p.decl(s$1.Decl); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$26, true)[1]) { */ case 5:
			s$2 = _ref.$val;
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$27, true)[1]) { */ case 6:
			s$3 = _ref.$val;
			$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(s$3.Label); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(s$3.Colon), new token.Token(58), new whiteSpace(62)])); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple = $assertType(s$3.Stmt, ptrType$26, true);
			e = _tuple[0];
			isEmpty = _tuple[1];
			/* */ if (isEmpty) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (isEmpty) { */ case 31:
				/* */ if (!nextIsRBrace) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (!nextIsRBrace) { */ case 34:
					$r = p.print(new sliceType$1([new whiteSpace(10), new token.Pos(e.Pos()), new token.Token(57)])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 25; continue;
				/* } */ case 35:
				$s = 33; continue;
			/* } else { */ case 32:
				_r$1 = s$3.Stmt.Pos(); /* */ $s = 37; case 37: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = p.lineFor(_r$1); /* */ $s = 38; case 38: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = p.linebreak(_r$2, 1, 0, true); /* */ $s = 39; case 39: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
			/* } */ case 33:
			$r = p.stmt(s$3.Stmt, nextIsRBrace); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$30, true)[1]) { */ case 7:
			s$4 = _ref.$val;
			$r = p.expr0(s$4.X, 1); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$31, true)[1]) { */ case 8:
			s$5 = _ref.$val;
			$r = p.expr0(s$5.Chan, 1); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new whiteSpace(32), new token.Pos(s$5.Arrow), new token.Token(36), new whiteSpace(32)])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr0(s$5.Value, 1); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$32, true)[1]) { */ case 9:
			s$6 = _ref.$val;
			$r = p.expr0(s$6.X, 2); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(s$6.TokPos), new token.Token(s$6.Tok)])); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$33, true)[1]) { */ case 10:
			s$7 = _ref.$val;
			depth = 1;
			if (s$7.Lhs.$length > 1 && s$7.Rhs.$length > 1) {
				depth = depth + (1) >> 0;
			}
			_r$4 = s$7.Pos(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$r = p.exprList(_r$4, s$7.Lhs, depth, 0, s$7.TokPos); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new whiteSpace(32), new token.Pos(s$7.TokPos), new token.Token(s$7.Tok), new whiteSpace(32)])); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.exprList(s$7.TokPos, s$7.Rhs, depth, 0, 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$34, true)[1]) { */ case 11:
			s$8 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(72), new whiteSpace(32)])); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(s$8.Call); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$35, true)[1]) { */ case 12:
			s$9 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(67), new whiteSpace(32)])); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(s$9.Call); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$36, true)[1]) { */ case 13:
			s$10 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(80)])); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(s$10.Results === sliceType$3.nil)) { $s = 56; continue; }
			/* */ $s = 57; continue;
			/* if (!(s$10.Results === sliceType$3.nil)) { */ case 56:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$5 = p.indentList(s$10.Results); /* */ $s = 62; case 62: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5) { $s = 59; continue; }
				/* */ $s = 60; continue;
				/* if (_r$5) { */ case 59:
					$r = p.print(new sliceType$1([new whiteSpace(62)])); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.exprList(s$10.Pos(), s$10.Results, 1, 2, 0); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new whiteSpace(60)])); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 61; continue;
				/* } else { */ case 60:
					$r = p.exprList(s$10.Pos(), s$10.Results, 1, 0, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 61:
			/* } */ case 57:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$37, true)[1]) { */ case 14:
			s$11 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(s$11.Tok)])); /* */ $s = 67; case 67: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(s$11.Label === ptrType$3.nil)) { $s = 68; continue; }
			/* */ $s = 69; continue;
			/* if (!(s$11.Label === ptrType$3.nil)) { */ case 68:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(s$11.Label); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 69:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$38, true)[1]) { */ case 15:
			s$12 = _ref.$val;
			$r = p.block(s$12, 1); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$39, true)[1]) { */ case 16:
			s$13 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(74)])); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.controlClause(false, s$13.Init, s$13.Cond, $ifaceNil); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.block(s$13.Body, 1); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(s$13.Else, $ifaceNil))) { $s = 76; continue; }
			/* */ $s = 77; continue;
			/* if (!($interfaceIsEqual(s$13.Else, $ifaceNil))) { */ case 76:
				$r = p.print(new sliceType$1([new whiteSpace(32), new token.Token(68), new whiteSpace(32)])); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_ref$1 = s$13.Else;
				/* */ if ($assertType(_ref$1, ptrType$38, true)[1] || $assertType(_ref$1, ptrType$39, true)[1]) { $s = 79; continue; }
				/* */ $s = 80; continue;
				/* if ($assertType(_ref$1, ptrType$38, true)[1] || $assertType(_ref$1, ptrType$39, true)[1]) { */ case 79:
					$r = p.stmt(s$13.Else, nextIsRBrace); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 81; continue;
				/* } else { */ case 80:
					$r = p.print(new sliceType$1([new token.Token(51), new whiteSpace(62), new whiteSpace(12)])); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.stmt(s$13.Else, true); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new whiteSpace(60), new whiteSpace(12), new token.Token(56)])); /* */ $s = 85; case 85: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 81:
			/* } */ case 77:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$40, true)[1]) { */ case 17:
			s$14 = _ref.$val;
			/* */ if (!(s$14.List === sliceType$3.nil)) { $s = 86; continue; }
			/* */ $s = 87; continue;
			/* if (!(s$14.List === sliceType$3.nil)) { */ case 86:
				$r = p.print(new sliceType$1([new token.Token(62), new whiteSpace(32)])); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.exprList(s$14.Pos(), s$14.List, 1, 0, s$14.Colon); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 88; continue;
			/* } else { */ case 87:
				$r = p.print(new sliceType$1([new token.Token(66)])); /* */ $s = 91; case 91: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 88:
			$r = p.print(new sliceType$1([new token.Pos(s$14.Colon), new token.Token(58)])); /* */ $s = 92; case 92: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.stmtList(s$14.Body, 1, nextIsRBrace); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$41, true)[1]) { */ case 18:
			s$15 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(83)])); /* */ $s = 94; case 94: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.controlClause(false, s$15.Init, s$15.Tag, $ifaceNil); /* */ $s = 95; case 95: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.block(s$15.Body, 0); /* */ $s = 96; case 96: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$42, true)[1]) { */ case 19:
			s$16 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(83)])); /* */ $s = 97; case 97: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(s$16.Init, $ifaceNil))) { $s = 98; continue; }
			/* */ $s = 99; continue;
			/* if (!($interfaceIsEqual(s$16.Init, $ifaceNil))) { */ case 98:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 100; case 100: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.stmt(s$16.Init, false); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new token.Token(57)])); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 99:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 103; case 103: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.stmt(s$16.Assign, false); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 105; case 105: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.block(s$16.Body, 0); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$43, true)[1]) { */ case 20:
			s$17 = _ref.$val;
			/* */ if (!($interfaceIsEqual(s$17.Comm, $ifaceNil))) { $s = 107; continue; }
			/* */ $s = 108; continue;
			/* if (!($interfaceIsEqual(s$17.Comm, $ifaceNil))) { */ case 107:
				$r = p.print(new sliceType$1([new token.Token(62), new whiteSpace(32)])); /* */ $s = 110; case 110: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.stmt(s$17.Comm, false); /* */ $s = 111; case 111: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 109; continue;
			/* } else { */ case 108:
				$r = p.print(new sliceType$1([new token.Token(66)])); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 109:
			$r = p.print(new sliceType$1([new token.Pos(s$17.Colon), new token.Token(58)])); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.stmtList(s$17.Body, 1, nextIsRBrace); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$44, true)[1]) { */ case 21:
			s$18 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(81), new whiteSpace(32)])); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			body = s$18.Body;
			if (!(body.List.$length === 0)) { _v = false; $s = 119; continue s; }
			_r$6 = p.posFor(body.Rbrace); /* */ $s = 120; case 120: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = p.commentBefore(_r$6); /* */ $s = 121; case 121: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v = !_r$7; case 119:
			/* */ if (_v) { $s = 116; continue; }
			/* */ $s = 117; continue;
			/* if (_v) { */ case 116:
				$r = p.print(new sliceType$1([new token.Pos(body.Lbrace), new token.Token(51), new token.Pos(body.Rbrace), new token.Token(56)])); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 118; continue;
			/* } else { */ case 117:
				$r = p.block(body, 0); /* */ $s = 123; case 123: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 118:
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$45, true)[1]) { */ case 22:
			s$19 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(70)])); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.controlClause(true, s$19.Init, s$19.Cond, s$19.Post); /* */ $s = 125; case 125: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.block(s$19.Body, 1); /* */ $s = 126; case 126: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else if ($assertType(_ref, ptrType$46, true)[1]) { */ case 23:
			s$20 = _ref.$val;
			$r = p.print(new sliceType$1([new token.Token(70), new whiteSpace(32)])); /* */ $s = 127; case 127: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(s$20.Key, $ifaceNil))) { $s = 128; continue; }
			/* */ $s = 129; continue;
			/* if (!($interfaceIsEqual(s$20.Key, $ifaceNil))) { */ case 128:
				$r = p.expr(s$20.Key); /* */ $s = 130; case 130: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!($interfaceIsEqual(s$20.Value, $ifaceNil))) { $s = 131; continue; }
				/* */ $s = 132; continue;
				/* if (!($interfaceIsEqual(s$20.Value, $ifaceNil))) { */ case 131:
					_r$8 = s$20.Value.Pos(); /* */ $s = 133; case 133: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.print(new sliceType$1([new token.Pos(_r$8), new token.Token(52), new whiteSpace(32)])); /* */ $s = 134; case 134: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = p.expr(s$20.Value); /* */ $s = 135; case 135: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 132:
				$r = p.print(new sliceType$1([new whiteSpace(32), new token.Pos(s$20.TokPos), new token.Token(s$20.Tok), new whiteSpace(32)])); /* */ $s = 136; case 136: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 129:
			$r = p.print(new sliceType$1([new token.Token(79), new whiteSpace(32)])); /* */ $s = 137; case 137: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$9 = stripParens(s$20.X); /* */ $s = 138; case 138: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$r = p.expr(_r$9); /* */ $s = 139; case 139: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 140; case 140: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.block(s$20.Body, 1); /* */ $s = 141; case 141: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 25; continue;
		/* } else { */ case 24:
			s$21 = _ref;
			$panic(new $String("unreachable"));
		/* } } */ case 25:
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.stmt }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._v = _v; $f.body = body; $f.depth = depth; $f.e = e; $f.isEmpty = isEmpty; $f.nextIsRBrace = nextIsRBrace; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.s$10 = s$10; $f.s$11 = s$11; $f.s$12 = s$12; $f.s$13 = s$13; $f.s$14 = s$14; $f.s$15 = s$15; $f.s$16 = s$16; $f.s$17 = s$17; $f.s$18 = s$18; $f.s$19 = s$19; $f.s$2 = s$2; $f.s$20 = s$20; $f.s$21 = s$21; $f.s$3 = s$3; $f.s$4 = s$4; $f.s$5 = s$5; $f.s$6 = s$6; $f.s$7 = s$7; $f.s$8 = s$8; $f.s$9 = s$9; $f.stmt = stmt; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.stmt = function(stmt, nextIsRBrace) { return this.$val.stmt(stmt, nextIsRBrace); };
	keepTypeColumn = function(specs) {
		var $ptr, _i, _ref, i, i0, keepType, m, populate, s, specs, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; i = $f.i; i0 = $f.i0; keepType = $f.keepType; m = $f.m; populate = $f.populate; s = $f.s; specs = $f.specs; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = [m];
		m[0] = $makeSlice(sliceType$6, specs.$length);
		populate = (function(m) { return function(i, j, keepType) {
			var $ptr, i, j, keepType;
			if (keepType) {
				while (true) {
					if (!(i < j)) { break; }
					((i < 0 || i >= m[0].$length) ? $throwRuntimeError("index out of range") : m[0].$array[m[0].$offset + i] = true);
					i = i + (1) >> 0;
				}
			}
		}; })(m);
		i0 = -1;
		keepType = false;
		_ref = specs;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			t = $assertType(s, ptrType$47);
			/* */ if (!(t.Values === sliceType$3.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(t.Values === sliceType$3.nil)) { */ case 3:
				if (i0 < 0) {
					i0 = i;
					keepType = false;
				}
				$s = 5; continue;
			/* } else { */ case 4:
				/* */ if (i0 >= 0) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (i0 >= 0) { */ case 6:
					$r = populate(i0, i, keepType); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i0 = -1;
				/* } */ case 7:
			/* } */ case 5:
			if (!($interfaceIsEqual(t.Type, $ifaceNil))) {
				keepType = true;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ if (i0 >= 0) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (i0 >= 0) { */ case 9:
			$r = populate(i0, specs.$length, keepType); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		return m[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: keepTypeColumn }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.i = i; $f.i0 = i0; $f.keepType = keepType; $f.m = m; $f.populate = populate; $f.s = s; $f.specs = specs; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.ptr.prototype.valueSpec = function(s, keepType) {
		var $ptr, extraTabs, keepType, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; extraTabs = $f.extraTabs; keepType = $f.keepType; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.setComment(s.Doc); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.identList(s.Names, false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		extraTabs = 3;
		/* */ if (!($interfaceIsEqual(s.Type, $ifaceNil)) || keepType) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(s.Type, $ifaceNil)) || keepType) { */ case 3:
			$r = p.print(new sliceType$1([new whiteSpace(11)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			extraTabs = extraTabs - (1) >> 0;
		/* } */ case 4:
		/* */ if (!($interfaceIsEqual(s.Type, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(s.Type, $ifaceNil))) { */ case 6:
			$r = p.expr(s.Type); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ if (!(s.Values === sliceType$3.nil)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(s.Values === sliceType$3.nil)) { */ case 9:
			$r = p.print(new sliceType$1([new whiteSpace(11), new token.Token(42), new whiteSpace(32)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.exprList(0, s.Values, 1, 0, 0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			extraTabs = extraTabs - (1) >> 0;
		/* } */ case 10:
		/* */ if (!(s.Comment === ptrType.nil)) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!(s.Comment === ptrType.nil)) { */ case 13:
			/* while (true) { */ case 15:
				/* if (!(extraTabs > 0)) { break; } */ if(!(extraTabs > 0)) { $s = 16; continue; }
				$r = p.print(new sliceType$1([new whiteSpace(11)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				extraTabs = extraTabs - (1) >> 0;
			/* } */ $s = 15; continue; case 16:
			$r = p.setComment(s.Comment); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 14:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.valueSpec }; } $f.$ptr = $ptr; $f.extraTabs = extraTabs; $f.keepType = keepType; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.valueSpec = function(s, keepType) { return this.$val.valueSpec(s, keepType); };
	sanitizeImportPath = function(lit) {
		var $ptr, _i, _ref, _rune, _tuple, err, lit, r, s;
		if (!((lit.Kind === 9))) {
			return lit;
		}
		_tuple = strconv.Unquote(lit.Value);
		s = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return lit;
		}
		if (s === "") {
			return lit;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (!unicode.IsGraphic(r) || unicode.IsSpace(r) || strings.ContainsRune("!\"#$%&'()*,:;<=>?[\\]^{|}`\xEF\xBF\xBD", r)) {
				return lit;
			}
			_i += _rune[1];
		}
		s = strconv.Quote(s);
		if (s === lit.Value) {
			return lit;
		}
		return new ast.BasicLit.ptr(lit.ValuePos, 9, s);
	};
	printer.ptr.prototype.spec = function(spec, n, doIndent) {
		var $ptr, _ref, doIndent, n, p, s, s$1, s$2, s$3, spec, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; doIndent = $f.doIndent; n = $f.n; p = $f.p; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; s$3 = $f.s$3; spec = $f.spec; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = spec;
		/* */ if ($assertType(_ref, ptrType$48, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$47, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$49, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$48, true)[1]) { */ case 1:
			s = _ref.$val;
			$r = p.setComment(s.Doc); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(s.Name === ptrType$3.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(s.Name === ptrType$3.nil)) { */ case 7:
				$r = p.expr(s.Name); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			$r = p.expr(sanitizeImportPath(s.Path)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.setComment(s.Comment); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new token.Pos(s.EndPos)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$47, true)[1]) { */ case 2:
			s$1 = _ref.$val;
			/* */ if (!((n === 1))) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!((n === 1))) { */ case 14:
				$r = p.internalError(new sliceType$1([new $String("expected n = 1; got"), new $Int(n)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			$r = p.setComment(s$1.Doc); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.identList(s$1.Names, doIndent); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!($interfaceIsEqual(s$1.Type, $ifaceNil))) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (!($interfaceIsEqual(s$1.Type, $ifaceNil))) { */ case 19:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.expr(s$1.Type); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
			/* */ if (!(s$1.Values === sliceType$3.nil)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (!(s$1.Values === sliceType$3.nil)) { */ case 23:
				$r = p.print(new sliceType$1([new whiteSpace(32), new token.Token(42), new whiteSpace(32)])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.exprList(0, s$1.Values, 1, 0, 0); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			$r = p.setComment(s$1.Comment); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$49, true)[1]) { */ case 3:
			s$2 = _ref.$val;
			$r = p.setComment(s$2.Doc); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.expr(s$2.Name); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (n === 1) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (n === 1) { */ case 30:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 32; continue;
			/* } else { */ case 31:
				$r = p.print(new sliceType$1([new whiteSpace(11)])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 32:
			$r = p.expr(s$2.Type); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.setComment(s$2.Comment); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else { */ case 4:
			s$3 = _ref;
			$panic(new $String("unreachable"));
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.spec }; } $f.$ptr = $ptr; $f._ref = _ref; $f.doIndent = doIndent; $f.n = n; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.s$3 = s$3; $f.spec = spec; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.spec = function(spec, n, doIndent) { return this.$val.spec(spec, n, doIndent); };
	printer.ptr.prototype.genDecl = function(d) {
		var $ptr, _i, _i$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, d, i, i$1, keepType, line, line$1, n, p, s, s$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; d = $f.d; i = $f.i; i$1 = $f.i$1; keepType = $f.keepType; line = $f.line; line$1 = $f.line$1; n = $f.n; p = $f.p; s = $f.s; s$1 = $f.s$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = [line];
		line$1 = [line$1];
		p = this;
		$r = p.setComment(d.Doc); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Pos(d.Pos()), new token.Token(d.Tok), new whiteSpace(32)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (new token.Pos(d.Lparen).IsValid()) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (new token.Pos(d.Lparen).IsValid()) { */ case 3:
			$r = p.print(new sliceType$1([new token.Pos(d.Lparen), new token.Token(49)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = d.Specs.$length;
			/* */ if (n > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (n > 0) { */ case 7:
				$r = p.print(new sliceType$1([new whiteSpace(62), new whiteSpace(12)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (n > 1 && ((d.Tok === 64) || (d.Tok === 85))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (n > 1 && ((d.Tok === 64) || (d.Tok === 85))) { */ case 10:
					_r = keepTypeColumn(d.Specs); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					keepType = _r;
					line[0] = 0;
					_ref = d.Specs;
					_i = 0;
					/* while (true) { */ case 14:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 15; continue; }
						i = _i;
						s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						/* */ if (i > 0) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if (i > 0) { */ case 16:
							_r$1 = s.Pos(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_r$2 = p.lineFor(_r$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_r$3 = p.linebreak(_r$2, 1, 0, p.linesFrom(line[0]) > 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_r$3;
						/* } */ case 17:
						p.recordLine((line.$ptr || (line.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, line))));
						$r = p.valueSpec($assertType(s, ptrType$47), ((i < 0 || i >= keepType.$length) ? $throwRuntimeError("index out of range") : keepType.$array[keepType.$offset + i])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i++;
					/* } */ $s = 14; continue; case 15:
					$s = 12; continue;
				/* } else { */ case 11:
					line$1[0] = 0;
					_ref$1 = d.Specs;
					_i$1 = 0;
					/* while (true) { */ case 22:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 23; continue; }
						i$1 = _i$1;
						s$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
						/* */ if (i$1 > 0) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if (i$1 > 0) { */ case 24:
							_r$4 = s$1.Pos(); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_r$5 = p.lineFor(_r$4); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							_r$6 = p.linebreak(_r$5, 1, 0, p.linesFrom(line$1[0]) > 0); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							_r$6;
						/* } */ case 25:
						p.recordLine((line$1.$ptr || (line$1.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, line$1))));
						$r = p.spec(s$1, n, false); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_i$1++;
					/* } */ $s = 22; continue; case 23:
				/* } */ case 12:
				$r = p.print(new sliceType$1([new whiteSpace(60), new whiteSpace(12)])); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			$r = p.print(new sliceType$1([new token.Pos(d.Rparen), new token.Token(54)])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else { */ case 4:
			$r = p.spec((x = d.Specs, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), 1, true); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.genDecl }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f.d = d; $f.i = i; $f.i$1 = i$1; $f.keepType = keepType; $f.line = line; $f.line$1 = line$1; $f.n = n; $f.p = p; $f.s = s; $f.s$1 = s$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.genDecl = function(d) { return this.$val.genDecl(d); };
	printer.ptr.prototype.nodeSize = function(n, maxSize) {
		var $ptr, _entry, _i, _key, _key$1, _r, _ref, _tuple, buf, cfg, ch, err, found, maxSize, n, p, size, size$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; buf = $f.buf; cfg = $f.cfg; ch = $f.ch; err = $f.err; found = $f.found; maxSize = $f.maxSize; n = $f.n; p = $f.p; size = $f.size; size$1 = $f.size$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		size = 0;
		p = this;
		_tuple = (_entry = p.nodeSizes[ast.Node.keyFor(n)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		size$1 = _tuple[0];
		found = _tuple[1];
		if (found) {
			size = size$1;
			return size;
		}
		size = maxSize + 1 >> 0;
		_key = n; (p.nodeSizes || $throwRuntimeError("assignment to entry in nil map"))[ast.Node.keyFor(_key)] = { k: _key, v: size };
		cfg = new Config.ptr(1, 0, 0);
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r = cfg.fprint(buf[0], p.fset, n, p.nodeSizes); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return size;
		}
		if (buf[0].Len() <= maxSize) {
			_ref = buf[0].Bytes();
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (ch < 32) {
					return size;
				}
				_i++;
			}
			size = buf[0].Len();
			_key$1 = n; (p.nodeSizes || $throwRuntimeError("assignment to entry in nil map"))[ast.Node.keyFor(_key$1)] = { k: _key$1, v: size };
		}
		return size;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.nodeSize }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.buf = buf; $f.cfg = cfg; $f.ch = ch; $f.err = err; $f.found = found; $f.maxSize = maxSize; $f.n = n; $f.p = p; $f.size = size; $f.size$1 = size$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.nodeSize = function(n, maxSize) { return this.$val.nodeSize(n, maxSize); };
	printer.ptr.prototype.bodySize = function(b, maxSize) {
		var $ptr, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, b, bodySize, i, maxSize, p, pos1, pos2, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; b = $f.b; bodySize = $f.bodySize; i = $f.i; maxSize = $f.maxSize; p = $f.p; pos1 = $f.pos1; pos2 = $f.pos2; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		pos1 = b.Pos();
		pos2 = b.Rbrace;
		if (!(new token.Pos(pos1).IsValid() && new token.Pos(pos2).IsValid())) { _v = false; $s = 3; continue s; }
		_r = p.lineFor(pos1); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.lineFor(pos2); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !((_r === _r$1)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			return maxSize + 1 >> 0;
		/* } */ case 2:
		if (b.List.$length > 5) {
			return maxSize + 1 >> 0;
		}
		_r$2 = p.posFor(pos2); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = p.commentSizeBefore(_r$2); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		bodySize = _r$3;
		_ref = b.List;
		_i = 0;
		/* while (true) { */ case 8:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (bodySize > maxSize) {
				/* break; */ $s = 9; continue;
			}
			if (i > 0) {
				bodySize = bodySize + (2) >> 0;
			}
			_r$4 = p.nodeSize(s, maxSize); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			bodySize = bodySize + (_r$4) >> 0;
			_i++;
		/* } */ $s = 8; continue; case 9:
		return bodySize;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.bodySize }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.b = b; $f.bodySize = bodySize; $f.i = i; $f.maxSize = maxSize; $f.p = p; $f.pos1 = pos1; $f.pos2 = pos2; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.bodySize = function(b, maxSize) { return this.$val.bodySize(b, maxSize); };
	printer.ptr.prototype.adjBlock = function(headerSize, sep, b) {
		var $ptr, _i, _r, _ref, b, headerSize, i, p, s, sep, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; headerSize = $f.headerSize; i = $f.i; p = $f.p; s = $f.s; sep = $f.sep; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (b === ptrType$38.nil) {
			return;
		}
		_r = p.bodySize(b, 100); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if ((headerSize + _r >> 0) <= 100) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((headerSize + _r >> 0) <= 100) { */ case 1:
			$r = p.print(new sliceType$1([new whiteSpace(sep), new token.Pos(b.Lbrace), new token.Token(51)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (b.List.$length > 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (b.List.$length > 0) { */ case 5:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_ref = b.List;
				_i = 0;
				/* while (true) { */ case 8:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
					i = _i;
					s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					/* */ if (i > 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (i > 0) { */ case 10:
						$r = p.print(new sliceType$1([new token.Token(57), new whiteSpace(32)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
					$r = p.stmt(s, i === (b.List.$length - 1 >> 0)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 8; continue; case 9:
				$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$r = p.print(new sliceType$1([new pmode(2), new token.Pos(b.Rbrace), new token.Token(56), new pmode(2)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		/* */ if (!((sep === 0))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!((sep === 0))) { */ case 16:
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		$r = p.block(b, 1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.adjBlock }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.headerSize = headerSize; $f.i = i; $f.p = p; $f.s = s; $f.sep = sep; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.adjBlock = function(headerSize, sep, b) { return this.$val.adjBlock(headerSize, sep, b); };
	printer.ptr.prototype.distanceFrom = function(from) {
		var $ptr, _r, f, from, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; f = $f.f; from = $f.from; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (new token.Pos(from).IsValid() && p.pos.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (new token.Pos(from).IsValid() && p.pos.IsValid()) { */ case 1:
			_r = p.posFor(from); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f = $clone(_r, token.Position);
			if (f.Line === p.pos.Line) {
				return p.pos.Column - f.Column >> 0;
			}
		/* } */ case 2:
		return 1073741824;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.distanceFrom }; } $f.$ptr = $ptr; $f._r = _r; $f.f = f; $f.from = from; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.distanceFrom = function(from) { return this.$val.distanceFrom(from); };
	printer.ptr.prototype.funcDecl = function(d) {
		var $ptr, _r, _r$1, _r$2, d, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.setComment(d.Doc); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = d.Pos(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Pos(_r), new token.Token(71), new whiteSpace(32)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (!(d.Recv === ptrType$2.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(d.Recv === ptrType$2.nil)) { */ case 4:
			$r = p.parameters(d.Recv); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = p.print(new sliceType$1([new whiteSpace(32)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$r = p.expr(d.Name); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.signature(d.Type.Params, d.Type.Results); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = d.Pos(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = p.distanceFrom(_r$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = p.adjBlock(_r$2, 11, d.Body); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.funcDecl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.funcDecl = function(d) { return this.$val.funcDecl(d); };
	printer.ptr.prototype.decl = function(decl) {
		var $ptr, _ref, d, d$1, d$2, d$3, decl, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ref = $f._ref; d = $f.d; d$1 = $f.d$1; d$2 = $f.d$2; d$3 = $f.d$3; decl = $f.decl; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = decl;
		/* */ if ($assertType(_ref, ptrType$50, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$51, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$52, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$50, true)[1]) { */ case 1:
			d = _ref.$val;
			$r = p.print(new sliceType$1([new token.Pos(d.Pos()), new $String("BadDecl")])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$51, true)[1]) { */ case 2:
			d$1 = _ref.$val;
			$r = p.genDecl(d$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if ($assertType(_ref, ptrType$52, true)[1]) { */ case 3:
			d$2 = _ref.$val;
			$r = p.funcDecl(d$2); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else { */ case 4:
			d$3 = _ref;
			$panic(new $String("unreachable"));
		/* } */ case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.decl }; } $f.$ptr = $ptr; $f._ref = _ref; $f.d = d; $f.d$1 = d$1; $f.d$2 = d$2; $f.d$3 = d$3; $f.decl = decl; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.decl = function(decl) { return this.$val.decl(decl); };
	declToken = function(decl) {
		var $ptr, _ref, d, d$1, decl, tok;
		tok = 0;
		tok = 0;
		_ref = decl;
		if ($assertType(_ref, ptrType$51, true)[1]) {
			d = _ref.$val;
			tok = d.Tok;
		} else if ($assertType(_ref, ptrType$52, true)[1]) {
			d$1 = _ref.$val;
			tok = 71;
		}
		return tok;
	};
	printer.ptr.prototype.declList = function(list) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, d, list, min, p, prev, tok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; d = $f.d; list = $f.list; min = $f.min; p = $f.p; prev = $f.prev; tok = $f.tok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		tok = 0;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			prev = tok;
			tok = declToken(d);
			/* */ if (p.output.$length > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.output.$length > 0) { */ case 3:
				min = 1;
				if (!((prev === tok)) || !(getDoc(d) === ptrType.nil)) {
					min = 2;
				}
				_r = d.Pos(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = p.lineFor(_r); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = p.linebreak(_r$1, min, 0, false); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 4:
			$r = p.decl(d); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.declList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.d = d; $f.list = list; $f.min = min; $f.p = p; $f.prev = prev; $f.tok = tok; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.declList = function(list) { return this.$val.declList(list); };
	printer.ptr.prototype.file = function(src) {
		var $ptr, p, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; p = $f.p; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = p.setComment(src.Doc); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new token.Pos(src.Pos()), new token.Token(78), new whiteSpace(32)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.expr(src.Name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.declList(src.Decls); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.print(new sliceType$1([new whiteSpace(10)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.file }; } $f.$ptr = $ptr; $f.p = p; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.file = function(src) { return this.$val.file(src); };
	printer.ptr.prototype.init = function(cfg, fset, nodeSizes) {
		var $ptr, cfg, fset, nodeSizes, p;
		p = this;
		Config.copy(p.Config, cfg);
		p.fset = fset;
		token.Position.copy(p.pos, new token.Position.ptr("", 0, 1, 1));
		token.Position.copy(p.out, new token.Position.ptr("", 0, 1, 1));
		p.wsbuf = $makeSlice(sliceType$7, 0, 16);
		p.nodeSizes = nodeSizes;
		p.cachedPos = -1;
	};
	printer.prototype.init = function(cfg, fset, nodeSizes) { return this.$val.init(cfg, fset, nodeSizes); };
	printer.ptr.prototype.internalError = function(msg) {
		var $ptr, _r, _r$1, _r$2, msg, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; msg = $f.msg; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			_r = p.pos.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = fmt.Print(new sliceType$1([new $String(_r + ": ")])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_r$2 = fmt.Println(msg); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$panic(new $String("go/printer"));
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.internalError }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.msg = msg; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.internalError = function(msg) { return this.$val.internalError(msg); };
	printer.ptr.prototype.commentsHaveNewline = function(list) {
		var $ptr, _i, _r, _r$1, _ref, _v, c, i, line, list, p, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _v = $f._v; c = $f.c; i = $f.i; line = $f.line; list = $f.list; p = $f.p; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.lineFor((0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]).Pos()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		line = _r;
		_ref = list;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(i > 0)) { _v = false; $s = 6; continue s; }
			_r$1 = p.lineFor(((i < 0 || i >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + i]).Pos()); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = !((_r$1 === line)); case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				return true;
			/* } */ case 5:
			t = c.Text;
			if (t.length >= 2 && ((t.charCodeAt(1) === 47) || strings.Contains(t, "\n"))) {
				return true;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.commentsHaveNewline }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._v = _v; $f.c = c; $f.i = i; $f.line = line; $f.list = list; $f.p = p; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.commentsHaveNewline = function(list) { return this.$val.commentsHaveNewline(list); };
	printer.ptr.prototype.nextComment = function() {
		var $ptr, _r, _r$1, c, list, p, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; c = $f.c; list = $f.list; p = $f.p; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* while (true) { */ case 1:
			/* if (!(p.commentInfo.cindex < p.comments.$length)) { break; } */ if(!(p.commentInfo.cindex < p.comments.$length)) { $s = 2; continue; }
			c = (x = p.comments, x$1 = p.commentInfo.cindex, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			p.commentInfo.cindex = p.commentInfo.cindex + (1) >> 0;
			list = c.List;
			/* */ if (list.$length > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (list.$length > 0) { */ case 3:
				p.commentInfo.comment = c;
				_r = p.posFor((0 >= list.$length ? $throwRuntimeError("index out of range") : list.$array[list.$offset + 0]).Pos()); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				p.commentInfo.commentOffset = _r.Offset;
				_r$1 = p.commentsHaveNewline(list); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				p.commentInfo.commentNewline = _r$1;
				return;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		p.commentInfo.commentOffset = 1073741824;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.nextComment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.list = list; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.nextComment = function() { return this.$val.nextComment(); };
	printer.ptr.prototype.commentBefore = function(next) {
		var $ptr, next, p;
		next = $clone(next, token.Position);
		p = this;
		return p.commentInfo.commentOffset < next.Offset && (!p.impliedSemi || !p.commentInfo.commentNewline);
	};
	printer.prototype.commentBefore = function(next) { return this.$val.commentBefore(next); };
	printer.ptr.prototype.commentSizeBefore = function(next) {
		var $ptr, _i, _ref, c, next, p, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; c = $f.c; next = $f.next; p = $f.p; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		p = [p];
		next = $clone(next, token.Position);
		p[0] = this;
		$deferred.push([(function(p) { return function(info) {
			var $ptr, info;
			info = $clone(info, commentInfo);
			commentInfo.copy(p[0].commentInfo, info);
		}; })(p), [$clone(p[0].commentInfo, commentInfo)]]);
		size = 0;
		/* while (true) { */ case 1:
			/* if (!(p[0].commentBefore(next))) { break; } */ if(!(p[0].commentBefore(next))) { $s = 2; continue; }
			_ref = p[0].commentInfo.comment.List;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				size = size + (c.Text.length) >> 0;
				_i++;
			}
			$r = p[0].nextComment(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		return size;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return 0; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: printer.ptr.prototype.commentSizeBefore }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.c = c; $f.next = next; $f.p = p; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	printer.prototype.commentSizeBefore = function(next) { return this.$val.commentSizeBefore(next); };
	printer.ptr.prototype.recordLine = function(linePtr) {
		var $ptr, linePtr, p;
		p = this;
		p.linePtr = linePtr;
	};
	printer.prototype.recordLine = function(linePtr) { return this.$val.recordLine(linePtr); };
	printer.ptr.prototype.linesFrom = function(line) {
		var $ptr, line, p;
		p = this;
		return p.out.Line - line >> 0;
	};
	printer.prototype.linesFrom = function(line) { return this.$val.linesFrom(line); };
	printer.ptr.prototype.posFor = function(pos) {
		var $ptr, _r, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.fset.Position(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.posFor }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.posFor = function(pos) { return this.$val.posFor(pos); };
	printer.ptr.prototype.lineFor = function(pos) {
		var $ptr, _r, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (!((pos === p.cachedPos))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((pos === p.cachedPos))) { */ case 1:
			p.cachedPos = pos;
			_r = p.fset.Position(pos); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.cachedLine = _r.Line;
		/* } */ case 2:
		return p.cachedLine;
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.lineFor }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.lineFor = function(pos) { return this.$val.lineFor(pos); };
	printer.ptr.prototype.atLineBegin = function(pos) {
		var $ptr, _arg, _arg$1, _r, i, n, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; i = $f.i; n = $f.n; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = $clone(pos, token.Position);
		p = this;
		/* */ if (!((((p.Config.Mode & 8) >>> 0) === 0)) && pos.IsValid() && (!((p.out.Line === pos.Line)) || !(p.out.Filename === pos.Filename))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((p.Config.Mode & 8) >>> 0) === 0)) && pos.IsValid() && (!((p.out.Line === pos.Line)) || !(p.out.Filename === pos.Filename))) { */ case 1:
			p.output = $append(p.output, 255);
			_arg = p.output;
			_r = fmt.Sprintf("//line %s:%d\n", new sliceType$1([new $String(pos.Filename), new $Int(pos.Line)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			p.output = $appendSlice(_arg, _arg$1);
			p.output = $append(p.output, 255);
			p.out.Filename = pos.Filename;
			p.out.Line = pos.Line;
		/* } */ case 2:
		n = p.Config.Indent + p.indent >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			p.output = $append(p.output, 9);
			i = i + (1) >> 0;
		}
		p.pos.Offset = p.pos.Offset + (n) >> 0;
		p.pos.Column = p.pos.Column + (n) >> 0;
		p.out.Column = p.out.Column + (n) >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.atLineBegin }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.i = i; $f.n = n; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.atLineBegin = function(pos) { return this.$val.atLineBegin(pos); };
	printer.ptr.prototype.writeByte = function(ch, n) {
		var $ptr, ch, i, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; ch = $f.ch; i = $f.i; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.out.Column === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.out.Column === 1) { */ case 1:
			$r = p.atLineBegin(p.pos); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			p.output = $append(p.output, ch);
			i = i + (1) >> 0;
		}
		p.pos.Offset = p.pos.Offset + (n) >> 0;
		if ((ch === 10) || (ch === 12)) {
			p.pos.Line = p.pos.Line + (n) >> 0;
			p.out.Line = p.out.Line + (n) >> 0;
			p.pos.Column = 1;
			p.out.Column = 1;
			return;
		}
		p.pos.Column = p.pos.Column + (n) >> 0;
		p.out.Column = p.out.Column + (n) >> 0;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeByte }; } $f.$ptr = $ptr; $f.ch = ch; $f.i = i; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeByte = function(ch, n) { return this.$val.writeByte(ch, n); };
	printer.ptr.prototype.writeString = function(pos, s, isLit) {
		var $ptr, _arg, _arg$1, _r, c, i, isLit, li, nlines, p, pos, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; c = $f.c; i = $f.i; isLit = $f.isLit; li = $f.li; nlines = $f.nlines; p = $f.p; pos = $f.pos; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = $clone(pos, token.Position);
		p = this;
		/* */ if (p.out.Column === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.out.Column === 1) { */ case 1:
			$r = p.atLineBegin(pos); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (pos.IsValid()) {
			token.Position.copy(p.pos, pos);
		}
		if (isLit) {
			p.output = $append(p.output, 255);
		}
		/* */ if (false) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (false) { */ case 4:
			_arg = p.output;
			_r = fmt.Sprintf("/*%s*/", new sliceType$1([new pos.constructor.elem(pos)])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			p.output = $appendSlice(_arg, _arg$1);
		/* } */ case 5:
		p.output = $appendSlice(p.output, s);
		nlines = 0;
		li = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 10) {
				nlines = nlines + (1) >> 0;
				li = i;
			}
			i = i + (1) >> 0;
		}
		p.pos.Offset = p.pos.Offset + (s.length) >> 0;
		if (nlines > 0) {
			p.pos.Line = p.pos.Line + (nlines) >> 0;
			p.out.Line = p.out.Line + (nlines) >> 0;
			c = s.length - li >> 0;
			p.pos.Column = c;
			p.out.Column = c;
		} else {
			p.pos.Column = p.pos.Column + (s.length) >> 0;
			p.out.Column = p.out.Column + (s.length) >> 0;
		}
		if (isLit) {
			p.output = $append(p.output, 255);
		}
		token.Position.copy(p.last, p.pos);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeString }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.c = c; $f.i = i; $f.isLit = isLit; $f.li = li; $f.nlines = nlines; $f.p = p; $f.pos = pos; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeString = function(pos, s, isLit) { return this.$val.writeString(pos, s, isLit); };
	printer.ptr.prototype.writeCommentPrefix = function(pos, next, prev, comment, tok) {
		var $ptr, _1, _2, _i, _i$1, _ref, _ref$1, ch, ch$1, comment, droppedLinebreak, hasSep, i, i$1, j, j$1, n, next, p, pos, prev, sep, tok, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; ch = $f.ch; ch$1 = $f.ch$1; comment = $f.comment; droppedLinebreak = $f.droppedLinebreak; hasSep = $f.hasSep; i = $f.i; i$1 = $f.i$1; j = $f.j; j$1 = $f.j$1; n = $f.n; next = $f.next; p = $f.p; pos = $f.pos; prev = $f.prev; sep = $f.sep; tok = $f.tok; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		next = $clone(next, token.Position);
		pos = $clone(pos, token.Position);
		p = this;
		if (p.output.$length === 0) {
			return;
		}
		/* */ if (pos.IsValid() && !(pos.Filename === p.last.Filename)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pos.IsValid() && !(pos.Filename === p.last.Filename)) { */ case 1:
			$r = p.writeByte(12, 2); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 2:
		/* */ if ((pos.Line === p.last.Line) && (prev === ptrType$5.nil || !((prev.Text.charCodeAt(1) === 47)))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((pos.Line === p.last.Line) && (prev === ptrType$5.nil || !((prev.Text.charCodeAt(1) === 47)))) { */ case 4:
			hasSep = false;
			/* */ if (prev === ptrType$5.nil) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (prev === ptrType$5.nil) { */ case 7:
				j = 0;
				_ref = p.wsbuf;
				_i = 0;
				/* while (true) { */ case 9:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
					i = _i;
					ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
						_1 = ch;
						if (_1 === 32) {
							(x = p.wsbuf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = 0));
							_i++;
							/* continue; */ $s = 9; continue;
						} else if (_1 === 11) {
							hasSep = true;
							_i++;
							/* continue; */ $s = 9; continue;
						} else if (_1 === 62) {
							_i++;
							/* continue; */ $s = 9; continue;
						}
					case 11:
					j = i;
					/* break; */ $s = 10; continue;
				/* } */ $s = 9; continue; case 10:
				$r = p.writeWhitespace(j); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			/* */ if (!hasSep) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!hasSep) { */ case 13:
				sep = 9;
				if (pos.Line === next.Line) {
					sep = 32;
				}
				$r = p.writeByte(sep, 1); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			$s = 6; continue;
		/* } else { */ case 5:
			droppedLinebreak = false;
			j$1 = 0;
			_ref$1 = p.wsbuf;
			_i$1 = 0;
			/* while (true) { */ case 16:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 17; continue; }
				i$1 = _i$1;
				ch$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					_2 = ch$1;
					if ((_2 === 32) || (_2 === 11)) {
						(x$1 = p.wsbuf, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = 0));
						_i$1++;
						/* continue; */ $s = 16; continue;
					} else if (_2 === 62) {
						_i$1++;
						/* continue; */ $s = 16; continue;
					} else if (_2 === 60) {
						if ((i$1 + 1 >> 0) < p.wsbuf.$length && ((x$2 = p.wsbuf, x$3 = i$1 + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) === 60)) {
							_i$1++;
							/* continue; */ $s = 16; continue;
						}
						if (!((tok === 56)) && (pos.Column === next.Column)) {
							_i$1++;
							/* continue; */ $s = 16; continue;
						}
					} else if ((_2 === 10) || (_2 === 12)) {
						(x$4 = p.wsbuf, ((i$1 < 0 || i$1 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$1] = 0));
						droppedLinebreak = prev === ptrType$5.nil;
					}
				case 18:
				j$1 = i$1;
				/* break; */ $s = 17; continue;
			/* } */ $s = 16; continue; case 17:
			$r = p.writeWhitespace(j$1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = 0;
			if (pos.IsValid() && p.last.IsValid()) {
				n = pos.Line - p.last.Line >> 0;
				if (n < 0) {
					n = 0;
				}
			}
			if ((p.indent === 0) && droppedLinebreak) {
				n = n + (1) >> 0;
			}
			if ((n === 0) && !(prev === ptrType$5.nil) && (prev.Text.charCodeAt(1) === 47)) {
				n = 1;
			}
			/* */ if (n > 0) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (n > 0) { */ case 20:
				$r = p.writeByte(12, nlimit(n)); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeCommentPrefix }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.ch = ch; $f.ch$1 = ch$1; $f.comment = comment; $f.droppedLinebreak = droppedLinebreak; $f.hasSep = hasSep; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.j$1 = j$1; $f.n = n; $f.next = next; $f.p = p; $f.pos = pos; $f.prev = prev; $f.sep = sep; $f.tok = tok; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeCommentPrefix = function(pos, next, prev, comment, tok) { return this.$val.writeCommentPrefix(pos, next, prev, comment, tok); };
	isBlank = function(s) {
		var $ptr, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) > 32) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	commonPrefix = function(a, b) {
		var $ptr, a, b, i;
		i = 0;
		while (true) {
			if (!(i < a.length && i < b.length && (a.charCodeAt(i) === b.charCodeAt(i)) && (a.charCodeAt(i) <= 32 || (a.charCodeAt(i) === 42)))) { break; }
			i = i + (1) >> 0;
		}
		return a.substring(0, i);
	};
	trimRight = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.TrimRightFunc(s, unicode.IsSpace); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: trimRight }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	stripCommonPrefix = function(lines) {
		var $ptr, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, closing, first, i, i$1, i$2, i$3, i$4, last, line, line$1, line$2, lineOfStars, lines, n, n$1, prefix, prefixSet, suffix, x, x$1, x$2, x$3;
		if (lines.$length <= 1) {
			return;
		}
		prefix = "";
		prefixSet = false;
		if (lines.$length > 2) {
			_ref = $subslice(lines, 1, (lines.$length - 1 >> 0));
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (isBlank(line)) {
					(x = 1 + i >> 0, ((x < 0 || x >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x] = ""));
				} else {
					if (!prefixSet) {
						prefix = line;
						prefixSet = true;
					}
					prefix = commonPrefix(prefix, line);
				}
				_i++;
			}
		}
		if (!prefixSet) {
			line$1 = (x$1 = lines.$length - 1 >> 0, ((x$1 < 0 || x$1 >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x$1]));
			prefix = commonPrefix(line$1, line$1);
		}
		lineOfStars = false;
		i$1 = strings.Index(prefix, "*");
		if (i$1 >= 0) {
			if (i$1 > 0 && (prefix.charCodeAt((i$1 - 1 >> 0)) === 32)) {
				i$1 = i$1 - (1) >> 0;
			}
			prefix = prefix.substring(0, i$1);
			lineOfStars = true;
		} else {
			first = (0 >= lines.$length ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + 0]);
			if (isBlank(first.substring(2))) {
				i$2 = prefix.length;
				n = 0;
				while (true) {
					if (!(n < 3 && i$2 > 0 && (prefix.charCodeAt((i$2 - 1 >> 0)) === 32))) { break; }
					i$2 = i$2 - (1) >> 0;
					n = n + (1) >> 0;
				}
				if ((i$2 === prefix.length) && i$2 > 0 && (prefix.charCodeAt((i$2 - 1 >> 0)) === 9)) {
					i$2 = i$2 - (1) >> 0;
				}
				prefix = prefix.substring(0, i$2);
			} else {
				suffix = $makeSlice(sliceType, first.length);
				n$1 = 2;
				while (true) {
					if (!(n$1 < first.length && first.charCodeAt(n$1) <= 32)) { break; }
					((n$1 < 0 || n$1 >= suffix.$length) ? $throwRuntimeError("index out of range") : suffix.$array[suffix.$offset + n$1] = first.charCodeAt(n$1));
					n$1 = n$1 + (1) >> 0;
				}
				if (n$1 > 2 && ((2 >= suffix.$length ? $throwRuntimeError("index out of range") : suffix.$array[suffix.$offset + 2]) === 9)) {
					suffix = $subslice(suffix, 2, n$1);
				} else {
					_tmp = 32;
					_tmp$1 = 32;
					(0 >= suffix.$length ? $throwRuntimeError("index out of range") : suffix.$array[suffix.$offset + 0] = _tmp);
					(1 >= suffix.$length ? $throwRuntimeError("index out of range") : suffix.$array[suffix.$offset + 1] = _tmp$1);
					suffix = $subslice(suffix, 0, n$1);
				}
				prefix = strings.TrimSuffix(prefix, $bytesToString(suffix));
			}
		}
		last = (x$2 = lines.$length - 1 >> 0, ((x$2 < 0 || x$2 >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x$2]));
		closing = "*/";
		i$3 = strings.Index(last, closing);
		if (isBlank(last.substring(0, i$3))) {
			if (lineOfStars) {
				closing = " */";
			}
			(x$3 = lines.$length - 1 >> 0, ((x$3 < 0 || x$3 >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x$3] = prefix + closing));
		} else {
			prefix = commonPrefix(prefix, last);
		}
		_ref$1 = lines;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$4 = _i$1;
			line$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (i$4 > 0 && !(line$2 === "")) {
				((i$4 < 0 || i$4 >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + i$4] = line$2.substring(prefix.length));
			}
			_i$1++;
		}
	};
	printer.ptr.prototype.writeComment = function(comment) {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _tuple, comment, err, i, i$1, i$2, indent, ldir, line, line$1, line$2, lines, p, pos, text, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; comment = $f.comment; err = $f.err; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; indent = $f.indent; ldir = $f.ldir; line = $f.line; line$1 = $f.line$1; line$2 = $f.line$2; lines = $f.lines; p = $f.p; pos = $f.pos; text = $f.text; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		i = [i];
		indent = [indent];
		ldir = [ldir];
		line = [line];
		p = [p];
		p[0] = this;
		text = comment.Text;
		_r = p[0].posFor(comment.Pos()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = $clone(_r, token.Position);
		/* */ if (strings.HasPrefix(text, "//line ") && (!pos.IsValid() || (pos.Column === 1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (strings.HasPrefix(text, "//line ") && (!pos.IsValid() || (pos.Column === 1))) { */ case 2:
			_r$1 = strings.TrimSpace(text.substring(7)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ldir[0] = _r$1;
			i[0] = strings.LastIndex(ldir[0], ":");
			if (i[0] >= 0) {
				_tuple = strconv.Atoi(ldir[0].substring((i[0] + 1 >> 0)));
				line[0] = _tuple[0];
				err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil) && line[0] > 0) {
					indent[0] = p[0].indent;
					p[0].indent = 0;
					$deferred.push([(function(i, indent, ldir, line, p) { return function() {
						var $ptr;
						p[0].pos.Filename = ldir[0].substring(0, i[0]);
						p[0].pos.Line = line[0];
						p[0].pos.Column = 1;
						p[0].indent = indent[0];
					}; })(i, indent, ldir, line, p), []]);
				}
			}
		/* } */ case 3:
		/* */ if (text.charCodeAt(1) === 47) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (text.charCodeAt(1) === 47) { */ case 5:
			_arg = pos;
			_r$2 = trimRight(text); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = _r$2;
			$r = p[0].writeString(_arg, _arg$1, true); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return;
		/* } */ case 6:
		lines = strings.Split(text, "\n");
		if (pos.IsValid() && (pos.Column === 1) && p[0].indent > 0) {
			_ref = $subslice(lines, 1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				line$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				(x = 1 + i$1 >> 0, ((x < 0 || x >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x] = "   " + line$1));
				_i++;
			}
		}
		stripCommonPrefix(lines);
		_ref$1 = lines;
		_i$1 = 0;
		/* while (true) { */ case 9:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 10; continue; }
			i$2 = _i$1;
			line$2 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (i$2 > 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (i$2 > 0) { */ case 11:
				$r = p[0].writeByte(12, 1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				token.Position.copy(pos, p[0].pos);
			/* } */ case 12:
			/* */ if (line$2.length > 0) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (line$2.length > 0) { */ case 14:
				_arg$2 = pos;
				_r$3 = trimRight(line$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$3 = _r$3;
				$r = p[0].writeString(_arg$2, _arg$3, true); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			_i$1++;
		/* } */ $s = 9; continue; case 10:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeComment }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.comment = comment; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.indent = indent; $f.ldir = ldir; $f.line = line; $f.line$1 = line$1; $f.line$2 = line$2; $f.lines = lines; $f.p = p; $f.pos = pos; $f.text = text; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	printer.prototype.writeComment = function(comment) { return this.$val.writeComment(comment); };
	printer.ptr.prototype.writeCommentSuffix = function(needsLinebreak) {
		var $ptr, _3, _i, _ref, ch, droppedFF, i, needsLinebreak, p, wroteNewline, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _i = $f._i; _ref = $f._ref; ch = $f.ch; droppedFF = $f.droppedFF; i = $f.i; needsLinebreak = $f.needsLinebreak; p = $f.p; wroteNewline = $f.wroteNewline; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wroteNewline = false;
		droppedFF = false;
		p = this;
		_ref = p.wsbuf;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			ch = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_3 = ch;
			if ((_3 === 32) || (_3 === 11)) {
				(x = p.wsbuf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = 0));
			} else if ((_3 === 62) || (_3 === 60)) {
			} else if ((_3 === 10) || (_3 === 12)) {
				if (needsLinebreak) {
					needsLinebreak = false;
					wroteNewline = true;
				} else {
					if (ch === 12) {
						droppedFF = true;
					}
					(x$1 = p.wsbuf, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i] = 0));
				}
			}
			_i++;
		}
		$r = p.writeWhitespace(p.wsbuf.$length); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (needsLinebreak) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (needsLinebreak) { */ case 2:
			$r = p.writeByte(10, 1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			wroteNewline = true;
		/* } */ case 3:
		return [wroteNewline, droppedFF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeCommentSuffix }; } $f.$ptr = $ptr; $f._3 = _3; $f._i = _i; $f._ref = _ref; $f.ch = ch; $f.droppedFF = droppedFF; $f.i = i; $f.needsLinebreak = needsLinebreak; $f.p = p; $f.wroteNewline = wroteNewline; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeCommentSuffix = function(needsLinebreak) { return this.$val.writeCommentSuffix(needsLinebreak); };
	printer.ptr.prototype.intersperseComments = function(next, tok) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _tuple, _v, c, droppedFF, last, needsLinebreak, next, p, tok, wroteNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; c = $f.c; droppedFF = $f.droppedFF; last = $f.last; needsLinebreak = $f.needsLinebreak; next = $f.next; p = $f.p; tok = $f.tok; wroteNewline = $f.wroteNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wroteNewline = false;
		droppedFF = false;
		next = $clone(next, token.Position);
		p = this;
		last = ptrType$5.nil;
		/* while (true) { */ case 1:
			/* if (!(p.commentBefore(next))) { break; } */ if(!(p.commentBefore(next))) { $s = 2; continue; }
			_ref = p.commentInfo.comment.List;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r = p.posFor(c.Pos()); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.writeCommentPrefix(_r, next, last, c, tok); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.writeComment(c); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				last = c;
				_i++;
			/* } */ $s = 3; continue; case 4:
			$r = p.nextComment(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		/* */ if (!(last === ptrType$5.nil)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!(last === ptrType$5.nil)) { */ case 9:
			if (!(((p.mode & 1) === 0) && (last.Text.charCodeAt(1) === 42))) { _v = false; $s = 13; continue s; }
			_r$1 = p.lineFor(last.Pos()); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 === next.Line; case 13:
			/* */ if (_v && !((tok === 52)) && (!((tok === 54)) || (p.prevOpen === 49)) && (!((tok === 55)) || (p.prevOpen === 50))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_v && !((tok === 52)) && (!((tok === 54)) || (p.prevOpen === 49)) && (!((tok === 55)) || (p.prevOpen === 50))) { */ case 11:
				$r = p.writeByte(32, 1); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			needsLinebreak = (last.Text.charCodeAt(1) === 47) || (tok === 56) && ((p.mode & 2) === 0) || (tok === 1);
			_r$2 = p.writeCommentSuffix(needsLinebreak); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			wroteNewline = _tuple[0];
			droppedFF = _tuple[1];
			/* */ $s = 17; case 17:
			return [wroteNewline, droppedFF];
		/* } */ case 10:
		$r = p.internalError(new sliceType$1([new $String("intersperseComments called without pending comments")])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return [wroteNewline, droppedFF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.intersperseComments }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.c = c; $f.droppedFF = droppedFF; $f.last = last; $f.needsLinebreak = needsLinebreak; $f.next = next; $f.p = p; $f.tok = tok; $f.wroteNewline = wroteNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.intersperseComments = function(next, tok) { return this.$val.intersperseComments(next, tok); };
	printer.ptr.prototype.writeWhitespace = function(n) {
		var $ptr, _4, _tmp, _tmp$1, ch, i, l, n, p, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; ch = $f.ch; i = $f.i; l = $f.l; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
				ch = (x = p.wsbuf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				_4 = ch;
				/* */ if (_4 === 0) { $s = 4; continue; }
				/* */ if (_4 === 62) { $s = 5; continue; }
				/* */ if (_4 === 60) { $s = 6; continue; }
				/* */ if ((_4 === 10) || (_4 === 12)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_4 === 0) { */ case 4:
					$s = 9; continue;
				/* } else if (_4 === 62) { */ case 5:
					p.indent = p.indent + (1) >> 0;
					$s = 9; continue;
				/* } else if (_4 === 60) { */ case 6:
					p.indent = p.indent - (1) >> 0;
					/* */ if (p.indent < 0) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (p.indent < 0) { */ case 10:
						$r = p.internalError(new sliceType$1([new $String("negative indentation:"), new $Int(p.indent)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						p.indent = 0;
					/* } */ case 11:
					$s = 9; continue;
				/* } else if ((_4 === 10) || (_4 === 12)) { */ case 7:
					/* */ if ((i + 1 >> 0) < n && ((x$1 = p.wsbuf, x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) === 60)) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ((i + 1 >> 0) < n && ((x$1 = p.wsbuf, x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) === 60)) { */ case 13:
						_tmp = 60;
						_tmp$1 = 12;
						(x$3 = p.wsbuf, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = _tmp));
						(x$4 = p.wsbuf, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = _tmp$1));
						i = i - (1) >> 0;
						i = i + (1) >> 0;
						/* continue; */ $s = 1; continue;
					/* } */ case 14:
					$r = p.writeByte((ch << 24 >>> 24), 1); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else { */ case 8:
					$r = p.writeByte((ch << 24 >>> 24), 1); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
			case 3:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		l = $copySlice(p.wsbuf, $subslice(p.wsbuf, n));
		p.wsbuf = $subslice(p.wsbuf, 0, l);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.writeWhitespace }; } $f.$ptr = $ptr; $f._4 = _4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.ch = ch; $f.i = i; $f.l = l; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.writeWhitespace = function(n) { return this.$val.writeWhitespace(n); };
	nlimit = function(n) {
		var $ptr, n;
		if (n > 2) {
			n = 2;
		}
		return n;
	};
	mayCombine = function(prev, next) {
		var $ptr, _5, b, next, prev;
		b = false;
		_5 = prev;
		if (_5 === 5) {
			b = next === 46;
		} else if (_5 === 12) {
			b = next === 43;
		} else if (_5 === 13) {
			b = next === 45;
		} else if (_5 === 15) {
			b = next === 42;
		} else if (_5 === 40) {
			b = (next === 45) || (next === 60);
		} else if (_5 === 17) {
			b = (next === 38) || (next === 94);
		}
		return b;
	};
	printer.ptr.prototype.print = function(args) {
		var $ptr, _6, _7, _i, _r, _r$1, _r$2, _ref, _ref$1, _tuple, arg, args, ch, data, droppedFF, i, impliedSemi, isLit, n, next, p, s, wroteNewline, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _7 = $f._7; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; arg = $f.arg; args = $f.args; ch = $f.ch; data = $f.data; droppedFF = $f.droppedFF; i = $f.i; impliedSemi = $f.impliedSemi; isLit = $f.isLit; n = $f.n; next = $f.next; p = $f.p; s = $f.s; wroteNewline = $f.wroteNewline; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			data = "";
			isLit = false;
			impliedSemi = false;
			_6 = p.lastTok;
			if (_6 === 0) {
			} else if ((_6 === 49) || (_6 === 50)) {
				p.prevOpen = p.lastTok;
			} else {
				p.prevOpen = 0;
			}
			_ref$1 = arg;
			/* */ if ($assertType(_ref$1, pmode, true)[1]) { $s = 3; continue; }
			/* */ if ($assertType(_ref$1, whiteSpace, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref$1, ptrType$3, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 6; continue; }
			/* */ if ($assertType(_ref$1, token.Token, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref$1, token.Pos, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref$1, $String, true)[1]) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if ($assertType(_ref$1, pmode, true)[1]) { */ case 3:
				x = _ref$1.$val;
				p.mode = (p.mode ^ (x)) >> 0;
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, whiteSpace, true)[1]) { */ case 4:
				x$1 = _ref$1.$val;
				/* */ if (x$1 === 0) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (x$1 === 0) { */ case 12:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 13:
				i = p.wsbuf.$length;
				/* */ if (i === p.wsbuf.$capacity) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (i === p.wsbuf.$capacity) { */ case 14:
					$r = p.writeWhitespace(i); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = 0;
				/* } */ case 15:
				p.wsbuf = $subslice(p.wsbuf, 0, (i + 1 >> 0));
				(x$8 = p.wsbuf, ((i < 0 || i >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i] = x$1));
				if ((x$1 === 10) || (x$1 === 12)) {
					p.impliedSemi = false;
				}
				p.lastTok = 0;
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$3, true)[1]) { */ case 5:
				x$2 = _ref$1.$val;
				data = x$2.Name;
				impliedSemi = true;
				p.lastTok = 4;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 6:
				x$3 = _ref$1.$val;
				data = x$3.Value;
				isLit = true;
				impliedSemi = true;
				p.lastTok = x$3.Kind;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, token.Token, true)[1]) { */ case 7:
				x$4 = _ref$1.$val;
				s = new token.Token(x$4).String();
				/* */ if (mayCombine(p.lastTok, s.charCodeAt(0))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (mayCombine(p.lastTok, s.charCodeAt(0))) { */ case 17:
					/* */ if (!((p.wsbuf.$length === 0))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!((p.wsbuf.$length === 0))) { */ case 19:
						$r = p.internalError(new sliceType$1([new $String("whitespace buffer not empty")])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 20:
					p.wsbuf = $subslice(p.wsbuf, 0, 1);
					(x$9 = p.wsbuf, (0 >= x$9.$length ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + 0] = 32));
				/* } */ case 18:
				data = s;
				_7 = x$4;
				if ((_7 === 61) || (_7 === 65) || (_7 === 69) || (_7 === 80) || (_7 === 37) || (_7 === 38) || (_7 === 54) || (_7 === 55) || (_7 === 56)) {
					impliedSemi = true;
				}
				p.lastTok = x$4;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, token.Pos, true)[1]) { */ case 8:
				x$5 = _ref$1.$val;
				/* */ if (new token.Pos(x$5).IsValid()) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (new token.Pos(x$5).IsValid()) { */ case 22:
					_r = p.posFor(x$5); /* */ $s = 24; case 24: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					token.Position.copy(p.pos, _r);
				/* } */ case 23:
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 11; continue;
			/* } else if ($assertType(_ref$1, $String, true)[1]) { */ case 9:
				x$6 = _ref$1.$val;
				data = x$6;
				isLit = true;
				impliedSemi = true;
				p.lastTok = 9;
				$s = 11; continue;
			/* } else { */ case 10:
				x$7 = _ref$1;
				_r$1 = fmt.Fprintf(os.Stderr, "print: unsupported argument %v (%T)\n", new sliceType$1([arg, arg])); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$panic(new $String("go/printer type"));
			/* } */ case 11:
			next = $clone(p.pos, token.Position);
			_r$2 = p.flush(next, p.lastTok); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			wroteNewline = _tuple[0];
			droppedFF = _tuple[1];
			/* */ if (!p.impliedSemi) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (!p.impliedSemi) { */ case 27:
				n = nlimit(next.Line - p.pos.Line >> 0);
				if (wroteNewline && (n === 2)) {
					n = 1;
				}
				/* */ if (n > 0) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (n > 0) { */ case 29:
					ch = 10;
					if (droppedFF) {
						ch = 12;
					}
					$r = p.writeByte(ch, n); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					impliedSemi = false;
				/* } */ case 30:
			/* } */ case 28:
			if (!(p.linePtr === ptrType$6.nil)) {
				p.linePtr.$set(p.out.Line);
				p.linePtr = ptrType$6.nil;
			}
			$r = p.writeString(next, data, isLit); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.impliedSemi = impliedSemi;
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.print }; } $f.$ptr = $ptr; $f._6 = _6; $f._7 = _7; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.arg = arg; $f.args = args; $f.ch = ch; $f.data = data; $f.droppedFF = droppedFF; $f.i = i; $f.impliedSemi = impliedSemi; $f.isLit = isLit; $f.n = n; $f.next = next; $f.p = p; $f.s = s; $f.wroteNewline = wroteNewline; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.print = function(args) { return this.$val.print(args); };
	printer.ptr.prototype.flush = function(next, tok) {
		var $ptr, _r, _tuple, droppedFF, next, p, tok, wroteNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; droppedFF = $f.droppedFF; next = $f.next; p = $f.p; tok = $f.tok; wroteNewline = $f.wroteNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wroteNewline = false;
		droppedFF = false;
		next = $clone(next, token.Position);
		p = this;
		/* */ if (p.commentBefore(next)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.commentBefore(next)) { */ case 1:
			_r = p.intersperseComments(next, tok); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wroteNewline = _tuple[0];
			droppedFF = _tuple[1];
			$s = 3; continue;
		/* } else { */ case 2:
			$r = p.writeWhitespace(p.wsbuf.$length); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		return [wroteNewline, droppedFF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.flush }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.droppedFF = droppedFF; $f.next = next; $f.p = p; $f.tok = tok; $f.wroteNewline = wroteNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.flush = function(next, tok) { return this.$val.flush(next, tok); };
	getDoc = function(n) {
		var $ptr, _ref, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7;
		_ref = n;
		if ($assertType(_ref, ptrType$53, true)[1]) {
			n$1 = _ref.$val;
			return n$1.Doc;
		} else if ($assertType(_ref, ptrType$48, true)[1]) {
			n$2 = _ref.$val;
			return n$2.Doc;
		} else if ($assertType(_ref, ptrType$47, true)[1]) {
			n$3 = _ref.$val;
			return n$3.Doc;
		} else if ($assertType(_ref, ptrType$49, true)[1]) {
			n$4 = _ref.$val;
			return n$4.Doc;
		} else if ($assertType(_ref, ptrType$51, true)[1]) {
			n$5 = _ref.$val;
			return n$5.Doc;
		} else if ($assertType(_ref, ptrType$52, true)[1]) {
			n$6 = _ref.$val;
			return n$6.Doc;
		} else if ($assertType(_ref, ptrType$54, true)[1]) {
			n$7 = _ref.$val;
			return n$7.Doc;
		}
		return ptrType.nil;
	};
	printer.ptr.prototype.printNode = function(node) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, beg, cnode, comments, doc, end, i, j, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, n$8, n$9, node, ok, ok$1, ok$2, ok$3, ok$4, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; beg = $f.beg; cnode = $f.cnode; comments = $f.comments; doc = $f.doc; end = $f.end; i = $f.i; j = $f.j; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; node = $f.node; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		comments = sliceType$2.nil;
		_tuple = $assertType(node, ptrType$55, true);
		cnode = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			node = cnode.Node;
			comments = cnode.Comments;
		}
		/* */ if (!(comments === sliceType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(comments === sliceType$2.nil)) { */ case 1:
			_tuple$1 = $assertType(node, ast.Node, true);
			n = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (!ok$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!ok$1) { */ case 4:
				/* goto unsupported */ $s = 6; continue;
			/* } */ case 5:
			_r = n.Pos(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			beg = _r;
			_r$1 = n.End(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			end = _r$1;
			doc = getDoc(n);
			if (!(doc === ptrType.nil)) {
				beg = doc.Pos();
			}
			i = 0;
			while (true) {
				if (!(i < comments.$length && ((i < 0 || i >= comments.$length) ? $throwRuntimeError("index out of range") : comments.$array[comments.$offset + i]).End() < beg)) { break; }
				i = i + (1) >> 0;
			}
			j = i;
			while (true) {
				if (!(j < comments.$length && ((j < 0 || j >= comments.$length) ? $throwRuntimeError("index out of range") : comments.$array[comments.$offset + j]).Pos() < end)) { break; }
				j = j + (1) >> 0;
			}
			if (i < j) {
				p.comments = $subslice(comments, i, j);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_tuple$2 = $assertType(node, ptrType$54, true);
			n$1 = _tuple$2[0];
			ok$2 = _tuple$2[1];
			if (ok$2) {
				p.comments = n$1.Comments;
			}
		/* } */ case 3:
		p.useNodeComments = p.comments === sliceType$2.nil;
		$r = p.nextComment(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = node;
		/* */ if ($assertType(_ref, ast.Expr, true)[1]) { $s = 10; continue; }
		/* */ if ($assertType(_ref, ast.Stmt, true)[1]) { $s = 11; continue; }
		/* */ if ($assertType(_ref, ast.Decl, true)[1]) { $s = 12; continue; }
		/* */ if ($assertType(_ref, ast.Spec, true)[1]) { $s = 13; continue; }
		/* */ if ($assertType(_ref, sliceType$8, true)[1]) { $s = 14; continue; }
		/* */ if ($assertType(_ref, sliceType$9, true)[1]) { $s = 15; continue; }
		/* */ if ($assertType(_ref, ptrType$54, true)[1]) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ($assertType(_ref, ast.Expr, true)[1]) { */ case 10:
			n$2 = _ref;
			$r = p.expr(n$2); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, ast.Stmt, true)[1]) { */ case 11:
			n$3 = _ref;
			_tuple$3 = $assertType(n$3, ptrType$27, true);
			ok$3 = _tuple$3[1];
			if (ok$3) {
				p.indent = 1;
			}
			$r = p.stmt(n$3, false); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, ast.Decl, true)[1]) { */ case 12:
			n$4 = _ref;
			$r = p.decl(n$4); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, ast.Spec, true)[1]) { */ case 13:
			n$5 = _ref;
			$r = p.spec(n$5, 1, false); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, sliceType$8, true)[1]) { */ case 14:
			n$6 = _ref.$val;
			_ref$1 = n$6;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				s = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_tuple$4 = $assertType(s, ptrType$27, true);
				ok$4 = _tuple$4[1];
				if (ok$4) {
					p.indent = 1;
				}
				_i++;
			}
			$r = p.stmtList(n$6, 0, false); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, sliceType$9, true)[1]) { */ case 15:
			n$7 = _ref.$val;
			$r = p.declList(n$7); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else if ($assertType(_ref, ptrType$54, true)[1]) { */ case 16:
			n$8 = _ref.$val;
			$r = p.file(n$8); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 18; continue;
		/* } else { */ case 17:
			n$9 = _ref;
			/* goto unsupported */ $s = 6; continue;
		/* } */ case 18:
		return $ifaceNil;
		/* unsupported: */ case 6:
		_r$2 = fmt.Errorf("go/printer: unsupported node type %T", new sliceType$1([node])); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 27; case 27:
		return _r$2;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: printer.ptr.prototype.printNode }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.beg = beg; $f.cnode = cnode; $f.comments = comments; $f.doc = doc; $f.end = end; $f.i = i; $f.j = j; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.node = node; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	printer.prototype.printNode = function(node) { return this.$val.printNode(node); };
	trimmer.ptr.prototype.resetSpace = function() {
		var $ptr, p;
		p = this;
		p.state = 0;
		p.space = $subslice(p.space, 0, 0);
	};
	trimmer.prototype.resetSpace = function() { return this.$val.resetSpace(); };
	trimmer.ptr.prototype.Write = function(data) {
		var $ptr, _10, _11, _8, _9, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, b, data, err, m, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _11 = $f._11; _8 = $f._8; _9 = $f._9; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; b = $f.b; data = $f.data; err = $f.err; m = $f.m; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		p = this;
		m = 0;
		b = 0;
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 11) {
				b = 9;
			}
				_8 = p.state;
				/* */ if (_8 === 0) { $s = 4; continue; }
				/* */ if (_8 === 1) { $s = 5; continue; }
				/* */ if (_8 === 2) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_8 === 0) { */ case 4:
						_9 = b;
						/* */ if ((_9 === 9) || (_9 === 32)) { $s = 10; continue; }
						/* */ if ((_9 === 10) || (_9 === 12)) { $s = 11; continue; }
						/* */ if (_9 === 255) { $s = 12; continue; }
						/* */ $s = 13; continue;
						/* if ((_9 === 9) || (_9 === 32)) { */ case 10:
							p.space = $append(p.space, b);
							$s = 14; continue;
						/* } else if ((_9 === 10) || (_9 === 12)) { */ case 11:
							p.resetSpace();
							_r = p.output.Write(aNewline); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							_tuple = _r;
							err = _tuple[1];
							$s = 14; continue;
						/* } else if (_9 === 255) { */ case 12:
							_r$1 = p.output.Write(p.space); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
							_tuple$1 = _r$1;
							err = _tuple$1[1];
							p.state = 1;
							m = n + 1 >> 0;
							$s = 14; continue;
						/* } else { */ case 13:
							_r$2 = p.output.Write(p.space); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
							_tuple$2 = _r$2;
							err = _tuple$2[1];
							p.state = 2;
							m = n;
						/* } */ case 14:
					case 9:
					$s = 8; continue;
				/* } else if (_8 === 1) { */ case 5:
					/* */ if (b === 255) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (b === 255) { */ case 18:
						_r$3 = p.output.Write($subslice(data, m, n)); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_tuple$3 = _r$3;
						err = _tuple$3[1];
						p.resetSpace();
					/* } */ case 19:
					$s = 8; continue;
				/* } else if (_8 === 2) { */ case 6:
						_10 = b;
						/* */ if ((_10 === 9) || (_10 === 32)) { $s = 22; continue; }
						/* */ if ((_10 === 10) || (_10 === 12)) { $s = 23; continue; }
						/* */ if (_10 === 255) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if ((_10 === 9) || (_10 === 32)) { */ case 22:
							_r$4 = p.output.Write($subslice(data, m, n)); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							_tuple$4 = _r$4;
							err = _tuple$4[1];
							p.resetSpace();
							p.space = $append(p.space, b);
							$s = 25; continue;
						/* } else if ((_10 === 10) || (_10 === 12)) { */ case 23:
							_r$5 = p.output.Write($subslice(data, m, n)); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
							_tuple$5 = _r$5;
							err = _tuple$5[1];
							p.resetSpace();
							/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 28; continue; }
							/* */ $s = 29; continue;
							/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 28:
								_r$6 = p.output.Write(aNewline); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
								_tuple$6 = _r$6;
								err = _tuple$6[1];
							/* } */ case 29:
							$s = 25; continue;
						/* } else if (_10 === 255) { */ case 24:
							_r$7 = p.output.Write($subslice(data, m, n)); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_tuple$7 = _r$7;
							err = _tuple$7[1];
							p.state = 1;
							m = n + 1 >> 0;
						/* } */ case 25:
					case 21:
					$s = 8; continue;
				/* } else { */ case 7:
					$panic(new $String("unreachable"));
				/* } */ case 8:
			case 3:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		n = data.$length;
			_11 = p.state;
			/* */ if ((_11 === 1) || (_11 === 2)) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if ((_11 === 1) || (_11 === 2)) { */ case 33:
				_r$8 = p.output.Write($subslice(data, m, n)); /* */ $s = 35; case 35: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$8 = _r$8;
				err = _tuple$8[1];
				p.resetSpace();
			/* } */ case 34:
		case 32:
		return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: trimmer.ptr.prototype.Write }; } $f.$ptr = $ptr; $f._10 = _10; $f._11 = _11; $f._8 = _8; $f._9 = _9; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.b = b; $f.data = data; $f.err = err; $f.m = m; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	trimmer.prototype.Write = function(data) { return this.$val.Write(data); };
	Config.ptr.prototype.fprint = function(output, fset, node, nodeSizes) {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, cfg, err, fset, minwidth, node, nodeSizes, output, p, padchar, tw, twmode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cfg = $f.cfg; err = $f.err; fset = $f.fset; minwidth = $f.minwidth; node = $f.node; nodeSizes = $f.nodeSizes; output = $f.output; p = $f.p; padchar = $f.padchar; tw = $f.tw; twmode = $f.twmode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		cfg = this;
		p = new printer.ptr(new Config.ptr(0, 0, 0), ptrType$56.nil, sliceType.nil, 0, 0, false, 0, 0, sliceType$7.nil, new token.Position.ptr("", 0, 0, 0), new token.Position.ptr("", 0, 0, 0), new token.Position.ptr("", 0, 0, 0), ptrType$6.nil, sliceType$2.nil, false, new commentInfo.ptr(0, ptrType.nil, 0, false), false, 0, 0);
		p.init(cfg, fset, nodeSizes);
		_r = p.printNode(node); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		p.impliedSemi = false;
		_r$1 = p.flush(new token.Position.ptr("", 1073741824, 1073741824, 0), 1); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		output = new trimmer.ptr(output, 0, sliceType.nil);
		if (((cfg.Mode & 1) >>> 0) === 0) {
			minwidth = cfg.Tabwidth;
			padchar = 9;
			if (!((((cfg.Mode & 4) >>> 0) === 0))) {
				padchar = 32;
			}
			twmode = 8;
			if (!((((cfg.Mode & 2) >>> 0) === 0))) {
				minwidth = 0;
				twmode = (twmode | (16)) >>> 0;
			}
			output = tabwriter.NewWriter(output, minwidth, cfg.Tabwidth, 1, padchar, twmode);
		}
		_r$2 = output.Write(p.output); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = $assertType(output, ptrType$57, true);
		tw = _tuple$1[0];
		/* */ if (!(tw === ptrType$57.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(tw === ptrType$57.nil)) { */ case 4:
			_r$3 = tw.Flush(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			err = _r$3;
		/* } */ case 5:
		return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.fprint }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cfg = cfg; $f.err = err; $f.fset = fset; $f.minwidth = minwidth; $f.node = node; $f.nodeSizes = nodeSizes; $f.output = output; $f.p = p; $f.padchar = padchar; $f.tw = tw; $f.twmode = twmode; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.fprint = function(output, fset, node, nodeSizes) { return this.$val.fprint(output, fset, node, nodeSizes); };
	Config.ptr.prototype.Fprint = function(output, fset, node) {
		var $ptr, _r, cfg, fset, node, output, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; cfg = $f.cfg; fset = $f.fset; node = $f.node; output = $f.output; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cfg = this;
		_r = cfg.fprint(output, fset, node, {}); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Config.ptr.prototype.Fprint }; } $f.$ptr = $ptr; $f._r = _r; $f.cfg = cfg; $f.fset = fset; $f.node = node; $f.output = output; $f.$s = $s; $f.$r = $r; return $f;
	};
	Config.prototype.Fprint = function(output, fset, node) { return this.$val.Fprint(output, fset, node); };
	ptrType$59.methods = [{prop: "linebreak", name: "linebreak", pkg: "go/printer", typ: $funcType([$Int, $Int, whiteSpace, $Bool], [$Bool], false)}, {prop: "setComment", name: "setComment", pkg: "go/printer", typ: $funcType([ptrType], [], false)}, {prop: "identList", name: "identList", pkg: "go/printer", typ: $funcType([sliceType$4, $Bool], [], false)}, {prop: "exprList", name: "exprList", pkg: "go/printer", typ: $funcType([token.Pos, sliceType$3, $Int, exprListMode, token.Pos], [], false)}, {prop: "parameters", name: "parameters", pkg: "go/printer", typ: $funcType([ptrType$2], [], false)}, {prop: "signature", name: "signature", pkg: "go/printer", typ: $funcType([ptrType$2, ptrType$2], [], false)}, {prop: "isOneLineFieldList", name: "isOneLineFieldList", pkg: "go/printer", typ: $funcType([sliceType$10], [$Bool], false)}, {prop: "setLineComment", name: "setLineComment", pkg: "go/printer", typ: $funcType([$String], [], false)}, {prop: "fieldList", name: "fieldList", pkg: "go/printer", typ: $funcType([ptrType$2, $Bool, $Bool], [], false)}, {prop: "binaryExpr", name: "binaryExpr", pkg: "go/printer", typ: $funcType([ptrType$8, $Int, $Int, $Int], [], false)}, {prop: "expr1", name: "expr1", pkg: "go/printer", typ: $funcType([ast.Expr, $Int, $Int], [], false)}, {prop: "possibleSelectorExpr", name: "possibleSelectorExpr", pkg: "go/printer", typ: $funcType([ast.Expr, $Int, $Int], [$Bool], false)}, {prop: "selectorExpr", name: "selectorExpr", pkg: "go/printer", typ: $funcType([ptrType$14, $Int, $Bool], [$Bool], false)}, {prop: "expr0", name: "expr0", pkg: "go/printer", typ: $funcType([ast.Expr, $Int], [], false)}, {prop: "expr", name: "expr", pkg: "go/printer", typ: $funcType([ast.Expr], [], false)}, {prop: "stmtList", name: "stmtList", pkg: "go/printer", typ: $funcType([sliceType$8, $Int, $Bool], [], false)}, {prop: "block", name: "block", pkg: "go/printer", typ: $funcType([ptrType$38, $Int], [], false)}, {prop: "controlClause", name: "controlClause", pkg: "go/printer", typ: $funcType([$Bool, ast.Stmt, ast.Expr, ast.Stmt], [], false)}, {prop: "indentList", name: "indentList", pkg: "go/printer", typ: $funcType([sliceType$3], [$Bool], false)}, {prop: "stmt", name: "stmt", pkg: "go/printer", typ: $funcType([ast.Stmt, $Bool], [], false)}, {prop: "valueSpec", name: "valueSpec", pkg: "go/printer", typ: $funcType([ptrType$47, $Bool], [], false)}, {prop: "spec", name: "spec", pkg: "go/printer", typ: $funcType([ast.Spec, $Int, $Bool], [], false)}, {prop: "genDecl", name: "genDecl", pkg: "go/printer", typ: $funcType([ptrType$51], [], false)}, {prop: "nodeSize", name: "nodeSize", pkg: "go/printer", typ: $funcType([ast.Node, $Int], [$Int], false)}, {prop: "bodySize", name: "bodySize", pkg: "go/printer", typ: $funcType([ptrType$38, $Int], [$Int], false)}, {prop: "adjBlock", name: "adjBlock", pkg: "go/printer", typ: $funcType([$Int, whiteSpace, ptrType$38], [], false)}, {prop: "distanceFrom", name: "distanceFrom", pkg: "go/printer", typ: $funcType([token.Pos], [$Int], false)}, {prop: "funcDecl", name: "funcDecl", pkg: "go/printer", typ: $funcType([ptrType$52], [], false)}, {prop: "decl", name: "decl", pkg: "go/printer", typ: $funcType([ast.Decl], [], false)}, {prop: "declList", name: "declList", pkg: "go/printer", typ: $funcType([sliceType$9], [], false)}, {prop: "file", name: "file", pkg: "go/printer", typ: $funcType([ptrType$54], [], false)}, {prop: "init", name: "init", pkg: "go/printer", typ: $funcType([ptrType$58, ptrType$56, mapType], [], false)}, {prop: "internalError", name: "internalError", pkg: "go/printer", typ: $funcType([sliceType$1], [], true)}, {prop: "commentsHaveNewline", name: "commentsHaveNewline", pkg: "go/printer", typ: $funcType([sliceType$5], [$Bool], false)}, {prop: "nextComment", name: "nextComment", pkg: "go/printer", typ: $funcType([], [], false)}, {prop: "commentBefore", name: "commentBefore", pkg: "go/printer", typ: $funcType([token.Position], [$Bool], false)}, {prop: "commentSizeBefore", name: "commentSizeBefore", pkg: "go/printer", typ: $funcType([token.Position], [$Int], false)}, {prop: "recordLine", name: "recordLine", pkg: "go/printer", typ: $funcType([ptrType$6], [], false)}, {prop: "linesFrom", name: "linesFrom", pkg: "go/printer", typ: $funcType([$Int], [$Int], false)}, {prop: "posFor", name: "posFor", pkg: "go/printer", typ: $funcType([token.Pos], [token.Position], false)}, {prop: "lineFor", name: "lineFor", pkg: "go/printer", typ: $funcType([token.Pos], [$Int], false)}, {prop: "atLineBegin", name: "atLineBegin", pkg: "go/printer", typ: $funcType([token.Position], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "go/printer", typ: $funcType([$Uint8, $Int], [], false)}, {prop: "writeString", name: "writeString", pkg: "go/printer", typ: $funcType([token.Position, $String, $Bool], [], false)}, {prop: "writeCommentPrefix", name: "writeCommentPrefix", pkg: "go/printer", typ: $funcType([token.Position, token.Position, ptrType$5, ptrType$5, token.Token], [], false)}, {prop: "writeComment", name: "writeComment", pkg: "go/printer", typ: $funcType([ptrType$5], [], false)}, {prop: "writeCommentSuffix", name: "writeCommentSuffix", pkg: "go/printer", typ: $funcType([$Bool], [$Bool, $Bool], false)}, {prop: "intersperseComments", name: "intersperseComments", pkg: "go/printer", typ: $funcType([token.Position, token.Token], [$Bool, $Bool], false)}, {prop: "writeWhitespace", name: "writeWhitespace", pkg: "go/printer", typ: $funcType([$Int], [], false)}, {prop: "print", name: "print", pkg: "go/printer", typ: $funcType([sliceType$1], [], true)}, {prop: "flush", name: "flush", pkg: "go/printer", typ: $funcType([token.Position, token.Token], [$Bool, $Bool], false)}, {prop: "printNode", name: "printNode", pkg: "go/printer", typ: $funcType([$emptyInterface], [$error], false)}];
	ptrType$60.methods = [{prop: "resetSpace", name: "resetSpace", pkg: "go/printer", typ: $funcType([], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	ptrType$58.methods = [{prop: "fprint", name: "fprint", pkg: "go/printer", typ: $funcType([io.Writer, ptrType$56, $emptyInterface, mapType], [$error], false)}, {prop: "Fprint", name: "Fprint", pkg: "", typ: $funcType([io.Writer, ptrType$56, $emptyInterface], [$error], false)}];
	commentInfo.init([{prop: "cindex", name: "cindex", pkg: "go/printer", typ: $Int, tag: ""}, {prop: "comment", name: "comment", pkg: "go/printer", typ: ptrType, tag: ""}, {prop: "commentOffset", name: "commentOffset", pkg: "go/printer", typ: $Int, tag: ""}, {prop: "commentNewline", name: "commentNewline", pkg: "go/printer", typ: $Bool, tag: ""}]);
	printer.init([{prop: "Config", name: "", pkg: "", typ: Config, tag: ""}, {prop: "fset", name: "fset", pkg: "go/printer", typ: ptrType$56, tag: ""}, {prop: "output", name: "output", pkg: "go/printer", typ: sliceType, tag: ""}, {prop: "indent", name: "indent", pkg: "go/printer", typ: $Int, tag: ""}, {prop: "mode", name: "mode", pkg: "go/printer", typ: pmode, tag: ""}, {prop: "impliedSemi", name: "impliedSemi", pkg: "go/printer", typ: $Bool, tag: ""}, {prop: "lastTok", name: "lastTok", pkg: "go/printer", typ: token.Token, tag: ""}, {prop: "prevOpen", name: "prevOpen", pkg: "go/printer", typ: token.Token, tag: ""}, {prop: "wsbuf", name: "wsbuf", pkg: "go/printer", typ: sliceType$7, tag: ""}, {prop: "pos", name: "pos", pkg: "go/printer", typ: token.Position, tag: ""}, {prop: "out", name: "out", pkg: "go/printer", typ: token.Position, tag: ""}, {prop: "last", name: "last", pkg: "go/printer", typ: token.Position, tag: ""}, {prop: "linePtr", name: "linePtr", pkg: "go/printer", typ: ptrType$6, tag: ""}, {prop: "comments", name: "comments", pkg: "go/printer", typ: sliceType$2, tag: ""}, {prop: "useNodeComments", name: "useNodeComments", pkg: "go/printer", typ: $Bool, tag: ""}, {prop: "commentInfo", name: "", pkg: "go/printer", typ: commentInfo, tag: ""}, {prop: "nodeSizes", name: "nodeSizes", pkg: "go/printer", typ: mapType, tag: ""}, {prop: "cachedPos", name: "cachedPos", pkg: "go/printer", typ: token.Pos, tag: ""}, {prop: "cachedLine", name: "cachedLine", pkg: "go/printer", typ: $Int, tag: ""}]);
	trimmer.init([{prop: "output", name: "output", pkg: "go/printer", typ: io.Writer, tag: ""}, {prop: "state", name: "state", pkg: "go/printer", typ: $Int, tag: ""}, {prop: "space", name: "space", pkg: "go/printer", typ: sliceType, tag: ""}]);
	Config.init([{prop: "Mode", name: "Mode", pkg: "", typ: Mode, tag: ""}, {prop: "Tabwidth", name: "Tabwidth", pkg: "", typ: $Int, tag: ""}, {prop: "Indent", name: "Indent", pkg: "", typ: $Int, tag: ""}]);
	CommentedNode.init([{prop: "Node", name: "Node", pkg: "", typ: $emptyInterface, tag: ""}, {prop: "Comments", name: "Comments", pkg: "", typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = tabwriter.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		aNewline = new sliceType($stringToBytes("\n"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["go/format"] = (function() {
	var $pkg = {}, $init, bytes, fmt, ast, parser, printer, token, io, strings, ptrType, sliceType, arrayType, arrayType$1, config, Source, parse, format, isSpace;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	ast = $packages["go/ast"];
	parser = $packages["go/parser"];
	printer = $packages["go/printer"];
	token = $packages["go/token"];
	io = $packages["io"];
	strings = $packages["strings"];
	ptrType = $ptrType(ast.File);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	Source = function(src) {
		var $ptr, _r, _r$1, _tuple, err, file, fset, indentAdj, sourceAdj, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; file = $f.file; fset = $f.fset; indentAdj = $f.indentAdj; sourceAdj = $f.sourceAdj; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fset = token.NewFileSet();
		_r = parse(fset, "", src, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		file = _tuple[0];
		sourceAdj = _tuple[1];
		indentAdj = _tuple[2];
		err = _tuple[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		/* */ if (sourceAdj === $throwNilPointerError) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (sourceAdj === $throwNilPointerError) { */ case 2:
			$r = ast.SortImports(fset, file); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$1 = format(fset, file, sourceAdj, indentAdj, src, config); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Source }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.file = file; $f.fset = fset; $f.indentAdj = indentAdj; $f.sourceAdj = sourceAdj; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Source = Source;
	parse = function(fset, filename, src, fragmentOk) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _v, err, file, filename, fragmentOk, fset, fsrc, indentAdj, psrc, sourceAdj, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _v = $f._v; err = $f.err; file = $f.file; filename = $f.filename; fragmentOk = $f.fragmentOk; fset = $f.fset; fsrc = $f.fsrc; indentAdj = $f.indentAdj; psrc = $f.psrc; sourceAdj = $f.sourceAdj; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file = ptrType.nil;
		sourceAdj = $throwNilPointerError;
		indentAdj = 0;
		err = $ifaceNil;
		_r = parser.ParseFile(fset, filename, src, 4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		file = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil) || !fragmentOk) { _v = true; $s = 4; continue s; }
		_r$1 = err.Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = strings.Contains(_r$1, "expected 'package'"); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = !_r$2; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			return [file, sourceAdj, indentAdj, err];
		/* } */ case 3:
		psrc = $appendSlice(new sliceType($stringToBytes("package p;")), src);
		_r$3 = parser.ParseFile(fset, filename, psrc, 4); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		file = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 8:
			sourceAdj = (function $b(src$1, indent) {
				var $ptr, _r$4, indent, src$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$4 = $f._r$4; indent = $f.indent; src$1 = $f.src$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				src$1 = $subslice(src$1, (indent + 10 >> 0));
				_r$4 = bytes.TrimSpace(src$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 2; case 2:
				return _r$4;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$4 = _r$4; $f.indent = indent; $f.src$1 = src$1; $f.$s = $s; $f.$r = $r; return $f;
			});
			return [file, sourceAdj, indentAdj, err];
		/* } */ case 9:
		_r$4 = err.Error(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = strings.Contains(_r$4, "expected declaration"); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (!_r$5) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!_r$5) { */ case 10:
			return [file, sourceAdj, indentAdj, err];
		/* } */ case 11:
		fsrc = $append($appendSlice(new sliceType($stringToBytes("package p; func _() {")), src), 10, 10, 125);
		_r$6 = parser.ParseFile(fset, filename, fsrc, 4); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$2 = _r$6;
		file = _tuple$2[0];
		err = _tuple$2[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			sourceAdj = (function $b(src$1, indent) {
				var $ptr, _r$7, indent, src$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$7 = $f._r$7; indent = $f.indent; src$1 = $f.src$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				if (indent < 0) {
					indent = 0;
				}
				src$1 = $subslice(src$1, (($imul(2, indent)) + 21 >> 0));
				src$1 = $subslice(src$1, 0, (src$1.$length - 2 >> 0));
				_r$7 = bytes.TrimSpace(src$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 2; case 2:
				return _r$7;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f._r$7 = _r$7; $f.indent = indent; $f.src$1 = src$1; $f.$s = $s; $f.$r = $r; return $f;
			});
			indentAdj = -1;
		}
		return [file, sourceAdj, indentAdj, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._v = _v; $f.err = err; $f.file = file; $f.filename = filename; $f.fragmentOk = fragmentOk; $f.fset = fset; $f.fsrc = fsrc; $f.indentAdj = indentAdj; $f.psrc = psrc; $f.sourceAdj = sourceAdj; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	format = function(fset, file, sourceAdj, indentAdj, src, cfg) {
		var $ptr, _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, b, buf, buf$1, cfg, err, err$1, file, fset, hasSpace, i, i$1, indent, indentAdj, j, out, res, sourceAdj, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; cfg = $f.cfg; err = $f.err; err$1 = $f.err$1; file = $f.file; fset = $f.fset; hasSpace = $f.hasSpace; i = $f.i; i$1 = $f.i$1; indent = $f.indent; indentAdj = $f.indentAdj; j = $f.j; out = $f.out; res = $f.res; sourceAdj = $f.sourceAdj; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		buf$1 = [buf$1];
		cfg = $clone(cfg, printer.Config);
		/* */ if (sourceAdj === $throwNilPointerError) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (sourceAdj === $throwNilPointerError) { */ case 1:
			buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
			_r = cfg.Fprint(buf[0], fset, file); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [sliceType.nil, err];
			}
			return [buf[0].Bytes(), $ifaceNil];
		/* } */ case 2:
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(j < src.$length && isSpace(((j < 0 || j >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + j])))) { break; }
			if (((j < 0 || j >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + j]) === 10) {
				i = j + 1 >> 0;
			}
			j = j + (1) >> 0;
		}
		res = sliceType.nil;
		res = $appendSlice(res, $subslice(src, 0, i));
		indent = 0;
		hasSpace = false;
		_ref = $subslice(src, i, j);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_1 = b;
			if (_1 === 32) {
				hasSpace = true;
			} else if (_1 === 9) {
				indent = indent + (1) >> 0;
			}
			_i++;
		}
		if ((indent === 0) && hasSpace) {
			indent = 1;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < indent)) { break; }
			res = $append(res, 9);
			i$1 = i$1 + (1) >> 0;
		}
		cfg.Indent = indent + indentAdj >> 0;
		buf$1[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r$1 = cfg.Fprint(buf$1[0], fset, file); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [sliceType.nil, err$1];
		}
		_r$2 = sourceAdj(buf$1[0].Bytes(), cfg.Indent); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		out = _r$2;
		if (out.$length === 0) {
			return [src, $ifaceNil];
		}
		res = $appendSlice(res, out);
		i = src.$length;
		while (true) {
			if (!(i > 0 && isSpace((x = i - 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x]))))) { break; }
			i = i - (1) >> 0;
		}
		return [$appendSlice(res, $subslice(src, i)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: format }; } $f.$ptr = $ptr; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.cfg = cfg; $f.err = err; $f.err$1 = err$1; $f.file = file; $f.fset = fset; $f.hasSpace = hasSpace; $f.i = i; $f.i$1 = i$1; $f.indent = indent; $f.indentAdj = indentAdj; $f.j = j; $f.out = out; $f.res = res; $f.sourceAdj = sourceAdj; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	isSpace = function(b) {
		var $ptr, b;
		return (b === 32) || (b === 9) || (b === 10) || (b === 13);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ast.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parser.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = printer.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = token.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		config = new printer.Config.ptr(6, 8, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/template/parse"] = (function() {
	var $pkg = {}, $init, bytes, fmt, runtime, strconv, strings, unicode, utf8, item, itemType, stateFn, lexer, Node, NodeType, Pos, ListNode, TextNode, PipeNode, ActionNode, CommandNode, IdentifierNode, VariableNode, DotNode, NilNode, FieldNode, ChainNode, BoolNode, NumberNode, StringNode, endNode, elseNode, BranchNode, IfNode, RangeNode, WithNode, TemplateNode, Tree, sliceType, ptrType, sliceType$1, sliceType$2, arrayType, arrayType$1, ptrType$1, ptrType$2, sliceType$3, ptrType$3, sliceType$4, ptrType$4, sliceType$5, ptrType$5, ptrType$6, mapType, sliceType$6, ptrType$7, arrayType$2, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, chanType, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, mapType$1, key, textFormat, lex, lexText, rightTrimLength, leftTrimLength, lexLeftDelim, lexComment, lexRightDelim, lexInsideAction, lexSpace, lexIdentifier, lexField, lexVariable, lexFieldOrVariable, lexChar, lexNumber, lexQuote, lexRawQuote, isSpace, isEndOfLine, isAlphaNumeric, NewIdentifier, Parse, New, IsEmptyTree;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	item = $pkg.item = $newType(0, $kindStruct, "parse.item", "item", "text/template/parse", function(typ_, pos_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = 0;
			this.pos = 0;
			this.val = "";
			return;
		}
		this.typ = typ_;
		this.pos = pos_;
		this.val = val_;
	});
	itemType = $pkg.itemType = $newType(4, $kindInt, "parse.itemType", "itemType", "text/template/parse", null);
	stateFn = $pkg.stateFn = $newType(4, $kindFunc, "parse.stateFn", "stateFn", "text/template/parse", null);
	lexer = $pkg.lexer = $newType(0, $kindStruct, "parse.lexer", "lexer", "text/template/parse", function(name_, input_, leftDelim_, rightDelim_, state_, pos_, start_, width_, lastPos_, items_, parenDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.input = "";
			this.leftDelim = "";
			this.rightDelim = "";
			this.state = $throwNilPointerError;
			this.pos = 0;
			this.start = 0;
			this.width = 0;
			this.lastPos = 0;
			this.items = $chanNil;
			this.parenDepth = 0;
			return;
		}
		this.name = name_;
		this.input = input_;
		this.leftDelim = leftDelim_;
		this.rightDelim = rightDelim_;
		this.state = state_;
		this.pos = pos_;
		this.start = start_;
		this.width = width_;
		this.lastPos = lastPos_;
		this.items = items_;
		this.parenDepth = parenDepth_;
	});
	Node = $pkg.Node = $newType(8, $kindInterface, "parse.Node", "Node", "text/template/parse", null);
	NodeType = $pkg.NodeType = $newType(4, $kindInt, "parse.NodeType", "NodeType", "text/template/parse", null);
	Pos = $pkg.Pos = $newType(4, $kindInt, "parse.Pos", "Pos", "text/template/parse", null);
	ListNode = $pkg.ListNode = $newType(0, $kindStruct, "parse.ListNode", "ListNode", "text/template/parse", function(NodeType_, Pos_, tr_, Nodes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Nodes = sliceType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Nodes = Nodes_;
	});
	TextNode = $pkg.TextNode = $newType(0, $kindStruct, "parse.TextNode", "TextNode", "text/template/parse", function(NodeType_, Pos_, tr_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Text = sliceType$2.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Text = Text_;
	});
	PipeNode = $pkg.PipeNode = $newType(0, $kindStruct, "parse.PipeNode", "PipeNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Decl_, Cmds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Decl = sliceType$3.nil;
			this.Cmds = sliceType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Decl = Decl_;
		this.Cmds = Cmds_;
	});
	ActionNode = $pkg.ActionNode = $newType(0, $kindStruct, "parse.ActionNode", "ActionNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Pipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Pipe = ptrType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Pipe = Pipe_;
	});
	CommandNode = $pkg.CommandNode = $newType(0, $kindStruct, "parse.CommandNode", "CommandNode", "text/template/parse", function(NodeType_, Pos_, tr_, Args_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Args = sliceType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Args = Args_;
	});
	IdentifierNode = $pkg.IdentifierNode = $newType(0, $kindStruct, "parse.IdentifierNode", "IdentifierNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	VariableNode = $pkg.VariableNode = $newType(0, $kindStruct, "parse.VariableNode", "VariableNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	DotNode = $pkg.DotNode = $newType(0, $kindStruct, "parse.DotNode", "DotNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	NilNode = $pkg.NilNode = $newType(0, $kindStruct, "parse.NilNode", "NilNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	FieldNode = $pkg.FieldNode = $newType(0, $kindStruct, "parse.FieldNode", "FieldNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Ident = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Ident = Ident_;
	});
	ChainNode = $pkg.ChainNode = $newType(0, $kindStruct, "parse.ChainNode", "ChainNode", "text/template/parse", function(NodeType_, Pos_, tr_, Node_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Node = $ifaceNil;
			this.Field = sliceType$5.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Node = Node_;
		this.Field = Field_;
	});
	BoolNode = $pkg.BoolNode = $newType(0, $kindStruct, "parse.BoolNode", "BoolNode", "text/template/parse", function(NodeType_, Pos_, tr_, True_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.True = false;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.True = True_;
	});
	NumberNode = $pkg.NumberNode = $newType(0, $kindStruct, "parse.NumberNode", "NumberNode", "text/template/parse", function(NodeType_, Pos_, tr_, IsInt_, IsUint_, IsFloat_, IsComplex_, Int64_, Uint64_, Float64_, Complex128_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.IsInt = false;
			this.IsUint = false;
			this.IsFloat = false;
			this.IsComplex = false;
			this.Int64 = new $Int64(0, 0);
			this.Uint64 = new $Uint64(0, 0);
			this.Float64 = 0;
			this.Complex128 = new $Complex128(0, 0);
			this.Text = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.IsInt = IsInt_;
		this.IsUint = IsUint_;
		this.IsFloat = IsFloat_;
		this.IsComplex = IsComplex_;
		this.Int64 = Int64_;
		this.Uint64 = Uint64_;
		this.Float64 = Float64_;
		this.Complex128 = Complex128_;
		this.Text = Text_;
	});
	StringNode = $pkg.StringNode = $newType(0, $kindStruct, "parse.StringNode", "StringNode", "text/template/parse", function(NodeType_, Pos_, tr_, Quoted_, Text_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Quoted = "";
			this.Text = "";
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Quoted = Quoted_;
		this.Text = Text_;
	});
	endNode = $pkg.endNode = $newType(0, $kindStruct, "parse.endNode", "endNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
	});
	elseNode = $pkg.elseNode = $newType(0, $kindStruct, "parse.elseNode", "elseNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
	});
	BranchNode = $pkg.BranchNode = $newType(0, $kindStruct, "parse.BranchNode", "BranchNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Pipe_, List_, ElseList_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Pipe = ptrType$4.nil;
			this.List = ptrType$1.nil;
			this.ElseList = ptrType$1.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Pipe = Pipe_;
		this.List = List_;
		this.ElseList = ElseList_;
	});
	IfNode = $pkg.IfNode = $newType(0, $kindStruct, "parse.IfNode", "IfNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	RangeNode = $pkg.RangeNode = $newType(0, $kindStruct, "parse.RangeNode", "RangeNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	WithNode = $pkg.WithNode = $newType(0, $kindStruct, "parse.WithNode", "WithNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BranchNode = new BranchNode.ptr(0, 0, ptrType.nil, 0, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil);
			return;
		}
		this.BranchNode = BranchNode_;
	});
	TemplateNode = $pkg.TemplateNode = $newType(0, $kindStruct, "parse.TemplateNode", "TemplateNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Name_, Pipe_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NodeType = 0;
			this.Pos = 0;
			this.tr = ptrType.nil;
			this.Line = 0;
			this.Name = "";
			this.Pipe = ptrType$4.nil;
			return;
		}
		this.NodeType = NodeType_;
		this.Pos = Pos_;
		this.tr = tr_;
		this.Line = Line_;
		this.Name = Name_;
		this.Pipe = Pipe_;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "parse.Tree", "Tree", "text/template/parse", function(Name_, ParseName_, Root_, text_, funcs_, lex_, token_, peekCount_, vars_, treeSet_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.ParseName = "";
			this.Root = ptrType$1.nil;
			this.text = "";
			this.funcs = sliceType$6.nil;
			this.lex = ptrType$7.nil;
			this.token = arrayType$2.zero();
			this.peekCount = 0;
			this.vars = sliceType$5.nil;
			this.treeSet = false;
			return;
		}
		this.Name = Name_;
		this.ParseName = ParseName_;
		this.Root = Root_;
		this.text = text_;
		this.funcs = funcs_;
		this.lex = lex_;
		this.token = token_;
		this.peekCount = peekCount_;
		this.vars = vars_;
		this.treeSet = treeSet_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Tree);
	sliceType$1 = $sliceType(Node);
	sliceType$2 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(ListNode);
	ptrType$2 = $ptrType(VariableNode);
	sliceType$3 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(CommandNode);
	sliceType$4 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(PipeNode);
	sliceType$5 = $sliceType($String);
	ptrType$5 = $ptrType(NumberNode);
	ptrType$6 = $ptrType($Complex128);
	mapType = $mapType($String, $emptyInterface);
	sliceType$6 = $sliceType(mapType);
	ptrType$7 = $ptrType(lexer);
	arrayType$2 = $arrayType(item, 3);
	ptrType$8 = $ptrType($error);
	ptrType$9 = $ptrType(ActionNode);
	ptrType$10 = $ptrType(IfNode);
	ptrType$11 = $ptrType(RangeNode);
	ptrType$12 = $ptrType(TemplateNode);
	ptrType$13 = $ptrType(TextNode);
	ptrType$14 = $ptrType(WithNode);
	chanType = $chanType(item, false, false);
	ptrType$15 = $ptrType(IdentifierNode);
	ptrType$16 = $ptrType(DotNode);
	ptrType$17 = $ptrType(NilNode);
	ptrType$18 = $ptrType(FieldNode);
	ptrType$19 = $ptrType(ChainNode);
	ptrType$20 = $ptrType(BoolNode);
	ptrType$21 = $ptrType(StringNode);
	ptrType$22 = $ptrType(endNode);
	ptrType$23 = $ptrType(elseNode);
	ptrType$24 = $ptrType(BranchNode);
	mapType$1 = $mapType($String, ptrType);
	item.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, _r$2, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $clone(this, item);
			/* */ if ((i.typ === 6)) { $s = 2; continue; }
			/* */ if ((i.typ === 0)) { $s = 3; continue; }
			/* */ if (i.typ > 20) { $s = 4; continue; }
			/* */ if (i.val.length > 10) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((i.typ === 6)) { */ case 2:
				return "EOF";
			/* } else if ((i.typ === 0)) { */ case 3:
				return i.val;
			/* } else if (i.typ > 20) { */ case 4:
				_r = fmt.Sprintf("<%s>", new sliceType([new $String(i.val)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r;
			/* } else if (i.val.length > 10) { */ case 5:
				_r$1 = fmt.Sprintf("%.10q...", new sliceType([new $String(i.val)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 10; case 10:
				return _r$1;
			/* } */ case 6:
		case 1:
		_r$2 = fmt.Sprintf("%q", new sliceType([new $String(i.val)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: item.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	item.prototype.String = function() { return this.$val.String(); };
	lexer.ptr.prototype.next = function() {
		var $ptr, _tuple, l, r, w;
		l = this;
		if ((l.pos >> 0) >= l.input.length) {
			l.width = 0;
			return -1;
		}
		_tuple = utf8.DecodeRuneInString(l.input.substring(l.pos));
		r = _tuple[0];
		w = _tuple[1];
		l.width = (w >> 0);
		l.pos = l.pos + (l.width) >> 0;
		return r;
	};
	lexer.prototype.next = function() { return this.$val.next(); };
	lexer.ptr.prototype.peek = function() {
		var $ptr, l, r;
		l = this;
		r = l.next();
		l.backup();
		return r;
	};
	lexer.prototype.peek = function() { return this.$val.peek(); };
	lexer.ptr.prototype.backup = function() {
		var $ptr, l;
		l = this;
		l.pos = l.pos - (l.width) >> 0;
	};
	lexer.prototype.backup = function() { return this.$val.backup(); };
	lexer.ptr.prototype.emit = function(t) {
		var $ptr, l, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		$r = $send(l.items, new item.ptr(t, l.start, l.input.substring(l.start, l.pos))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.start = l.pos;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.emit }; } $f.$ptr = $ptr; $f.l = l; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.emit = function(t) { return this.$val.emit(t); };
	lexer.ptr.prototype.ignore = function() {
		var $ptr, l;
		l = this;
		l.start = l.pos;
	};
	lexer.prototype.ignore = function() { return this.$val.ignore(); };
	lexer.ptr.prototype.accept = function(valid) {
		var $ptr, l, valid;
		l = this;
		if (strings.IndexRune(valid, l.next()) >= 0) {
			return true;
		}
		l.backup();
		return false;
	};
	lexer.prototype.accept = function(valid) { return this.$val.accept(valid); };
	lexer.ptr.prototype.acceptRun = function(valid) {
		var $ptr, l, valid;
		l = this;
		while (true) {
			if (!(strings.IndexRune(valid, l.next()) >= 0)) { break; }
		}
		l.backup();
	};
	lexer.prototype.acceptRun = function(valid) { return this.$val.acceptRun(valid); };
	lexer.ptr.prototype.lineNumber = function() {
		var $ptr, l;
		l = this;
		return 1 + strings.Count(l.input.substring(0, l.lastPos), "\n") >> 0;
	};
	lexer.prototype.lineNumber = function() { return this.$val.lineNumber(); };
	lexer.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r, args, format, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; args = $f.args; format = $f.format; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = $send(l.items, new item.ptr(0, l.start, _r)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r = _r; $f.args = args; $f.format = format; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	lexer.ptr.prototype.nextItem = function() {
		var $ptr, _r, item$1, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; item$1 = $f.item$1; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = $recv(l.items); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		item$1 = $clone(_r[0], item);
		l.lastPos = item$1.pos;
		return item$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.nextItem }; } $f.$ptr = $ptr; $f._r = _r; $f.item$1 = item$1; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.nextItem = function() { return this.$val.nextItem(); };
	lexer.ptr.prototype.drain = function() {
		var $ptr, _ok, _r, _ref, _tuple, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _ok = $f._ok; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_ref = l.items;
		/* while (true) { */ case 1:
			_r = $recv(_ref); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			_ok = _tuple[1];
			if (!_ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.drain }; } $f.$ptr = $ptr; $f._ok = _ok; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.drain = function() { return this.$val.drain(); };
	lex = function(name, input, left, right) {
		var $ptr, input, l, left, name, right;
		if (left === "") {
			left = "{{";
		}
		if (right === "") {
			right = "}}";
		}
		l = new lexer.ptr(name, input, left, right, $throwNilPointerError, 0, 0, 0, 0, new $Chan(item, 0), 0);
		$go($methodVal(l, "run"), []);
		return l;
	};
	lexer.ptr.prototype.run = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		l.state = lexText;
		/* while (true) { */ case 1:
			/* if (!(!(l.state === $throwNilPointerError))) { break; } */ if(!(!(l.state === $throwNilPointerError))) { $s = 2; continue; }
			_r = l.state(l); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l.state = _r;
		/* } */ $s = 1; continue; case 2:
		$close(l.items);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: lexer.ptr.prototype.run }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.prototype.run = function() { return this.$val.run(); };
	lexText = function(l) {
		var $ptr, _r, _tuple, delim, l, trimLength, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; delim = $f.delim; l = $f.l; trimLength = $f.trimLength; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			_tuple = l.atLeftDelim();
			delim = _tuple[0];
			trimSpace = _tuple[1];
			/* */ if (delim) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (delim) { */ case 3:
				trimLength = 0;
				/* */ if (trimSpace) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (trimSpace) { */ case 5:
					_r = rightTrimLength(l.input.substring(l.start, l.pos)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					trimLength = _r;
				/* } */ case 6:
				l.pos = l.pos - (trimLength) >> 0;
				/* */ if (l.pos > l.start) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (l.pos > l.start) { */ case 8:
					$r = l.emit(18); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				l.pos = l.pos + (trimLength) >> 0;
				l.ignore();
				return lexLeftDelim;
			/* } */ case 4:
			if (l.next() === -1) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		/* */ if (l.pos > l.start) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (l.pos > l.start) { */ case 11:
			$r = l.emit(18); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$r = l.emit(6); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexText }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.delim = delim; $f.l = l; $f.trimLength = trimLength; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atLeftDelim = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, delim, l, trimSpaces;
		delim = false;
		trimSpaces = false;
		l = this;
		if (!strings.HasPrefix(l.input.substring(l.pos), l.leftDelim)) {
			_tmp = false;
			_tmp$1 = false;
			delim = _tmp;
			trimSpaces = _tmp$1;
			return [delim, trimSpaces];
		}
		trimSpaces = strings.HasPrefix(l.input.substring((l.pos + (l.leftDelim.length >> 0) >> 0)), "- ");
		_tmp$2 = true;
		_tmp$3 = trimSpaces;
		delim = _tmp$2;
		trimSpaces = _tmp$3;
		return [delim, trimSpaces];
	};
	lexer.prototype.atLeftDelim = function() { return this.$val.atLeftDelim(); };
	rightTrimLength = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.TrimRight(s, " \t\r\n"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ((s.length - _r.length >> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rightTrimLength }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atRightDelim = function() {
		var $ptr, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, delim, l, trimSpaces;
		delim = false;
		trimSpaces = false;
		l = this;
		if (strings.HasPrefix(l.input.substring(l.pos), l.rightDelim)) {
			_tmp = true;
			_tmp$1 = false;
			delim = _tmp;
			trimSpaces = _tmp$1;
			return [delim, trimSpaces];
		}
		if (strings.HasPrefix(l.input.substring(l.pos), " -")) {
			if (strings.HasPrefix(l.input.substring((l.pos + 2 >> 0)), l.rightDelim)) {
				_tmp$2 = true;
				_tmp$3 = true;
				delim = _tmp$2;
				trimSpaces = _tmp$3;
				return [delim, trimSpaces];
			}
		}
		_tmp$4 = false;
		_tmp$5 = false;
		delim = _tmp$4;
		trimSpaces = _tmp$5;
		return [delim, trimSpaces];
	};
	lexer.prototype.atRightDelim = function() { return this.$val.atRightDelim(); };
	leftTrimLength = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.TrimLeft(s, " \t\r\n"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return ((s.length - _r.length >> 0) >> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: leftTrimLength }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexLeftDelim = function(l) {
		var $ptr, afterMarker, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; afterMarker = $f.afterMarker; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l.pos = l.pos + ((l.leftDelim.length >> 0)) >> 0;
		trimSpace = strings.HasPrefix(l.input.substring(l.pos), "- ");
		afterMarker = 0;
		if (trimSpace) {
			afterMarker = 2;
		}
		if (strings.HasPrefix(l.input.substring((l.pos + afterMarker >> 0)), "/*")) {
			l.pos = l.pos + (afterMarker) >> 0;
			l.ignore();
			return lexComment;
		}
		$r = l.emit(9); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.pos = l.pos + (afterMarker) >> 0;
		l.ignore();
		l.parenDepth = 0;
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexLeftDelim }; } $f.$ptr = $ptr; $f.afterMarker = afterMarker; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexComment = function(l) {
		var $ptr, _r, _r$1, _r$2, _tuple, delim, i, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; delim = $f.delim; i = $f.i; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l.pos = l.pos + (2) >> 0;
		i = strings.Index(l.input.substring(l.pos), "*/");
		/* */ if (i < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0) { */ case 1:
			_r = l.errorf("unclosed comment", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		l.pos = l.pos + (((i + 2 >> 0) >> 0)) >> 0;
		_tuple = l.atRightDelim();
		delim = _tuple[0];
		trimSpace = _tuple[1];
		/* */ if (!delim) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!delim) { */ case 5:
			_r$1 = l.errorf("comment ends before closing delimiter", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$1;
		/* } */ case 6:
		if (trimSpace) {
			l.pos = l.pos + (2) >> 0;
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		/* */ if (trimSpace) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (trimSpace) { */ case 9:
			_r$2 = leftTrimLength(l.input.substring(l.pos)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			l.pos = l.pos + (_r$2) >> 0;
		/* } */ case 10:
		l.ignore();
		return lexText;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexComment }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.delim = delim; $f.i = i; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexRightDelim = function(l) {
		var $ptr, _r, l, trimSpace, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; trimSpace = $f.trimSpace; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		trimSpace = strings.HasPrefix(l.input.substring(l.pos), " -");
		if (trimSpace) {
			l.pos = l.pos + (2) >> 0;
			l.ignore();
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		$r = l.emit(14); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (trimSpace) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (trimSpace) { */ case 2:
			_r = leftTrimLength(l.input.substring(l.pos)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l.pos = l.pos + (_r) >> 0;
			l.ignore();
		/* } */ case 3:
		return lexText;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexRightDelim }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.trimSpace = trimSpace; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexInsideAction = function(l) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, delim, l, r, r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; delim = $f.delim; l = $f.l; r = $f.r; r$1 = $f.r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = l.atRightDelim();
		delim = _tuple[0];
		/* */ if (delim) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (delim) { */ case 1:
			if (l.parenDepth === 0) {
				return lexRightDelim;
			}
			_r = l.errorf("unclosed left paren", new sliceType([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
			r = l.next();
			/* */ if ((r === -1) || isEndOfLine(r)) { $s = 6; continue; }
			/* */ if (isSpace(r)) { $s = 7; continue; }
			/* */ if ((r === 58)) { $s = 8; continue; }
			/* */ if ((r === 124)) { $s = 9; continue; }
			/* */ if ((r === 34)) { $s = 10; continue; }
			/* */ if ((r === 96)) { $s = 11; continue; }
			/* */ if ((r === 36)) { $s = 12; continue; }
			/* */ if ((r === 39)) { $s = 13; continue; }
			/* */ if ((r === 46)) { $s = 14; continue; }
			/* */ if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) { $s = 15; continue; }
			/* */ if (isAlphaNumeric(r)) { $s = 16; continue; }
			/* */ if ((r === 40)) { $s = 17; continue; }
			/* */ if ((r === 41)) { $s = 18; continue; }
			/* */ if (r <= 127 && unicode.IsPrint(r)) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if ((r === -1) || isEndOfLine(r)) { */ case 6:
				_r$1 = l.errorf("unclosed action", new sliceType([])); /* */ $s = 22; case 22: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 23; case 23:
				return _r$1;
			/* } else if (isSpace(r)) { */ case 7:
				return lexSpace;
			/* } else if ((r === 58)) { */ case 8:
				/* */ if (!((l.next() === 61))) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (!((l.next() === 61))) { */ case 24:
					_r$2 = l.errorf("expected :=", new sliceType([])); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ $s = 27; case 27:
					return _r$2;
				/* } */ case 25:
				$r = l.emit(5); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 21; continue;
			/* } else if ((r === 124)) { */ case 9:
				$r = l.emit(12); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 21; continue;
			/* } else if ((r === 34)) { */ case 10:
				return lexQuote;
			/* } else if ((r === 96)) { */ case 11:
				return lexRawQuote;
			/* } else if ((r === 36)) { */ case 12:
				return lexVariable;
			/* } else if ((r === 39)) { */ case 13:
				return lexChar;
			/* } else if ((r === 46)) { */ case 14:
				if (l.pos < (l.input.length >> 0)) {
					r$1 = l.input.charCodeAt(l.pos);
					if (r$1 < 48 || 57 < r$1) {
						return lexField;
					}
				}
				l.backup();
				return lexNumber;
			/* } else if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) { */ case 15:
				l.backup();
				return lexNumber;
			/* } else if (isAlphaNumeric(r)) { */ case 16:
				l.backup();
				return lexIdentifier;
			/* } else if ((r === 40)) { */ case 17:
				$r = l.emit(10); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				l.parenDepth = l.parenDepth + (1) >> 0;
				$s = 21; continue;
			/* } else if ((r === 41)) { */ case 18:
				$r = l.emit(15); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				l.parenDepth = l.parenDepth - (1) >> 0;
				/* */ if (l.parenDepth < 0) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (l.parenDepth < 0) { */ case 32:
					_r$3 = l.errorf("unexpected right paren %#U", new sliceType([new $Int32(r)])); /* */ $s = 34; case 34: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ $s = 35; case 35:
					return _r$3;
				/* } */ case 33:
				$s = 21; continue;
			/* } else if (r <= 127 && unicode.IsPrint(r)) { */ case 19:
				$r = l.emit(2); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				return lexInsideAction;
			/* } else { */ case 20:
				_r$4 = l.errorf("unrecognized character in action: %#U", new sliceType([new $Int32(r)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 38; case 38:
				return _r$4;
			/* } */ case 21:
		case 5:
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexInsideAction }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.delim = delim; $f.l = l; $f.r = r; $f.r$1 = r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexSpace = function(l) {
		var $ptr, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		while (true) {
			if (!(isSpace(l.peek()))) { break; }
			l.next();
		}
		$r = l.emit(16); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexSpace }; } $f.$ptr = $ptr; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexIdentifier = function(l) {
		var $ptr, _entry, _entry$1, _r, l, r, word, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _r = $f._r; l = $f.l; r = $f.r; word = $f.word; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				r = l.next();
				/* */ if (isAlphaNumeric(r)) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (isAlphaNumeric(r)) { */ case 4:
					$s = 6; continue;
				/* } else { */ case 5:
					l.backup();
					word = l.input.substring(l.start, l.pos);
					/* */ if (!l.atTerminator()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!l.atTerminator()) { */ case 7:
						_r = l.errorf("bad character %#U", new sliceType([new $Int32(r)])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						/* */ $s = 10; case 10:
						return _r;
					/* } */ case 8:
						/* */ if ((_entry = key[$String.keyFor(word)], _entry !== undefined ? _entry.v : 0) > 20) { $s = 12; continue; }
						/* */ if ((word.charCodeAt(0) === 46)) { $s = 13; continue; }
						/* */ if ((word === "true") || (word === "false")) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if ((_entry = key[$String.keyFor(word)], _entry !== undefined ? _entry.v : 0) > 20) { */ case 12:
							$r = l.emit((_entry$1 = key[$String.keyFor(word)], _entry$1 !== undefined ? _entry$1.v : 0)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 16; continue;
						/* } else if ((word.charCodeAt(0) === 46)) { */ case 13:
							$r = l.emit(7); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 16; continue;
						/* } else if ((word === "true") || (word === "false")) { */ case 14:
							$r = l.emit(1); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 16; continue;
						/* } else { */ case 15:
							$r = l.emit(8); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 16:
					case 11:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 6:
			case 3:
		/* } */ $s = 1; continue; case 2:
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexIdentifier }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r = _r; $f.l = l; $f.r = r; $f.word = word; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexField = function(l) {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lexFieldOrVariable(l, 7); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexField }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexVariable = function(l) {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (l.atTerminator()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.atTerminator()) { */ case 1:
			$r = l.emit(19); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return lexInsideAction;
		/* } */ case 2:
		_r = lexFieldOrVariable(l, 19); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexFieldOrVariable = function(l, typ) {
		var $ptr, _r, l, r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; r = $f.r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (l.atTerminator()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l.atTerminator()) { */ case 1:
			/* */ if (typ === 19) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (typ === 19) { */ case 3:
				$r = l.emit(19); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				$r = l.emit(22); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			return lexInsideAction;
		/* } */ case 2:
		r = 0;
		while (true) {
			r = l.next();
			if (!isAlphaNumeric(r)) {
				l.backup();
				break;
			}
		}
		/* */ if (!l.atTerminator()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!l.atTerminator()) { */ case 8:
			_r = l.errorf("bad character %#U", new sliceType([new $Int32(r)])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return _r;
		/* } */ case 9:
		$r = l.emit(typ); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexFieldOrVariable }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.r = r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.atTerminator = function() {
		var $ptr, _1, _tuple, l, r, rd;
		l = this;
		r = l.peek();
		if (isSpace(r) || isEndOfLine(r)) {
			return true;
		}
		_1 = r;
		if ((_1 === -1) || (_1 === 46) || (_1 === 44) || (_1 === 124) || (_1 === 58) || (_1 === 41) || (_1 === 40)) {
			return true;
		}
		_tuple = utf8.DecodeRuneInString(l.rightDelim);
		rd = _tuple[0];
		if (rd === r) {
			return true;
		}
		return false;
	};
	lexer.prototype.atTerminator = function() { return this.$val.atTerminator(); };
	lexChar = function(l) {
		var $ptr, _2, _r, _r$1, l, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; l = $f.l; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_2 = l.next();
				/* */ if (_2 === 92) { $s = 4; continue; }
				/* */ if ((_2 === -1) || (_2 === 10)) { $s = 5; continue; }
				/* */ if (_2 === 39) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_2 === 92) { */ case 4:
					r = l.next();
					if (!((r === -1)) && !((r === 10))) {
						/* break; */ $s = 3; continue;
					}
					_r = l.errorf("unterminated character constant", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* */ $s = 9; case 9:
					return _r;
				/* } else if ((_2 === -1) || (_2 === 10)) { */ case 5:
					_r$1 = l.errorf("unterminated character constant", new sliceType([])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ $s = 11; case 11:
					return _r$1;
				/* } else if (_2 === 39) { */ case 6:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 7:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(3); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexChar }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexNumber = function(l) {
		var $ptr, _r, _r$1, l, sign, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; l = $f.l; sign = $f.sign; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!l.scanNumber()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!l.scanNumber()) { */ case 1:
			_r = l.errorf("bad number syntax: %q", new sliceType([new $String(l.input.substring(l.start, l.pos))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		sign = l.peek();
		/* */ if ((sign === 43) || (sign === 45)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((sign === 43) || (sign === 45)) { */ case 5:
			/* */ if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) { */ case 8:
				_r$1 = l.errorf("bad number syntax: %q", new sliceType([new $String(l.input.substring(l.start, l.pos))])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 11; case 11:
				return _r$1;
			/* } */ case 9:
			$r = l.emit(4); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			$r = l.emit(11); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexNumber }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.sign = sign; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexer.ptr.prototype.scanNumber = function() {
		var $ptr, digits, l;
		l = this;
		l.accept("+-");
		digits = "0123456789";
		if (l.accept("0") && l.accept("xX")) {
			digits = "0123456789abcdefABCDEF";
		}
		l.acceptRun(digits);
		if (l.accept(".")) {
			l.acceptRun(digits);
		}
		if (l.accept("eE")) {
			l.accept("+-");
			l.acceptRun("0123456789");
		}
		l.accept("i");
		if (isAlphaNumeric(l.peek())) {
			l.next();
			return false;
		}
		return true;
	};
	lexer.prototype.scanNumber = function() { return this.$val.scanNumber(); };
	lexQuote = function(l) {
		var $ptr, _3, _r, _r$1, l, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; l = $f.l; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_3 = l.next();
				/* */ if (_3 === 92) { $s = 4; continue; }
				/* */ if ((_3 === -1) || (_3 === 10)) { $s = 5; continue; }
				/* */ if (_3 === 34) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_3 === 92) { */ case 4:
					r = l.next();
					if (!((r === -1)) && !((r === 10))) {
						/* break; */ $s = 3; continue;
					}
					_r = l.errorf("unterminated quoted string", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* */ $s = 9; case 9:
					return _r;
				/* } else if ((_3 === -1) || (_3 === 10)) { */ case 5:
					_r$1 = l.errorf("unterminated quoted string", new sliceType([])); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ $s = 11; case 11:
					return _r$1;
				/* } else if (_3 === 34) { */ case 6:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 7:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(17); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexQuote }; } $f.$ptr = $ptr; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lexRawQuote = function(l) {
		var $ptr, _4, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
				_4 = l.next();
				/* */ if (_4 === -1) { $s = 4; continue; }
				/* */ if (_4 === 96) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_4 === -1) { */ case 4:
					_r = l.errorf("unterminated raw quoted string", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* */ $s = 8; case 8:
					return _r;
				/* } else if (_4 === 96) { */ case 5:
					/* break Loop; */ $s = 2; continue s;
				/* } */ case 6:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = l.emit(13); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return lexInsideAction;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lexRawQuote }; } $f.$ptr = $ptr; $f._4 = _4; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	isSpace = function(r) {
		var $ptr, r;
		return (r === 32) || (r === 9);
	};
	isEndOfLine = function(r) {
		var $ptr, r;
		return (r === 13) || (r === 10);
	};
	isAlphaNumeric = function(r) {
		var $ptr, r;
		return (r === 95) || unicode.IsLetter(r) || unicode.IsDigit(r);
	};
	Pos.prototype.Position = function() {
		var $ptr, p;
		p = this.$val;
		return p;
	};
	$ptrType(Pos).prototype.Position = function() { return new Pos(this.$get()).Position(); };
	NodeType.prototype.Type = function() {
		var $ptr, t;
		t = this.$val;
		return t;
	};
	$ptrType(NodeType).prototype.Type = function() { return new NodeType(this.$get()).Type(); };
	Tree.ptr.prototype.newList = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new ListNode.ptr(11, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newList = function(pos) { return this.$val.newList(pos); };
	ListNode.ptr.prototype.append = function(n) {
		var $ptr, l, n;
		l = this;
		l.Nodes = $append(l.Nodes, n);
	};
	ListNode.prototype.append = function(n) { return this.$val.append(n); };
	ListNode.ptr.prototype.tree = function() {
		var $ptr, l;
		l = this;
		return l.tr;
	};
	ListNode.prototype.tree = function() { return this.$val.tree(); };
	ListNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _ref, b, l, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; l = $f.l; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		b = new bytes.Buffer.ptr(sliceType$2.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_ref = l.Nodes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = fmt.Fprint(b, new sliceType([n])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_i++;
		/* } */ $s = 1; continue; case 2:
		return b.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.l = l; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.String = function() { return this.$val.String(); };
	ListNode.ptr.prototype.CopyList = function() {
		var $ptr, _i, _r, _ref, elem, l, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; elem = $f.elem; l = $f.l; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$1.nil) {
			return l;
		}
		n = l.tr.newList(l.Pos);
		_ref = l.Nodes;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			elem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = elem.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.CopyList }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.elem = elem; $f.l = l; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.CopyList = function() { return this.$val.CopyList(); };
	ListNode.ptr.prototype.Copy = function() {
		var $ptr, _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.CopyList(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ListNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	ListNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newText = function(pos, text) {
		var $ptr, pos, t, text;
		t = this;
		return new TextNode.ptr(0, pos, t, new sliceType$2($stringToBytes(text)));
	};
	Tree.prototype.newText = function(pos, text) { return this.$val.newText(pos, text); };
	TextNode.ptr.prototype.String = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = fmt.Sprintf(textFormat, new sliceType([t.Text])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TextNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TextNode.prototype.String = function() { return this.$val.String(); };
	TextNode.ptr.prototype.tree = function() {
		var $ptr, t;
		t = this;
		return t.tr;
	};
	TextNode.prototype.tree = function() { return this.$val.tree(); };
	TextNode.ptr.prototype.Copy = function() {
		var $ptr, t;
		t = this;
		return new TextNode.ptr(0, t.Pos, t.tr, $appendSlice(new sliceType$2([]), t.Text));
	};
	TextNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newPipeline = function(pos, line, decl) {
		var $ptr, decl, line, pos, t;
		t = this;
		return new PipeNode.ptr(14, pos, t, line, decl, sliceType$4.nil);
	};
	Tree.prototype.newPipeline = function(pos, line, decl) { return this.$val.newPipeline(pos, line, decl); };
	PipeNode.ptr.prototype.append = function(command) {
		var $ptr, command, p;
		p = this;
		p.Cmds = $append(p.Cmds, command);
	};
	PipeNode.prototype.append = function(command) { return this.$val.append(command); };
	PipeNode.ptr.prototype.String = function() {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, c, i, i$1, p, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; i = $f.i; i$1 = $f.i$1; p = $f.p; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = "";
		if (p.Decl.$length > 0) {
			_ref = p.Decl;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					s = s + (", ");
				}
				s = s + (v.String());
				_i++;
			}
			s = s + (" := ");
		}
		_ref$1 = p.Cmds;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			i$1 = _i$1;
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (i$1 > 0) {
				s = s + (" | ");
			}
			_r = c.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = s + (_r);
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.String = function() { return this.$val.String(); };
	PipeNode.ptr.prototype.tree = function() {
		var $ptr, p;
		p = this;
		return p.tr;
	};
	PipeNode.prototype.tree = function() { return this.$val.tree(); };
	PipeNode.ptr.prototype.CopyPipe = function() {
		var $ptr, _i, _i$1, _r, _ref, _ref$1, c, d, decl, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; d = $f.d; decl = $f.decl; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p === ptrType$4.nil) {
			return p;
		}
		decl = sliceType$3.nil;
		_ref = p.Decl;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			decl = $append(decl, $assertType(d.Copy(), ptrType$2));
			_i++;
		}
		n = p.tr.newPipeline(p.Pos, p.Line, decl);
		_ref$1 = p.Cmds;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			_r = c.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append($assertType(_r, ptrType$3)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.CopyPipe }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.d = d; $f.decl = decl; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.CopyPipe = function() { return this.$val.CopyPipe(); };
	PipeNode.ptr.prototype.Copy = function() {
		var $ptr, _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PipeNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	PipeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newAction = function(pos, line, pipe) {
		var $ptr, line, pipe, pos, t;
		t = this;
		return new ActionNode.ptr(1, pos, t, line, pipe);
	};
	Tree.prototype.newAction = function(pos, line, pipe) { return this.$val.newAction(pos, line, pipe); };
	ActionNode.ptr.prototype.String = function() {
		var $ptr, _r, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r = fmt.Sprintf("{{%s}}", new sliceType([a.Pipe])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.String = function() { return this.$val.String(); };
	ActionNode.ptr.prototype.tree = function() {
		var $ptr, a;
		a = this;
		return a.tr;
	};
	ActionNode.prototype.tree = function() { return this.$val.tree(); };
	ActionNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _r, _r$1, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_arg = a.Pos;
		_arg$1 = a.Line;
		_r = a.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = a.tr.newAction(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ActionNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	ActionNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newCommand = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new CommandNode.ptr(4, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newCommand = function(pos) { return this.$val.newCommand(pos); };
	CommandNode.ptr.prototype.append = function(arg) {
		var $ptr, arg, c;
		c = this;
		c.Args = $append(c.Args, arg);
	};
	CommandNode.prototype.append = function(arg) { return this.$val.append(arg); };
	CommandNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _r$1, _ref, _tuple, arg, arg$1, c, i, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; arg$1 = $f.arg$1; c = $f.c; i = $f.i; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		s = "";
		_ref = c.Args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (" ");
			}
			_tuple = $assertType(arg, ptrType$4, true);
			arg$1 = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ok) { */ case 3:
				_r = arg$1.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				s = s + ("(" + _r + ")");
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$1 = arg.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			s = s + (_r$1);
			_i++;
		/* } */ $s = 1; continue; case 2:
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommandNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.arg$1 = arg$1; $f.c = c; $f.i = i; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommandNode.prototype.String = function() { return this.$val.String(); };
	CommandNode.ptr.prototype.tree = function() {
		var $ptr, c;
		c = this;
		return c.tr;
	};
	CommandNode.prototype.tree = function() { return this.$val.tree(); };
	CommandNode.ptr.prototype.Copy = function() {
		var $ptr, _i, _r, _ref, c, c$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; c$1 = $f.c$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		if (c === ptrType$3.nil) {
			return c;
		}
		n = c.tr.newCommand(c.Pos);
		_ref = c.Args;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r = c$1.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = n.append(_r); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CommandNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.c$1 = c$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	CommandNode.prototype.Copy = function() { return this.$val.Copy(); };
	NewIdentifier = function(ident) {
		var $ptr, ident;
		return new IdentifierNode.ptr(9, 0, ptrType.nil, ident);
	};
	$pkg.NewIdentifier = NewIdentifier;
	IdentifierNode.ptr.prototype.SetPos = function(pos) {
		var $ptr, i, pos;
		i = this;
		i.Pos = pos;
		return i;
	};
	IdentifierNode.prototype.SetPos = function(pos) { return this.$val.SetPos(pos); };
	IdentifierNode.ptr.prototype.SetTree = function(t) {
		var $ptr, i, t;
		i = this;
		i.tr = t;
		return i;
	};
	IdentifierNode.prototype.SetTree = function(t) { return this.$val.SetTree(t); };
	IdentifierNode.ptr.prototype.String = function() {
		var $ptr, i;
		i = this;
		return i.Ident;
	};
	IdentifierNode.prototype.String = function() { return this.$val.String(); };
	IdentifierNode.ptr.prototype.tree = function() {
		var $ptr, i;
		i = this;
		return i.tr;
	};
	IdentifierNode.prototype.tree = function() { return this.$val.tree(); };
	IdentifierNode.ptr.prototype.Copy = function() {
		var $ptr, i;
		i = this;
		return NewIdentifier(i.Ident).SetTree(i.tr).SetPos(i.Pos);
	};
	IdentifierNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newVariable = function(pos, ident) {
		var $ptr, ident, pos, t;
		t = this;
		return new VariableNode.ptr(18, pos, t, strings.Split(ident, "."));
	};
	Tree.prototype.newVariable = function(pos, ident) { return this.$val.newVariable(pos, ident); };
	VariableNode.ptr.prototype.String = function() {
		var $ptr, _i, _ref, i, id, s, v;
		v = this;
		s = "";
		_ref = v.Ident;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (id);
			_i++;
		}
		return s;
	};
	VariableNode.prototype.String = function() { return this.$val.String(); };
	VariableNode.ptr.prototype.tree = function() {
		var $ptr, v;
		v = this;
		return v.tr;
	};
	VariableNode.prototype.tree = function() { return this.$val.tree(); };
	VariableNode.ptr.prototype.Copy = function() {
		var $ptr, v;
		v = this;
		return new VariableNode.ptr(18, v.Pos, v.tr, $appendSlice(new sliceType$5([]), v.Ident));
	};
	VariableNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newDot = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new DotNode.ptr(5, pos, t);
	};
	Tree.prototype.newDot = function(pos) { return this.$val.newDot(pos); };
	DotNode.ptr.prototype.Type = function() {
		var $ptr, d;
		d = this;
		return 5;
	};
	DotNode.prototype.Type = function() { return this.$val.Type(); };
	DotNode.ptr.prototype.String = function() {
		var $ptr, d;
		d = this;
		return ".";
	};
	DotNode.prototype.String = function() { return this.$val.String(); };
	DotNode.ptr.prototype.tree = function() {
		var $ptr, d;
		d = this;
		return d.tr;
	};
	DotNode.prototype.tree = function() { return this.$val.tree(); };
	DotNode.ptr.prototype.Copy = function() {
		var $ptr, d;
		d = this;
		return d.tr.newDot(d.Pos);
	};
	DotNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNil = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new NilNode.ptr(12, pos, t);
	};
	Tree.prototype.newNil = function(pos) { return this.$val.newNil(pos); };
	NilNode.ptr.prototype.Type = function() {
		var $ptr, n;
		n = this;
		return 12;
	};
	NilNode.prototype.Type = function() { return this.$val.Type(); };
	NilNode.ptr.prototype.String = function() {
		var $ptr, n;
		n = this;
		return "nil";
	};
	NilNode.prototype.String = function() { return this.$val.String(); };
	NilNode.ptr.prototype.tree = function() {
		var $ptr, n;
		n = this;
		return n.tr;
	};
	NilNode.prototype.tree = function() { return this.$val.tree(); };
	NilNode.ptr.prototype.Copy = function() {
		var $ptr, n;
		n = this;
		return n.tr.newNil(n.Pos);
	};
	NilNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newField = function(pos, ident) {
		var $ptr, ident, pos, t;
		t = this;
		return new FieldNode.ptr(8, pos, t, strings.Split(ident.substring(1), "."));
	};
	Tree.prototype.newField = function(pos, ident) { return this.$val.newField(pos, ident); };
	FieldNode.ptr.prototype.String = function() {
		var $ptr, _i, _ref, f, id, s;
		f = this;
		s = "";
		_ref = f.Ident;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + id);
			_i++;
		}
		return s;
	};
	FieldNode.prototype.String = function() { return this.$val.String(); };
	FieldNode.ptr.prototype.tree = function() {
		var $ptr, f;
		f = this;
		return f.tr;
	};
	FieldNode.prototype.tree = function() { return this.$val.tree(); };
	FieldNode.ptr.prototype.Copy = function() {
		var $ptr, f;
		f = this;
		return new FieldNode.ptr(8, f.Pos, f.tr, $appendSlice(new sliceType$5([]), f.Ident));
	};
	FieldNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newChain = function(pos, node) {
		var $ptr, node, pos, t;
		t = this;
		return new ChainNode.ptr(3, pos, t, node, sliceType$5.nil);
	};
	Tree.prototype.newChain = function(pos, node) { return this.$val.newChain(pos, node); };
	ChainNode.ptr.prototype.Add = function(field) {
		var $ptr, c, field;
		c = this;
		if ((field.length === 0) || !((field.charCodeAt(0) === 46))) {
			$panic(new $String("no dot in field"));
		}
		field = field.substring(1);
		if (field === "") {
			$panic(new $String("empty field"));
		}
		c.Field = $append(c.Field, field);
	};
	ChainNode.prototype.Add = function(field) { return this.$val.Add(field); };
	ChainNode.ptr.prototype.String = function() {
		var $ptr, _i, _r, _ref, _tuple, c, field, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; field = $f.field; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.Node.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_tuple = $assertType(c.Node, ptrType$4, true);
		ok = _tuple[1];
		if (ok) {
			s = "(" + s + ")";
		}
		_ref = c.Field;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			field = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + field);
			_i++;
		}
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChainNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.field = field; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ChainNode.prototype.String = function() { return this.$val.String(); };
	ChainNode.ptr.prototype.tree = function() {
		var $ptr, c;
		c = this;
		return c.tr;
	};
	ChainNode.prototype.tree = function() { return this.$val.tree(); };
	ChainNode.ptr.prototype.Copy = function() {
		var $ptr, c;
		c = this;
		return new ChainNode.ptr(3, c.Pos, c.tr, c.Node, $appendSlice(new sliceType$5([]), c.Field));
	};
	ChainNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newBool = function(pos, true$1) {
		var $ptr, pos, t, true$1;
		t = this;
		return new BoolNode.ptr(2, pos, t, true$1);
	};
	Tree.prototype.newBool = function(pos, true$1) { return this.$val.newBool(pos, true$1); };
	BoolNode.ptr.prototype.String = function() {
		var $ptr, b;
		b = this;
		if (b.True) {
			return "true";
		}
		return "false";
	};
	BoolNode.prototype.String = function() { return this.$val.String(); };
	BoolNode.ptr.prototype.tree = function() {
		var $ptr, b;
		b = this;
		return b.tr;
	};
	BoolNode.prototype.tree = function() { return this.$val.tree(); };
	BoolNode.ptr.prototype.Copy = function() {
		var $ptr, b;
		b = this;
		return b.tr.newBool(b.Pos, b.True);
	};
	BoolNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNumber = function(pos, text, typ) {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, err, err$1, err$2, err$3, err$4, f, f$1, i, n, pos, rune, t, tail, text, typ, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; f = $f.f; f$1 = $f.f$1; i = $f.i; n = $f.n; pos = $f.pos; rune = $f.rune; t = $f.t; tail = $f.tail; text = $f.text; typ = $f.typ; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		n = new NumberNode.ptr(13, pos, t, false, false, false, false, new $Int64(0, 0), new $Uint64(0, 0), 0, new $Complex128(0, 0), text);
			_1 = typ;
			/* */ if (_1 === 3) { $s = 2; continue; }
			/* */ if (_1 === 4) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === 3) { */ case 2:
				_tuple = strconv.UnquoteChar(text.substring(1), text.charCodeAt(0));
				rune = _tuple[0];
				tail = _tuple[2];
				err = _tuple[3];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [ptrType$5.nil, err];
				}
				/* */ if (!(tail === "'")) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!(tail === "'")) { */ case 5:
					_r = fmt.Errorf("malformed character constant: %s", new sliceType([new $String(text)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					/* */ $s = 8; case 8:
					return [ptrType$5.nil, _r];
				/* } */ case 6:
				n.Int64 = new $Int64(0, rune);
				n.IsInt = true;
				n.Uint64 = new $Uint64(0, rune);
				n.IsUint = true;
				n.Float64 = rune;
				n.IsFloat = true;
				return [n, $ifaceNil];
			/* } else if (_1 === 4) { */ case 3:
				_r$1 = fmt.Sscan(text, new sliceType([(n.$ptr_Complex128 || (n.$ptr_Complex128 = new ptrType$6(function() { return this.$target.Complex128; }, function($v) { this.$target.Complex128 = $v; }, n)))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [ptrType$5.nil, err$1];
				}
				n.IsComplex = true;
				n.simplifyComplex();
				return [n, $ifaceNil];
			/* } */ case 4:
		case 1:
		if (text.length > 0 && (text.charCodeAt((text.length - 1 >> 0)) === 105)) {
			_tuple$2 = strconv.ParseFloat(text.substring(0, (text.length - 1 >> 0)), 64);
			f = _tuple$2[0];
			err$2 = _tuple$2[1];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				n.IsComplex = true;
				n.Complex128 = new $Complex128(0, f);
				n.simplifyComplex();
				return [n, $ifaceNil];
			}
		}
		_tuple$3 = strconv.ParseUint(text, 0, 64);
		u = _tuple$3[0];
		err$3 = _tuple$3[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsUint = true;
			n.Uint64 = u;
		}
		_tuple$4 = strconv.ParseInt(text, 0, 64);
		i = _tuple$4[0];
		err$3 = _tuple$4[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsInt = true;
			n.Int64 = i;
			if ((i.$high === 0 && i.$low === 0)) {
				n.IsUint = true;
				n.Uint64 = u;
			}
		}
		/* */ if (n.IsInt) { $s = 10; continue; }
		/* */ if (n.IsUint) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (n.IsInt) { */ case 10:
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Int64);
			$s = 13; continue;
		/* } else if (n.IsUint) { */ case 11:
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Uint64);
			$s = 13; continue;
		/* } else { */ case 12:
			_tuple$5 = strconv.ParseFloat(text, 64);
			f$1 = _tuple$5[0];
			err$4 = _tuple$5[1];
			/* */ if ($interfaceIsEqual(err$4, $ifaceNil)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ($interfaceIsEqual(err$4, $ifaceNil)) { */ case 14:
				/* */ if (!strings.ContainsAny(text, ".eE")) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (!strings.ContainsAny(text, ".eE")) { */ case 16:
					_r$2 = fmt.Errorf("integer overflow: %q", new sliceType([new $String(text)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ $s = 19; case 19:
					return [ptrType$5.nil, _r$2];
				/* } */ case 17:
				n.IsFloat = true;
				n.Float64 = f$1;
				if (!n.IsInt && ($flatten64(new $Int64(0, f$1)) === f$1)) {
					n.IsInt = true;
					n.Int64 = new $Int64(0, f$1);
				}
				if (!n.IsUint && ($flatten64(new $Uint64(0, f$1)) === f$1)) {
					n.IsUint = true;
					n.Uint64 = new $Uint64(0, f$1);
				}
			/* } */ case 15:
		/* } */ case 13:
		/* */ if (!n.IsInt && !n.IsUint && !n.IsFloat) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (!n.IsInt && !n.IsUint && !n.IsFloat) { */ case 20:
			_r$3 = fmt.Errorf("illegal number syntax: %q", new sliceType([new $String(text)])); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 23; case 23:
			return [ptrType$5.nil, _r$3];
		/* } */ case 21:
		return [n, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.newNumber }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.f = f; $f.f$1 = f$1; $f.i = i; $f.n = n; $f.pos = pos; $f.rune = rune; $f.t = t; $f.tail = tail; $f.text = text; $f.typ = typ; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.newNumber = function(pos, text, typ) { return this.$val.newNumber(pos, text, typ); };
	NumberNode.ptr.prototype.simplifyComplex = function() {
		var $ptr, n;
		n = this;
		n.IsFloat = n.Complex128.$imag === 0;
		if (n.IsFloat) {
			n.Float64 = n.Complex128.$real;
			n.IsInt = $flatten64(new $Int64(0, n.Float64)) === n.Float64;
			if (n.IsInt) {
				n.Int64 = new $Int64(0, n.Float64);
			}
			n.IsUint = $flatten64(new $Uint64(0, n.Float64)) === n.Float64;
			if (n.IsUint) {
				n.Uint64 = new $Uint64(0, n.Float64);
			}
		}
	};
	NumberNode.prototype.simplifyComplex = function() { return this.$val.simplifyComplex(); };
	NumberNode.ptr.prototype.String = function() {
		var $ptr, n;
		n = this;
		return n.Text;
	};
	NumberNode.prototype.String = function() { return this.$val.String(); };
	NumberNode.ptr.prototype.tree = function() {
		var $ptr, n;
		n = this;
		return n.tr;
	};
	NumberNode.prototype.tree = function() { return this.$val.tree(); };
	NumberNode.ptr.prototype.Copy = function() {
		var $ptr, n, nn;
		n = this;
		nn = new NumberNode.ptr(0, 0, ptrType.nil, false, false, false, false, new $Int64(0, 0), new $Uint64(0, 0), 0, new $Complex128(0, 0), "");
		NumberNode.copy(nn, n);
		return nn;
	};
	NumberNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newString = function(pos, orig, text) {
		var $ptr, orig, pos, t, text;
		t = this;
		return new StringNode.ptr(16, pos, t, orig, text);
	};
	Tree.prototype.newString = function(pos, orig, text) { return this.$val.newString(pos, orig, text); };
	StringNode.ptr.prototype.String = function() {
		var $ptr, s;
		s = this;
		return s.Quoted;
	};
	StringNode.prototype.String = function() { return this.$val.String(); };
	StringNode.ptr.prototype.tree = function() {
		var $ptr, s;
		s = this;
		return s.tr;
	};
	StringNode.prototype.tree = function() { return this.$val.tree(); };
	StringNode.ptr.prototype.Copy = function() {
		var $ptr, s;
		s = this;
		return s.tr.newString(s.Pos, s.Quoted, s.Text);
	};
	StringNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newEnd = function(pos) {
		var $ptr, pos, t;
		t = this;
		return new endNode.ptr(7, pos, t);
	};
	Tree.prototype.newEnd = function(pos) { return this.$val.newEnd(pos); };
	endNode.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return "{{end}}";
	};
	endNode.prototype.String = function() { return this.$val.String(); };
	endNode.ptr.prototype.tree = function() {
		var $ptr, e;
		e = this;
		return e.tr;
	};
	endNode.prototype.tree = function() { return this.$val.tree(); };
	endNode.ptr.prototype.Copy = function() {
		var $ptr, e;
		e = this;
		return e.tr.newEnd(e.Pos);
	};
	endNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newElse = function(pos, line) {
		var $ptr, line, pos, t;
		t = this;
		return new elseNode.ptr(6, pos, t, line);
	};
	Tree.prototype.newElse = function(pos, line) { return this.$val.newElse(pos, line); };
	elseNode.ptr.prototype.Type = function() {
		var $ptr, e;
		e = this;
		return 6;
	};
	elseNode.prototype.Type = function() { return this.$val.Type(); };
	elseNode.ptr.prototype.String = function() {
		var $ptr, e;
		e = this;
		return "{{else}}";
	};
	elseNode.prototype.String = function() { return this.$val.String(); };
	elseNode.ptr.prototype.tree = function() {
		var $ptr, e;
		e = this;
		return e.tr;
	};
	elseNode.prototype.tree = function() { return this.$val.tree(); };
	elseNode.ptr.prototype.Copy = function() {
		var $ptr, e;
		e = this;
		return e.tr.newElse(e.Pos, e.Line);
	};
	elseNode.prototype.Copy = function() { return this.$val.Copy(); };
	BranchNode.ptr.prototype.String = function() {
		var $ptr, _2, _r, _r$1, b, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; b = $f.b; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		name = "";
		_2 = b.NodeType;
		if (_2 === 10) {
			name = "if";
		} else if (_2 === 15) {
			name = "range";
		} else if (_2 === 19) {
			name = "with";
		} else {
			$panic(new $String("unknown branch type"));
		}
		/* */ if (!(b.ElseList === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(b.ElseList === ptrType$1.nil)) { */ case 1:
			_r = fmt.Sprintf("{{%s %s}}%s{{else}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List, b.ElseList])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("{{%s %s}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BranchNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	BranchNode.prototype.String = function() { return this.$val.String(); };
	BranchNode.ptr.prototype.tree = function() {
		var $ptr, b;
		b = this;
		return b.tr;
	};
	BranchNode.prototype.tree = function() { return this.$val.tree(); };
	BranchNode.ptr.prototype.Copy = function() {
		var $ptr, _3, b;
		b = this;
		_3 = b.NodeType;
		if (_3 === 10) {
			return b.tr.newIf(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_3 === 15) {
			return b.tr.newRange(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_3 === 19) {
			return b.tr.newWith(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else {
			$panic(new $String("unknown branch type"));
		}
	};
	BranchNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newIf = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new IfNode.ptr(new BranchNode.ptr(10, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newIf = function(pos, line, pipe, list, elseList) { return this.$val.newIf(pos, line, pipe, list, elseList); };
	IfNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		_arg = i.BranchNode.Pos;
		_arg$1 = i.BranchNode.Line;
		_r = i.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = i.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = i.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = i.BranchNode.tr.newIf(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IfNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	IfNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newRange = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new RangeNode.ptr(new BranchNode.ptr(15, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newRange = function(pos, line, pipe, list, elseList) { return this.$val.newRange(pos, line, pipe, list, elseList); };
	RangeNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_arg = r.BranchNode.Pos;
		_arg$1 = r.BranchNode.Line;
		_r = r.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = r.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = r.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = r.BranchNode.tr.newRange(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RangeNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	RangeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newWith = function(pos, line, pipe, list, elseList) {
		var $ptr, elseList, line, list, pipe, pos, t;
		t = this;
		return new WithNode.ptr(new BranchNode.ptr(19, pos, t, line, pipe, list, elseList));
	};
	Tree.prototype.newWith = function(pos, line, pipe, list, elseList) { return this.$val.newWith(pos, line, pipe, list, elseList); };
	WithNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _r$3, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_arg = w.BranchNode.Pos;
		_arg$1 = w.BranchNode.Line;
		_r = w.BranchNode.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = w.BranchNode.List.CopyList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg$3 = _r$1;
		_r$2 = w.BranchNode.ElseList.CopyList(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$4 = _r$2;
		_r$3 = w.BranchNode.tr.newWith(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WithNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	WithNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newTemplate = function(pos, line, name, pipe) {
		var $ptr, line, name, pipe, pos, t;
		t = this;
		return new TemplateNode.ptr(17, pos, t, line, name, pipe);
	};
	Tree.prototype.newTemplate = function(pos, line, name, pipe) { return this.$val.newTemplate(pos, line, name, pipe); };
	TemplateNode.ptr.prototype.String = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (t.Pipe === ptrType$4.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.Pipe === ptrType$4.nil) { */ case 1:
			_r = fmt.Sprintf("{{template %q}}", new sliceType([new $String(t.Name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("{{template %q %s}}", new sliceType([new $String(t.Name), t.Pipe])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TemplateNode.ptr.prototype.String }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TemplateNode.prototype.String = function() { return this.$val.String(); };
	TemplateNode.ptr.prototype.tree = function() {
		var $ptr, t;
		t = this;
		return t.tr;
	};
	TemplateNode.prototype.tree = function() { return this.$val.tree(); };
	TemplateNode.ptr.prototype.Copy = function() {
		var $ptr, _arg, _arg$1, _arg$2, _arg$3, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_arg = t.Pos;
		_arg$1 = t.Line;
		_arg$2 = t.Name;
		_r = t.Pipe.CopyPipe(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$3 = _r;
		_r$1 = t.tr.newTemplate(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TemplateNode.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	TemplateNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.Copy = function() {
		var $ptr, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t === ptrType.nil) {
			return ptrType.nil;
		}
		_r = t.Root.CopyList(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return new Tree.ptr(t.Name, t.ParseName, _r, t.text, sliceType$6.nil, ptrType$7.nil, arrayType$2.zero(), 0, sliceType$5.nil, false);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Copy }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Copy = function() { return this.$val.Copy(); };
	Parse = function(name, text, leftDelim, rightDelim, funcs) {
		var $ptr, _r, _tuple, err, funcs, leftDelim, name, rightDelim, t, text, treeSet, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; err = $f.err; funcs = $f.funcs; leftDelim = $f.leftDelim; name = $f.name; rightDelim = $f.rightDelim; t = $f.t; text = $f.text; treeSet = $f.treeSet; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		treeSet = false;
		err = $ifaceNil;
		treeSet = {};
		t = New(name, new sliceType$6([]));
		t.text = text;
		_r = t.Parse(text, leftDelim, rightDelim, treeSet, funcs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		return [treeSet, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.funcs = funcs; $f.leftDelim = leftDelim; $f.name = name; $f.rightDelim = rightDelim; $f.t = t; $f.text = text; $f.treeSet = treeSet; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	Tree.ptr.prototype.next = function() {
		var $ptr, _r, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (t.peekCount > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t.peekCount > 0) { */ case 1:
			t.peekCount = t.peekCount - (1) >> 0;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = t.lex.nextItem(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(t.token[0], _r);
		/* } */ case 3:
		return (x = t.token, x$1 = t.peekCount, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.next }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.next = function() { return this.$val.next(); };
	Tree.ptr.prototype.backup = function() {
		var $ptr, t;
		t = this;
		t.peekCount = t.peekCount + (1) >> 0;
	};
	Tree.prototype.backup = function() { return this.$val.backup(); };
	Tree.ptr.prototype.backup2 = function(t1) {
		var $ptr, t, t1;
		t1 = $clone(t1, item);
		t = this;
		item.copy(t.token[1], t1);
		t.peekCount = 2;
	};
	Tree.prototype.backup2 = function(t1) { return this.$val.backup2(t1); };
	Tree.ptr.prototype.backup3 = function(t2, t1) {
		var $ptr, t, t1, t2;
		t1 = $clone(t1, item);
		t2 = $clone(t2, item);
		t = this;
		item.copy(t.token[1], t1);
		item.copy(t.token[2], t2);
		t.peekCount = 3;
	};
	Tree.prototype.backup3 = function(t2, t1) { return this.$val.backup3(t2, t1); };
	Tree.ptr.prototype.peek = function() {
		var $ptr, _r, t, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.peekCount > 0) {
			return (x = t.token, x$1 = t.peekCount - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		}
		t.peekCount = 1;
		_r = t.lex.nextItem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		item.copy(t.token[0], _r);
		return t.token[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.peek }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.peek = function() { return this.$val.peek(); };
	Tree.ptr.prototype.nextNonSpace = function() {
		var $ptr, _r, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = new item.ptr(0, 0, "");
		t = this;
		/* while (true) { */ case 1:
			_r = t.next(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(token, _r);
			if (!((token.typ === 16))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		item.copy(token, token);
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.nextNonSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.nextNonSpace = function() { return this.$val.nextNonSpace(); };
	Tree.ptr.prototype.peekNonSpace = function() {
		var $ptr, _r, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = new item.ptr(0, 0, "");
		t = this;
		/* while (true) { */ case 1:
			_r = t.next(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			item.copy(token, _r);
			if (!((token.typ === 16))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		t.backup();
		item.copy(token, token);
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.peekNonSpace }; } $f.$ptr = $ptr; $f._r = _r; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.peekNonSpace = function() { return this.$val.peekNonSpace(); };
	New = function(name, funcs) {
		var $ptr, funcs, name;
		return new Tree.ptr(name, "", ptrType$1.nil, "", funcs, ptrType$7.nil, arrayType$2.zero(), 0, sliceType$5.nil, false);
	};
	$pkg.New = New;
	Tree.ptr.prototype.ErrorContext = function(n) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, byteNum, context, lineNum, location, n, pos, t, text, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; byteNum = $f.byteNum; context = $f.context; lineNum = $f.lineNum; location = $f.location; n = $f.n; pos = $f.pos; t = $f.t; text = $f.text; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		location = "";
		context = "";
		t = this;
		_r = n.Position(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = (_r >> 0);
		_r$1 = n.tree(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		tree = _r$1;
		if (tree === ptrType.nil) {
			tree = t;
		}
		text = tree.text.substring(0, pos);
		byteNum = strings.LastIndex(text, "\n");
		if (byteNum === -1) {
			byteNum = pos;
		} else {
			byteNum = byteNum + (1) >> 0;
			byteNum = pos - byteNum >> 0;
		}
		lineNum = 1 + strings.Count(text, "\n") >> 0;
		_r$2 = n.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		context = _r$2;
		/* */ if (context.length > 20) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (context.length > 20) { */ case 4:
			_r$3 = fmt.Sprintf("%.20s...", new sliceType([new $String(context)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			context = _r$3;
		/* } */ case 5:
		_r$4 = fmt.Sprintf("%s:%d:%d", new sliceType([new $String(tree.ParseName), new $Int(lineNum), new $Int(byteNum)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tmp = _r$4;
		_tmp$1 = context;
		location = _tmp;
		context = _tmp$1;
		/* */ $s = 8; case 8:
		return [location, context];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ErrorContext }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.byteNum = byteNum; $f.context = context; $f.lineNum = lineNum; $f.location = location; $f.n = n; $f.pos = pos; $f.t = t; $f.text = text; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ErrorContext = function(n) { return this.$val.ErrorContext(n); };
	Tree.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r, _r$1, args, format, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; args = $f.args; format = $f.format; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.Root = ptrType$1.nil;
		_r = fmt.Sprintf("template: %s:%d: %s", new sliceType([new $String(t.ParseName), new $Int(t.lex.lineNumber()), new $String(format)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		format = _r;
		_r$1 = fmt.Errorf(format, args); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$panic(_r$1);
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.args = args; $f.format = format; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	Tree.ptr.prototype.error = function(err) {
		var $ptr, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = t.errorf("%s", new sliceType([err])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.error }; } $f.$ptr = $ptr; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.error = function(err) { return this.$val.error(err); };
	Tree.ptr.prototype.expect = function(expected, context) {
		var $ptr, _r, context, expected, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; context = $f.context; expected = $f.expected; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		/* */ if (!((token.typ === expected))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((token.typ === expected))) { */ case 2:
			$r = t.unexpected(token, context); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.expect }; } $f.$ptr = $ptr; $f._r = _r; $f.context = context; $f.expected = expected; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.expect = function(expected, context) { return this.$val.expect(expected, context); };
	Tree.ptr.prototype.expectOneOf = function(expected1, expected2, context) {
		var $ptr, _r, context, expected1, expected2, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; context = $f.context; expected1 = $f.expected1; expected2 = $f.expected2; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		/* */ if (!((token.typ === expected1)) && !((token.typ === expected2))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((token.typ === expected1)) && !((token.typ === expected2))) { */ case 2:
			$r = t.unexpected(token, context); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		return token;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.expectOneOf }; } $f.$ptr = $ptr; $f._r = _r; $f.context = context; $f.expected1 = expected1; $f.expected2 = expected2; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.expectOneOf = function(expected1, expected2, context) { return this.$val.expectOneOf(expected1, expected2, context); };
	Tree.ptr.prototype.unexpected = function(token, context) {
		var $ptr, context, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; context = $f.context; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		token = $clone(token, item);
		t = this;
		$r = t.errorf("unexpected %s in %s", new sliceType([new token.constructor.elem(token), new $String(context)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.unexpected }; } $f.$ptr = $ptr; $f.context = context; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.unexpected = function(token, context) { return this.$val.unexpected(token, context); };
	Tree.ptr.prototype.recover = function(errp) {
		var $ptr, _tuple, e, errp, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _tuple = $f._tuple; e = $f.e; errp = $f.errp; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		e = $recover();
		/* */ if (!($interfaceIsEqual(e, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(e, $ifaceNil))) { */ case 1:
			_tuple = $assertType(e, runtime.Error, true);
			ok = _tuple[1];
			if (ok) {
				$panic(e);
			}
			/* */ if (!(t === ptrType.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(t === ptrType.nil)) { */ case 3:
				$r = t.lex.drain(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				t.stopParse();
			/* } */ case 4:
			errp.$set($assertType(e, $error));
		/* } */ case 2:
		return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.recover }; } $f.$ptr = $ptr; $f._tuple = _tuple; $f.e = e; $f.errp = errp; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.recover = function(errp) { return this.$val.recover(errp); };
	Tree.ptr.prototype.startParse = function(funcs, lex$1, treeSet) {
		var $ptr, funcs, lex$1, t, treeSet;
		t = this;
		t.Root = ptrType$1.nil;
		t.lex = lex$1;
		t.vars = new sliceType$5(["$"]);
		t.funcs = funcs;
		t.treeSet = treeSet;
	};
	Tree.prototype.startParse = function(funcs, lex$1, treeSet) { return this.$val.startParse(funcs, lex$1, treeSet); };
	Tree.ptr.prototype.stopParse = function() {
		var $ptr, t;
		t = this;
		t.lex = ptrType$7.nil;
		t.vars = sliceType$5.nil;
		t.funcs = sliceType$6.nil;
		t.treeSet = false;
	};
	Tree.prototype.stopParse = function() { return this.$val.stopParse(); };
	Tree.ptr.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) {
		var $ptr, _r, _tmp, _tmp$1, err, funcs, leftDelim, rightDelim, t, text, tree, treeSet, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; err = $f.err; funcs = $f.funcs; leftDelim = $f.leftDelim; rightDelim = $f.rightDelim; t = $f.t; text = $f.text; tree = $f.tree; treeSet = $f.treeSet; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tree = ptrType.nil;
		err[0] = $ifaceNil;
		t = this;
		$deferred.push([$methodVal(t, "recover"), [(err.$ptr || (err.$ptr = new ptrType$8(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		t.ParseName = t.Name;
		t.startParse(funcs, lex(t.Name, text, leftDelim, rightDelim), treeSet);
		t.text = text;
		_r = t.parse(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = t.add(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t.stopParse();
		_tmp = t;
		_tmp$1 = $ifaceNil;
		tree = _tmp;
		err[0] = _tmp$1;
		return [tree, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tree, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.err = err; $f.funcs = funcs; $f.leftDelim = leftDelim; $f.rightDelim = rightDelim; $f.t = t; $f.text = text; $f.tree = tree; $f.treeSet = treeSet; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tree.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) { return this.$val.Parse(text, leftDelim, rightDelim, treeSet, funcs); };
	Tree.ptr.prototype.add = function() {
		var $ptr, _entry, _key, _r, _r$1, _v, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		tree = (_entry = t.treeSet[$String.keyFor(t.Name)], _entry !== undefined ? _entry.v : ptrType.nil);
		if (tree === ptrType.nil) { _v = true; $s = 3; continue s; }
		_r = IsEmptyTree(tree.Root); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_key = t.Name; (t.treeSet || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: t };
			return;
		/* } */ case 2:
		_r$1 = IsEmptyTree(t.Root); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!_r$1) { */ case 5:
			$r = t.errorf("template: multiple definition of template %q", new sliceType([new $String(t.Name)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.add }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.add = function() { return this.$val.add(); };
	IsEmptyTree = function(n) {
		var $ptr, _i, _r, _r$1, _r$2, _ref, _ref$1, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, n$8, n$9, node, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; node = $f.node; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = n;
		/* */ if (_ref === $ifaceNil) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (_ref === $ifaceNil) { */ case 1:
			n$1 = _ref;
			return true;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 2:
			n$2 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 3:
			n$3 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$1, true)[1]) { */ case 4:
			n$4 = _ref.$val;
			_ref$1 = n$4.Nodes;
			_i = 0;
			/* while (true) { */ case 11:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 12; continue; }
				node = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				_r = IsEmptyTree(node); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!_r) { */ case 13:
					return false;
				/* } */ case 14:
				_i++;
			/* } */ $s = 11; continue; case 12:
			return true;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 5:
			n$5 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 6:
			n$6 = _ref.$val;
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 7:
			n$7 = _ref.$val;
			_r$1 = bytes.TrimSpace(n$7.Text); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 17; case 17:
			return _r$1.$length === 0;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 8:
			n$8 = _ref.$val;
			$s = 10; continue;
		/* } else { */ case 9:
			n$9 = _ref;
			_r$2 = n$9.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$panic(new $String("unknown node: " + _r$2));
		/* } */ case 10:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsEmptyTree }; } $f.$ptr = $ptr; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.node = node; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsEmptyTree = IsEmptyTree;
	Tree.ptr.prototype.parse = function() {
		var $ptr, _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, delim, n, newT, next, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; delim = $f.delim; n = $f.n; newT = $f.newT; next = $f.next; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		next = $ifaceNil;
		t = this;
		_r = t.peek(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newList(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		t.Root = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peek(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(!((_r$2.typ === 6)))) { break; } */ if(!(!((_r$2.typ === 6)))) { $s = 4; continue; }
			_r$3 = t.peek(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3.typ === 9) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$3.typ === 9) { */ case 6:
				_r$4 = t.next(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				delim = $clone(_r$4, item);
				_r$5 = t.nextNonSpace(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5.typ === 23) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$5.typ === 23) { */ case 10:
					newT = New("definition", new sliceType$6([]));
					newT.text = t.text;
					newT.ParseName = t.ParseName;
					newT.startParse(t.funcs, t.lex, t.treeSet);
					$r = newT.parseDefinition(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 3; continue;
				/* } */ case 11:
				t.backup2(delim);
			/* } */ case 7:
				_r$6 = t.textOrAction(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				n = _r$6;
				_r$7 = n.Type(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_1 = _r$7;
				/* */ if ((_1 === 7) || (_1 === 6)) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((_1 === 7) || (_1 === 6)) { */ case 17:
					$r = t.errorf("unexpected %s", new sliceType([n])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 19; continue;
				/* } else { */ case 18:
					t.Root.append(n);
				/* } */ case 19:
			case 14:
		/* } */ $s = 3; continue; case 4:
		next = $ifaceNil;
		return next;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parse }; } $f.$ptr = $ptr; $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.delim = delim; $f.n = n; $f.newT = newT; $f.next = next; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parse = function() { return this.$val.parse(); };
	Tree.ptr.prototype.parseDefinition = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, end, err, name, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; end = $f.end; err = $f.err; name = $f.name; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.expectOneOf(17, 13, "define clause"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		name = $clone(_r, item);
		err = $ifaceNil;
		_tuple = strconv.Unquote(name.val);
		t.Name = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = t.error(err); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$1 = t.expect(14, "define clause"); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		end = $ifaceNil;
		_r$2 = t.itemList(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		t.Root = _tuple$1[0];
		end = _tuple$1[1];
		_r$3 = end.Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 7))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!((_r$3 === 7))) { */ case 7:
			$r = t.errorf("unexpected %s in %s", new sliceType([end, new $String("define clause")])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$r = t.add(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		t.stopParse();
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseDefinition }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.end = end; $f.err = err; $f.name = name; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parseDefinition = function() { return this.$val.parseDefinition(); };
	Tree.ptr.prototype.itemList = function() {
		var $ptr, _2, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, list, n, next, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; list = $f.list; n = $f.n; next = $f.next; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		list = ptrType$1.nil;
		next = $ifaceNil;
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newList(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		list = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peekNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* if (!(!((_r$2.typ === 6)))) { break; } */ if(!(!((_r$2.typ === 6)))) { $s = 4; continue; }
			_r$3 = t.textOrAction(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			n = _r$3;
				_r$4 = n.Type(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_2 = _r$4;
				if ((_2 === 7) || (_2 === 6)) {
					_tmp = list;
					_tmp$1 = n;
					list = _tmp;
					next = _tmp$1;
					return [list, next];
				}
			case 7:
			list.append(n);
		/* } */ $s = 3; continue; case 4:
		$r = t.errorf("unexpected EOF", new sliceType([])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return [list, next];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.itemList }; } $f.$ptr = $ptr; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.list = list; $f.n = n; $f.next = next; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.itemList = function() { return this.$val.itemList(); };
	Tree.ptr.prototype.textOrAction = function() {
		var $ptr, _3, _r, _r$1, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_3 = token.typ;
			/* */ if (_3 === 18) { $s = 3; continue; }
			/* */ if (_3 === 9) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_3 === 18) { */ case 3:
				return t.newText(token.pos, token.val);
			/* } else if (_3 === 9) { */ case 4:
				_r$1 = t.action(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$1;
			/* } else { */ case 5:
				$r = t.unexpected(token, "input"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.textOrAction }; } $f.$ptr = $ptr; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.textOrAction = function() { return this.$val.textOrAction(); };
	Tree.ptr.prototype.action = function() {
		var $ptr, _4, _arg, _arg$1, _arg$2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, n, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; n = $f.n; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = $ifaceNil;
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_4 = token.typ;
			/* */ if (_4 === 21) { $s = 3; continue; }
			/* */ if (_4 === 24) { $s = 4; continue; }
			/* */ if (_4 === 25) { $s = 5; continue; }
			/* */ if (_4 === 26) { $s = 6; continue; }
			/* */ if (_4 === 28) { $s = 7; continue; }
			/* */ if (_4 === 29) { $s = 8; continue; }
			/* */ if (_4 === 30) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_4 === 21) { */ case 3:
				_r$1 = t.blockControl(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				n = _r$1;
				/* */ $s = 12; case 12:
				return n;
			/* } else if (_4 === 24) { */ case 4:
				_r$2 = t.elseControl(); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				n = _r$2;
				/* */ $s = 14; case 14:
				return n;
			/* } else if (_4 === 25) { */ case 5:
				_r$3 = t.endControl(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				n = _r$3;
				/* */ $s = 16; case 16:
				return n;
			/* } else if (_4 === 26) { */ case 6:
				_r$4 = t.ifControl(); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				n = _r$4;
				/* */ $s = 18; case 18:
				return n;
			/* } else if (_4 === 28) { */ case 7:
				_r$5 = t.rangeControl(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				n = _r$5;
				/* */ $s = 20; case 20:
				return n;
			/* } else if (_4 === 29) { */ case 8:
				_r$6 = t.templateControl(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				n = _r$6;
				/* */ $s = 22; case 22:
				return n;
			/* } else if (_4 === 30) { */ case 9:
				_r$7 = t.withControl(); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				n = _r$7;
				/* */ $s = 24; case 24:
				return n;
			/* } */ case 10:
		case 1:
		t.backup();
		_r$8 = t.peek(); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg = _r$8.pos;
		_arg$1 = t.lex.lineNumber();
		_r$9 = t.pipeline("command"); /* */ $s = 26; case 26: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_arg$2 = _r$9;
		_r$10 = t.newAction(_arg, _arg$1, _arg$2); /* */ $s = 27; case 27: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		n = _r$10;
		/* */ $s = 28; case 28:
		return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.action }; } $f.$ptr = $ptr; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.n = n; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.action = function() { return this.$val.action(); };
	Tree.ptr.prototype.pipeline = function(context) {
		var $ptr, _5, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, context, decl, next, pipe, pos, t, token, tokenAfterVariable, v, variable, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; context = $f.context; decl = $f.decl; next = $f.next; pipe = $f.pipe; pos = $f.pos; t = $f.t; token = $f.token; tokenAfterVariable = $f.tokenAfterVariable; v = $f.v; variable = $f.variable; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pipe = ptrType$4.nil;
		t = this;
		decl = sliceType$3.nil;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = _r.pos;
		/* while (true) { */ case 2:
			_r$1 = t.peekNonSpace(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			v = $clone(_r$1, item);
			/* */ if (v.typ === 19) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (v.typ === 19) { */ case 5:
				_r$2 = t.next(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_r$3 = t.peek(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				tokenAfterVariable = $clone(_r$3, item);
				_r$4 = t.peekNonSpace(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				next = $clone(_r$4, item);
				/* */ if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) { $s = 10; continue; }
				/* */ if (tokenAfterVariable.typ === 16) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) { */ case 10:
					_r$5 = t.nextNonSpace(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$5;
					variable = t.newVariable(v.pos, v.val);
					decl = $append(decl, variable);
					t.vars = $append(t.vars, v.val);
					/* */ if ((next.typ === 2) && next.val === ",") { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ((next.typ === 2) && next.val === ",") { */ case 15:
						/* */ if (context === "range" && decl.$length < 2) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (context === "range" && decl.$length < 2) { */ case 17:
							/* continue; */ $s = 2; continue;
						/* } */ case 18:
						$r = t.errorf("too many declarations in %s", new sliceType([new $String(context)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 16:
					$s = 13; continue;
				/* } else if (tokenAfterVariable.typ === 16) { */ case 11:
					t.backup3(v, tokenAfterVariable);
					$s = 13; continue;
				/* } else { */ case 12:
					t.backup2(v);
				/* } */ case 13:
			/* } */ case 6:
			/* break; */ $s = 3; continue;
		/* } */ $s = 2; continue; case 3:
		pipe = t.newPipeline(pos, t.lex.lineNumber(), decl);
		/* while (true) { */ case 20:
				_r$6 = t.nextNonSpace(); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				token = $clone(_r$6, item);
				_5 = token.typ;
				/* */ if ((_5 === 14) || (_5 === 15)) { $s = 24; continue; }
				/* */ if ((_5 === 1) || (_5 === 3) || (_5 === 4) || (_5 === 22) || (_5 === 7) || (_5 === 8) || (_5 === 11) || (_5 === 27) || (_5 === 13) || (_5 === 17) || (_5 === 19) || (_5 === 10)) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ((_5 === 14) || (_5 === 15)) { */ case 24:
					$r = t.checkPipeline(pipe, context); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (token.typ === 15) {
						t.backup();
					}
					return pipe;
				/* } else if ((_5 === 1) || (_5 === 3) || (_5 === 4) || (_5 === 22) || (_5 === 7) || (_5 === 8) || (_5 === 11) || (_5 === 27) || (_5 === 13) || (_5 === 17) || (_5 === 19) || (_5 === 10)) { */ case 25:
					t.backup();
					_r$7 = t.command(); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = pipe.append(_r$7); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 27; continue;
				/* } else { */ case 26:
					$r = t.unexpected(token, context); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 27:
			case 22:
		/* } */ $s = 20; continue; case 21:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.pipeline }; } $f.$ptr = $ptr; $f._5 = _5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.context = context; $f.decl = decl; $f.next = next; $f.pipe = pipe; $f.pos = pos; $f.t = t; $f.token = token; $f.tokenAfterVariable = tokenAfterVariable; $f.v = v; $f.variable = variable; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.pipeline = function(context) { return this.$val.pipeline(context); };
	Tree.ptr.prototype.checkPipeline = function(pipe, context) {
		var $ptr, _6, _i, _r, _ref, c, context, i, pipe, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; context = $f.context; i = $f.i; pipe = $f.pipe; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		/* */ if (pipe.Cmds.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pipe.Cmds.$length === 0) { */ case 1:
			$r = t.errorf("missing value for %s", new sliceType([new $String(context)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = $subslice(pipe.Cmds, 1);
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r = (x = c.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_6 = _r;
				/* */ if ((_6 === 2) || (_6 === 5) || (_6 === 12) || (_6 === 13) || (_6 === 16)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((_6 === 2) || (_6 === 5) || (_6 === 12) || (_6 === 13) || (_6 === 16)) { */ case 8:
					$r = t.errorf("non executable command in pipeline stage %d", new sliceType([new $Int((i + 2 >> 0))])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
			case 6:
			_i++;
		/* } */ $s = 4; continue; case 5:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.checkPipeline }; } $f.$ptr = $ptr; $f._6 = _6; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.context = context; $f.i = i; $f.pipe = pipe; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.checkPipeline = function(pipe, context) { return this.$val.checkPipeline(pipe, context); };
	Tree.ptr.prototype.parseControl = function(allowElseIf, context) {
		var $ptr, _7, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, allowElseIf, context, elseList, line, list, next, pipe, pos, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allowElseIf = $f.allowElseIf; context = $f.context; elseList = $f.elseList; line = $f.line; list = $f.list; next = $f.next; pipe = $f.pipe; pos = $f.pos; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		pos = 0;
		line = 0;
		pipe = ptrType$4.nil;
		list = ptrType$1.nil;
		elseList = ptrType$1.nil;
		t = this;
		$deferred.push([$methodVal(t, "popVars"), [t.vars.$length]]);
		line = t.lex.lineNumber();
		_r = t.pipeline(context); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pipe = _r;
		next = $ifaceNil;
		_r$1 = t.itemList(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		list = _tuple[0];
		next = _tuple[1];
			_r$2 = next.Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_7 = _r$2;
			/* */ if (_7 === 7) { $s = 5; continue; }
			/* */ if (_7 === 6) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_7 === 7) { */ case 5:
				$s = 7; continue;
			/* } else if (_7 === 6) { */ case 6:
				/* */ if (allowElseIf) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (allowElseIf) { */ case 8:
					_r$3 = t.peek(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3.typ === 26) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_r$3.typ === 26) { */ case 10:
						_r$4 = t.next(); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						_r$5 = next.Position(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = t.newList(_r$5); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						elseList = _r$6;
						_r$7 = t.ifControl(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$r = elseList.append(_r$7); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* break; */ $s = 3; continue;
					/* } */ case 11:
				/* } */ case 9:
				_r$8 = t.itemList(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$1 = _r$8;
				elseList = _tuple$1[0];
				next = _tuple$1[1];
				_r$9 = next.Type(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (!((_r$9 === 7))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!((_r$9 === 7))) { */ case 19:
					$r = t.errorf("expected end; found %s", new sliceType([next])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
			/* } */ case 7:
		case 3:
		_tmp = new Pos(pipe.Pos).Position();
		_tmp$1 = line;
		_tmp$2 = pipe;
		_tmp$3 = list;
		_tmp$4 = elseList;
		pos = _tmp;
		line = _tmp$1;
		pipe = _tmp$2;
		list = _tmp$3;
		elseList = _tmp$4;
		return [pos, line, pipe, list, elseList];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [pos, line, pipe, list, elseList]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseControl }; } $f.$ptr = $ptr; $f._7 = _7; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allowElseIf = allowElseIf; $f.context = context; $f.elseList = elseList; $f.line = line; $f.list = list; $f.next = next; $f.pipe = pipe; $f.pos = pos; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Tree.prototype.parseControl = function(allowElseIf, context) { return this.$val.parseControl(allowElseIf, context); };
	Tree.ptr.prototype.ifControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(true, "if"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newIf(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ifControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ifControl = function() { return this.$val.ifControl(); };
	Tree.ptr.prototype.rangeControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(false, "range"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newRange(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.rangeControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.rangeControl = function() { return this.$val.rangeControl(); };
	Tree.ptr.prototype.withControl = function() {
		var $ptr, _r, _r$1, _tuple, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.parseControl(false, "with"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		_r$1 = t.newWith(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.withControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.withControl = function() { return this.$val.withControl(); };
	Tree.ptr.prototype.endControl = function() {
		var $ptr, _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.expect(14, "end"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newEnd(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.endControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.endControl = function() { return this.$val.endControl(); };
	Tree.ptr.prototype.elseControl = function() {
		var $ptr, _r, _r$1, _r$2, peek, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; peek = $f.peek; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		peek = $clone(_r, item);
		if (peek.typ === 26) {
			return t.newElse(peek.pos, t.lex.lineNumber());
		}
		_r$1 = t.expect(14, "else"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = t.newElse(_r$1.pos, t.lex.lineNumber()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 4; case 4:
		return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.elseControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.peek = peek; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.elseControl = function() { return this.$val.elseControl(); };
	Tree.ptr.prototype.blockControl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, block, end, name, pipe, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; block = $f.block; end = $f.end; name = $f.name; pipe = $f.pipe; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		_r$1 = t.parseTemplateName(token, "block clause"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		_r$2 = t.pipeline("block clause"); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pipe = _r$2;
		block = New(name, new sliceType$6([]));
		block.text = t.text;
		block.ParseName = t.ParseName;
		block.startParse(t.funcs, t.lex, t.treeSet);
		end = $ifaceNil;
		_r$3 = block.itemList(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		block.Root = _tuple[0];
		end = _tuple[1];
		_r$4 = end.Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (!((_r$4 === 7))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$4 === 7))) { */ case 5:
			$r = t.errorf("unexpected %s in %s", new sliceType([end, new $String("block clause")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$r = block.add(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		block.stopParse();
		return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.blockControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.block = block; $f.end = end; $f.name = name; $f.pipe = pipe; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.blockControl = function() { return this.$val.blockControl(); };
	Tree.ptr.prototype.templateControl = function() {
		var $ptr, _r, _r$1, _r$2, _r$3, name, pipe, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; name = $f.name; pipe = $f.pipe; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.nextNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		token = $clone(_r, item);
		_r$1 = t.parseTemplateName(token, "template clause"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		name = _r$1;
		pipe = ptrType$4.nil;
		_r$2 = t.nextNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (!((_r$2.typ === 14))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((_r$2.typ === 14))) { */ case 3:
			t.backup();
			_r$3 = t.pipeline("template clause"); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			pipe = _r$3;
		/* } */ case 4:
		return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.templateControl }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.name = name; $f.pipe = pipe; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.templateControl = function() { return this.$val.templateControl(); };
	Tree.ptr.prototype.parseTemplateName = function(token, context) {
		var $ptr, _8, _tuple, context, err, name, s, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; _tuple = $f._tuple; context = $f.context; err = $f.err; name = $f.name; s = $f.s; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		token = $clone(token, item);
		t = this;
			_8 = token.typ;
			/* */ if ((_8 === 17) || (_8 === 13)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_8 === 17) || (_8 === 13)) { */ case 2:
				_tuple = strconv.Unquote(token.val);
				s = _tuple[0];
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
					$r = t.error(err); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				name = s;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = t.unexpected(token, context); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		return name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.parseTemplateName }; } $f.$ptr = $ptr; $f._8 = _8; $f._tuple = _tuple; $f.context = context; $f.err = err; $f.name = name; $f.s = s; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.parseTemplateName = function(token, context) { return this.$val.parseTemplateName(token, context); };
	Tree.ptr.prototype.command = function() {
		var $ptr, _9, _r, _r$1, _r$2, _r$3, _r$4, cmd, operand, t, token, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _9 = $f._9; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; cmd = $f.cmd; operand = $f.operand; t = $f.t; token = $f.token; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.peekNonSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = t.newCommand(_r.pos); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		cmd = _r$1;
		/* while (true) { */ case 3:
			_r$2 = t.peekNonSpace(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = t.operand(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			operand = _r$3;
			if (!($interfaceIsEqual(operand, $ifaceNil))) {
				cmd.append(operand);
			}
				_r$4 = t.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				token = $clone(_r$4, item);
				_9 = token.typ;
				/* */ if (_9 === 16) { $s = 9; continue; }
				/* */ if (_9 === 0) { $s = 10; continue; }
				/* */ if ((_9 === 14) || (_9 === 15)) { $s = 11; continue; }
				/* */ if (_9 === 12) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_9 === 16) { */ case 9:
					/* continue; */ $s = 3; continue;
					$s = 14; continue;
				/* } else if (_9 === 0) { */ case 10:
					$r = t.errorf("%s", new sliceType([new $String(token.val)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 14; continue;
				/* } else if ((_9 === 14) || (_9 === 15)) { */ case 11:
					t.backup();
					$s = 14; continue;
				/* } else if (_9 === 12) { */ case 12:
					$s = 14; continue;
				/* } else { */ case 13:
					$r = t.errorf("unexpected %s in operand", new sliceType([new token.constructor.elem(token)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			case 7:
			/* break; */ $s = 4; continue;
		/* } */ $s = 3; continue; case 4:
		/* */ if (cmd.Args.$length === 0) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (cmd.Args.$length === 0) { */ case 17:
			$r = t.errorf("empty command", new sliceType([])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		return cmd;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.command }; } $f.$ptr = $ptr; $f._9 = _9; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.cmd = cmd; $f.operand = operand; $f.t = t; $f.token = token; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.command = function() { return this.$val.command(); };
	Tree.ptr.prototype.operand = function() {
		var $ptr, _10, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, chain, node, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _10 = $f._10; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; chain = $f.chain; node = $f.node; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.term(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		node = _r;
		if ($interfaceIsEqual(node, $ifaceNil)) {
			return $ifaceNil;
		}
		_r$1 = t.peek(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1.typ === 7) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1.typ === 7) { */ case 2:
			_r$2 = t.peek(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$3 = t.newChain(_r$2.pos, node); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			chain = _r$3;
			/* while (true) { */ case 7:
				_r$4 = t.peek(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* if (!(_r$4.typ === 7)) { break; } */ if(!(_r$4.typ === 7)) { $s = 8; continue; }
				_r$5 = t.next(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = chain.Add(_r$5.val); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 7; continue; case 8:
				_r$6 = node.Type(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_10 = _r$6;
				/* */ if (_10 === 8) { $s = 14; continue; }
				/* */ if (_10 === 18) { $s = 15; continue; }
				/* */ if ((_10 === 2) || (_10 === 16) || (_10 === 13) || (_10 === 12) || (_10 === 5)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_10 === 8) { */ case 14:
					_arg = new Pos(chain.Pos).Position();
					_r$7 = chain.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_arg$1 = _r$7;
					_r$8 = t.newField(_arg, _arg$1); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					node = _r$8;
					$s = 18; continue;
				/* } else if (_10 === 18) { */ case 15:
					_arg$2 = new Pos(chain.Pos).Position();
					_r$9 = chain.String(); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$3 = _r$9;
					_r$10 = t.newVariable(_arg$2, _arg$3); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					node = _r$10;
					$s = 18; continue;
				/* } else if ((_10 === 2) || (_10 === 16) || (_10 === 13) || (_10 === 12) || (_10 === 5)) { */ case 16:
					_r$11 = node.String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_arg$4 = new $String(_r$11);
					$r = t.errorf("unexpected . after term %q", new sliceType([_arg$4])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 18; continue;
				/* } else { */ case 17:
					node = chain;
				/* } */ case 18:
			case 12:
		/* } */ case 3:
		return node;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.operand }; } $f.$ptr = $ptr; $f._10 = _10; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.chain = chain; $f.node = node; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.operand = function() { return this.$val.operand(); };
	Tree.ptr.prototype.term = function() {
		var $ptr, _11, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, err, err$1, number, pipe, s, t, token, token$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _11 = $f._11; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; number = $f.number; pipe = $f.pipe; s = $f.s; t = $f.t; token = $f.token; token$1 = $f.token$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_r = t.nextNonSpace(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			token = $clone(_r, item);
			_11 = token.typ;
			/* */ if (_11 === 0) { $s = 3; continue; }
			/* */ if (_11 === 8) { $s = 4; continue; }
			/* */ if (_11 === 22) { $s = 5; continue; }
			/* */ if (_11 === 27) { $s = 6; continue; }
			/* */ if (_11 === 19) { $s = 7; continue; }
			/* */ if (_11 === 7) { $s = 8; continue; }
			/* */ if (_11 === 1) { $s = 9; continue; }
			/* */ if ((_11 === 3) || (_11 === 4) || (_11 === 11)) { $s = 10; continue; }
			/* */ if (_11 === 10) { $s = 11; continue; }
			/* */ if ((_11 === 17) || (_11 === 13)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_11 === 0) { */ case 3:
				$r = t.errorf("%s", new sliceType([new $String(token.val)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else if (_11 === 8) { */ case 4:
				/* */ if (!t.hasFunction(token.val)) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!t.hasFunction(token.val)) { */ case 15:
					$r = t.errorf("function %q not defined", new sliceType([new $String(token.val)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				return NewIdentifier(token.val).SetTree(t).SetPos(token.pos);
			/* } else if (_11 === 22) { */ case 5:
				return t.newDot(token.pos);
			/* } else if (_11 === 27) { */ case 6:
				return t.newNil(token.pos);
			/* } else if (_11 === 19) { */ case 7:
				_r$1 = t.useVar(token.pos, token.val); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 19; case 19:
				return _r$1;
			/* } else if (_11 === 7) { */ case 8:
				return t.newField(token.pos, token.val);
			/* } else if (_11 === 1) { */ case 9:
				return t.newBool(token.pos, token.val === "true");
			/* } else if ((_11 === 3) || (_11 === 4) || (_11 === 11)) { */ case 10:
				_r$2 = t.newNumber(token.pos, token.val, token.typ); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				number = _tuple[0];
				err = _tuple[1];
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 21:
					$r = t.error(err); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 22:
				return number;
			/* } else if (_11 === 10) { */ case 11:
				_r$3 = t.pipeline("parenthesized pipeline"); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				pipe = _r$3;
				_r$4 = t.next(); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				token$1 = $clone(_r$4, item);
				/* */ if (!((token$1.typ === 15))) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (!((token$1.typ === 15))) { */ case 26:
					$r = t.errorf("unclosed right paren: unexpected %s", new sliceType([new token$1.constructor.elem(token$1)])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 27:
				return pipe;
			/* } else if ((_11 === 17) || (_11 === 13)) { */ case 12:
				_tuple$1 = strconv.Unquote(token.val);
				s = _tuple$1[0];
				err$1 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 29:
					$r = t.error(err$1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 30:
				return t.newString(token.pos, token.val, s);
			/* } */ case 13:
		case 1:
		t.backup();
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.term }; } $f.$ptr = $ptr; $f._11 = _11; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.number = number; $f.pipe = pipe; $f.s = s; $f.t = t; $f.token = token; $f.token$1 = token$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.term = function() { return this.$val.term(); };
	Tree.ptr.prototype.hasFunction = function(name) {
		var $ptr, _entry, _i, _ref, funcMap, name, t;
		t = this;
		_ref = t.funcs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			funcMap = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (funcMap === false) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual((_entry = funcMap[$String.keyFor(name)], _entry !== undefined ? _entry.v : $ifaceNil), $ifaceNil))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Tree.prototype.hasFunction = function(name) { return this.$val.hasFunction(name); };
	Tree.ptr.prototype.popVars = function(n) {
		var $ptr, n, t;
		t = this;
		t.vars = $subslice(t.vars, 0, n);
	};
	Tree.prototype.popVars = function(n) { return this.$val.popVars(n); };
	Tree.ptr.prototype.useVar = function(pos, name) {
		var $ptr, _i, _ref, name, pos, t, v, varName, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _ref = $f._ref; name = $f.name; pos = $f.pos; t = $f.t; v = $f.v; varName = $f.varName; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		v = t.newVariable(pos, name);
		_ref = t.vars;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			varName = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (varName === (x = v.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))) {
				return v;
			}
			_i++;
		}
		$r = t.errorf("undefined variable %q", new sliceType([new $String((x$1 = v.Ident, (0 >= x$1.$length ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.useVar }; } $f.$ptr = $ptr; $f._i = _i; $f._ref = _ref; $f.name = name; $f.pos = pos; $f.t = t; $f.v = v; $f.varName = varName; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.useVar = function(pos, name) { return this.$val.useVar(pos, name); };
	item.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "next", name: "next", pkg: "text/template/parse", typ: $funcType([], [$Int32], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", typ: $funcType([], [$Int32], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "emit", name: "emit", pkg: "text/template/parse", typ: $funcType([itemType], [], false)}, {prop: "ignore", name: "ignore", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "text/template/parse", typ: $funcType([$String], [$Bool], false)}, {prop: "acceptRun", name: "acceptRun", pkg: "text/template/parse", typ: $funcType([$String], [], false)}, {prop: "lineNumber", name: "lineNumber", pkg: "text/template/parse", typ: $funcType([], [$Int], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", typ: $funcType([$String, sliceType], [stateFn], true)}, {prop: "nextItem", name: "nextItem", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "drain", name: "drain", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "run", name: "run", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "atLeftDelim", name: "atLeftDelim", pkg: "text/template/parse", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "atRightDelim", name: "atRightDelim", pkg: "text/template/parse", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "atTerminator", name: "atTerminator", pkg: "text/template/parse", typ: $funcType([], [$Bool], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "text/template/parse", typ: $funcType([], [$Bool], false)}];
	NodeType.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}];
	Pos.methods = [{prop: "Position", name: "Position", pkg: "", typ: $funcType([], [Pos], false)}];
	ptrType$1.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([Node], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "CopyList", name: "CopyList", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$13.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$4.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([ptrType$3], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "CopyPipe", name: "CopyPipe", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$9.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$3.methods = [{prop: "append", name: "append", pkg: "text/template/parse", typ: $funcType([Node], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$15.methods = [{prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([Pos], [ptrType$15], false)}, {prop: "SetTree", name: "SetTree", pkg: "", typ: $funcType([ptrType], [ptrType$15], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$2.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$16.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$17.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$18.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$19.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$20.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$5.methods = [{prop: "simplifyComplex", name: "simplifyComplex", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$21.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$22.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$23.methods = [{prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$24.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$10.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$11.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$14.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType$12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}];
	ptrType.methods = [{prop: "newList", name: "newList", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$1], false)}, {prop: "newText", name: "newText", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$13], false)}, {prop: "newPipeline", name: "newPipeline", pkg: "text/template/parse", typ: $funcType([Pos, $Int, sliceType$3], [ptrType$4], false)}, {prop: "newAction", name: "newAction", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4], [ptrType$9], false)}, {prop: "newCommand", name: "newCommand", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$3], false)}, {prop: "newVariable", name: "newVariable", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$2], false)}, {prop: "newDot", name: "newDot", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$16], false)}, {prop: "newNil", name: "newNil", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$17], false)}, {prop: "newField", name: "newField", pkg: "text/template/parse", typ: $funcType([Pos, $String], [ptrType$18], false)}, {prop: "newChain", name: "newChain", pkg: "text/template/parse", typ: $funcType([Pos, Node], [ptrType$19], false)}, {prop: "newBool", name: "newBool", pkg: "text/template/parse", typ: $funcType([Pos, $Bool], [ptrType$20], false)}, {prop: "newNumber", name: "newNumber", pkg: "text/template/parse", typ: $funcType([Pos, $String, itemType], [ptrType$5, $error], false)}, {prop: "newString", name: "newString", pkg: "text/template/parse", typ: $funcType([Pos, $String, $String], [ptrType$21], false)}, {prop: "newEnd", name: "newEnd", pkg: "text/template/parse", typ: $funcType([Pos], [ptrType$22], false)}, {prop: "newElse", name: "newElse", pkg: "text/template/parse", typ: $funcType([Pos, $Int], [ptrType$23], false)}, {prop: "newIf", name: "newIf", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$10], false)}, {prop: "newRange", name: "newRange", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$11], false)}, {prop: "newWith", name: "newWith", pkg: "text/template/parse", typ: $funcType([Pos, $Int, ptrType$4, ptrType$1, ptrType$1], [ptrType$14], false)}, {prop: "newTemplate", name: "newTemplate", pkg: "text/template/parse", typ: $funcType([Pos, $Int, $String, ptrType$4], [ptrType$12], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "next", name: "next", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "backup2", name: "backup2", pkg: "text/template/parse", typ: $funcType([item], [], false)}, {prop: "backup3", name: "backup3", pkg: "text/template/parse", typ: $funcType([item, item], [], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "nextNonSpace", name: "nextNonSpace", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "peekNonSpace", name: "peekNonSpace", pkg: "text/template/parse", typ: $funcType([], [item], false)}, {prop: "ErrorContext", name: "ErrorContext", pkg: "", typ: $funcType([Node], [$String, $String], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", typ: $funcType([$String, sliceType], [], true)}, {prop: "error", name: "error", pkg: "text/template/parse", typ: $funcType([$error], [], false)}, {prop: "expect", name: "expect", pkg: "text/template/parse", typ: $funcType([itemType, $String], [item], false)}, {prop: "expectOneOf", name: "expectOneOf", pkg: "text/template/parse", typ: $funcType([itemType, itemType, $String], [item], false)}, {prop: "unexpected", name: "unexpected", pkg: "text/template/parse", typ: $funcType([item, $String], [], false)}, {prop: "recover", name: "recover", pkg: "text/template/parse", typ: $funcType([ptrType$8], [], false)}, {prop: "startParse", name: "startParse", pkg: "text/template/parse", typ: $funcType([sliceType$6, ptrType$7, mapType$1], [], false)}, {prop: "stopParse", name: "stopParse", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String, $String, $String, mapType$1, sliceType$6], [ptrType, $error], true)}, {prop: "add", name: "add", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "parse", name: "parse", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "parseDefinition", name: "parseDefinition", pkg: "text/template/parse", typ: $funcType([], [], false)}, {prop: "itemList", name: "itemList", pkg: "text/template/parse", typ: $funcType([], [ptrType$1, Node], false)}, {prop: "textOrAction", name: "textOrAction", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "action", name: "action", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "pipeline", name: "pipeline", pkg: "text/template/parse", typ: $funcType([$String], [ptrType$4], false)}, {prop: "checkPipeline", name: "checkPipeline", pkg: "text/template/parse", typ: $funcType([ptrType$4, $String], [], false)}, {prop: "parseControl", name: "parseControl", pkg: "text/template/parse", typ: $funcType([$Bool, $String], [Pos, $Int, ptrType$4, ptrType$1, ptrType$1], false)}, {prop: "ifControl", name: "ifControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "rangeControl", name: "rangeControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "withControl", name: "withControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "endControl", name: "endControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "elseControl", name: "elseControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "blockControl", name: "blockControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "templateControl", name: "templateControl", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "parseTemplateName", name: "parseTemplateName", pkg: "text/template/parse", typ: $funcType([item, $String], [$String], false)}, {prop: "command", name: "command", pkg: "text/template/parse", typ: $funcType([], [ptrType$3], false)}, {prop: "operand", name: "operand", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "term", name: "term", pkg: "text/template/parse", typ: $funcType([], [Node], false)}, {prop: "hasFunction", name: "hasFunction", pkg: "text/template/parse", typ: $funcType([$String], [$Bool], false)}, {prop: "popVars", name: "popVars", pkg: "text/template/parse", typ: $funcType([$Int], [], false)}, {prop: "useVar", name: "useVar", pkg: "text/template/parse", typ: $funcType([Pos, $String], [Node], false)}];
	item.init([{prop: "typ", name: "typ", pkg: "text/template/parse", typ: itemType, tag: ""}, {prop: "pos", name: "pos", pkg: "text/template/parse", typ: Pos, tag: ""}, {prop: "val", name: "val", pkg: "text/template/parse", typ: $String, tag: ""}]);
	stateFn.init([ptrType$7], [stateFn], false);
	lexer.init([{prop: "name", name: "name", pkg: "text/template/parse", typ: $String, tag: ""}, {prop: "input", name: "input", pkg: "text/template/parse", typ: $String, tag: ""}, {prop: "leftDelim", name: "leftDelim", pkg: "text/template/parse", typ: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", pkg: "text/template/parse", typ: $String, tag: ""}, {prop: "state", name: "state", pkg: "text/template/parse", typ: stateFn, tag: ""}, {prop: "pos", name: "pos", pkg: "text/template/parse", typ: Pos, tag: ""}, {prop: "start", name: "start", pkg: "text/template/parse", typ: Pos, tag: ""}, {prop: "width", name: "width", pkg: "text/template/parse", typ: Pos, tag: ""}, {prop: "lastPos", name: "lastPos", pkg: "text/template/parse", typ: Pos, tag: ""}, {prop: "items", name: "items", pkg: "text/template/parse", typ: chanType, tag: ""}, {prop: "parenDepth", name: "parenDepth", pkg: "text/template/parse", typ: $Int, tag: ""}]);
	Node.init([{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", typ: $funcType([], [ptrType], false)}]);
	ListNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Nodes", name: "Nodes", pkg: "", typ: sliceType$1, tag: ""}]);
	TextNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: sliceType$2, tag: ""}]);
	PipeNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Decl", name: "Decl", pkg: "", typ: sliceType$3, tag: ""}, {prop: "Cmds", name: "Cmds", pkg: "", typ: sliceType$4, tag: ""}]);
	ActionNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", typ: ptrType$4, tag: ""}]);
	CommandNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Args", name: "Args", pkg: "", typ: sliceType$1, tag: ""}]);
	IdentifierNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", typ: $String, tag: ""}]);
	VariableNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", typ: sliceType$5, tag: ""}]);
	DotNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}]);
	NilNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}]);
	FieldNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", typ: sliceType$5, tag: ""}]);
	ChainNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Node", name: "Node", pkg: "", typ: Node, tag: ""}, {prop: "Field", name: "Field", pkg: "", typ: sliceType$5, tag: ""}]);
	BoolNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "True", name: "True", pkg: "", typ: $Bool, tag: ""}]);
	NumberNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "IsInt", name: "IsInt", pkg: "", typ: $Bool, tag: ""}, {prop: "IsUint", name: "IsUint", pkg: "", typ: $Bool, tag: ""}, {prop: "IsFloat", name: "IsFloat", pkg: "", typ: $Bool, tag: ""}, {prop: "IsComplex", name: "IsComplex", pkg: "", typ: $Bool, tag: ""}, {prop: "Int64", name: "Int64", pkg: "", typ: $Int64, tag: ""}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $Uint64, tag: ""}, {prop: "Float64", name: "Float64", pkg: "", typ: $Float64, tag: ""}, {prop: "Complex128", name: "Complex128", pkg: "", typ: $Complex128, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: ""}]);
	StringNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Quoted", name: "Quoted", pkg: "", typ: $String, tag: ""}, {prop: "Text", name: "Text", pkg: "", typ: $String, tag: ""}]);
	endNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}]);
	elseNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}]);
	BranchNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", typ: ptrType$4, tag: ""}, {prop: "List", name: "List", pkg: "", typ: ptrType$1, tag: ""}, {prop: "ElseList", name: "ElseList", pkg: "", typ: ptrType$1, tag: ""}]);
	IfNode.init([{prop: "BranchNode", name: "", pkg: "", typ: BranchNode, tag: ""}]);
	RangeNode.init([{prop: "BranchNode", name: "", pkg: "", typ: BranchNode, tag: ""}]);
	WithNode.init([{prop: "BranchNode", name: "", pkg: "", typ: BranchNode, tag: ""}]);
	TemplateNode.init([{prop: "NodeType", name: "", pkg: "", typ: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", typ: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", typ: ptrType, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", typ: ptrType$4, tag: ""}]);
	Tree.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "ParseName", name: "ParseName", pkg: "", typ: $String, tag: ""}, {prop: "Root", name: "Root", pkg: "", typ: ptrType$1, tag: ""}, {prop: "text", name: "text", pkg: "text/template/parse", typ: $String, tag: ""}, {prop: "funcs", name: "funcs", pkg: "text/template/parse", typ: sliceType$6, tag: ""}, {prop: "lex", name: "lex", pkg: "text/template/parse", typ: ptrType$7, tag: ""}, {prop: "token", name: "token", pkg: "text/template/parse", typ: arrayType$2, tag: ""}, {prop: "peekCount", name: "peekCount", pkg: "text/template/parse", typ: $Int, tag: ""}, {prop: "vars", name: "vars", pkg: "text/template/parse", typ: sliceType$5, tag: ""}, {prop: "treeSet", name: "treeSet", pkg: "text/template/parse", typ: mapType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		key = $makeMap($String.keyFor, [{ k: ".", v: 22 }, { k: "block", v: 21 }, { k: "define", v: 23 }, { k: "else", v: 24 }, { k: "end", v: 25 }, { k: "if", v: 26 }, { k: "range", v: 28 }, { k: "nil", v: 27 }, { k: "template", v: 29 }, { k: "with", v: 30 }]);
		textFormat = "%s";
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["text/template"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, io, ioutil, url, filepath, reflect, runtime, sort, strings, sync, parse, unicode, utf8, state, variable, ExecError, writeError, rvs, rvInts, rvUints, rvFloats, rvStrings, FuncMap, missingKeyAction, option, common, Template, ptrType, ptrType$1, ptrType$2, sliceType, sliceType$1, funcType, funcType$1, funcType$2, funcType$3, funcType$4, funcType$5, funcType$6, funcType$7, ptrType$3, ptrType$4, sliceType$2, ptrType$5, ptrType$6, arrayType, arrayType$1, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, sliceType$3, sliceType$4, sliceType$5, mapType, sliceType$6, ptrType$23, sliceType$7, ptrType$24, mapType$1, mapType$2, zero, errorType, fmtStringerType, builtins, builtinFuncs, errBadComparisonType, errBadComparison, errNoComparison, htmlQuot, htmlApos, htmlAmp, htmlLt, htmlGt, jsLowUni, hex, jsBackslash, jsApos, jsQuot, jsLt, jsGt, _r, _r$1, _r$2, doublePercent, errRecover, IsTrue, isTrue, isHexConstant, canBeNil, indirect, printableValue, sortKeys, createValueFuncs, addValueFuncs, addFuncs, goodFunc, goodName, findFunction, prepareArg, index, length, call, truth, and, or, not, basicKind, eq, ne, lt, le, gt, ge, HTMLEscape, HTMLEscapeString, HTMLEscaper, JSEscape, JSEscapeString, jsIsSpecial, JSEscaper, URLQueryEscaper, evalArgs, Must, parseFiles, parseGlob, New;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	url = $packages["net/url"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	parse = $packages["text/template/parse"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	state = $pkg.state = $newType(0, $kindStruct, "template.state", "state", "text/template", function(tmpl_, wr_, node_, vars_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tmpl = ptrType$3.nil;
			this.wr = $ifaceNil;
			this.node = $ifaceNil;
			this.vars = sliceType$2.nil;
			return;
		}
		this.tmpl = tmpl_;
		this.wr = wr_;
		this.node = node_;
		this.vars = vars_;
	});
	variable = $pkg.variable = $newType(0, $kindStruct, "template.variable", "variable", "text/template", function(name_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			return;
		}
		this.name = name_;
		this.value = value_;
	});
	ExecError = $pkg.ExecError = $newType(0, $kindStruct, "template.ExecError", "ExecError", "text/template", function(Name_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Name = Name_;
		this.Err = Err_;
	});
	writeError = $pkg.writeError = $newType(0, $kindStruct, "template.writeError", "writeError", "text/template", function(Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Err = $ifaceNil;
			return;
		}
		this.Err = Err_;
	});
	rvs = $pkg.rvs = $newType(12, $kindSlice, "template.rvs", "rvs", "text/template", null);
	rvInts = $pkg.rvInts = $newType(0, $kindStruct, "template.rvInts", "rvInts", "text/template", function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvUints = $pkg.rvUints = $newType(0, $kindStruct, "template.rvUints", "rvUints", "text/template", function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvFloats = $pkg.rvFloats = $newType(0, $kindStruct, "template.rvFloats", "rvFloats", "text/template", function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	rvStrings = $pkg.rvStrings = $newType(0, $kindStruct, "template.rvStrings", "rvStrings", "text/template", function(rvs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rvs = rvs.nil;
			return;
		}
		this.rvs = rvs_;
	});
	FuncMap = $pkg.FuncMap = $newType(4, $kindMap, "template.FuncMap", "FuncMap", "text/template", null);
	missingKeyAction = $pkg.missingKeyAction = $newType(4, $kindInt, "template.missingKeyAction", "missingKeyAction", "text/template", null);
	option = $pkg.option = $newType(0, $kindStruct, "template.option", "option", "text/template", function(missingKey_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.missingKey = 0;
			return;
		}
		this.missingKey = missingKey_;
	});
	common = $pkg.common = $newType(0, $kindStruct, "template.common", "common", "text/template", function(tmpl_, option_, muFuncs_, parseFuncs_, execFuncs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tmpl = false;
			this.option = new option.ptr(0);
			this.muFuncs = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			this.parseFuncs = false;
			this.execFuncs = false;
			return;
		}
		this.tmpl = tmpl_;
		this.option = option_;
		this.muFuncs = muFuncs_;
		this.parseFuncs = parseFuncs_;
		this.execFuncs = execFuncs_;
	});
	Template = $pkg.Template = $newType(0, $kindStruct, "template.Template", "Template", "text/template", function(name_, Tree_, common_, leftDelim_, rightDelim_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.Tree = ptrType$5.nil;
			this.common = ptrType$4.nil;
			this.leftDelim = "";
			this.rightDelim = "";
			return;
		}
		this.name = name_;
		this.Tree = Tree_;
		this.common = common_;
		this.leftDelim = leftDelim_;
		this.rightDelim = rightDelim_;
	});
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType($error);
	ptrType$2 = $ptrType(fmt.Stringer);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	funcType = $funcType([$emptyInterface, sliceType$1], [$emptyInterface], true);
	funcType$1 = $funcType([$emptyInterface, sliceType$1], [$emptyInterface, $error], true);
	funcType$2 = $funcType([sliceType$1], [$String], true);
	funcType$3 = $funcType([$emptyInterface], [$Int, $error], false);
	funcType$4 = $funcType([$emptyInterface], [$Bool], false);
	funcType$5 = $funcType([$String, sliceType$1], [$String], true);
	funcType$6 = $funcType([$emptyInterface, sliceType$1], [$Bool, $error], true);
	funcType$7 = $funcType([$emptyInterface, $emptyInterface], [$Bool, $error], false);
	ptrType$3 = $ptrType(Template);
	ptrType$4 = $ptrType(common);
	sliceType$2 = $sliceType(variable);
	ptrType$5 = $ptrType(parse.Tree);
	ptrType$6 = $ptrType(parse.ListNode);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$7 = $ptrType(parse.ActionNode);
	ptrType$8 = $ptrType(parse.IfNode);
	ptrType$9 = $ptrType(parse.RangeNode);
	ptrType$10 = $ptrType(parse.TemplateNode);
	ptrType$11 = $ptrType(parse.TextNode);
	ptrType$12 = $ptrType(parse.WithNode);
	ptrType$13 = $ptrType(parse.PipeNode);
	ptrType$14 = $ptrType(parse.FieldNode);
	ptrType$15 = $ptrType(parse.ChainNode);
	ptrType$16 = $ptrType(parse.IdentifierNode);
	ptrType$17 = $ptrType(parse.VariableNode);
	ptrType$18 = $ptrType(parse.BoolNode);
	ptrType$19 = $ptrType(parse.DotNode);
	ptrType$20 = $ptrType(parse.NilNode);
	ptrType$21 = $ptrType(parse.NumberNode);
	ptrType$22 = $ptrType(parse.StringNode);
	sliceType$3 = $sliceType(parse.Node);
	sliceType$4 = $sliceType(reflect.Value);
	sliceType$5 = $sliceType(ptrType$3);
	mapType = $mapType($String, $emptyInterface);
	sliceType$6 = $sliceType(mapType);
	ptrType$23 = $ptrType(parse.CommandNode);
	sliceType$7 = $sliceType($String);
	ptrType$24 = $ptrType(state);
	mapType$1 = $mapType($String, ptrType$3);
	mapType$2 = $mapType($String, reflect.Value);
	state.ptr.prototype.push = function(name, value) {
		var $ptr, name, s, value;
		value = value;
		s = this;
		s.vars = $append(s.vars, new variable.ptr(name, $clone(value, reflect.Value)));
	};
	state.prototype.push = function(name, value) { return this.$val.push(name, value); };
	state.ptr.prototype.mark = function() {
		var $ptr, s;
		s = this;
		return s.vars.$length;
	};
	state.prototype.mark = function() { return this.$val.mark(); };
	state.ptr.prototype.pop = function(mark) {
		var $ptr, mark, s;
		s = this;
		s.vars = $subslice(s.vars, 0, mark);
	};
	state.prototype.pop = function(mark) { return this.$val.pop(mark); };
	state.ptr.prototype.setVar = function(n, value) {
		var $ptr, n, s, value, x, x$1;
		value = value;
		s = this;
		(x = s.vars, x$1 = s.vars.$length - n >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).value = value;
	};
	state.prototype.setVar = function(n, value) { return this.$val.setVar(n, value); };
	state.ptr.prototype.varValue = function(name) {
		var $ptr, i, name, s, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; i = $f.i; name = $f.name; s = $f.s; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		i = s.mark() - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if ((x = s.vars, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).name === name) {
				return (x$1 = s.vars, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).value;
			}
			i = i - (1) >> 0;
		}
		$r = s.errorf("undefined variable: %s", new sliceType$1([new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return zero;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.varValue }; } $f.$ptr = $ptr; $f.i = i; $f.name = name; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.varValue = function(name) { return this.$val.varValue(name); };
	state.ptr.prototype.at = function(node) {
		var $ptr, node, s;
		s = this;
		s.node = node;
	};
	state.prototype.at = function(node) { return this.$val.at(node); };
	doublePercent = function(str) {
		var $ptr, str;
		if (strings.Contains(str, "%")) {
			str = strings.Replace(str, "%", "%%", -1);
		}
		return str;
	};
	ExecError.ptr.prototype.Error = function() {
		var $ptr, _r$3, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(this, ExecError);
		_r$3 = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ExecError.ptr.prototype.Error }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	ExecError.prototype.Error = function() { return this.$val.Error(); };
	state.ptr.prototype.errorf = function(format, args) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _tuple, args, context, format, location, name, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; args = $f.args; context = $f.context; format = $f.format; location = $f.location; name = $f.name; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		name = doublePercent(s.tmpl.Name());
		/* */ if ($interfaceIsEqual(s.node, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(s.node, $ifaceNil)) { */ case 1:
			_r$3 = fmt.Sprintf("template: %s: %s", new sliceType$1([new $String(name), new $String(format)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			format = _r$3;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$4 = s.tmpl.Tree.ErrorContext(s.node); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			location = _tuple[0];
			context = _tuple[1];
			_r$5 = fmt.Sprintf("template: %s: executing %q at <%s>: %s", new sliceType$1([new $String(location), new $String(name), new $String(doublePercent(context)), new $String(format)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			format = _r$5;
		/* } */ case 3:
		_r$6 = fmt.Errorf(format, args); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$panic((x = new ExecError.ptr(s.tmpl.Name(), _r$6), new x.constructor.elem(x)));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.errorf }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.args = args; $f.context = context; $f.format = format; $f.location = location; $f.name = name; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	state.ptr.prototype.writeError = function(err) {
		var $ptr, err, s, x;
		s = this;
		$panic((x = new writeError.ptr(err), new x.constructor.elem(x)));
	};
	state.prototype.writeError = function(err) { return this.$val.writeError(err); };
	errRecover = function(errp) {
		var $ptr, _ref, e, err, err$1, err$2, err$3, errp;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_ref = e;
			if ($assertType(_ref, runtime.Error, true)[1]) {
				err = _ref;
				$panic(e);
			} else if ($assertType(_ref, writeError, true)[1]) {
				err$1 = $clone(_ref.$val, writeError);
				errp.$set(err$1.Err);
			} else if ($assertType(_ref, ExecError, true)[1]) {
				err$2 = $clone(_ref.$val, ExecError);
				errp.$set(new err$2.constructor.elem(err$2));
			} else {
				err$3 = _ref;
				$panic(e);
			}
		}
	};
	Template.ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var $ptr, _entry, _r$3, _r$4, data, name, t, tmpl, wr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$3 = $f._r$3; _r$4 = $f._r$4; data = $f.data; name = $f.name; t = $f.t; tmpl = $f.tmpl; wr = $f.wr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		tmpl = ptrType$3.nil;
		if (!(t.common === ptrType$4.nil)) {
			tmpl = (_entry = t.common.tmpl[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		}
		/* */ if (tmpl === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tmpl === ptrType$3.nil) { */ case 1:
			_r$3 = fmt.Errorf("template: no template %q associated with template %q", new sliceType$1([new $String(name), new $String(t.name)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return _r$3;
		/* } */ case 2:
		_r$4 = tmpl.Execute(wr, data); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ExecuteTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.data = data; $f.name = name; $f.t = t; $f.tmpl = tmpl; $f.wr = wr; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.$val.ExecuteTemplate(wr, name, data); };
	Template.ptr.prototype.Execute = function(wr, data) {
		var $ptr, _arg, _arg$1, _r$3, _r$4, data, err, state$1, t, value, wr, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; data = $f.data; err = $f.err; state$1 = $f.state$1; t = $f.t; value = $f.value; wr = $f.wr; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		t = this;
		$deferred.push([errRecover, [(err.$ptr || (err.$ptr = new ptrType$1(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		_r$3 = reflect.ValueOf(data); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		state$1 = new state.ptr(t, wr, $ifaceNil, new sliceType$2([new variable.ptr("$", $clone(value, reflect.Value))]));
		/* */ if (t.Tree === ptrType$5.nil || t.Tree.Root === ptrType$6.nil) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (t.Tree === ptrType$5.nil || t.Tree.Root === ptrType$6.nil) { */ case 2:
			_arg = new $String(t.Name());
			_r$4 = t.DefinedTemplates(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$4);
			$r = state$1.errorf("%q is an incomplete or empty template%s", new sliceType$1([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = state$1.walk(value, t.Tree.Root); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Execute }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.data = data; $f.err = err; $f.state$1 = state$1; $f.t = t; $f.value = value; $f.wr = wr; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Execute = function(wr, data) { return this.$val.Execute(wr, data); };
	Template.ptr.prototype.DefinedTemplates = function() {
		var $ptr, _entry, _i, _keys, _r$3, _ref, b, name, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r$3 = $f._r$3; _ref = $f._ref; b = $f.b; name = $f.name; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		t = this;
		if (t.common === ptrType$4.nil) {
			return "";
		}
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			tmpl = _entry.v;
			/* */ if (tmpl.Tree === ptrType$5.nil || tmpl.Tree.Root === ptrType$6.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (tmpl.Tree === ptrType$5.nil || tmpl.Tree.Root === ptrType$6.nil) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			if (b[0].Len() > 0) {
				b[0].WriteString(", ");
			}
			_r$3 = fmt.Fprintf(b[0], "%q", new sliceType$1([new $String(name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		s = "";
		if (b[0].Len() > 0) {
			s = "; defined templates are: " + b[0].String();
		}
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.DefinedTemplates }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r$3 = _r$3; $f._ref = _ref; $f.b = b; $f.name = name; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.DefinedTemplates = function() { return this.$val.DefinedTemplates(); };
	state.ptr.prototype.walk = function(dot, node) {
		var $ptr, _i, _r$3, _r$4, _ref, _ref$1, _tuple, dot, err, node, node$1, node$2, node$3, node$4, node$5, node$6, node$7, node$8, node$9, s, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; dot = $f.dot; err = $f.err; node = $f.node; node$1 = $f.node$1; node$2 = $f.node$2; node$3 = $f.node$3; node$4 = $f.node$4; node$5 = $f.node$5; node$6 = $f.node$6; node$7 = $f.node$7; node$8 = $f.node$8; node$9 = $f.node$9; s = $f.s; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(node);
		_ref = node;
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$8, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$11, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$12, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$7, true)[1]) { */ case 1:
			node$1 = _ref.$val;
			_r$3 = s.evalPipeline(dot, node$1.Pipe); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			val = _r$3;
			/* */ if (node$1.Pipe.Decl.$length === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (node$1.Pipe.Decl.$length === 0) { */ case 11:
				$r = s.printValue(node$1, val); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$8, true)[1]) { */ case 2:
			node$2 = _ref.$val;
			$r = s.walkIfOrWith(10, dot, node$2.BranchNode.Pipe, node$2.BranchNode.List, node$2.BranchNode.ElseList); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$6, true)[1]) { */ case 3:
			node$3 = _ref.$val;
			_ref$1 = node$3.Nodes;
			_i = 0;
			/* while (true) { */ case 15:
				/* if (!(_i < _ref$1.$length)) { break; } */ if(!(_i < _ref$1.$length)) { $s = 16; continue; }
				node$9 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				$r = s.walk(dot, node$9); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 15; continue; case 16:
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 4:
			node$4 = _ref.$val;
			$r = s.walkRange(dot, node$4); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 5:
			node$5 = _ref.$val;
			$r = s.walkTemplate(dot, node$5); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$11, true)[1]) { */ case 6:
			node$6 = _ref.$val;
			_r$4 = s.wr.Write(node$6.Text); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				s.writeError(err);
			}
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$12, true)[1]) { */ case 7:
			node$7 = _ref.$val;
			$r = s.walkIfOrWith(19, dot, node$7.BranchNode.Pipe, node$7.BranchNode.List, node$7.BranchNode.ElseList); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 9; continue;
		/* } else { */ case 8:
			node$8 = _ref;
			$r = s.errorf("unknown node: %s", new sliceType$1([node$8])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.walk }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.dot = dot; $f.err = err; $f.node = node; $f.node$1 = node$1; $f.node$2 = node$2; $f.node$3 = node$3; $f.node$4 = node$4; $f.node$5 = node$5; $f.node$6 = node$6; $f.node$7 = node$7; $f.node$8 = node$8; $f.node$9 = node$9; $f.s = s; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.walk = function(dot, node) { return this.$val.walk(dot, node); };
	state.ptr.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) {
		var $ptr, _r$3, _tuple, dot, elseList, list, ok, pipe, s, truth$1, typ, val, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; dot = $f.dot; elseList = $f.elseList; list = $f.list; ok = $f.ok; pipe = $f.pipe; s = $f.s; truth$1 = $f.truth$1; typ = $f.typ; val = $f.val; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dot = dot;
		s = this;
		$deferred.push([$methodVal(s, "pop"), [s.mark()]]);
		_r$3 = s.evalPipeline(dot, pipe); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		val = _r$3;
		_tuple = isTrue(val);
		truth$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("if/with can't use %v", new sliceType$1([new val.constructor.elem(val)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if (truth$1) { $s = 5; continue; }
		/* */ if (!(elseList === ptrType$6.nil)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (truth$1) { */ case 5:
			/* */ if (typ === 19) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (typ === 19) { */ case 8:
				$r = s.walk(val, list); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 10; continue;
			/* } else { */ case 9:
				$r = s.walk(dot, list); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			$s = 7; continue;
		/* } else if (!(elseList === ptrType$6.nil)) { */ case 6:
			$r = s.walk(dot, elseList); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkIfOrWith }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.dot = dot; $f.elseList = elseList; $f.list = list; $f.ok = ok; $f.pipe = pipe; $f.s = s; $f.truth$1 = truth$1; $f.typ = typ; $f.val = val; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	state.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) { return this.$val.walkIfOrWith(typ, dot, pipe, list, elseList); };
	IsTrue = function(val) {
		var $ptr, _r$3, _r$4, _tuple, ok, truth$1, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; truth$1 = $f.truth$1; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		truth$1 = false;
		ok = false;
		_r$3 = reflect.ValueOf(val); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = isTrue(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		truth$1 = _tuple[0];
		ok = _tuple[1];
		/* */ $s = 3; case 3:
		return [truth$1, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsTrue }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.truth$1 = truth$1; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsTrue = IsTrue;
	isTrue = function(val) {
		var $ptr, _1, _tmp, _tmp$1, _tmp$2, _tmp$3, ok, truth$1, val, x, x$1, x$2;
		truth$1 = false;
		ok = false;
		val = val;
		if (!val.IsValid()) {
			_tmp = false;
			_tmp$1 = true;
			truth$1 = _tmp;
			ok = _tmp$1;
			return [truth$1, ok];
		}
		_1 = val.Kind();
		if ((_1 === 17) || (_1 === 21) || (_1 === 23) || (_1 === 24)) {
			truth$1 = val.Len() > 0;
		} else if (_1 === 1) {
			truth$1 = val.Bool();
		} else if ((_1 === 15) || (_1 === 16)) {
			truth$1 = !((x = val.Complex(), (x.$real === 0 && x.$imag === 0)));
		} else if ((_1 === 18) || (_1 === 19) || (_1 === 22) || (_1 === 20)) {
			truth$1 = !val.IsNil();
		} else if ((_1 === 2) || (_1 === 3) || (_1 === 4) || (_1 === 5) || (_1 === 6)) {
			truth$1 = !((x$1 = val.Int(), (x$1.$high === 0 && x$1.$low === 0)));
		} else if ((_1 === 13) || (_1 === 14)) {
			truth$1 = !((val.Float() === 0));
		} else if ((_1 === 7) || (_1 === 8) || (_1 === 9) || (_1 === 10) || (_1 === 11) || (_1 === 12)) {
			truth$1 = !((x$2 = val.Uint(), (x$2.$high === 0 && x$2.$low === 0)));
		} else if (_1 === 25) {
			truth$1 = true;
		} else {
			return [truth$1, ok];
		}
		_tmp$2 = truth$1;
		_tmp$3 = true;
		truth$1 = _tmp$2;
		ok = _tmp$3;
		return [truth$1, ok];
	};
	state.ptr.prototype.walkRange = function(dot, r) {
		var $ptr, _2, _arg, _arg$1, _arg$2, _arg$3, _i, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, dot, elem, i, i$1, key, mark, ok, oneIteration, r, s, val, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dot = $f.dot; elem = $f.elem; i = $f.i; i$1 = $f.i$1; key = $f.key; mark = $f.mark; ok = $f.ok; oneIteration = $f.oneIteration; r = $f.r; s = $f.s; val = $f.val; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		mark = [mark];
		r = [r];
		s = [s];
		dot = dot;
		s[0] = this;
		s[0].at(r[0]);
		$deferred.push([$methodVal(s[0], "pop"), [s[0].mark()]]);
		_r$3 = s[0].evalPipeline(dot, r[0].BranchNode.Pipe); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = indirect(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		val = _tuple[0];
		mark[0] = s[0].mark();
		oneIteration = (function(mark, r, s) { return function $b(index$1, elem) {
			var $ptr, elem, index$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; elem = $f.elem; index$1 = $f.index$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			elem = elem;
			index$1 = index$1;
			if (r[0].BranchNode.Pipe.Decl.$length > 0) {
				s[0].setVar(1, elem);
			}
			if (r[0].BranchNode.Pipe.Decl.$length > 1) {
				s[0].setVar(2, index$1);
			}
			$r = s[0].walk(elem, r[0].BranchNode.List); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			s[0].pop(mark[0]);
			/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$ptr = $ptr; $f.elem = elem; $f.index$1 = index$1; $f.$s = $s; $f.$r = $r; return $f;
		}; })(mark, r, s);
			_2 = val.Kind();
			/* */ if ((_2 === 17) || (_2 === 23)) { $s = 4; continue; }
			/* */ if (_2 === 21) { $s = 5; continue; }
			/* */ if (_2 === 18) { $s = 6; continue; }
			/* */ if (_2 === 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_2 === 17) || (_2 === 23)) { */ case 4:
				if (val.Len() === 0) {
					/* break; */ $s = 3; continue;
				}
				i = 0;
				/* while (true) { */ case 10:
					/* if (!(i < val.Len())) { break; } */ if(!(i < val.Len())) { $s = 11; continue; }
					_r$5 = reflect.ValueOf(new $Int(i)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg = _r$5;
					_r$6 = val.Index(i); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$1 = _r$6;
					$r = oneIteration(_arg, _arg$1); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 10; continue; case 11:
				return;
			/* } else if (_2 === 21) { */ case 5:
				if (val.Len() === 0) {
					/* break; */ $s = 3; continue;
				}
				_r$7 = val.MapKeys(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = sortKeys(_r$7); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_ref = _r$8;
				_i = 0;
				/* while (true) { */ case 17:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 18; continue; }
					key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					_arg$2 = key;
					_r$9 = val.MapIndex(key); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$3 = _r$9;
					$r = oneIteration(_arg$2, _arg$3); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 17; continue; case 18:
				return;
			/* } else if (_2 === 18) { */ case 6:
				if (val.IsNil()) {
					/* break; */ $s = 3; continue;
				}
				i$1 = 0;
				/* while (true) { */ case 21:
					_r$10 = val.Recv(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$1 = _r$10;
					elem = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						/* break; */ $s = 22; continue;
					}
					_r$11 = reflect.ValueOf(new $Int(i$1)); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = oneIteration(_r$11, elem); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 21; continue; case 22:
				if (i$1 === 0) {
					/* break; */ $s = 3; continue;
				}
				return;
			/* } else if (_2 === 0) { */ case 7:
				/* break; */ $s = 3; continue;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = s[0].errorf("range can't iterate over %v", new sliceType$1([new val.constructor.elem(val)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
		case 3:
		/* */ if (!(r[0].BranchNode.ElseList === ptrType$6.nil)) { $s = 27; continue; }
		/* */ $s = 28; continue;
		/* if (!(r[0].BranchNode.ElseList === ptrType$6.nil)) { */ case 27:
			$r = s[0].walk(dot, r[0].BranchNode.ElseList); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 28:
		/* */ $s = -1; case -1: } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkRange }; } $f.$ptr = $ptr; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dot = dot; $f.elem = elem; $f.i = i; $f.i$1 = i$1; $f.key = key; $f.mark = mark; $f.ok = ok; $f.oneIteration = oneIteration; $f.r = r; $f.s = s; $f.val = val; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	state.prototype.walkRange = function(dot, r) { return this.$val.walkRange(dot, r); };
	state.ptr.prototype.walkTemplate = function(dot, t) {
		var $ptr, _entry, _r$3, dot, newState, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r$3 = $f._r$3; dot = $f.dot; newState = $f.newState; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(t);
		tmpl = (_entry = s.tmpl.common.tmpl[$String.keyFor(t.Name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		/* */ if (tmpl === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (tmpl === ptrType$3.nil) { */ case 1:
			$r = s.errorf("template %q not defined", new sliceType$1([new $String(t.Name)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$3 = s.evalPipeline(dot, t.Pipe); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		dot = _r$3;
		newState = $clone(s, state);
		newState.tmpl = tmpl;
		newState.vars = new sliceType$2([new variable.ptr("$", $clone(dot, reflect.Value))]);
		$r = newState.walk(dot, tmpl.Tree.Root); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.walkTemplate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r$3 = _r$3; $f.dot = dot; $f.newState = newState; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.walkTemplate = function(dot, t) { return this.$val.walkTemplate(dot, t); };
	state.ptr.prototype.evalPipeline = function(dot, pipe) {
		var $ptr, _i, _i$1, _r$3, _r$4, _r$5, _r$6, _ref, _ref$1, _v, cmd, dot, pipe, s, value, variable$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _i$1 = $f._i$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; cmd = $f.cmd; dot = $f.dot; pipe = $f.pipe; s = $f.s; value = $f.value; variable$1 = $f.variable$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		dot = dot;
		s = this;
		if (pipe === ptrType$13.nil) {
			return value;
		}
		s.at(pipe);
		_ref = pipe.Cmds;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			cmd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$3 = s.evalCommand(dot, cmd, value); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			value = _r$3;
			if (!(value.Kind() === 20)) { _v = false; $s = 6; continue s; }
			_r$4 = value.Type().NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4 === 0; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				_r$5 = value.Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = reflect.ValueOf(_r$5); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				value = _r$6;
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = pipe.Decl;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			variable$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			s.push((x = variable$1.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), value);
			_i$1++;
		}
		value = value;
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalPipeline }; } $f.$ptr = $ptr; $f._i = _i; $f._i$1 = _i$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f.cmd = cmd; $f.dot = dot; $f.pipe = pipe; $f.s = s; $f.value = value; $f.variable$1 = variable$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalPipeline = function(dot, pipe) { return this.$val.evalPipeline(dot, pipe); };
	state.ptr.prototype.notAFunction = function(args, final$1) {
		var $ptr, args, final$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; args = $f.args; final$1 = $f.final$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		s = this;
		/* */ if (args.$length > 1 || final$1.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (args.$length > 1 || final$1.IsValid()) { */ case 1:
			$r = s.errorf("can't give argument to non-function %s", new sliceType$1([(0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0])])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.notAFunction }; } $f.$ptr = $ptr; $f.args = args; $f.final$1 = final$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.notAFunction = function(args, final$1) { return this.$val.notAFunction(args, final$1); };
	state.ptr.prototype.evalCommand = function(dot, cmd, final$1) {
		var $ptr, _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, cmd, dot, final$1, firstWord, n, n$1, n$2, n$3, n$4, s, word, word$1, word$2, word$3, word$4, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; cmd = $f.cmd; dot = $f.dot; final$1 = $f.final$1; firstWord = $f.firstWord; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; s = $f.s; word = $f.word; word$1 = $f.word$1; word$2 = $f.word$2; word$3 = $f.word$3; word$4 = $f.word$4; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		firstWord = (x = cmd.Args, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		_ref = firstWord;
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($assertType(_ref, ptrType$14, true)[1]) { */ case 1:
			n = _ref.$val;
			_r$3 = s.evalFieldNode(dot, n, cmd.Args, final$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 8; case 8:
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 2:
			n$1 = _ref.$val;
			_r$4 = s.evalChainNode(dot, n$1, cmd.Args, final$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return _r$4;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 3:
			n$2 = _ref.$val;
			_r$5 = s.evalFunction(dot, n$2, cmd, cmd.Args, final$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$5;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 4:
			n$3 = _ref.$val;
			_r$6 = s.evalPipeline(dot, n$3); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$6;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 5:
			n$4 = _ref.$val;
			_r$7 = s.evalVariableNode(dot, n$4, cmd.Args, final$1); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return _r$7;
		/* } */ case 6:
		s.at(firstWord);
		$r = s.notAFunction(cmd.Args, final$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$1 = firstWord;
		/* */ if ($assertType(_ref$1, ptrType$18, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref$1, ptrType$19, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref$1, ptrType$20, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref$1, ptrType$21, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref$1, ptrType$22, true)[1]) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if ($assertType(_ref$1, ptrType$18, true)[1]) { */ case 18:
			word = _ref$1.$val;
			_r$8 = reflect.ValueOf(new $Bool(word.True)); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ $s = 25; case 25:
			return _r$8;
		/* } else if ($assertType(_ref$1, ptrType$19, true)[1]) { */ case 19:
			word$1 = _ref$1.$val;
			return dot;
		/* } else if ($assertType(_ref$1, ptrType$20, true)[1]) { */ case 20:
			word$2 = _ref$1.$val;
			$r = s.errorf("nil is not a command", new sliceType$1([])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 23; continue;
		/* } else if ($assertType(_ref$1, ptrType$21, true)[1]) { */ case 21:
			word$3 = _ref$1.$val;
			_r$9 = s.idealConstant(word$3); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 28; case 28:
			return _r$9;
		/* } else if ($assertType(_ref$1, ptrType$22, true)[1]) { */ case 22:
			word$4 = _ref$1.$val;
			_r$10 = reflect.ValueOf(new $String(word$4.Text)); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			/* */ $s = 30; case 30:
			return _r$10;
		/* } */ case 23:
		$r = s.errorf("can't evaluate command %q", new sliceType$1([firstWord])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalCommand }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cmd = cmd; $f.dot = dot; $f.final$1 = final$1; $f.firstWord = firstWord; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.s = s; $f.word = word; $f.word$1 = word$1; $f.word$2 = word$2; $f.word$3 = word$3; $f.word$4 = word$4; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalCommand = function(dot, cmd, final$1) { return this.$val.evalCommand(dot, cmd, final$1); };
	state.ptr.prototype.idealConstant = function(constant) {
		var $ptr, _r$3, _r$4, _r$5, constant, n, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; constant = $f.constant; n = $f.n; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(constant);
			/* */ if (constant.IsComplex) { $s = 2; continue; }
			/* */ if (constant.IsFloat && !isHexConstant(constant.Text) && strings.IndexAny(constant.Text, ".eE") >= 0) { $s = 3; continue; }
			/* */ if (constant.IsInt) { $s = 4; continue; }
			/* */ if (constant.IsUint) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (constant.IsComplex) { */ case 2:
				_r$3 = reflect.ValueOf(constant.Complex128); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$3;
			/* } else if (constant.IsFloat && !isHexConstant(constant.Text) && strings.IndexAny(constant.Text, ".eE") >= 0) { */ case 3:
				_r$4 = reflect.ValueOf(new $Float64(constant.Float64)); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 10; case 10:
				return _r$4;
			/* } else if (constant.IsInt) { */ case 4:
				n = ((x = constant.Int64, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
				/* */ if (!((x$1 = new $Int64(0, n), x$2 = constant.Int64, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!((x$1 = new $Int64(0, n), x$2 = constant.Int64, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) { */ case 11:
					$r = s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				_r$5 = reflect.ValueOf(new $Int(n)); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 15; case 15:
				return _r$5;
			/* } else if (constant.IsUint) { */ case 5:
				$r = s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		return zero;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.idealConstant }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.constant = constant; $f.n = n; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.idealConstant = function(constant) { return this.$val.idealConstant(constant); };
	isHexConstant = function(s) {
		var $ptr, s;
		return s.length > 2 && (s.charCodeAt(0) === 48) && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88));
	};
	state.ptr.prototype.evalFieldNode = function(dot, field, args, final$1) {
		var $ptr, _r$3, args, dot, field, final$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; args = $f.args; dot = $f.dot; field = $f.field; final$1 = $f.final$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(field);
		_r$3 = s.evalFieldChain(dot, dot, field, field.Ident, args, final$1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFieldNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.args = args; $f.dot = dot; $f.field = field; $f.final$1 = final$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFieldNode = function(dot, field, args, final$1) { return this.$val.evalFieldNode(dot, field, args, final$1); };
	state.ptr.prototype.evalChainNode = function(dot, chain, args, final$1) {
		var $ptr, _r$3, _r$4, _r$5, args, chain, dot, final$1, pipe, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; args = $f.args; chain = $f.chain; dot = $f.dot; final$1 = $f.final$1; pipe = $f.pipe; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(chain);
		/* */ if (chain.Field.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (chain.Field.$length === 0) { */ case 1:
			$r = s.errorf("internal error: no fields in evalChainNode", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$3 = chain.Node.Type(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 12) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 12) { */ case 4:
			$r = s.errorf("indirection through explicit nil in %s", new sliceType$1([chain])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		_r$4 = s.evalArg(dot, $ifaceNil, chain.Node); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		pipe = _r$4;
		_r$5 = s.evalFieldChain(dot, pipe, chain, chain.Field, args, final$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 10; case 10:
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalChainNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.args = args; $f.chain = chain; $f.dot = dot; $f.final$1 = final$1; $f.pipe = pipe; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalChainNode = function(dot, chain, args, final$1) { return this.$val.evalChainNode(dot, chain, args, final$1); };
	state.ptr.prototype.evalVariableNode = function(dot, variable$1, args, final$1) {
		var $ptr, _r$3, _r$4, args, dot, final$1, s, value, variable$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; dot = $f.dot; final$1 = $f.final$1; s = $f.s; value = $f.value; variable$1 = $f.variable$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(variable$1);
		_r$3 = s.varValue((x = variable$1.Ident, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		value = _r$3;
		/* */ if (variable$1.Ident.$length === 1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (variable$1.Ident.$length === 1) { */ case 2:
			$r = s.notAFunction(args, final$1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			return value;
		/* } */ case 3:
		_r$4 = s.evalFieldChain(dot, value, variable$1, $subslice(variable$1.Ident, 1), args, final$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalVariableNode }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.dot = dot; $f.final$1 = final$1; $f.s = s; $f.value = value; $f.variable$1 = variable$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalVariableNode = function(dot, variable$1, args, final$1) { return this.$val.evalVariableNode(dot, variable$1, args, final$1); };
	state.ptr.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) {
		var $ptr, _r$3, _r$4, args, dot, final$1, i, ident, n, node, receiver, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; dot = $f.dot; final$1 = $f.final$1; i = $f.i; ident = $f.ident; n = $f.n; node = $f.node; receiver = $f.receiver; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		receiver = receiver;
		dot = dot;
		s = this;
		n = ident.$length;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (n - 1 >> 0))) { break; } */ if(!(i < (n - 1 >> 0))) { $s = 2; continue; }
			_r$3 = s.evalField(dot, ((i < 0 || i >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + i]), node, sliceType$3.nil, zero, receiver); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			receiver = _r$3;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$4 = s.evalField(dot, (x = n - 1 >> 0, ((x < 0 || x >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + x])), node, args, final$1, receiver); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 5; case 5:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFieldChain }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.dot = dot; $f.final$1 = final$1; $f.i = i; $f.ident = ident; $f.n = n; $f.node = node; $f.receiver = receiver; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) { return this.$val.evalFieldChain(dot, receiver, node, ident, args, final$1); };
	state.ptr.prototype.evalFunction = function(dot, node, cmd, args, final$1) {
		var $ptr, _r$3, _r$4, _tuple, args, cmd, dot, final$1, function$1, name, node, ok, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; args = $f.args; cmd = $f.cmd; dot = $f.dot; final$1 = $f.final$1; function$1 = $f.function$1; name = $f.name; node = $f.node; ok = $f.ok; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		dot = dot;
		s = this;
		s.at(node);
		name = node.Ident;
		_r$3 = findFunction(name, s.tmpl); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		function$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("%q is not a defined function", new sliceType$1([new $String(name)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$4 = s.evalCall(dot, function$1, cmd, name, args, final$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 6; case 6:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFunction }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.args = args; $f.cmd = cmd; $f.dot = dot; $f.final$1 = final$1; $f.function$1 = function$1; $f.name = name; $f.node = node; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFunction = function(dot, node, cmd, args, final$1) { return this.$val.evalFunction(dot, node, cmd, args, final$1); };
	state.ptr.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) {
		var $ptr, _3, _4, _r$10, _r$11, _r$12, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, args, dot, field, fieldName, final$1, hasArgs, isNil, method, nameVal, node, ok, ptr, receiver, result, s, tField, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _4 = $f._4; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; args = $f.args; dot = $f.dot; field = $f.field; fieldName = $f.fieldName; final$1 = $f.final$1; hasArgs = $f.hasArgs; isNil = $f.isNil; method = $f.method; nameVal = $f.nameVal; node = $f.node; ok = $f.ok; ptr = $f.ptr; receiver = $f.receiver; result = $f.result; s = $f.s; tField = $f.tField; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		receiver = receiver;
		final$1 = final$1;
		dot = dot;
		s = this;
		if (!receiver.IsValid()) {
			return zero;
		}
		typ = receiver.Type();
		_r$3 = indirect(receiver); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		receiver = _tuple[0];
		isNil = _tuple[1];
		ptr = receiver;
		if (!((ptr.Kind() === 20)) && ptr.CanAddr()) {
			ptr = ptr.Addr();
		}
		method = ptr.MethodByName(fieldName);
		/* */ if (method.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (method.IsValid()) { */ case 2:
			_r$4 = s.evalCall(dot, method, node, fieldName, args, final$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return _r$4;
		/* } */ case 3:
		hasArgs = args.$length > 1 || final$1.IsValid();
		/* */ if (isNil) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (isNil) { */ case 6:
			$r = s.errorf("nil pointer evaluating %s.%s", new sliceType$1([typ, new $String(fieldName)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
			_3 = receiver.Kind();
			/* */ if (_3 === 25) { $s = 10; continue; }
			/* */ if (_3 === 21) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_3 === 25) { */ case 10:
				_r$5 = receiver.Type().FieldByName(fieldName); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$1 = _r$5;
				tField = $clone(_tuple$1[0], reflect.StructField);
				ok = _tuple$1[1];
				/* */ if (ok) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (ok) { */ case 14:
					_r$6 = receiver.FieldByIndex(tField.Index); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					field = _r$6;
					/* */ if (!(tField.PkgPath === "")) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (!(tField.PkgPath === "")) { */ case 17:
						$r = s.errorf("%s is an unexported field of struct type %s", new sliceType$1([new $String(fieldName), typ])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 18:
					/* */ if (hasArgs) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (hasArgs) { */ case 20:
						$r = s.errorf("%s has arguments but cannot be invoked as function", new sliceType$1([new $String(fieldName)])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 21:
					return field;
				/* } */ case 15:
				$r = s.errorf("%s is not a field of struct type %s", new sliceType$1([new $String(fieldName), typ])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 12; continue;
			/* } else if (_3 === 21) { */ case 11:
				_r$7 = reflect.ValueOf(new $String(fieldName)); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				nameVal = _r$7;
				_r$8 = receiver.Type().Key(); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = nameVal.Type().AssignableTo(_r$8); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (_r$9) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (_r$9) { */ case 25:
					/* */ if (hasArgs) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (hasArgs) { */ case 29:
						$r = s.errorf("%s is not a method but has arguments", new sliceType$1([new $String(fieldName)])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 30:
					_r$10 = receiver.MapIndex(nameVal); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					result = _r$10;
					/* */ if (!result.IsValid()) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if (!result.IsValid()) { */ case 33:
							_4 = s.tmpl.common.option.missingKey;
							/* */ if (_4 === 0) { $s = 36; continue; }
							/* */ if (_4 === 1) { $s = 37; continue; }
							/* */ if (_4 === 2) { $s = 38; continue; }
							/* */ $s = 39; continue;
							/* if (_4 === 0) { */ case 36:
								$s = 39; continue;
							/* } else if (_4 === 1) { */ case 37:
								_r$11 = receiver.Type().Elem(); /* */ $s = 40; case 40: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
								_r$12 = reflect.Zero(_r$11); /* */ $s = 41; case 41: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
								result = _r$12;
								$s = 39; continue;
							/* } else if (_4 === 2) { */ case 38:
								$r = s.errorf("map has no entry for key %q", new sliceType$1([new $String(fieldName)])); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 39:
						case 35:
					/* } */ case 34:
					return result;
				/* } */ case 26:
			/* } */ case 12:
		case 9:
		$r = s.errorf("can't evaluate field %s in type %s", new sliceType$1([new $String(fieldName), typ])); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalField }; } $f.$ptr = $ptr; $f._3 = _3; $f._4 = _4; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.args = args; $f.dot = dot; $f.field = field; $f.fieldName = fieldName; $f.final$1 = final$1; $f.hasArgs = hasArgs; $f.isNil = isNil; $f.method = method; $f.nameVal = nameVal; $f.node = node; $f.ok = ok; $f.ptr = ptr; $f.receiver = receiver; $f.result = result; $f.s = s; $f.tField = tField; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) { return this.$val.evalField(dot, fieldName, node, args, final$1, receiver); };
	state.ptr.prototype.evalCall = function(dot, fun, node, name, args, final$1) {
		var $ptr, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, argType, args, argv, dot, final$1, fun, i, name, node, numFixed, numIn, result, s, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; argType = $f.argType; args = $f.args; argv = $f.argv; dot = $f.dot; final$1 = $f.final$1; fun = $f.fun; i = $f.i; name = $f.name; node = $f.node; numFixed = $f.numFixed; numIn = $f.numIn; result = $f.result; s = $f.s; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		final$1 = final$1;
		fun = fun;
		dot = dot;
		s = this;
		if (!(args === sliceType$3.nil)) {
			args = $subslice(args, 1);
		}
		typ = fun.Type();
		numIn = args.$length;
		if (final$1.IsValid()) {
			numIn = numIn + (1) >> 0;
		}
		numFixed = args.$length;
		_r$3 = typ.IsVariadic(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 1; continue; }
		_r$4 = typ.NumIn(); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (numIn < (_r$4 - 1 >> 0)) { _v = true; $s = 5; continue s; }
		_r$5 = typ.IsVariadic(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		if (!(!_r$5)) { _v$1 = false; $s = 7; continue s; }
		_r$6 = typ.NumIn(); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_v$1 = !((numIn === _r$6)); case 7:
		_v = _v$1; case 5:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$3) { */ case 1:
			_r$7 = typ.NumIn(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			numFixed = _r$7 - 1 >> 0;
			/* */ if (numIn < numFixed) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (numIn < numFixed) { */ case 11:
				_arg = new $String(name);
				_r$8 = typ.NumIn(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_arg$1 = new $Int((_r$8 - 1 >> 0));
				_arg$2 = new $Int(args.$length);
				$r = s.errorf("wrong number of args for %s: want at least %d got %d", new sliceType$1([_arg, _arg$1, _arg$2])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			$s = 3; continue;
		/* } else if (_v) { */ case 2:
			_arg$3 = new $String(name);
			_r$9 = typ.NumIn(); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$4 = new $Int(_r$9);
			_arg$5 = new $Int(args.$length);
			$r = s.errorf("wrong number of args for %s: want %d got %d", new sliceType$1([_arg$3, _arg$4, _arg$5])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$10 = goodFunc(typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		/* */ if (!_r$10) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (!_r$10) { */ case 17:
			_arg$6 = new $String(name);
			_r$11 = typ.NumOut(); /* */ $s = 20; case 20: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$7 = new $Int(_r$11);
			$r = s.errorf("can't call method/function %q with %d results", new sliceType$1([_arg$6, _arg$7])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		argv = $makeSlice(sliceType$4, numIn);
		i = 0;
		/* while (true) { */ case 22:
			/* if (!(i < numFixed && i < args.$length)) { break; } */ if(!(i < numFixed && i < args.$length)) { $s = 23; continue; }
			_arg$8 = dot;
			_r$12 = typ.In(i); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$9 = _r$12;
			_arg$10 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$13 = s.evalArg(_arg$8, _arg$9, _arg$10); /* */ $s = 25; case 25: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$13);
			i = i + (1) >> 0;
		/* } */ $s = 22; continue; case 23:
		_r$14 = typ.IsVariadic(); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		/* */ if (_r$14) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (_r$14) { */ case 26:
			_r$15 = typ.NumIn(); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			_r$16 = typ.In(_r$15 - 1 >> 0); /* */ $s = 30; case 30: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_r$17 = _r$16.Elem(); /* */ $s = 31; case 31: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			argType = _r$17;
			/* while (true) { */ case 32:
				/* if (!(i < args.$length)) { break; } */ if(!(i < args.$length)) { $s = 33; continue; }
				_r$18 = s.evalArg(dot, argType, ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i])); /* */ $s = 34; case 34: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$18);
				i = i + (1) >> 0;
			/* } */ $s = 32; continue; case 33:
		/* } */ case 27:
		/* */ if (final$1.IsValid()) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (final$1.IsValid()) { */ case 35:
			_r$19 = typ.NumIn(); /* */ $s = 37; case 37: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_r$20 = typ.In(_r$19 - 1 >> 0); /* */ $s = 38; case 38: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			t = _r$20;
			_r$21 = typ.IsVariadic(); /* */ $s = 41; case 41: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			/* */ if (_r$21) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (_r$21) { */ case 39:
				/* */ if ((numIn - 1 >> 0) < numFixed) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if ((numIn - 1 >> 0) < numFixed) { */ case 42:
					_r$22 = typ.In(numIn - 1 >> 0); /* */ $s = 45; case 45: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					t = _r$22;
					$s = 44; continue;
				/* } else { */ case 43:
					_r$23 = t.Elem(); /* */ $s = 46; case 46: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					t = _r$23;
				/* } */ case 44:
			/* } */ case 40:
			_r$24 = s.validateType(final$1, t); /* */ $s = 47; case 47: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _r$24);
		/* } */ case 36:
		_r$25 = fun.Call(argv); /* */ $s = 48; case 48: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		result = _r$25;
		/* */ if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { $s = 49; continue; }
		/* */ $s = 50; continue;
		/* if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { */ case 49:
			s.at(node);
			_arg$11 = new $String(name);
			_r$26 = (1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(); /* */ $s = 51; case 51: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_arg$12 = $assertType(_r$26, $error);
			$r = s.errorf("error calling %s: %s", new sliceType$1([_arg$11, _arg$12])); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 50:
		return (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalCall }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f.argType = argType; $f.args = args; $f.argv = argv; $f.dot = dot; $f.final$1 = final$1; $f.fun = fun; $f.i = i; $f.name = name; $f.node = node; $f.numFixed = numFixed; $f.numIn = numIn; $f.result = result; $f.s = s; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalCall = function(dot, fun, node, name, args, final$1) { return this.$val.evalCall(dot, fun, node, name, args, final$1); };
	canBeNil = function(typ) {
		var $ptr, _5, _r$3, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _r$3 = $f._r$3; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = typ.Kind(); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_5 = _r$3;
			if ((_5 === 18) || (_5 === 19) || (_5 === 20) || (_5 === 21) || (_5 === 22) || (_5 === 23)) {
				return true;
			}
		case 1:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: canBeNil }; } $f.$ptr = $ptr; $f._5 = _5; $f._r$3 = _r$3; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.ptr.prototype.validateType = function(value, typ) {
		var $ptr, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, _v$1, _v$2, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		s = this;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			if ($interfaceIsEqual(typ, $ifaceNil)) { _v = true; $s = 5; continue s; }
			_r$3 = canBeNil(typ); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_r$4 = reflect.Zero(typ); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 8; case 8:
				return _r$4;
			/* } */ case 4:
			$r = s.errorf("invalid value; expected %s", new sliceType$1([typ])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(!($interfaceIsEqual(typ, $ifaceNil)))) { _v$1 = false; $s = 12; continue s; }
		_r$5 = value.Type().AssignableTo(typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v$1 = !_r$5; case 12:
		/* */ if (_v$1) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v$1) { */ case 10:
			/* */ if ((value.Kind() === 20) && !value.IsNil()) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if ((value.Kind() === 20) && !value.IsNil()) { */ case 14:
				_r$6 = value.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				value = _r$6;
				_r$7 = value.Type().AssignableTo(typ); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (_r$7) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (_r$7) { */ case 17:
					return value;
				/* } */ case 18:
			/* } */ case 15:
				if (!(value.Kind() === 22)) { _v$2 = false; $s = 25; continue s; }
				_r$8 = value.Type().Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = _r$8.AssignableTo(typ); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_v$2 = _r$9; case 25:
				/* */ if (_v$2) { $s = 21; continue; }
				_r$10 = reflect.PtrTo(value.Type()).AssignableTo(typ); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				/* */ if (_r$10 && value.CanAddr()) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_v$2) { */ case 21:
					_r$11 = value.Elem(); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					value = _r$11;
					/* */ if (!value.IsValid()) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (!value.IsValid()) { */ case 30:
						$r = s.errorf("dereference of nil pointer of type %s", new sliceType$1([typ])); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 31:
					$s = 24; continue;
				/* } else if (_r$10 && value.CanAddr()) { */ case 22:
					value = value.Addr();
					$s = 24; continue;
				/* } else { */ case 23:
					$r = s.errorf("wrong type for value; expected %s; got %s", new sliceType$1([typ, value.Type()])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 24:
			case 20:
		/* } */ case 11:
		return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.validateType }; } $f.$ptr = $ptr; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.validateType = function(value, typ) { return this.$val.validateType(value, typ); };
	state.ptr.prototype.evalArg = function(dot, typ, n) {
		var $ptr, _6, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, arg, arg$1, arg$2, arg$3, arg$4, arg$5, arg$6, dot, n, s, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; arg = $f.arg; arg$1 = $f.arg$1; arg$2 = $f.arg$2; arg$3 = $f.arg$3; arg$4 = $f.arg$4; arg$5 = $f.arg$5; arg$6 = $f.arg$6; dot = $f.dot; n = $f.n; s = $f.s; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(n);
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$15, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$19, true)[1]) { */ case 1:
			arg = _ref.$val;
			_r$3 = s.validateType(dot, typ); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 2:
			arg$1 = _ref.$val;
			_r$4 = canBeNil(typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_r$4) { */ case 11:
				_r$5 = reflect.Zero(typ); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ $s = 15; case 15:
				return _r$5;
			/* } */ case 12:
			$r = s.errorf("cannot assign nil to %s", new sliceType$1([typ])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			arg$2 = _ref.$val;
			_r$6 = s.evalFieldNode(dot, arg$2, new sliceType$3([n]), zero); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = s.validateType(_r$6, typ); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return _r$7;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 4:
			arg$3 = _ref.$val;
			_r$8 = s.evalVariableNode(dot, arg$3, sliceType$3.nil, zero); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = s.validateType(_r$8, typ); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 22; case 22:
			return _r$9;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 5:
			arg$4 = _ref.$val;
			_r$10 = s.evalPipeline(dot, arg$4); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = s.validateType(_r$10, typ); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ $s = 25; case 25:
			return _r$11;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 6:
			arg$5 = _ref.$val;
			_r$12 = s.evalFunction(dot, arg$5, arg$5, sliceType$3.nil, zero); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_r$13 = s.validateType(_r$12, typ); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			/* */ $s = 28; case 28:
			return _r$13;
		/* } else if ($assertType(_ref, ptrType$15, true)[1]) { */ case 7:
			arg$6 = _ref.$val;
			_r$14 = s.evalChainNode(dot, arg$6, sliceType$3.nil, zero); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_r$15 = s.validateType(_r$14, typ); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			/* */ $s = 31; case 31:
			return _r$15;
		/* } */ case 8:
			_r$16 = typ.Kind(); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			_6 = _r$16;
			/* */ if (_6 === 1) { $s = 34; continue; }
			/* */ if ((_6 === 15) || (_6 === 16)) { $s = 35; continue; }
			/* */ if ((_6 === 13) || (_6 === 14)) { $s = 36; continue; }
			/* */ if ((_6 === 2) || (_6 === 3) || (_6 === 4) || (_6 === 5) || (_6 === 6)) { $s = 37; continue; }
			/* */ if (_6 === 20) { $s = 38; continue; }
			/* */ if (_6 === 24) { $s = 39; continue; }
			/* */ if ((_6 === 7) || (_6 === 8) || (_6 === 9) || (_6 === 10) || (_6 === 11) || (_6 === 12)) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (_6 === 1) { */ case 34:
				_r$17 = s.evalBool(typ, n); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				/* */ $s = 43; case 43:
				return _r$17;
			/* } else if ((_6 === 15) || (_6 === 16)) { */ case 35:
				_r$18 = s.evalComplex(typ, n); /* */ $s = 44; case 44: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				/* */ $s = 45; case 45:
				return _r$18;
			/* } else if ((_6 === 13) || (_6 === 14)) { */ case 36:
				_r$19 = s.evalFloat(typ, n); /* */ $s = 46; case 46: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				/* */ $s = 47; case 47:
				return _r$19;
			/* } else if ((_6 === 2) || (_6 === 3) || (_6 === 4) || (_6 === 5) || (_6 === 6)) { */ case 37:
				_r$20 = s.evalInteger(typ, n); /* */ $s = 48; case 48: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ $s = 49; case 49:
				return _r$20;
			/* } else if (_6 === 20) { */ case 38:
				_r$21 = typ.NumMethod(); /* */ $s = 52; case 52: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				/* */ if (_r$21 === 0) { $s = 50; continue; }
				/* */ $s = 51; continue;
				/* if (_r$21 === 0) { */ case 50:
					_r$22 = s.evalEmptyInterface(dot, n); /* */ $s = 53; case 53: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					/* */ $s = 54; case 54:
					return _r$22;
				/* } */ case 51:
				$s = 41; continue;
			/* } else if (_6 === 24) { */ case 39:
				_r$23 = s.evalString(typ, n); /* */ $s = 55; case 55: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				/* */ $s = 56; case 56:
				return _r$23;
			/* } else if ((_6 === 7) || (_6 === 8) || (_6 === 9) || (_6 === 10) || (_6 === 11) || (_6 === 12)) { */ case 40:
				_r$24 = s.evalUnsignedInteger(typ, n); /* */ $s = 57; case 57: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				/* */ $s = 58; case 58:
				return _r$24;
			/* } */ case 41:
		case 32:
		$r = s.errorf("can't handle %s for arg of type %s", new sliceType$1([n, typ])); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalArg }; } $f.$ptr = $ptr; $f._6 = _6; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.arg = arg; $f.arg$1 = arg$1; $f.arg$2 = arg$2; $f.arg$3 = arg$3; $f.arg$4 = arg$4; $f.arg$5 = arg$5; $f.arg$6 = arg$6; $f.dot = dot; $f.n = n; $f.s = s; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalArg = function(dot, typ, n) { return this.$val.evalArg(dot, typ, n); };
	state.ptr.prototype.evalBool = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$18, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetBool(n$1.True);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected bool; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalBool }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalBool = function(typ, n) { return this.$val.evalBool(typ, n); };
	state.ptr.prototype.evalString = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$22, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetString(n$1.Text);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected string; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalString }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalString = function(typ, n) { return this.$val.evalString(typ, n); };
	state.ptr.prototype.evalInteger = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsInt) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsInt) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetInt(n$1.Int64);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected integer; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalInteger }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalInteger = function(typ, n) { return this.$val.evalInteger(typ, n); };
	state.ptr.prototype.evalUnsignedInteger = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsUint) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsUint) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetUint(n$1.Uint64);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected unsigned integer; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalUnsignedInteger }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalUnsignedInteger = function(typ, n) { return this.$val.evalUnsignedInteger(typ, n); };
	state.ptr.prototype.evalFloat = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsFloat) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsFloat) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetFloat(n$1.Float64);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected float; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalFloat }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalFloat = function(typ, n) { return this.$val.evalFloat(typ, n); };
	state.ptr.prototype.evalComplex = function(typ, n) {
		var $ptr, _r$3, _r$4, _tuple, n, n$1, ok, s, typ, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; n = $f.n; n$1 = $f.n$1; ok = $f.ok; s = $f.s; typ = $f.typ; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_tuple = $assertType(n, ptrType$21, true);
		n$1 = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && n$1.IsComplex) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && n$1.IsComplex) { */ case 1:
			_r$3 = reflect.New(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			value = _r$4;
			value.SetComplex(n$1.Complex128);
			return value;
		/* } */ case 2:
		$r = s.errorf("expected complex; found %s", new sliceType$1([n])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalComplex }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.s = s; $f.typ = typ; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalComplex = function(typ, n) { return this.$val.evalComplex(typ, n); };
	state.ptr.prototype.evalEmptyInterface = function(dot, n) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, dot, n, n$1, n$2, n$3, n$4, n$5, n$6, n$7, n$8, n$9, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; dot = $f.dot; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; n$5 = $f.n$5; n$6 = $f.n$6; n$7 = $f.n$7; n$8 = $f.n$8; n$9 = $f.n$9; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = dot;
		s = this;
		s.at(n);
		_ref = n;
		/* */ if ($assertType(_ref, ptrType$18, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$19, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$16, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$20, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$21, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$22, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$17, true)[1]) { $s = 8; continue; }
		/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($assertType(_ref, ptrType$18, true)[1]) { */ case 1:
			n$1 = _ref.$val;
			_r$3 = reflect.ValueOf(new $Bool(n$1.True)); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return _r$3;
		/* } else if ($assertType(_ref, ptrType$19, true)[1]) { */ case 2:
			n$2 = _ref.$val;
			return dot;
		/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 3:
			n$3 = _ref.$val;
			_r$4 = s.evalFieldNode(dot, n$3, sliceType$3.nil, zero); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 14; case 14:
			return _r$4;
		/* } else if ($assertType(_ref, ptrType$16, true)[1]) { */ case 4:
			n$4 = _ref.$val;
			_r$5 = s.evalFunction(dot, n$4, n$4, sliceType$3.nil, zero); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return _r$5;
		/* } else if ($assertType(_ref, ptrType$20, true)[1]) { */ case 5:
			n$5 = _ref.$val;
			$r = s.errorf("evalEmptyInterface: nil (can't happen)", new sliceType$1([])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$21, true)[1]) { */ case 6:
			n$6 = _ref.$val;
			_r$6 = s.idealConstant(n$6); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 19; case 19:
			return _r$6;
		/* } else if ($assertType(_ref, ptrType$22, true)[1]) { */ case 7:
			n$7 = _ref.$val;
			_r$7 = reflect.ValueOf(new $String(n$7.Text)); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 21; case 21:
			return _r$7;
		/* } else if ($assertType(_ref, ptrType$17, true)[1]) { */ case 8:
			n$8 = _ref.$val;
			_r$8 = s.evalVariableNode(dot, n$8, sliceType$3.nil, zero); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ $s = 23; case 23:
			return _r$8;
		/* } else if ($assertType(_ref, ptrType$13, true)[1]) { */ case 9:
			n$9 = _ref.$val;
			_r$9 = s.evalPipeline(dot, n$9); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 25; case 25:
			return _r$9;
		/* } */ case 10:
		$r = s.errorf("can't handle assignment of %s to empty interface argument", new sliceType$1([n])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$panic(new $String("not reached"));
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.evalEmptyInterface }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.dot = dot; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.n$5 = n$5; $f.n$6 = n$6; $f.n$7 = n$7; $f.n$8 = n$8; $f.n$9 = n$9; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.evalEmptyInterface = function(dot, n) { return this.$val.evalEmptyInterface(dot, n); };
	indirect = function(v) {
		var $ptr, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, isNil, rv, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; isNil = $f.isNil; rv = $f.rv; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rv = new reflect.Value.ptr(ptrType.nil, 0, 0);
		isNil = false;
		v = v;
		/* while (true) { */ case 1:
			/* if (!((v.Kind() === 22) || (v.Kind() === 20))) { break; } */ if(!((v.Kind() === 22) || (v.Kind() === 20))) { $s = 2; continue; }
			if (v.IsNil()) {
				_tmp = v;
				_tmp$1 = true;
				rv = _tmp;
				isNil = _tmp$1;
				return [rv, isNil];
			}
			_r$3 = v.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = v;
		_tmp$3 = false;
		rv = _tmp$2;
		isNil = _tmp$3;
		return [rv, isNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: indirect }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.isNil = isNil; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.ptr.prototype.printValue = function(n, v) {
		var $ptr, _r$3, _r$4, _tuple, _tuple$1, err, iface, n, ok, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; iface = $f.iface; n = $f.n; ok = $f.ok; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		s = this;
		s.at(n);
		_r$3 = printableValue(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		iface = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = s.errorf("can't print %s of type %s", new sliceType$1([n, v.Type()])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$4 = fmt.Fprint(s.wr, new sliceType$1([iface])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.writeError(err);
		}
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: state.ptr.prototype.printValue }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.iface = iface; $f.n = n; $f.ok = ok; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	state.prototype.printValue = function(n, v) { return this.$val.printValue(n, v); };
	printableValue = function(v) {
		var $ptr, _7, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _v, _v$1, _v$2, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = v;
		/* */ if (v.Kind() === 22) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.Kind() === 22) { */ case 1:
			_r$3 = indirect(v); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			v = _tuple[0];
		/* } */ case 2:
		if (!v.IsValid()) {
			return [new $String("<no value>"), true];
		}
		_r$4 = v.Type().Implements(errorType); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		if (!(!_r$4)) { _v = false; $s = 6; continue s; }
		_r$5 = v.Type().Implements(fmtStringerType); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_v = !_r$5; case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			if (!(v.CanAddr())) { _v$1 = false; $s = 12; continue s; }
			_r$6 = reflect.PtrTo(v.Type()).Implements(errorType); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			if (_r$6) { _v$2 = true; $s = 13; continue s; }
			_r$7 = reflect.PtrTo(v.Type()).Implements(fmtStringerType); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v$2 = _r$7; case 13:
			_v$1 = _v$2; case 12:
			/* */ if (_v$1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v$1) { */ case 9:
				v = v.Addr();
				$s = 11; continue;
			/* } else { */ case 10:
				_7 = v.Kind();
				if ((_7 === 18) || (_7 === 19)) {
					return [$ifaceNil, false];
				}
			/* } */ case 11:
		/* } */ case 5:
		_r$8 = v.Interface(); /* */ $s = 16; case 16: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ $s = 17; case 17:
		return [_r$8, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: printableValue }; } $f.$ptr = $ptr; $f._7 = _7; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rvs.prototype.Len = function() {
		var $ptr, x;
		x = this;
		return x.$length;
	};
	$ptrType(rvs).prototype.Len = function() { return this.$get().Len(); };
	rvs.prototype.Swap = function(i, j) {
		var $ptr, _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]);
		_tmp$1 = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]);
		((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _tmp);
		((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = _tmp$1);
	};
	$ptrType(rvs).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	rvInts.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvInts);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Int(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Int(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvInts.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvUints.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvUints);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Uint(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvUints.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvFloats.ptr.prototype.Less = function(i, j) {
		var $ptr, i, j, x, x$1, x$2;
		x = $clone(this, rvFloats);
		return (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Float() < (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).Float();
	};
	rvFloats.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvStrings.ptr.prototype.Less = function(i, j) {
		var $ptr, _r$3, _r$4, i, j, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; i = $f.i; j = $f.j; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = $clone(this, rvStrings);
		_r$3 = (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$3 < _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rvStrings.ptr.prototype.Less }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.i = i; $f.j = j; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	rvStrings.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	sortKeys = function(v) {
		var $ptr, _8, v, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.$length <= 1) {
			return v;
		}
			_8 = (0 >= v.$length ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0]).Kind();
			/* */ if ((_8 === 13) || (_8 === 14)) { $s = 2; continue; }
			/* */ if ((_8 === 2) || (_8 === 3) || (_8 === 4) || (_8 === 5) || (_8 === 6)) { $s = 3; continue; }
			/* */ if (_8 === 24) { $s = 4; continue; }
			/* */ if ((_8 === 7) || (_8 === 8) || (_8 === 9) || (_8 === 10) || (_8 === 11) || (_8 === 12)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((_8 === 13) || (_8 === 14)) { */ case 2:
				$r = sort.Sort((x = new rvFloats.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x.constructor.elem(x))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if ((_8 === 2) || (_8 === 3) || (_8 === 4) || (_8 === 5) || (_8 === 6)) { */ case 3:
				$r = sort.Sort((x$1 = new rvInts.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$1.constructor.elem(x$1))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (_8 === 24) { */ case 4:
				$r = sort.Sort((x$2 = new rvStrings.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$2.constructor.elem(x$2))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if ((_8 === 7) || (_8 === 8) || (_8 === 9) || (_8 === 10) || (_8 === 11) || (_8 === 12)) { */ case 5:
				$r = sort.Sort((x$3 = new rvUints.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$3.constructor.elem(x$3))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		case 1:
		return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortKeys }; } $f.$ptr = $ptr; $f._8 = _8; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	createValueFuncs = function(funcMap) {
		var $ptr, funcMap, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; funcMap = $f.funcMap; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = {};
		$r = addValueFuncs(m, funcMap); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: createValueFuncs }; } $f.$ptr = $ptr; $f.funcMap = funcMap; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	addValueFuncs = function(out, in$1) {
		var $ptr, _arg, _arg$1, _entry, _i, _key, _keys, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, fn, in$1, name, out, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; fn = $f.fn; in$1 = $f.in$1; name = $f.name; out = $f.out; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			name = _entry.k;
			fn = _entry.v;
			/* */ if (!goodName(name)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!goodName(name)) { */ case 3:
				_r$3 = fmt.Errorf("function name %s is not a valid identifier", new sliceType$1([new $String(name)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(_r$3);
			/* } */ case 4:
			_r$4 = reflect.ValueOf(fn); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v = _r$4;
			if (!((v.Kind() === 19))) {
				$panic(new $String("value for " + name + " not a function"));
			}
			_r$5 = goodFunc(v.Type()); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$5) { */ case 7:
				_arg = new $String(name);
				_r$6 = v.Type().NumOut(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$1 = new $Int(_r$6);
				_r$7 = fmt.Errorf("can't install method/function %q with %d results", new sliceType$1([_arg, _arg$1])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$panic(_r$7);
			/* } */ case 8:
			_key = name; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: $clone(v, reflect.Value) };
			_i++;
		/* } */ $s = 1; continue; case 2:
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: addValueFuncs }; } $f.$ptr = $ptr; $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.fn = fn; $f.in$1 = in$1; $f.name = name; $f.out = out; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	addFuncs = function(out, in$1) {
		var $ptr, _entry, _i, _key, _keys, _ref, fn, in$1, name, out;
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			fn = _entry.v;
			_key = name; (out || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: fn };
			_i++;
		}
	};
	goodFunc = function(typ) {
		var $ptr, _r$3, _r$4, _r$5, _v, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$3 = typ.NumOut(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ((_r$3 === 1)) { $s = 2; continue; }
			_r$4 = typ.NumOut(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			if (!(_r$4 === 2)) { _v = false; $s = 6; continue s; }
			_r$5 = typ.Out(1); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_v = $interfaceIsEqual(_r$5, errorType); case 6:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_r$3 === 1)) { */ case 2:
				return true;
			/* } else if (_v) { */ case 3:
				return true;
			/* } */ case 4:
		case 1:
		return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: goodFunc }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	goodName = function(name) {
		var $ptr, _i, _ref, _rune, i, name, r;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if ((r === 95)) {
			} else if ((i === 0) && !unicode.IsLetter(r)) {
				return false;
			} else if (!unicode.IsLetter(r) && !unicode.IsDigit(r)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	findFunction = function(name, tmpl) {
		var $ptr, _entry, _entry$1, fn, fn$1, name, tmpl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; fn = $f.fn; fn$1 = $f.fn$1; name = $f.name; tmpl = $f.tmpl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		/* */ if (!(tmpl === ptrType$3.nil) && !(tmpl.common === ptrType$4.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tmpl === ptrType$3.nil) && !(tmpl.common === ptrType$4.nil)) { */ case 1:
			$r = tmpl.common.muFuncs.RLock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$deferred.push([$methodVal(tmpl.common.muFuncs, "RUnlock"), []]);
			fn = (_entry = tmpl.common.execFuncs[$String.keyFor(name)], _entry !== undefined ? _entry.v : new reflect.Value.ptr(ptrType.nil, 0, 0));
			if (fn.IsValid()) {
				return [fn, true];
			}
		/* } */ case 2:
		fn$1 = (_entry$1 = builtinFuncs[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : new reflect.Value.ptr(ptrType.nil, 0, 0));
		if (fn$1.IsValid()) {
			return [fn$1, true];
		}
		return [new reflect.Value.ptr(ptrType.nil, 0, 0), false];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new reflect.Value.ptr(ptrType.nil, 0, 0), false]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: findFunction }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f.fn = fn; $f.fn$1 = fn$1; $f.name = name; $f.tmpl = tmpl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	prepareArg = function(value, argType) {
		var $ptr, _r$3, _r$4, _r$5, _r$6, _r$7, argType, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; argType = $f.argType; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = value;
		/* */ if (!value.IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!value.IsValid()) { */ case 1:
			_r$3 = canBeNil(argType); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r$3) { */ case 3:
				_r$4 = fmt.Errorf("value is nil; should be of type %s", new sliceType$1([argType])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$4];
			/* } */ case 4:
			_r$5 = reflect.Zero(argType); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			value = _r$5;
		/* } */ case 2:
		_r$6 = value.Type().AssignableTo(argType); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (!_r$6) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!_r$6) { */ case 9:
			_r$7 = fmt.Errorf("value has type %s; should be %s", new sliceType$1([value.Type(), argType])); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ $s = 13; case 13:
			return [new reflect.Value.ptr(ptrType.nil, 0, 0), _r$7];
		/* } */ case 10:
		return [value, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: prepareArg }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.argType = argType; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	index = function(item, indices) {
		var $ptr, _1, _2, _arg, _arg$1, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, err, i, index$1, index$2, indices, isNil, item, v, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; i = $f.i; index$1 = $f.index$1; index$2 = $f.index$2; indices = $f.indices; isNil = $f.isNil; item = $f.item; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("index of untyped nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [$ifaceNil, _r$4];
		/* } */ case 3:
		_ref = indices;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$5 = reflect.ValueOf(i); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			index$1 = _r$5;
			isNil = false;
			_r$6 = indirect(v); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple = _r$6;
			v = _tuple[0];
			isNil = _tuple[1];
			/* */ if (isNil) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (isNil) { */ case 10:
				_r$7 = fmt.Errorf("index of nil pointer", new sliceType$1([])); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ $s = 13; case 13:
				return [$ifaceNil, _r$7];
			/* } */ case 11:
				_1 = v.Kind();
				/* */ if ((_1 === 17) || (_1 === 23) || (_1 === 24)) { $s = 15; continue; }
				/* */ if (_1 === 21) { $s = 16; continue; }
				/* */ if (_1 === 0) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if ((_1 === 17) || (_1 === 23) || (_1 === 24)) { */ case 15:
					x = new $Int64(0, 0);
						_2 = index$1.Kind();
						/* */ if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { $s = 21; continue; }
						/* */ if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11) || (_2 === 12)) { $s = 22; continue; }
						/* */ if (_2 === 0) { $s = 23; continue; }
						/* */ $s = 24; continue;
						/* if ((_2 === 2) || (_2 === 3) || (_2 === 4) || (_2 === 5) || (_2 === 6)) { */ case 21:
							x = index$1.Int();
							$s = 25; continue;
						/* } else if ((_2 === 7) || (_2 === 8) || (_2 === 9) || (_2 === 10) || (_2 === 11) || (_2 === 12)) { */ case 22:
							x = (x$1 = index$1.Uint(), new $Int64(x$1.$high, x$1.$low));
							$s = 25; continue;
						/* } else if (_2 === 0) { */ case 23:
							_r$8 = fmt.Errorf("cannot index slice/array with nil", new sliceType$1([])); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							/* */ $s = 27; case 27:
							return [$ifaceNil, _r$8];
						/* } else { */ case 24:
							_r$9 = fmt.Errorf("cannot index slice/array with type %s", new sliceType$1([index$1.Type()])); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
							/* */ $s = 29; case 29:
							return [$ifaceNil, _r$9];
						/* } */ case 25:
					case 20:
					/* */ if ((x.$high < 0 || (x.$high === 0 && x.$low < 0)) || (x$2 = new $Int64(0, v.Len()), (x.$high > x$2.$high || (x.$high === x$2.$high && x.$low >= x$2.$low)))) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if ((x.$high < 0 || (x.$high === 0 && x.$low < 0)) || (x$2 = new $Int64(0, v.Len()), (x.$high > x$2.$high || (x.$high === x$2.$high && x.$low >= x$2.$low)))) { */ case 30:
						_r$10 = fmt.Errorf("index out of range: %d", new sliceType$1([x])); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						/* */ $s = 33; case 33:
						return [$ifaceNil, _r$10];
					/* } */ case 31:
					_r$11 = v.Index(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)); /* */ $s = 34; case 34: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					v = _r$11;
					$s = 19; continue;
				/* } else if (_1 === 21) { */ case 16:
					_arg = index$1;
					_r$12 = v.Type().Key(); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_arg$1 = _r$12;
					_r$13 = prepareArg(_arg, _arg$1); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$1 = _r$13;
					index$2 = _tuple$1[0];
					err = _tuple$1[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [$ifaceNil, err];
					}
					_r$14 = v.MapIndex(index$2); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					x$3 = _r$14;
					/* */ if (x$3.IsValid()) { $s = 38; continue; }
					/* */ $s = 39; continue;
					/* if (x$3.IsValid()) { */ case 38:
						v = x$3;
						$s = 40; continue;
					/* } else { */ case 39:
						_r$15 = v.Type().Elem(); /* */ $s = 41; case 41: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$16 = reflect.Zero(_r$15); /* */ $s = 42; case 42: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						v = _r$16;
					/* } */ case 40:
					$s = 19; continue;
				/* } else if (_1 === 0) { */ case 17:
					$panic(new $String("unreachable"));
					$s = 19; continue;
				/* } else { */ case 18:
					_r$17 = fmt.Errorf("can't index item of type %s", new sliceType$1([v.Type()])); /* */ $s = 43; case 43: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					/* */ $s = 44; case 44:
					return [$ifaceNil, _r$17];
				/* } */ case 19:
			case 14:
			_i++;
		/* } */ $s = 6; continue; case 7:
		_r$18 = v.Interface(); /* */ $s = 45; case 45: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		/* */ $s = 46; case 46:
		return [_r$18, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: index }; } $f.$ptr = $ptr; $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.i = i; $f.index$1 = index$1; $f.index$2 = index$2; $f.indices = indices; $f.isNil = isNil; $f.item = item; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	length = function(item) {
		var $ptr, _3, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, isNil, item, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _3 = $f._3; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; isNil = $f.isNil; item = $f.item; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(item); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("len of untyped nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [0, _r$4];
		/* } */ case 3:
		_r$5 = indirect(v); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple = _r$5;
		v = _tuple[0];
		isNil = _tuple[1];
		/* */ if (isNil) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (isNil) { */ case 7:
			_r$6 = fmt.Errorf("len of nil pointer", new sliceType$1([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return [0, _r$6];
		/* } */ case 8:
		_3 = v.Kind();
		if ((_3 === 17) || (_3 === 18) || (_3 === 21) || (_3 === 23) || (_3 === 24)) {
			return [v.Len(), $ifaceNil];
		}
		_r$7 = fmt.Errorf("len of type %s", new sliceType$1([v.Type()])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ $s = 12; case 12:
		return [0, _r$7];
		/* */ } return; } if ($f === undefined) { $f = { $blk: length }; } $f.$ptr = $ptr; $f._3 = _3; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.isNil = isNil; $f.item = item; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	call = function(fn, args) {
		var $ptr, _arg, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, arg, argType, args, argv, dddType, err, fn, i, numIn, result, typ, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _arg = $f._arg; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; arg = $f.arg; argType = $f.argType; args = $f.args; argv = $f.argv; dddType = $f.dddType; err = $f.err; fn = $f.fn; i = $f.i; numIn = $f.numIn; result = $f.result; typ = $f.typ; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(fn); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		/* */ if (!v.IsValid()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!v.IsValid()) { */ case 2:
			_r$4 = fmt.Errorf("call of nil", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [$ifaceNil, _r$4];
		/* } */ case 3:
		typ = v.Type();
		_r$5 = typ.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (!((_r$5 === 19))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!((_r$5 === 19))) { */ case 6:
			_r$6 = fmt.Errorf("non-function of type %s", new sliceType$1([typ])); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ $s = 10; case 10:
			return [$ifaceNil, _r$6];
		/* } */ case 7:
		_r$7 = goodFunc(typ); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		/* */ if (!_r$7) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (!_r$7) { */ case 11:
			_r$8 = typ.NumOut(); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg = new $Int(_r$8);
			_r$9 = fmt.Errorf("function called with %d args; should be 1 or 2", new sliceType$1([_arg])); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ $s = 16; case 16:
			return [$ifaceNil, _r$9];
		/* } */ case 12:
		_r$10 = typ.NumIn(); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		numIn = _r$10;
		dddType = $ifaceNil;
		_r$11 = typ.IsVariadic(); /* */ $s = 21; case 21: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		/* */ if (_r$11) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (_r$11) { */ case 18:
			/* */ if (args.$length < (numIn - 1 >> 0)) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (args.$length < (numIn - 1 >> 0)) { */ case 22:
				_r$12 = fmt.Errorf("wrong number of args: got %d want at least %d", new sliceType$1([new $Int(args.$length), new $Int((numIn - 1 >> 0))])); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				/* */ $s = 25; case 25:
				return [$ifaceNil, _r$12];
			/* } */ case 23:
			_r$13 = typ.In(numIn - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = _r$13.Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			dddType = _r$14;
			$s = 20; continue;
		/* } else { */ case 19:
			/* */ if (!((args.$length === numIn))) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!((args.$length === numIn))) { */ case 28:
				_r$15 = fmt.Errorf("wrong number of args: got %d want %d", new sliceType$1([new $Int(args.$length), new $Int(numIn)])); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				/* */ $s = 31; case 31:
				return [$ifaceNil, _r$15];
			/* } */ case 29:
		/* } */ case 20:
		argv = $makeSlice(sliceType$4, args.$length);
		_ref = args;
		_i = 0;
		/* while (true) { */ case 32:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$16 = reflect.ValueOf(arg); /* */ $s = 34; case 34: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			value = _r$16;
			argType = $ifaceNil;
			_r$17 = typ.IsVariadic(); /* */ $s = 38; case 38: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
			/* */ if (!_r$17 || i < (numIn - 1 >> 0)) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!_r$17 || i < (numIn - 1 >> 0)) { */ case 35:
				_r$18 = typ.In(i); /* */ $s = 39; case 39: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				argType = _r$18;
				$s = 37; continue;
			/* } else { */ case 36:
				argType = dddType;
			/* } */ case 37:
			err = $ifaceNil;
			_r$19 = prepareArg(value, argType); /* */ $s = 40; case 40: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			_tuple = _r$19;
			((i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = _tuple[0]);
			err = _tuple[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 41; continue; }
			/* */ $s = 42; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 41:
				_r$20 = fmt.Errorf("arg %d: %s", new sliceType$1([new $Int(i), err])); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				/* */ $s = 44; case 44:
				return [$ifaceNil, _r$20];
			/* } */ case 42:
			_i++;
		/* } */ $s = 32; continue; case 33:
		_r$21 = v.Call(argv); /* */ $s = 45; case 45: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		result = _r$21;
		/* */ if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { $s = 46; continue; }
		/* */ $s = 47; continue;
		/* if ((result.$length === 2) && !(1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) { */ case 46:
			_r$22 = (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(); /* */ $s = 48; case 48: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$23 = (1 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(); /* */ $s = 49; case 49: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			/* */ $s = 50; case 50:
			return [_r$22, $assertType(_r$23, $error)];
		/* } */ case 47:
		_r$24 = (0 >= result.$length ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(); /* */ $s = 51; case 51: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		/* */ $s = 52; case 52:
		return [_r$24, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: call }; } $f.$ptr = $ptr; $f._arg = _arg; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f.arg = arg; $f.argType = argType; $f.args = args; $f.argv = argv; $f.dddType = dddType; $f.err = err; $f.fn = fn; $f.i = i; $f.numIn = numIn; $f.result = result; $f.typ = typ; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	truth = function(a) {
		var $ptr, _r$3, _tuple, a, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; a = $f.a; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = IsTrue(a); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		t = _tuple[0];
		return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: truth }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.a = a; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	and = function(arg0, args) {
		var $ptr, _i, _r$3, _r$4, _ref, arg0, args, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; arg0 = $f.arg0; args = $f.args; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!_r$3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$3) { */ case 1:
			return arg0;
		/* } */ case 2:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$4 = truth(arg0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!_r$4) { */ case 6:
				/* break; */ $s = 5; continue;
			/* } */ case 7:
			_i++;
		/* } */ $s = 4; continue; case 5:
		return arg0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: and }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.arg0 = arg0; $f.args = args; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	or = function(arg0, args) {
		var $ptr, _i, _r$3, _r$4, _ref, arg0, args, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; arg0 = $f.arg0; args = $f.args; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3) { */ case 1:
			return arg0;
		/* } */ case 2:
		_ref = args;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			_r$4 = truth(arg0); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$4) { */ case 6:
				/* break; */ $s = 5; continue;
			/* } */ case 7:
			_i++;
		/* } */ $s = 4; continue; case 5:
		return arg0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: or }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.arg0 = arg0; $f.args = args; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	not = function(arg) {
		var $ptr, _r$3, arg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; arg = $f.arg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = truth(arg); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return !_r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: not }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.arg = arg; $f.$s = $s; $f.$r = $r; return $f;
	};
	basicKind = function(v) {
		var $ptr, _4, v;
		v = v;
		_4 = v.Kind();
		if (_4 === 1) {
			return [1, $ifaceNil];
		} else if ((_4 === 2) || (_4 === 3) || (_4 === 4) || (_4 === 5) || (_4 === 6)) {
			return [3, $ifaceNil];
		} else if ((_4 === 7) || (_4 === 8) || (_4 === 9) || (_4 === 10) || (_4 === 11) || (_4 === 12)) {
			return [7, $ifaceNil];
		} else if ((_4 === 13) || (_4 === 14)) {
			return [4, $ifaceNil];
		} else if ((_4 === 15) || (_4 === 16)) {
			return [2, $ifaceNil];
		} else if (_4 === 24) {
			return [6, $ifaceNil];
		}
		return [0, errBadComparisonType];
	};
	eq = function(arg1, arg2) {
		var $ptr, _5, _i, _r$3, _r$4, _r$5, _r$6, _ref, _tuple, _tuple$1, arg, arg1, arg2, err, err$1, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _5 = $f._5; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arg = $f.arg; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; err$1 = $f.err$1; k1 = $f.k1; k2 = $f.k2; truth$1 = $f.truth$1; v1 = $f.v1; v2 = $f.v2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(arg1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v1 = _r$3;
		_tuple = basicKind(v1);
		k1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		if (arg2.$length === 0) {
			return [false, errNoComparison];
		}
		_ref = arg2;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = reflect.ValueOf(arg); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v2 = _r$4;
			_tuple$1 = basicKind(v2);
			k2 = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [false, err$1];
			}
			truth$1 = false;
			/* */ if (!((k1 === k2))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((k1 === k2))) { */ case 5:
				if ((k1 === 3) && (k2 === 7)) {
					truth$1 = (x = v1.Int(), (x.$high > 0 || (x.$high === 0 && x.$low >= 0))) && (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high === x$3.$high && x$1.$low === x$3.$low));
				} else if ((k1 === 7) && (k2 === 3)) {
					truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
				} else {
					return [false, errBadComparison];
				}
				$s = 7; continue;
			/* } else { */ case 6:
					_5 = k1;
					/* */ if (_5 === 1) { $s = 9; continue; }
					/* */ if (_5 === 2) { $s = 10; continue; }
					/* */ if (_5 === 4) { $s = 11; continue; }
					/* */ if (_5 === 3) { $s = 12; continue; }
					/* */ if (_5 === 6) { $s = 13; continue; }
					/* */ if (_5 === 7) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_5 === 1) { */ case 9:
						truth$1 = v1.Bool() === v2.Bool();
						$s = 16; continue;
					/* } else if (_5 === 2) { */ case 10:
						truth$1 = (x$8 = v1.Complex(), x$9 = v2.Complex(), (x$8.$real === x$9.$real && x$8.$imag === x$9.$imag));
						$s = 16; continue;
					/* } else if (_5 === 4) { */ case 11:
						truth$1 = v1.Float() === v2.Float();
						$s = 16; continue;
					/* } else if (_5 === 3) { */ case 12:
						truth$1 = (x$10 = v1.Int(), x$11 = v2.Int(), (x$10.$high === x$11.$high && x$10.$low === x$11.$low));
						$s = 16; continue;
					/* } else if (_5 === 6) { */ case 13:
						_r$5 = v1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = v2.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						truth$1 = _r$5 === _r$6;
						$s = 16; continue;
					/* } else if (_5 === 7) { */ case 14:
						truth$1 = (x$12 = v1.Uint(), x$13 = v2.Uint(), (x$12.$high === x$13.$high && x$12.$low === x$13.$low));
						$s = 16; continue;
					/* } else { */ case 15:
						$panic(new $String("invalid kind"));
					/* } */ case 16:
				case 8:
			/* } */ case 7:
			if (truth$1) {
				return [true, $ifaceNil];
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		return [false, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: eq }; } $f.$ptr = $ptr; $f._5 = _5; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arg = arg; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.err$1 = err$1; $f.k1 = k1; $f.k2 = k2; $f.truth$1 = truth$1; $f.v1 = v1; $f.v2 = v2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	ne = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, equal, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; equal = $f.equal; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = eq(arg1, new sliceType$1([arg2])); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		equal = _tuple[0];
		err = _tuple[1];
		return [!equal, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ne }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.equal = equal; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	lt = function(arg1, arg2) {
		var $ptr, _6, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, arg1, arg2, err, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _6 = $f._6; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; k1 = $f.k1; k2 = $f.k2; truth$1 = $f.truth$1; v1 = $f.v1; v2 = $f.v2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = reflect.ValueOf(arg1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v1 = _r$3;
		_tuple = basicKind(v1);
		k1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		_r$4 = reflect.ValueOf(arg2); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		v2 = _r$4;
		_tuple$1 = basicKind(v2);
		k2 = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		truth$1 = false;
		/* */ if (!((k1 === k2))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((k1 === k2))) { */ case 3:
			if ((k1 === 3) && (k2 === 7)) {
				truth$1 = (x = v1.Int(), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
			} else if ((k1 === 7) && (k2 === 3)) {
				truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
			} else {
				return [false, errBadComparison];
			}
			$s = 5; continue;
		/* } else { */ case 4:
				_6 = k1;
				/* */ if ((_6 === 1) || (_6 === 2)) { $s = 7; continue; }
				/* */ if (_6 === 4) { $s = 8; continue; }
				/* */ if (_6 === 3) { $s = 9; continue; }
				/* */ if (_6 === 6) { $s = 10; continue; }
				/* */ if (_6 === 7) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if ((_6 === 1) || (_6 === 2)) { */ case 7:
					return [false, errBadComparisonType];
				/* } else if (_6 === 4) { */ case 8:
					truth$1 = v1.Float() < v2.Float();
					$s = 13; continue;
				/* } else if (_6 === 3) { */ case 9:
					truth$1 = (x$8 = v1.Int(), x$9 = v2.Int(), (x$8.$high < x$9.$high || (x$8.$high === x$9.$high && x$8.$low < x$9.$low)));
					$s = 13; continue;
				/* } else if (_6 === 6) { */ case 10:
					_r$5 = v1.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = v2.String(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					truth$1 = _r$5 < _r$6;
					$s = 13; continue;
				/* } else if (_6 === 7) { */ case 11:
					truth$1 = (x$10 = v1.Uint(), x$11 = v2.Uint(), (x$10.$high < x$11.$high || (x$10.$high === x$11.$high && x$10.$low < x$11.$low)));
					$s = 13; continue;
				/* } else { */ case 12:
					$panic(new $String("invalid kind"));
				/* } */ case 13:
			case 6:
		/* } */ case 5:
		return [truth$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lt }; } $f.$ptr = $ptr; $f._6 = _6; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.k1 = k1; $f.k2 = k2; $f.truth$1 = truth$1; $f.v1 = v1; $f.v2 = v2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	le = function(arg1, arg2) {
		var $ptr, _r$3, _r$4, _tuple, arg1, arg2, err, lessThan, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessThan = $f.lessThan; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = lt(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessThan = _tuple[0];
		err = _tuple[1];
		if (lessThan || !($interfaceIsEqual(err, $ifaceNil))) {
			return [lessThan, err];
		}
		_r$4 = eq(arg1, new sliceType$1([arg2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: le }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessThan = lessThan; $f.$s = $s; $f.$r = $r; return $f;
	};
	gt = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, err, lessOrEqual, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessOrEqual = $f.lessOrEqual; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = le(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessOrEqual = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		return [!lessOrEqual, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: gt }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessOrEqual = lessOrEqual; $f.$s = $s; $f.$r = $r; return $f;
	};
	ge = function(arg1, arg2) {
		var $ptr, _r$3, _tuple, arg1, arg2, err, lessThan, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; arg1 = $f.arg1; arg2 = $f.arg2; err = $f.err; lessThan = $f.lessThan; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = lt(arg1, arg2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		lessThan = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		return [!lessThan, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ge }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.arg1 = arg1; $f.arg2 = arg2; $f.err = err; $f.lessThan = lessThan; $f.$s = $s; $f.$r = $r; return $f;
	};
	HTMLEscape = function(w, b) {
		var $ptr, _7, _i, _r$3, _r$4, _r$5, _ref, b, c, html, i, last, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _7 = $f._7; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; b = $f.b; c = $f.c; html = $f.html; i = $f.i; last = $f.last; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		last = 0;
		_ref = b;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			html = sliceType.nil;
				_7 = c;
				if (_7 === 34) {
					html = htmlQuot;
				} else if (_7 === 39) {
					html = htmlApos;
				} else if (_7 === 38) {
					html = htmlAmp;
				} else if (_7 === 60) {
					html = htmlLt;
				} else if (_7 === 62) {
					html = htmlGt;
				} else {
					_i++;
					/* continue; */ $s = 1; continue;
				}
			case 3:
			_r$3 = w.Write($subslice(b, last, i)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = w.Write(html); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			last = i + 1 >> 0;
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = w.Write($subslice(b, last)); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: HTMLEscape }; } $f.$ptr = $ptr; $f._7 = _7; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.b = b; $f.c = c; $f.html = html; $f.i = i; $f.last = last; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscape = HTMLEscape;
	HTMLEscapeString = function(s) {
		var $ptr, b, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; b = $f.b; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		if (strings.IndexAny(s, "'\"&<>") < 0) {
			return s;
		}
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		$r = HTMLEscape(b[0], new sliceType($stringToBytes(s))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTMLEscapeString }; } $f.$ptr = $ptr; $f.b = b; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscapeString = HTMLEscapeString;
	HTMLEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = HTMLEscapeString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: HTMLEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.HTMLEscaper = HTMLEscaper;
	JSEscape = function(w, b) {
		var $ptr, _8, _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, b, b$1, c, i, last, r, size, t, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _8 = $f._8; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; b$1 = $f.b$1; c = $f.c; i = $f.i; last = $f.last; r = $f.r; size = $f.size; t = $f.t; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < b.$length)) { break; } */ if(!(i < b.$length)) { $s = 2; continue; }
			c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			/* */ if (!jsIsSpecial((c >> 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!jsIsSpecial((c >> 0))) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r$3 = w.Write($subslice(b, last, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			/* */ if (c < 128) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (c < 128) { */ case 6:
					_8 = c;
					/* */ if (_8 === 92) { $s = 10; continue; }
					/* */ if (_8 === 39) { $s = 11; continue; }
					/* */ if (_8 === 34) { $s = 12; continue; }
					/* */ if (_8 === 60) { $s = 13; continue; }
					/* */ if (_8 === 62) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_8 === 92) { */ case 10:
						_r$4 = w.Write(jsBackslash); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
						$s = 16; continue;
					/* } else if (_8 === 39) { */ case 11:
						_r$5 = w.Write(jsApos); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$5;
						$s = 16; continue;
					/* } else if (_8 === 34) { */ case 12:
						_r$6 = w.Write(jsQuot); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
						$s = 16; continue;
					/* } else if (_8 === 60) { */ case 13:
						_r$7 = w.Write(jsLt); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$7;
						$s = 16; continue;
					/* } else if (_8 === 62) { */ case 14:
						_r$8 = w.Write(jsGt); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						_r$8;
						$s = 16; continue;
					/* } else { */ case 15:
						_r$9 = w.Write(jsLowUni); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$9;
						_tmp = c >>> 4 << 24 >>> 24;
						_tmp$1 = (c & 15) >>> 0;
						t = _tmp;
						b$1 = _tmp$1;
						_r$10 = w.Write($subslice(hex, t, (t + 1 << 24 >>> 24))); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						_r$10;
						_r$11 = w.Write($subslice(hex, b$1, (b$1 + 1 << 24 >>> 24))); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$11;
					/* } */ case 16:
				case 9:
				$s = 8; continue;
			/* } else { */ case 7:
				_tuple = utf8.DecodeRune($subslice(b, i));
				r = _tuple[0];
				size = _tuple[1];
				/* */ if (unicode.IsPrint(r)) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (unicode.IsPrint(r)) { */ case 25:
					_r$12 = w.Write($subslice(b, i, (i + size >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$12;
					$s = 27; continue;
				/* } else { */ case 26:
					_r$13 = fmt.Fprintf(w, "\\u%04X", new sliceType$1([new $Int32(r)])); /* */ $s = 29; case 29: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$13;
				/* } */ case 27:
				i = i + ((size - 1 >> 0)) >> 0;
			/* } */ case 8:
			last = i + 1 >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$14 = w.Write($subslice(b, last)); /* */ $s = 30; case 30: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		/* */ $s = -1; case -1: } return; } if ($f === undefined) { $f = { $blk: JSEscape }; } $f.$ptr = $ptr; $f._8 = _8; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.b$1 = b$1; $f.c = c; $f.i = i; $f.last = last; $f.r = r; $f.size = size; $f.t = t; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscape = JSEscape;
	JSEscapeString = function(s) {
		var $ptr, _r$3, b, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; b = $f.b; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_r$3 = strings.IndexFunc(s, jsIsSpecial); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r$3 < 0) { */ case 1:
			return s;
		/* } */ case 2:
		b[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		$r = JSEscape(b[0], new sliceType($stringToBytes(s))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		return b[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSEscapeString }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.b = b; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscapeString = JSEscapeString;
	jsIsSpecial = function(r) {
		var $ptr, _9, r;
		_9 = r;
		if ((_9 === 92) || (_9 === 39) || (_9 === 34) || (_9 === 60) || (_9 === 62)) {
			return true;
		}
		return r < 32 || 128 <= r;
	};
	JSEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = JSEscapeString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.JSEscaper = JSEscaper;
	URLQueryEscaper = function(args) {
		var $ptr, _r$3, _r$4, args, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; args = $f.args; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = evalArgs(args); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = url.QueryEscape(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ $s = 3; case 3:
		return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: URLQueryEscaper }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.args = args; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.URLQueryEscaper = URLQueryEscaper;
	evalArgs = function(args) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, a, arg, args, i, ok, ok$1, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; arg = $f.arg; args = $f.args; i = $f.i; ok = $f.ok; ok$1 = $f.ok$1; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ok = false;
		s = "";
		if (args.$length === 1) {
			_tuple = $assertType((0 >= args.$length ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]), $String, true);
			s = _tuple[0];
			ok = _tuple[1];
		}
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_ref = args;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_r$3 = reflect.ValueOf(arg); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = printableValue(_r$3); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$1 = _r$4;
				a = _tuple$1[0];
				ok$1 = _tuple$1[1];
				if (ok$1) {
					((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = a);
				}
				_i++;
			/* } */ $s = 3; continue; case 4:
			_r$5 = fmt.Sprint(args); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			s = _r$5;
		/* } */ case 2:
		return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: evalArgs }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.arg = arg; $f.args = args; $f.i = i; $f.ok = ok; $f.ok$1 = ok$1; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Must = function(t, err) {
		var $ptr, err, t;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return t;
	};
	$pkg.Must = Must;
	Template.ptr.prototype.ParseFiles = function(filenames) {
		var $ptr, _r$3, filenames, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; filenames = $f.filenames; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		_r$3 = parseFiles(t, filenames); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseFiles }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.filenames = filenames; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseFiles = function(filenames) { return this.$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var $ptr, _i, _r$3, _r$4, _r$5, _ref, _tuple, _tuple$1, b, err, filename, filenames, name, s, t, tmpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; filename = $f.filename; filenames = $f.filenames; name = $f.name; s = $f.s; t = $f.t; tmpl = $f.tmpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (filenames.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (filenames.$length === 0) { */ case 1:
			_r$3 = fmt.Errorf("template: no files named in call to ParseFiles", new sliceType$1([])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 4; case 4:
			return [ptrType$3.nil, _r$3];
		/* } */ case 2:
		_ref = filenames;
		_i = 0;
		/* while (true) { */ case 5:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_r$4 = ioutil.ReadFile(filename); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			b = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$3.nil, err];
			}
			s = $bytesToString(b);
			name = filepath.Base(filename);
			tmpl = ptrType$3.nil;
			if (t === ptrType$3.nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_r$5 = tmpl.Parse(s); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$1 = _r$5;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$3.nil, err];
			}
			_i++;
		/* } */ $s = 5; continue; case 6:
		return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseFiles }; } $f.$ptr = $ptr; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.filename = filename; $f.filenames = filenames; $f.name = name; $f.s = s; $f.t = t; $f.tmpl = tmpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.ParseGlob = function(pattern) {
		var $ptr, _r$3, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		_r$3 = parseGlob(t, pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.ParseGlob }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.ParseGlob = function(pattern) { return this.$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var $ptr, _r$3, _r$4, _r$5, _tuple, err, filenames, pattern, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; err = $f.err; filenames = $f.filenames; pattern = $f.pattern; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = filepath.Glob(pattern); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		filenames = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$3.nil, err];
		}
		/* */ if (filenames.$length === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (filenames.$length === 0) { */ case 2:
			_r$4 = fmt.Errorf("template: pattern matches no files: %#q", new sliceType$1([new $String(pattern)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [ptrType$3.nil, _r$4];
		/* } */ case 3:
		_r$5 = parseFiles(t, filenames); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ $s = 7; case 7:
		return _r$5;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseGlob }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.err = err; $f.filenames = filenames; $f.pattern = pattern; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.ptr.prototype.Option = function(opt) {
		var $ptr, _i, _ref, opt, s, t;
		t = this;
		t.init();
		_ref = opt;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			t.setOption(s);
			_i++;
		}
		return t;
	};
	Template.prototype.Option = function(opt) { return this.$val.Option(opt); };
	Template.ptr.prototype.setOption = function(opt) {
		var $ptr, _1, _2, _3, elems, opt, t;
		t = this;
		if (opt === "") {
			$panic(new $String("empty option string"));
		}
		elems = strings.Split(opt, "=");
		_1 = elems.$length;
		if (_1 === 2) {
			_2 = (0 >= elems.$length ? $throwRuntimeError("index out of range") : elems.$array[elems.$offset + 0]);
			if (_2 === "missingkey") {
				_3 = (1 >= elems.$length ? $throwRuntimeError("index out of range") : elems.$array[elems.$offset + 1]);
				if (_3 === "invalid" || _3 === "default") {
					t.common.option.missingKey = 0;
					return;
				} else if (_3 === "zero") {
					t.common.option.missingKey = 1;
					return;
				} else if (_3 === "error") {
					t.common.option.missingKey = 2;
					return;
				}
			}
		}
		$panic(new $String("unrecognized option: " + opt));
	};
	Template.prototype.setOption = function(opt) { return this.$val.setOption(opt); };
	New = function(name) {
		var $ptr, name, t;
		t = new Template.ptr(name, ptrType$5.nil, ptrType$4.nil, "", "");
		t.init();
		return t;
	};
	$pkg.New = New;
	Template.ptr.prototype.Name = function() {
		var $ptr, t;
		t = this;
		return t.name;
	};
	Template.prototype.Name = function() { return this.$val.Name(); };
	Template.ptr.prototype.New = function(name) {
		var $ptr, name, nt, t;
		t = this;
		t.init();
		nt = new Template.ptr(name, ptrType$5.nil, t.common, t.leftDelim, t.rightDelim);
		return nt;
	};
	Template.prototype.New = function(name) { return this.$val.New(name); };
	Template.ptr.prototype.init = function() {
		var $ptr, c, t;
		t = this;
		if (t.common === ptrType$4.nil) {
			c = new common.ptr(false, new option.ptr(0), new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0), false, false);
			c.tmpl = {};
			c.parseFuncs = {};
			c.execFuncs = {};
			t.common = c;
		}
	};
	Template.prototype.init = function() { return this.$val.init(); };
	Template.ptr.prototype.Clone = function() {
		var $ptr, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key, _key$1, _key$2, _key$3, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, k, k$1, k$2, nt, t, tmpl, v, v$1, v$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; nt = $f.nt; t = $f.t; tmpl = $f.tmpl; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		nt = t.copy(ptrType$4.nil);
		nt.init();
		if (t.common === ptrType$4.nil) {
			return [nt, $ifaceNil];
		}
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			if (k === t.name) {
				_key = t.name; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: nt };
				_i++;
				/* continue; */ $s = 1; continue;
			}
			tmpl = v.copy(nt.common);
			_key$1 = k; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: tmpl };
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = t.common.muFuncs.RLock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.common.muFuncs, "RUnlock"), []]);
		_ref$1 = t.common.parseFuncs;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			k$1 = _entry$1.k;
			v$1 = _entry$1.v;
			_key$2 = k$1; (nt.common.parseFuncs || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$2)] = { k: _key$2, v: v$1 };
			_i$1++;
		}
		_ref$2 = t.common.execFuncs;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		while (true) {
			if (!(_i$2 < _keys$2.length)) { break; }
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			k$2 = _entry$2.k;
			v$2 = _entry$2.v;
			_key$3 = k$2; (nt.common.execFuncs || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$3)] = { k: _key$3, v: $clone(v$2, reflect.Value) };
			_i$2++;
		}
		return [nt, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$3.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Clone }; } $f.$ptr = $ptr; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.nt = nt; $f.t = t; $f.tmpl = tmpl; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Clone = function() { return this.$val.Clone(); };
	Template.ptr.prototype.copy = function(c) {
		var $ptr, c, nt, t;
		t = this;
		nt = New(t.name);
		nt.Tree = t.Tree;
		nt.common = c;
		nt.leftDelim = t.leftDelim;
		nt.rightDelim = t.rightDelim;
		return nt;
	};
	Template.prototype.copy = function(c) { return this.$val.copy(c); };
	Template.ptr.prototype.AddParseTree = function(name, tree) {
		var $ptr, _r$3, _tuple, err, name, nt, replace, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; name = $f.name; nt = $f.nt; replace = $f.replace; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		nt = t;
		if (!(name === t.name)) {
			nt = t.New(name);
		}
		_r$3 = t.associate(nt, tree); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		replace = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$3.nil, err];
		} else if (replace) {
			nt.Tree = tree;
		}
		return [nt, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.AddParseTree }; } $f.$ptr = $ptr; $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.name = name; $f.nt = nt; $f.replace = replace; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.$val.AddParseTree(name, tree); };
	Template.ptr.prototype.Templates = function() {
		var $ptr, _entry, _i, _keys, _ref, m, t, v;
		t = this;
		if (t.common === ptrType$4.nil) {
			return sliceType$5.nil;
		}
		m = $makeSlice(sliceType$5, 0, $keys(t.common.tmpl).length);
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			m = $append(m, v);
			_i++;
		}
		return m;
	};
	Template.prototype.Templates = function() { return this.$val.Templates(); };
	Template.ptr.prototype.Delims = function(left, right) {
		var $ptr, left, right, t;
		t = this;
		t.init();
		t.leftDelim = left;
		t.rightDelim = right;
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.$val.Delims(left, right); };
	Template.ptr.prototype.Funcs = function(funcMap) {
		var $ptr, funcMap, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; funcMap = $f.funcMap; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		t = this;
		t.init();
		$r = t.common.muFuncs.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(t.common.muFuncs, "Unlock"), []]);
		$r = addValueFuncs(t.common.execFuncs, funcMap); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		addFuncs(t.common.parseFuncs, funcMap);
		return t;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$3.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Funcs }; } $f.$ptr = $ptr; $f.funcMap = funcMap; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Template.prototype.Funcs = function(funcMap) { return this.$val.Funcs(funcMap); };
	Template.ptr.prototype.Lookup = function(name) {
		var $ptr, _entry, name, t;
		t = this;
		if (t.common === ptrType$4.nil) {
			return ptrType$3.nil;
		}
		return (_entry = t.common.tmpl[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
	};
	Template.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Template.ptr.prototype.Parse = function(text) {
		var $ptr, _entry, _i, _keys, _r$3, _r$4, _ref, _tuple, _tuple$1, err, err$1, name, t, text, tree, trees, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; err$1 = $f.err$1; name = $f.name; t = $f.t; text = $f.text; tree = $f.tree; trees = $f.trees; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.init();
		$r = t.common.muFuncs.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = parse.Parse(t.name, text, t.leftDelim, t.rightDelim, new sliceType$6([t.common.parseFuncs, builtins])); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		trees = _tuple[0];
		err = _tuple[1];
		$r = t.common.muFuncs.RUnlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$3.nil, err];
		}
		_ref = trees;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 4:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 5; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 4; continue;
			}
			name = _entry.k;
			tree = _entry.v;
			_r$4 = t.AddParseTree(name, tree); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$3.nil, err$1];
			}
			_i++;
		/* } */ $s = 4; continue; case 5:
		return [t, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.Parse }; } $f.$ptr = $ptr; $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.err$1 = err$1; $f.name = name; $f.t = t; $f.text = text; $f.tree = tree; $f.trees = trees; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.Parse = function(text) { return this.$val.Parse(text); };
	Template.ptr.prototype.associate = function(new$1, tree) {
		var $ptr, _entry, _key, _r$3, _v, new$1, t, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _key = $f._key; _r$3 = $f._r$3; _v = $f._v; new$1 = $f.new$1; t = $f.t; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!(new$1.common === t.common)) {
			$panic(new $String("internal error: associate not common"));
		}
		if (!(!((_entry = t.common.tmpl[$String.keyFor(new$1.name)], _entry !== undefined ? _entry.v : ptrType$3.nil) === ptrType$3.nil))) { _v = false; $s = 3; continue s; }
		_r$3 = parse.IsEmptyTree(tree.Root); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			return [false, $ifaceNil];
		/* } */ case 2:
		_key = new$1.name; (t.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new$1 };
		return [true, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Template.ptr.prototype.associate }; } $f.$ptr = $ptr; $f._entry = _entry; $f._key = _key; $f._r$3 = _r$3; $f._v = _v; $f.new$1 = new$1; $f.t = t; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Template.prototype.associate = function(new$1, tree) { return this.$val.associate(new$1, tree); };
	ptrType$24.methods = [{prop: "push", name: "push", pkg: "text/template", typ: $funcType([$String, reflect.Value], [], false)}, {prop: "mark", name: "mark", pkg: "text/template", typ: $funcType([], [$Int], false)}, {prop: "pop", name: "pop", pkg: "text/template", typ: $funcType([$Int], [], false)}, {prop: "setVar", name: "setVar", pkg: "text/template", typ: $funcType([$Int, reflect.Value], [], false)}, {prop: "varValue", name: "varValue", pkg: "text/template", typ: $funcType([$String], [reflect.Value], false)}, {prop: "at", name: "at", pkg: "text/template", typ: $funcType([parse.Node], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "writeError", name: "writeError", pkg: "text/template", typ: $funcType([$error], [], false)}, {prop: "walk", name: "walk", pkg: "text/template", typ: $funcType([reflect.Value, parse.Node], [], false)}, {prop: "walkIfOrWith", name: "walkIfOrWith", pkg: "text/template", typ: $funcType([parse.NodeType, reflect.Value, ptrType$13, ptrType$6, ptrType$6], [], false)}, {prop: "walkRange", name: "walkRange", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$9], [], false)}, {prop: "walkTemplate", name: "walkTemplate", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$10], [], false)}, {prop: "evalPipeline", name: "evalPipeline", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$13], [reflect.Value], false)}, {prop: "notAFunction", name: "notAFunction", pkg: "text/template", typ: $funcType([sliceType$3, reflect.Value], [], false)}, {prop: "evalCommand", name: "evalCommand", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$23, reflect.Value], [reflect.Value], false)}, {prop: "idealConstant", name: "idealConstant", pkg: "text/template", typ: $funcType([ptrType$21], [reflect.Value], false)}, {prop: "evalFieldNode", name: "evalFieldNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$14, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalChainNode", name: "evalChainNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$15, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalVariableNode", name: "evalVariableNode", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$17, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalFieldChain", name: "evalFieldChain", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Value, parse.Node, sliceType$7, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalFunction", name: "evalFunction", pkg: "text/template", typ: $funcType([reflect.Value, ptrType$16, parse.Node, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "evalField", name: "evalField", pkg: "text/template", typ: $funcType([reflect.Value, $String, parse.Node, sliceType$3, reflect.Value, reflect.Value], [reflect.Value], false)}, {prop: "evalCall", name: "evalCall", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Value, parse.Node, $String, sliceType$3, reflect.Value], [reflect.Value], false)}, {prop: "validateType", name: "validateType", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Type], [reflect.Value], false)}, {prop: "evalArg", name: "evalArg", pkg: "text/template", typ: $funcType([reflect.Value, reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalBool", name: "evalBool", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalString", name: "evalString", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalInteger", name: "evalInteger", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalUnsignedInteger", name: "evalUnsignedInteger", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalFloat", name: "evalFloat", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalComplex", name: "evalComplex", pkg: "text/template", typ: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalEmptyInterface", name: "evalEmptyInterface", pkg: "text/template", typ: $funcType([reflect.Value, parse.Node], [reflect.Value], false)}, {prop: "printValue", name: "printValue", pkg: "text/template", typ: $funcType([parse.Node, reflect.Value], [], false)}];
	ExecError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	rvs.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	rvInts.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvUints.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvFloats.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	rvStrings.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$3.methods = [{prop: "ExecuteTemplate", name: "ExecuteTemplate", pkg: "", typ: $funcType([io.Writer, $String, $emptyInterface], [$error], false)}, {prop: "Execute", name: "Execute", pkg: "", typ: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "DefinedTemplates", name: "DefinedTemplates", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ParseFiles", name: "ParseFiles", pkg: "", typ: $funcType([sliceType$7], [ptrType$3, $error], true)}, {prop: "ParseGlob", name: "ParseGlob", pkg: "", typ: $funcType([$String], [ptrType$3, $error], false)}, {prop: "Option", name: "Option", pkg: "", typ: $funcType([sliceType$7], [ptrType$3], true)}, {prop: "setOption", name: "setOption", pkg: "text/template", typ: $funcType([$String], [], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "New", name: "New", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "init", name: "init", pkg: "text/template", typ: $funcType([], [], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [ptrType$3, $error], false)}, {prop: "copy", name: "copy", pkg: "text/template", typ: $funcType([ptrType$4], [ptrType$3], false)}, {prop: "AddParseTree", name: "AddParseTree", pkg: "", typ: $funcType([$String, ptrType$5], [ptrType$3, $error], false)}, {prop: "Templates", name: "Templates", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "Delims", name: "Delims", pkg: "", typ: $funcType([$String, $String], [ptrType$3], false)}, {prop: "Funcs", name: "Funcs", pkg: "", typ: $funcType([FuncMap], [ptrType$3], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String], [ptrType$3, $error], false)}, {prop: "associate", name: "associate", pkg: "text/template", typ: $funcType([ptrType$3, ptrType$5], [$Bool, $error], false)}];
	state.init([{prop: "tmpl", name: "tmpl", pkg: "text/template", typ: ptrType$3, tag: ""}, {prop: "wr", name: "wr", pkg: "text/template", typ: io.Writer, tag: ""}, {prop: "node", name: "node", pkg: "text/template", typ: parse.Node, tag: ""}, {prop: "vars", name: "vars", pkg: "text/template", typ: sliceType$2, tag: ""}]);
	variable.init([{prop: "name", name: "name", pkg: "text/template", typ: $String, tag: ""}, {prop: "value", name: "value", pkg: "text/template", typ: reflect.Value, tag: ""}]);
	ExecError.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	writeError.init([{prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	rvs.init(reflect.Value);
	rvInts.init([{prop: "rvs", name: "", pkg: "text/template", typ: rvs, tag: ""}]);
	rvUints.init([{prop: "rvs", name: "", pkg: "text/template", typ: rvs, tag: ""}]);
	rvFloats.init([{prop: "rvs", name: "", pkg: "text/template", typ: rvs, tag: ""}]);
	rvStrings.init([{prop: "rvs", name: "", pkg: "text/template", typ: rvs, tag: ""}]);
	FuncMap.init($String, $emptyInterface);
	option.init([{prop: "missingKey", name: "missingKey", pkg: "text/template", typ: missingKeyAction, tag: ""}]);
	common.init([{prop: "tmpl", name: "tmpl", pkg: "text/template", typ: mapType$1, tag: ""}, {prop: "option", name: "option", pkg: "text/template", typ: option, tag: ""}, {prop: "muFuncs", name: "muFuncs", pkg: "text/template", typ: sync.RWMutex, tag: ""}, {prop: "parseFuncs", name: "parseFuncs", pkg: "text/template", typ: FuncMap, tag: ""}, {prop: "execFuncs", name: "execFuncs", pkg: "text/template", typ: mapType$2, tag: ""}]);
	Template.init([{prop: "name", name: "name", pkg: "text/template", typ: $String, tag: ""}, {prop: "Tree", name: "", pkg: "", typ: ptrType$5, tag: ""}, {prop: "common", name: "", pkg: "text/template", typ: ptrType$4, tag: ""}, {prop: "leftDelim", name: "leftDelim", pkg: "text/template", typ: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", pkg: "text/template", typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = url.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = parse.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		zero = new reflect.Value.ptr(ptrType.nil, 0, 0);
		_r = reflect.TypeOf(ptrType$1.nil).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errorType = _r;
		_r$1 = reflect.TypeOf(ptrType$2.nil).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		fmtStringerType = _r$1;
		errBadComparisonType = errors.New("invalid type for comparison");
		errBadComparison = errors.New("incompatible types for comparison");
		errNoComparison = errors.New("missing argument for comparison");
		htmlQuot = new sliceType($stringToBytes("&#34;"));
		htmlApos = new sliceType($stringToBytes("&#39;"));
		htmlAmp = new sliceType($stringToBytes("&amp;"));
		htmlLt = new sliceType($stringToBytes("&lt;"));
		htmlGt = new sliceType($stringToBytes("&gt;"));
		jsLowUni = new sliceType($stringToBytes("\\u00"));
		hex = new sliceType($stringToBytes("0123456789ABCDEF"));
		jsBackslash = new sliceType($stringToBytes("\\\\"));
		jsApos = new sliceType($stringToBytes("\\'"));
		jsQuot = new sliceType($stringToBytes("\\\""));
		jsLt = new sliceType($stringToBytes("\\x3C"));
		jsGt = new sliceType($stringToBytes("\\x3E"));
		builtins = $makeMap($String.keyFor, [{ k: "and", v: new funcType(and) }, { k: "call", v: new funcType$1(call) }, { k: "html", v: new funcType$2(HTMLEscaper) }, { k: "index", v: new funcType$1(index) }, { k: "js", v: new funcType$2(JSEscaper) }, { k: "len", v: new funcType$3(length) }, { k: "not", v: new funcType$4(not) }, { k: "or", v: new funcType(or) }, { k: "print", v: new funcType$2(fmt.Sprint) }, { k: "printf", v: new funcType$5(fmt.Sprintf) }, { k: "println", v: new funcType$2(fmt.Sprintln) }, { k: "urlquery", v: new funcType$2(URLQueryEscaper) }, { k: "eq", v: new funcType$6(eq) }, { k: "ge", v: new funcType$7(ge) }, { k: "gt", v: new funcType$7(gt) }, { k: "le", v: new funcType$7(le) }, { k: "lt", v: new funcType$7(lt) }, { k: "ne", v: new funcType$7(ne) }]);
		_r$2 = createValueFuncs(builtins); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		builtinFuncs = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/curl_as_dsl/generator"] = (function() {
	var $pkg = {}, $init, bytes, gzip, fmt, golang, java, nodejs, objc, php, python, vimscript, xhr, common, format, io, ioutil, log, os, filepath, strings, template, time, asset, bindataFileInfo, sliceType, sliceType$1, arrayType, arrayType$1, ptrType, ptrType$1, _templatesGo_fullTpl, _templatesGo_get_with_data_urlTpl, _templatesGo_post_formTpl, _templatesGo_post_single_fileTpl, _templatesGo_post_textTpl, _templatesGo_post_with_data_urlTpl, _templatesGo_simple_getTpl, _templatesGo_simple_postTpl, _templatesJava_fullTpl, _templatesNodejs_external_fileTpl, _templatesNodejs_external_filesTpl, _templatesNodejs_fullTpl, _templatesNodejs_simple_getTpl, _templatesObjc_nsurlconnection_fullTpl, _templatesObjc_nsurlsession_fullTpl, _templatesPhp_fullTpl, _templatesPython_fullTpl, _templatesVim_script_fullTpl, _templatesXhr_external_fileTpl, _templatesXhr_external_filesTpl, _templatesXhr_simpleTpl, _bindata, bindataRead, templatesGo_fullTplBytes, templatesGo_fullTpl, templatesGo_get_with_data_urlTplBytes, templatesGo_get_with_data_urlTpl, templatesGo_post_formTplBytes, templatesGo_post_formTpl, templatesGo_post_single_fileTplBytes, templatesGo_post_single_fileTpl, templatesGo_post_textTplBytes, templatesGo_post_textTpl, templatesGo_post_with_data_urlTplBytes, templatesGo_post_with_data_urlTpl, templatesGo_simple_getTplBytes, templatesGo_simple_getTpl, templatesGo_simple_postTplBytes, templatesGo_simple_postTpl, templatesJava_fullTplBytes, templatesJava_fullTpl, templatesNodejs_external_fileTplBytes, templatesNodejs_external_fileTpl, templatesNodejs_external_filesTplBytes, templatesNodejs_external_filesTpl, templatesNodejs_fullTplBytes, templatesNodejs_fullTpl, templatesNodejs_simple_getTplBytes, templatesNodejs_simple_getTpl, templatesObjc_nsurlconnection_fullTplBytes, templatesObjc_nsurlconnection_fullTpl, templatesObjc_nsurlsession_fullTplBytes, templatesObjc_nsurlsession_fullTpl, templatesPhp_fullTplBytes, templatesPhp_fullTpl, templatesPython_fullTplBytes, templatesPython_fullTpl, templatesVim_script_fullTplBytes, templatesVim_script_fullTpl, templatesXhr_external_fileTplBytes, templatesXhr_external_fileTpl, templatesXhr_external_filesTplBytes, templatesXhr_external_filesTpl, templatesXhr_simpleTplBytes, templatesXhr_simpleTpl, Asset, render, GenerateCode;
	bytes = $packages["bytes"];
	gzip = $packages["compress/gzip"];
	fmt = $packages["fmt"];
	golang = $packages["github.com/shibukawa/curl_as_dsl/client/golang"];
	java = $packages["github.com/shibukawa/curl_as_dsl/client/java"];
	nodejs = $packages["github.com/shibukawa/curl_as_dsl/client/nodejs"];
	objc = $packages["github.com/shibukawa/curl_as_dsl/client/objc"];
	php = $packages["github.com/shibukawa/curl_as_dsl/client/php"];
	python = $packages["github.com/shibukawa/curl_as_dsl/client/python"];
	vimscript = $packages["github.com/shibukawa/curl_as_dsl/client/vimscript"];
	xhr = $packages["github.com/shibukawa/curl_as_dsl/client/xhr"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	format = $packages["go/format"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	log = $packages["log"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	strings = $packages["strings"];
	template = $packages["text/template"];
	time = $packages["time"];
	asset = $pkg.asset = $newType(0, $kindStruct, "generator.asset", "asset", "github.com/shibukawa/curl_as_dsl/generator", function(bytes_, info_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = sliceType.nil;
			this.info = $ifaceNil;
			return;
		}
		this.bytes = bytes_;
		this.info = info_;
	});
	bindataFileInfo = $pkg.bindataFileInfo = $newType(0, $kindStruct, "generator.bindataFileInfo", "bindataFileInfo", "github.com/shibukawa/curl_as_dsl/generator", function(name_, size_, mode_, modTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil);
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType = $ptrType(asset);
	ptrType$1 = $ptrType(time.Location);
	bindataRead = function(data, name) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, buf, clErr, data, err, gz, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; clErr = $f.clErr; data = $f.data; err = $f.err; gz = $f.gz; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		_r = gzip.NewReader(bytes.NewBuffer(data)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		gz = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("Read %q: %v", new sliceType$1([new $String(name), err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ $s = 5; case 5:
			return [sliceType.nil, _r$1];
		/* } */ case 3:
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		_r$2 = io.Copy(buf[0], gz); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		_r$3 = gz.Close(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		clErr = _r$3;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
			_r$4 = fmt.Errorf("Read %q: %v", new sliceType$1([new $String(name), err])); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ $s = 11; case 11:
			return [sliceType.nil, _r$4];
		/* } */ case 9:
		if (!($interfaceIsEqual(clErr, $ifaceNil))) {
			return [sliceType.nil, err];
		}
		return [buf[0].Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: bindataRead }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.clErr = clErr; $f.data = data; $f.err = err; $f.gz = gz; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	bindataFileInfo.ptr.prototype.Name = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return fi.name;
	};
	bindataFileInfo.prototype.Name = function() { return this.$val.Name(); };
	bindataFileInfo.ptr.prototype.Size = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return fi.size;
	};
	bindataFileInfo.prototype.Size = function() { return this.$val.Size(); };
	bindataFileInfo.ptr.prototype.Mode = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return fi.mode;
	};
	bindataFileInfo.prototype.Mode = function() { return this.$val.Mode(); };
	bindataFileInfo.ptr.prototype.ModTime = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return fi.modTime;
	};
	bindataFileInfo.prototype.ModTime = function() { return this.$val.ModTime(); };
	bindataFileInfo.ptr.prototype.IsDir = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return false;
	};
	bindataFileInfo.prototype.IsDir = function() { return this.$val.IsDir(); };
	bindataFileInfo.ptr.prototype.Sys = function() {
		var $ptr, fi;
		fi = $clone(this, bindataFileInfo);
		return $ifaceNil;
	};
	bindataFileInfo.prototype.Sys = function() { return this.$val.Sys(); };
	templatesGo_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_fullTpl, "templates/go_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_full.tpl", new $Int64(0, 555), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_get_with_data_urlTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_get_with_data_urlTpl, "templates/go_get_with_data_url.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_get_with_data_urlTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_get_with_data_urlTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_get_with_data_urlTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_get_with_data_url.tpl", new $Int64(0, 349), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_get_with_data_urlTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_formTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_post_formTpl, "templates/go_post_form.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_formTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_formTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_post_formTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_post_form.tpl", new $Int64(0, 362), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_formTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_single_fileTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_post_single_fileTpl, "templates/go_post_single_file.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_single_fileTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_single_fileTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_post_single_fileTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_post_single_file.tpl", new $Int64(0, 449), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_single_fileTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_textTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_post_textTpl, "templates/go_post_text.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_textTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_textTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_post_textTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_post_text.tpl", new $Int64(0, 460), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_textTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_with_data_urlTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_post_with_data_urlTpl, "templates/go_post_with_data_url.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_with_data_urlTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_post_with_data_urlTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_post_with_data_urlTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_post_with_data_url.tpl", new $Int64(0, 359), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_post_with_data_urlTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_simple_getTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_simple_getTpl, "templates/go_simple_get.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_simple_getTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_simple_getTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_simple_getTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_simple_get.tpl", new $Int64(0, 333), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_simple_getTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_simple_postTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesGo_simple_postTpl, "templates/go_simple_post.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_simple_postTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesGo_simple_postTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesGo_simple_postTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/go_simple_post.tpl", new $Int64(0, 343), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesGo_simple_postTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesJava_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesJava_fullTpl, "templates/java_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesJava_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesJava_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesJava_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/java_full.tpl", new $Int64(0, 903), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesJava_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_external_fileTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesNodejs_external_fileTpl, "templates/nodejs_external_file.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_external_fileTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_external_fileTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesNodejs_external_fileTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/nodejs_external_file.tpl", new $Int64(0, 976), 420, $clone(time.Unix(new $Int64(0, 1446807860), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_external_fileTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_external_filesTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesNodejs_external_filesTpl, "templates/nodejs_external_files.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_external_filesTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_external_filesTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesNodejs_external_filesTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/nodejs_external_files.tpl", new $Int64(0, 1116), 420, $clone(time.Unix(new $Int64(0, 1446807870), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_external_filesTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesNodejs_fullTpl, "templates/nodejs_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesNodejs_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/nodejs_full.tpl", new $Int64(0, 665), 420, $clone(time.Unix(new $Int64(0, 1446807850), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_simple_getTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesNodejs_simple_getTpl, "templates/nodejs_simple_get.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_simple_getTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesNodejs_simple_getTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesNodejs_simple_getTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/nodejs_simple_get.tpl", new $Int64(0, 387), 420, $clone(time.Unix(new $Int64(0, 1446807731), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesNodejs_simple_getTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesObjc_nsurlconnection_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesObjc_nsurlconnection_fullTpl, "templates/objc_nsurlconnection_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesObjc_nsurlconnection_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesObjc_nsurlconnection_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesObjc_nsurlconnection_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/objc_nsurlconnection_full.tpl", new $Int64(0, 1554), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesObjc_nsurlconnection_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesObjc_nsurlsession_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesObjc_nsurlsession_fullTpl, "templates/objc_nsurlsession_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesObjc_nsurlsession_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesObjc_nsurlsession_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesObjc_nsurlsession_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/objc_nsurlsession_full.tpl", new $Int64(0, 1371), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesObjc_nsurlsession_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesPhp_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesPhp_fullTpl, "templates/php_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesPhp_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesPhp_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesPhp_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/php_full.tpl", new $Int64(0, 329), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesPhp_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesPython_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesPython_fullTpl, "templates/python_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesPython_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesPython_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesPython_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/python_full.tpl", new $Int64(0, 489), 420, $clone(time.Unix(new $Int64(0, 1459775379), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesPython_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesVim_script_fullTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesVim_script_fullTpl, "templates/vim_script_full.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesVim_script_fullTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesVim_script_fullTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesVim_script_fullTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/vim_script_full.tpl", new $Int64(0, 275), 420, $clone(time.Unix(new $Int64(0, 1426557658), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesVim_script_fullTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_external_fileTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesXhr_external_fileTpl, "templates/xhr_external_file.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_external_fileTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_external_fileTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesXhr_external_fileTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/xhr_external_file.tpl", new $Int64(0, 1180), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_external_fileTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_external_filesTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesXhr_external_filesTpl, "templates/xhr_external_files.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_external_filesTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_external_filesTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesXhr_external_filesTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/xhr_external_files.tpl", new $Int64(0, 1467), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_external_filesTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_simpleTplBytes = function() {
		var $ptr, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_templatesXhr_simpleTpl, "templates/xhr_simple.tpl"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_simpleTplBytes }; } $f.$ptr = $ptr; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	templatesXhr_simpleTpl = function() {
		var $ptr, _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = templatesXhr_simpleTplBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("templates/xhr_simple.tpl", new $Int64(0, 592), 420, $clone(time.Unix(new $Int64(0, 1426433181), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: templatesXhr_simpleTpl }; } $f.$ptr = $ptr; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	Asset = function(name) {
		var $ptr, _entry, _r, _r$1, _r$2, _tuple, _tuple$1, a, cannonicalName, err, f, name, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; cannonicalName = $f.cannonicalName; err = $f.err; f = $f.f; name = $f.name; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cannonicalName = strings.Replace(name, "\\", "/", -1);
		_tuple = (_entry = _bindata[$String.keyFor(cannonicalName)], _entry !== undefined ? [_entry.v, true] : [$throwNilPointerError, false]);
		f = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = f(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			a = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				_r$1 = fmt.Errorf("Asset %s can't read by error: %v", new sliceType$1([new $String(name), err])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ $s = 7; case 7:
				return [sliceType.nil, _r$1];
			/* } */ case 5:
			return [a.bytes, $ifaceNil];
		/* } */ case 2:
		_r$2 = fmt.Errorf("Asset %s not found", new sliceType$1([new $String(name)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ $s = 9; case 9:
		return [sliceType.nil, _r$2];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Asset }; } $f.$ptr = $ptr; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.cannonicalName = cannonicalName; $f.err = err; $f.f = f; $f.name = name; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Asset = Asset;
	render = function(lang, key, options) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, buffer, err, err$1, gosrc, key, lang, options, src, tmpTpl, tpl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; buffer = $f.buffer; err = $f.err; err$1 = $f.err$1; gosrc = $f.gosrc; key = $f.key; lang = $f.lang; options = $f.options; src = $f.src; tmpTpl = $f.tmpTpl; tpl = $f.tpl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buffer = [buffer];
		_r = fmt.Sprintf("templates/%s_%s.tpl", new sliceType$1([new $String(lang), new $String(key)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = Asset(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		src = _tuple[0];
		buffer[0] = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		err = $ifaceNil;
		_r$2 = template.New(key).Parse($bytesToString(src)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		tmpTpl = _tuple$1[0];
		err = _tuple$1[1];
		tpl = template.Must(tmpTpl, err);
		_r$3 = tpl.Execute(buffer[0], options); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
			$r = log.Fatal(new sliceType$1([err])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		/* */ if (lang === "go") { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (lang === "go") { */ case 8:
			_r$4 = format.Source(buffer[0].Bytes()); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			gosrc = _tuple$2[0];
			err$1 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 11:
				$r = log.Fatal(new sliceType$1([err$1])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			return $bytesToString(gosrc);
		/* } */ case 9:
		return buffer[0].String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: render }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.buffer = buffer; $f.err = err; $f.err$1 = err$1; $f.gosrc = gosrc; $f.key = key; $f.lang = lang; $f.options = options; $f.src = src; $f.tmpTpl = tmpTpl; $f.tpl = tpl; $f.$s = $s; $f.$r = $r; return $f;
	};
	GenerateCode = function(target, curlOptions) {
		var $ptr, _1, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, curlOptions, lang, langName, ok, option, sourceCode, target, templateName, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; curlOptions = $f.curlOptions; lang = $f.lang; langName = $f.langName; ok = $f.ok; option = $f.option; sourceCode = $f.sourceCode; target = $f.target; templateName = $f.templateName; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		langName = "";
		templateName = "";
		option = $ifaceNil;
		_tuple = (_entry = $pkg.LanguageMap[$String.keyFor(target)], _entry !== undefined ? [_entry.v, true] : ["", false]);
		lang = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			return ["", "", "", $ifaceNil];
		}
			_1 = lang;
			/* */ if (_1 === "go") { $s = 2; continue; }
			/* */ if (_1 === "python") { $s = 3; continue; }
			/* */ if (_1 === "node") { $s = 4; continue; }
			/* */ if (_1 === "java") { $s = 5; continue; }
			/* */ if (_1 === "objc_nsurlsession") { $s = 6; continue; }
			/* */ if (_1 === "objc_nsurlconnection") { $s = 7; continue; }
			/* */ if (_1 === "xhr") { $s = 8; continue; }
			/* */ if (_1 === "php") { $s = 9; continue; }
			/* */ if (_1 === "vim") { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === "go") { */ case 2:
				langName = "go";
				_r = golang.ProcessCurlCommand(curlOptions); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				templateName = _tuple$1[0];
				option = _tuple$1[1];
				$s = 11; continue;
			/* } else if (_1 === "python") { */ case 3:
				langName = "python";
				_r$1 = python.ProcessCurlCommand(curlOptions); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				templateName = _tuple$2[0];
				option = _tuple$2[1];
				$s = 11; continue;
			/* } else if (_1 === "node") { */ case 4:
				langName = "nodejs";
				_r$2 = nodejs.ProcessCurlCommand(curlOptions); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$3 = _r$2;
				templateName = _tuple$3[0];
				option = _tuple$3[1];
				$s = 11; continue;
			/* } else if (_1 === "java") { */ case 5:
				langName = "java";
				_r$3 = java.ProcessCurlCommand(curlOptions); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$4 = _r$3;
				templateName = _tuple$4[0];
				option = _tuple$4[1];
				$s = 11; continue;
			/* } else if (_1 === "objc_nsurlsession") { */ case 6:
				langName = "objc_nsurlsession";
				_r$4 = objc.ProcessCurlCommand(curlOptions); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$5 = _r$4;
				templateName = _tuple$5[0];
				option = _tuple$5[1];
				$s = 11; continue;
			/* } else if (_1 === "objc_nsurlconnection") { */ case 7:
				langName = "objc_nsurlconnection";
				_r$5 = objc.ProcessCurlCommand(curlOptions); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$6 = _r$5;
				templateName = _tuple$6[0];
				option = _tuple$6[1];
				$s = 11; continue;
			/* } else if (_1 === "xhr") { */ case 8:
				langName = "xhr";
				_r$6 = xhr.ProcessCurlCommand(curlOptions); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$7 = _r$6;
				templateName = _tuple$7[0];
				option = _tuple$7[1];
				$s = 11; continue;
			/* } else if (_1 === "php") { */ case 9:
				langName = "php";
				_r$7 = php.ProcessCurlCommand(curlOptions); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$8 = _r$7;
				templateName = _tuple$8[0];
				option = _tuple$8[1];
				$s = 11; continue;
			/* } else if (_1 === "vim") { */ case 10:
				langName = "vim_script";
				_r$8 = vimscript.ProcessCurlCommand(curlOptions); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$9 = _r$8;
				templateName = _tuple$9[0];
				option = _tuple$9[1];
			/* } */ case 11:
		case 1:
		_r$9 = render(langName, templateName, option); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		sourceCode = _r$9;
		return [sourceCode, langName, templateName, option];
		/* */ } return; } if ($f === undefined) { $f = { $blk: GenerateCode }; } $f.$ptr = $ptr; $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.curlOptions = curlOptions; $f.lang = lang; $f.langName = langName; $f.ok = ok; $f.option = option; $f.sourceCode = sourceCode; $f.target = target; $f.templateName = templateName; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateCode = GenerateCode;
	bindataFileInfo.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [os.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	asset.init([{prop: "bytes", name: "bytes", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: sliceType, tag: ""}, {prop: "info", name: "info", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: os.FileInfo, tag: ""}]);
	bindataFileInfo.init([{prop: "name", name: "name", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: os.FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "github.com/shibukawa/curl_as_dsl/generator", typ: time.Time, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gzip.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = golang.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = java.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nodejs.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = objc.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = php.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = python.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = vimscript.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = xhr.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = format.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = template.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_templatesGo_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9CPAk\xF30\f\xBD\xFBW\xF8+\xE5\xC3\x81\xE0\x1F0\xE8\xA1[\xD9\xAD\xA3\x14\xB6\xEBPc\xA55u\xEDLq\x18\xA5\xE4\xBFO\x8A\xDB\xEC>]\x92\xA7\xF7\xF4\x9E\xE4\x0E\x9A3\x1CQ_\xC0G\xA5\xFC\xA5K\x94\xB5Q\xB7\x9B&\x88\xDC_\x9E\xF1Z\xEB\xE5\xA7~Zi\xBBMn\b\xD8\xEBq\xD4\\\v\x16\t\xCDp\xC1\x03\x18\xDD8V2i\xD7\xCE\xF9\xECS\x84\xB0\xC1&\x00\x81\x00\x96\xA9v\x88\xCD\x14e*}Sb\"\xF2\x1Da\x07\x84/\xC1c\xCC\"\x13\xA2)\x88c\xFF\x9Fr\xEElaE^\xFE\x9E\x93\xBB>\xB4\xD2\xDD@\x86\x07&\xFC\x1A\xB0\xCF\xB5F\"q\x98\f\xDE\xF0{_\xFAF6\xB7[\xCC\xA7\xE4d\xF9z2x\xA7\xC0\xA0\x9E\xCD>\x80<\x1C\x02j\xB9\xEA\x91\xC2/\xE0\xDB\xEB\xDD\xE77\xAE\xEF\xE6\xAC\xB2\xB7\xDD$s\xDF\xA2\f\xFBv\x12\xFC[\xE9\xE8\xC3\xFDv\xA9\x90\x8E\xF6\x95\xD3\x82a\xBAH\x8B\xA9\xC3\x16i\xB2\xB6r*_\x9Dz4Eq\xE0\xC6\x1C\xE8\xD3\x90}\xB0{\x04\xB7\x0E\xC1\xCC\x13\x7F\xCC\x15bG>f\xD3g\xFE\x1C\x8D\x84U\x95\x1A\xD5O\x00\x00\x00\xFF\xFF\xB6\x98&\x81+\x02\x00\x00"));
		_templatesGo_get_with_data_urlTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8D\xCFj\xC30\f\xC6\xEF~\n\xAD\xF4\xE0@\xF1\x03\fz\xD8\x1F\xB6\xD3`\fv\x1E^\xADd\xA6\xAA\x1D\x14\xE5P\x82\xDF}R2\xFA\x00\xF3\xC5H\xDFO\xBFo\x8C\xA7s\x1C\x10.1\x17\xE7\xF2e\xAC,\xE0\xDD\xB2\x00\xC7\xA2\xFB\xFD\x19\xAF\x07\xD8\x7F\xC1\xFD\x11\xC2[M3\xE1\x04\xAD\x81\xBE\x9DB\x16\xEB\xB8\xD3\x03,\xA9\xB5\xCE\xB9~.\xA7U\xE7;X\x9C\x81\xCA\x85\xE7(Q\xC1uf\x9C\xC6\x03 \xB3I\x7FD\xC6\xF0\x8A\xE2\x8D\xFAd\x02\x93\x18\x95\xFB\x15\xB9;B\xC9\xF4g\xB2Gu\b/j#\xAF\xF1\x86n\xDA\x84=\xF2*\x0F\x8F5]\xC3\x13\xD5\t\xFDF|\xEB\xE2V\x99\xEB,\x99\xC2\x07\xC6\xF4@\xE4o\x17\xFF\xEC\xB5\xE0\x9Ds\x11?\x89~\x83\xB7\xB2\xAEs\xCD\xFD\x06\x00\x00\xFF\xFFC\x0E\x1F\x07]\x01\x00\x00"));
		_templatesGo_post_formTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8DMj\x031\f\x85\xF7>\x85\x1A\xB2\xB0!\xF8\x00\x85,\xFACv\x85P\xE8\xBA\xB8\xB1fj\xA2\xB1\x07\xD9S\b\x83\xEF^\xD9Sr\x80j#\xA4\xF7\xBD\xF7fw\xB9\xBA\x11ar!*\x15\xA69q\x01\xAD\xD6\x15\xD8E\xF9\xEF\xAFx;\xC0\xFE\x13\x1E\x8F`\xDF\x92_\b3\xD4\n2;\x81\x9A,\xE7N\f\x18}\xADF\xA9a\x89\x97\x1E\xA7\r\xAC\xAA\x81\xC2\xD9WW\x9C\x80\xFDf\xCC\xF3\x01\x90\xB9\x85~\x972\xDBs\xCA\xE5\x94x\xD2\r\xFD`\x12\xF2\x00?\x8E\x16\xCC\xA6[\xC2\xD0\xF9\x87#\xC4@\x7F\xB1m(\x8D\xF6$\xD1\xA4E\xDE\xD0\xAD\xC3\xE3\x80\xDC\x9B\xECs\xF27\xFBB)\xA3\xDE\x88/y\xDC\xFBCZJ \xFB\x8E\xCE?\x11\xE9\xBB\xE3\x9F\xBDM8s\x88E\xE7\"k\xD4\xAD\xCC\x18U\xD5o\x00\x00\x00\xFF\xFF\x7Fs\xBC\xECj\x01\x00\x00"));
		_templatesGo_post_single_fileTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x90\xC1n\xC3 \f\x86\xEF<\x85\xC7\t\xA4\x88\xDE'\xF5\xB0U\xEAu\xD1\xB4=\x00k\x9C\x14\x8Db\x04\xEE\xA1\x8A\xF2\xEE\x05\x12\xE5\x01\xEACb\xF8\x7F\xFF\x9FE\xB4\x97\x7F;!\xDC\xAC\vB\xB8[\xA4\xC4\xA0\x04\x94\x92\x94\xE5\xDAx\x9A\xB6\xCE\xD1\xC1\xD1\x9D\x9D\xDF\xCE\x01\xF9pe\x8ERh!\xC6{\xB8\xB4 \xA5an\xFA\xE8<v\x80)\xC1\xFB\x11(\x9B\xAF\x88A\xC9y\x06s.Jo\xF9\n\xCB\"u\xF3\xBA\xB1\x19\xDF\x8E\x10\x9C\xDF\xE6k\x15\xB89[\xB6^\x15y\xB5.\xED\x9B0\xC7=\xBC.az\xCA\xACj\xFAo\xF2%\xB8\x83\x86:Q`\f\xFC\xF3\x88Xi]\xDB\xEAE\xE6\x80#\xA6F6\x9F4<\xCC\xC9SF\xB5:\xFE\xCA\xC5\xBE\xCF\xFAJ\xE6\x1B\xED\xF0\xE1\xBD\xDA'^\xE4V\xA1O.\xB0\xCA\\~\x93\xAA0\xAD\xC5\"\x9E\x01\x00\x00\xFF\xFF\xE0\\\xEB\xBB\xC1\x01\x00\x00"));
		_templatesGo_post_textTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8F\xC1J\xC40\x10\x86\xEFy\x8Aq\xD9C\x82%\x0F\xA0\xECAW\xC4\x8B\xB0\x88z\x95t3\xADa\xB3I\x99\xA4H)}w'm\xED\x03\x98K\x98\x99o\xFE\xFF\x9F\xCE\x9C/\xA6E\xB8\x1A\x17\x84p\xD7.R\x06)\xC6\x11\xC8\x04\xEE\xEF/8T\xB0\xFF\x82\xBB\x03\xE8\xD7h{\x8F\t\xA6\t\xF8\xED\x18*c.w\xBC\x80\xC1N\x93\x12\xA2\xE9\xC3y\x96\x93\nFQ@\xE6\xF4\x93\xC9\x86\xC1\xB9&L]\x05HTD\xBFs\xEE\xF4)\xA6,\v\xF6A\x9E\xA9j\xD6\xD6\xC7\x182\x86\xFC>t\xC8\xCDqt\r\xE8\x17\x93\x1Ec\x1F\xAC\xA1\xE2{\x0F\xF5Z\x1Cvp\v?\xE42\x92\xFE\x03\xA4\xE2T>!\xE7[\xE3U[\x96OC\xCE\xD4\xBE\b\xAB9\x14\x8B\x97D7\x07\b\xCE\xAF\xC1\xCB\xF3\xB1\xD5\xCF\xBC\xE0%\x8F\x17t\xB9\xC2b\x834\xDF\xC2\x86v\xD0G\x1F\x13\xCA\x85\xA8\xB9\xB1]\xE8b\x9F\x9D\xD7oh\xEC\x83\xF7r\xDB\xF8\xA7o\x19\x9C\xC8\x85,S\xE6\xAF\x95\xC5L)1\x89\xDF\x00\x00\x00\xFF\xFF\xC7\xB5\xC3\xED\xCC\x01\x00\x00"));
		_templatesGo_post_with_data_urlTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8DMj\x031\f\x85\xF7>\x85:da\xC3\xE0\x03\x14\xB2\xE8\x0F\xDD\x15B\xA1\xEB\xE2\xC6\x9A\xA9\x89b\x0F\xB6g\x11\x06\xDF\xBD\x92\xA7\xE4\x00\xD5F\xE8\xBDO\xEF-\xEE|q3\xC2\xD5\x85\xA8T\xB8.)W\xD0j\xDB \xBB\xC8\xFA\xE1\x82\xB7\x11\x0E_\xF0x\x04\xFB\x9E\xFCJX\xA05\xE0\x19\x18\x12\x9B\xCF\x81\x1F0\xFA\xD6\x8CR\xD3\x1A\xCF=N\x1B\xD8\x94\x80\xCC\xD9WW\x1D\x83\xFD\xCEX\x96\x110g\t\xFD\xA9u\xB1\xA7T\xAA\x16\xEC3\x13S#\f\xC3\b1\x90\xE9|\x98:\xFCp\x14\xE9/S\x86\xD2l\xDF8\x974\xDB;\xBA\x17x\x9C0\xF7\x1A\xFB\x9C\xFC\xCD\xBEP*\xA8w\xE2\x9B\x85{yHk\rd?\xD0\xF9'\"}\xFF\xF8g\xAF\x18\xA7\x1Cb\xD5\xA5\xF2\x9A\xB5\x94\x19\xA3\x9A\xFA\r\x00\x00\xFF\xFFQ\xC72kg\x01\x00\x00"));
		_templatesGo_simple_getTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8D\xC1j\xC30\f\x86\xEF~\n\xAD\xF4\xE0@\xF1\x03\fz\xD8\x06\xDBi0\x06;\x0F\xAFV2S\xD5\x0E\x8Ar(\xC1\xEF>)\x1Dy\x80\xEA`#\xFD\xDF\xFF\xFFc<\x9D\xE3\x80p\x89\xB98\x97/ce\x01\xEF\x96\x058\x16\xBD\xEF\xCFx=\xC0\xFE\x1B\x1E\x8F\x10\xDEk\x9A\t'h\rtv\n\x99\xAC\xEBN\rXRk\x9Ds\xFD\\Nk\x9C\xEF`q\x062N\xE3\x01\x90\xD9B~E\xC6\xF0\x86\xE2\xD5\x1D\xBE\x98\xC0LF\xE5~E\x1E\x8EP2\xFD;m\xA8\x0E\xE15J$\xAF\xF2\rm\xEB\x9B\xB0G^\xC3\xC3sM\xD7\xF0BuB\x7F#~\xF4\xB0U\xE6:K\xA6\xF0\x891=\x11\xF9\xCDqg\xAF\t\x1F\x9C\x8B\xF8I\xF4\x1B\xBC\x95u\x9Dk\xEE/\x00\x00\xFF\xFF<\xD7\xA3zM\x01\x00\x00"));
		_templatesGo_simple_postTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9C\x8D\xC1j\xC30\x10D\xEF\xFA\x8A\xAD\xC9A\x02\xA3\x0F(\xE4\xD0\x16z+\x84B\xCFE\x8D\xD6\xAE\xC8F2\xD2\xFA\x10\x8C\xFE\xBD+\xA5\xF8\x03\xB2\x07\x1B\xCD\xBC\x99Y\xDC\xF9\xE2f\x84\xAB\vQ\xA9p]Rf\xD0j\xDB \xBB(\xFA\xE1\x82\xB7\x11\x0E\xDF\xF0|\x04\xFB\x91\xFCJX\xA0V\x90\x1B\x04j\xB6<\x07\t`\xF4\xB5\x1A\xA5\xA65\x9E{\x9D6\xB0\xA9\x06f,\xCB\b\x98s+\xF9e^\xEC)\x15\xD6\x12\xB7_\x99$>\xC20\x8C\x10\x03\x99\xCE\x87\xA9\xC3O\xC7&\xFDw\xB4\xA34\xDBw\xC7\x8E\xB4\xD8w\xB4\xF6\xAF\xC7\ts\x9F\xB1\xAF\xC9\xDF\xEC\x1B\xA5\x82\xFAN\xFC\x88\xB0\x8F\x87\xB4r \xFB\x89\xCE\xBF\x10\xE9=\xF1\xE0n3N9D\xD6\x85\xE57\xEB6f\x8C\xAA\xEA/\x00\x00\xFF\xFF%\x9C2\xD8W\x01\x00\x00"));
		_templatesJava_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x9CR\xC1n\xDB0\f\xBD\xFB+\xB8\xA2\x05d\xA0\xF0\x07\xB4\xE8a\xCDv\b\xD0`C\xB2\x9E\xB6aP$\xC6\x15*S\x86$\xAF\xCD\f\xFD\xFB(;A\x12\xCF\xA7\xF1\x10@\x8F\x8F\xEF\xBD\x90\xEE{\xF0\x92j\x84\xEBW\xDC\xDF\xC2\xF5/\xB8{\x80j\xE5tg1@J\xA6i\x9D\x8F\xC0\xB4L`\xE0\xBE\xE8{$\x9DRQ\xB4\xDD\xD6\x1A\x05\xCA\xCA\x10`%\rA\x9F\x89\xD5G\xADM4\x8E\xA4\xFD\x84\xDC\xF42?x\xB4\x00\xAE\xC3P\x88\x8C*\xF8\xED\x8C\x86\x86G\xC5&zC\xF5\xF7\x9F }\x1DJ\xE8\x07r\xAE\xE8\xF7g\xAF\\\xD9c\xE1\x9A\xC6\xD1\x92\xD8HZ\xF3\x07Y>\xC3_=\xB6\xD2\xE3\xA3\xD39\xEB\xF3\xFA\t:o\xE1\x01\b\xDF\x80_\"s\x9E\x19I\xA9\xBC/fD\x89P\xE5\xB4\x8B\xE1?\xA5\x04\x8A!\x9E\x17\xF3\xED\x92\xD5+\xD7\"\x9DZb\x8C\xE1\xDE\xF7\xA3\xC9Y\xAA\x13\xE9\xB8\x8Ccm\xF6!bS\xB9.V-\xAF!\xEE\xC4\xD5\x1AC\xEB(\xE0\x1D\xDCh\xB8\t?\xE8\xEAv\bS\xD5\x18\x8F\xBD\x85\xD3(\xCA\x7F\xF1\x15\x86 kn\xB1\xFF\xB9\xCDc\xB7\xDB\xA1G\xBDF\xA9\xD1\xC3\xD6\x1F6s\x89\x8B\f-\xA9\xED\"\xDF\x04es@\x8F&g\x1D6\x988\x8CW\x04\x939\x93\x05\xBF\xBD\x18\x8B \xC4\xD0c\xE3\xAD\xAFXC?\x19\xCAA\xE1\x03G\xE9\xAC-'\xB7\x9E\xDB\x8E\xA5Qd\xE2}\xB9R\x96W\xD6\x05\xD6>\xB1\xF8\x9C2\xAA\x17\x10+iw\xCE7\xA8\xF9\x9B\xF8\xFC\xAE\xB0\x1D\x8E\x82Ss\x1C\xFD6Q\xAA\xD7o^\xAAy\xB1\xE5\x97\xFF\x96(\xC6\xDFT\xFC\r\x00\x00\xFF\xFF\xD92\xFE\x9C\x87\x03\x00\x00"));
		_templatesNodejs_external_fileTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF|SM\x8F\xDA0\x10\xBD\xF3+F\xD1J\x18\x15Y{\xAC@{\xE8B?\x0E\xA5\xDB\x03\x97\x9EVV<\x01k\x83\x9D\xDAN\x17\x14\xF9\xBFw\xC6II\x16\xB5\x8D\x04\xF2\xCC{\xF6\xF3{\xB6\x7F)\x0FU\x80\x07\xF0\xF8\xB35\x1EEQ\x85b\xB1\x9Eu\x1Dxe\x0F\bw/xY\xC2\xDD3\xAC\x1E@\xEE\x9Cnk\f\x90\x12\xCF#\x0E\xA3TM\xE7\x8F\xDD~\x1D\xB4:%j\xCA\x0FZ\x9Bh\x9CU\xF5\x16\xCBZy\xC5\x05\xD1fU\x90\x1E\x95\xFEd\xEA~\xBA0V\xE3\x19\xE4\xC7sDOt\x06\x02\xDC/$\x0F\xBE\xA9\x13\xF2\xDA]g\xAA\x7F3\xF7x\x8E\xFBK\xC3\xCC%\xD0\x16J\xA7\x8D=\xAC\xA0hc\xF5\xBEH\xC3\xAE\x96P\xB5\xB6\xCC\xDB\x10\xE8=\x954\x7F\xE3lD\x1B\x17\xD0\xCD\x80>V!\xECO\xC9_\xE9lp5Jj;\x9F\xC1\xF5\x15\xF3\x18[o\xFB:\xE5\x7F\xB6\xFE\xDDc\xA3<>:}\x19\xB2\xA3\xB8(4\xC66\xB5!\xB9>Y\x02%\x07\x89!\x8AQ\xEF\xE8B\xA4\xAD3\xF9\v\r\xD9\xFD\xF2\n6*\x1EW\xBD\b\x8D\xD8oN\xC6\"5\x9C\x8Fp\x9F\xD2\xC8\xA5\xC6\xC0e(ss\x10W\xC6\t\xE3\xD1\xE9Al\x97\x8B,71\xF1\xD4p`|\x07z\x93c\x88\xC2c\xF8[N\xB5;\x88\xE2\xB3\x8Bd:4\xD4CZ\x1F\xDEq%CT\xB1\r\x1B\xA7\x91\x1A\xC5M{\x87!\xA8\x03\xBEI7H\xD2\x99k\x15\xD5|zz\xE5\xB1\xB5/S\xED[\xFD\xF9\xE3\xD3\xF6\xC7\n\xE6$\xD0s\xC7E\xD3b\xCD\xF6\xF6\xA8\xFC\xD6\xBD\xDA\xAB\xB1\x812\xBE\x84gz\x07\xB5\xA1d\xF9)\xF0Y~\xA5\"\xA4D'&_\xBD\x89(\xF8\xEEgF\x1Ag\xE7\x80\x99B\x031t\xB9d\x1F\xF9\x06M\x8C\b\xFCo~\x99\xDE\x87\x87\xF2\xF4&\x1D\xD6\xE3\xDF\xEF\x00\x00\x00\xFF\xFF\xEA\xB9(X\xD0\x03\x00\x00"));
		_templatesNodejs_external_filesTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF|SOo\xDB>\f\xBD\xE7S\x10F\x818\xF8\x19\xC2\xEF8$\xE8aM\xF6\xE7\xB0\xAC=\xE42\fC!\xD8t\xA2\xD5\x91<I^\x16\x04\xFA\xEE#e5Vz\x98\x806\"\xF9$\xF2\xBDg\xFD\x96\x16Z\x07\xF7`\xF1\xD7\xA0,\x96E\xEB\x8A\xC5jv\xB9\x80\x95z\x8Fp\xF7\x82\xE7\n\xEE\x9Eay\x0Fbk\x9A\xA1C\x07!\xF09\xC2p\x95\xA2\xFC\xFC\x94\x1D\xEFA\xDD\x84@I\xF1\xBEi\x94WF\xCBn\x83u'\xAD\xE4\x80`\xB3'k\x8E\xCA\xA1\x90]W~\xCF:+\xEA\x8B\x7F<Z:\xF2Qu\x18G\xF8\x90%x\x10\xA0\xA5\xF1\x04\xE9\x92\xB2\x1Dt\x1D/.\xDDP\xD7\xE8\\E\xA3\xFD\xC4\xDA/\xE02\x83\xB4Z',\xCA\x86\xEF\xE0\x81o\xBA\b\xFE\xF7U\x1E\x91\b\\.\xAA\xBD\x9DA\xEC(\xDA\x9D{\xA4\xD6\x15\x10\xB9\xDA4J\xEF\x97P\f\xBE}W\x84\xC4\xB7\x82i\x0E\xB4\xB6\x82Fz\x99O\xC0\x8B\xEE\xE6\"\xA5\xD3\x881ZA\x00\xEC\x1CR61(\xE3a\xCA_O\x07Rv\xFC\xAD^\x15\xFE\xB1\x10\xFE\x80:\xE3\xDF\xD2\xB8k\xA3=j\xEF^[\xB3\x0FO\x16{i\xF1\xC14\xE7d$yG\x0Erm\xDD)\x82\x8F6SQ\xB0\xAB\xE8|9\r~0\xCE\x13[\x06\x7F\xA6-\xDB\\]\x8B\xBD\xF4\x87\xE5\xD8\x84v,QTP#%\x8C\xF5\xF0\x7F\x988\xF4\x94HX.EldrE\x1C\xD1\x1FL\x93\x9Amc\x10\xDBe$\x1E{\xE6\xCA\xDF\xC1\xA8\xC7\xA4{i\xD1\xE5\x82\xD7\x043\xE4_g\xF6e\xF1\xC9x\"\xEDz\xCA!\xDD\x0F\xFFq$\x9C\x97~pk\xD3 %\x8A7\xE9-\x19!\xF7\x98\x84\xE7\xC55\xEA3gw\xE6\xB9\xE1\xF5a\xD0/o\xCD\xCE\xFB\xCF\x1F\x1E7\xDF\x960\xA7\x06#v\x95;\xCB\xF4v(\xED\xC6\x9C\xF4\x95X\x82L\x8F\xE3\x99\x1EG\xA7\xF4\xF8(\xD8\xCB/\x14\xB8\x10\xC81q\xB2\xCAc\xC9\x0F1\"\xC2t:\n\xCC\x10\xDA\x94)\xCB!\xF3\xA0\x8F\xCF\xD8\x8CH\x89\xFF\xD4/\xC2G\xF1P\x1Co\xD4\xE1~\xF4\xF77\x00\x00\xFF\xFF\xD2\xC2\xDF\xAA\\\x04\x00\x00"));
		_templatesNodejs_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFFtRAk\xF2@\x10\xBD\xE7W\fA\xC8\xCA\x17\x96\xEF\x1C\xF1P\x15\xDACE\x0F\xBD\xF4$Kv4\xC1\x98Mw7\x15\t\xFB\xDF;\xB3\xD1*Bs\xDAy\xF3xof^\x86\x01\xACj\x0F\b\x93#^r\x98\xEC\xA0\x98\x83\\\x1B\xDD7\xE8 \x84oe\x818\xDC\xA5\n\xE6`\xF1\xAB\xAF-\x8A\xF4\x8E\xA6\xD3Y2\f\xD8\xEA\x10\b\x94/Z\xD7\xBE6\xADjVX6\xCA*.\x88\x96psk\xB1S\x16\x17F_\xAE\xEA$H\xB2\xDC[65\xB6~\xF4\xA6\xA6d+t^\f\t\xD0W\x19\xE7\v`[\xF9FO\xF6\xCDc\xA3S\xBE*\xA2\xC0\x96^\x84\xE7\xC3P\xEF\xA1E\x02\x8C\xF5\xF0\x9F\xAC#\x8F\x8A+\x8F\xE1\xC8\x8BC\xC7\xEE\t}e\xF4\xD5`\x1D\x8Bh\xF10\xF4\xA6\xE3M\xF8*I\xC8a\xDF\xB7%\xD7\xC2\xA2\x9B\xC28cIm\xD3\xA0l\xCCA\xA4\xAF\xC6\xD3r\xAE#\fI\x17\xFEq%\x9DW\xBEwK\xA3\x91\x80\xF4\t^\xA3s\xEA\x80tOVc\x9C\xF43\xAD\xBC\xCA\xEE\x86 \xCA\xAAo\x8F7\xCFg\xDFl\xB1Y}\x16\x90\x91\xF0\xC8\x1B\xC5\xC2t\xC6\xAB|\xA0\xB2+s\x8Ey\x84\x98\xDB-\xFF\x1D\xA5\xDF\xD4t5\xFE\x018\x9Fw*\\\b\x94\x82<\xDB\xDA\xA3\xE0\xC4##\x84{\xE2\xDC\xA6\x87 \x84\x9F</Zk\xEC\xC3\xC0\x02\xFF\xBCO\xA4\x8E\xC7Ay\xFA\xDD\x9E\xF4\x7F\x02\x00\x00\xFF\xFF)\x91\x9D\x9C\x99\x02\x00\x00"));
		_templatesNodejs_simple_getTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFFt\x8F\xC1J\x031\x10\x86\xEF\xFB\x14C(l\x16K\x1E`K/\xB6\xE0\xA9x\xD1\x83'\t\xBB\xE3\xBA4ft\x92(\x12\xF2\xEEN\xBAh\xA5\xD0\\\xC2|3|\xFFL\xCE\xC0\xD6O\b\xAB#~\xAFa\xF5\f\xFD\x16\xCC\x81\xC6\xE40@)\x9F\x96AfjW*\xD8\x02\xE3G\x9A\x19\xB5:S\xD5m\x9A\x9C\xD1\x8F\xA5\xC8\x0Ff\xE7f\xF4qqH\xDBL\x18u\xE5\x8F\xEC\xA4\\\xC3K\xF2C\x9C\xC9k\xC6\xD0An@\xDE@>\x90C\xE3h\xD2\xEA\x8E\xA2\xE4\x84wa\xD8\x83\x82\x9BZ\x99\x10mLaG#\nP\x17\xF8\x80!\xD8\te\x93j\xAB\\\xFC\xEDh\xA3m\xCF\x81\xA0\x87\xD7\xE4\x8F\xBF\x99\x97\xB9\xED\xED\xFD\xFE\xA9\x87V\xC4\xCB\xDC\"+\xDD\xA6n\xFF\x80\x96\xF7\xF4\xE5\xE5\x84\xA6t'=2\x13\xFF\xF3k\xBCz\xCEit\xB9\x05\xCD\xDB\xDF\xB2\xE2n~\x02\x00\x00\xFF\xFF\xB7\x8F#\x13\x83\x01\x00\x00"));
		_templatesObjc_nsurlconnection_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\xA4TaO\xE38\x10\xFD\x9E_1\xC7\x01J+\x8E\x1F\x90R\xD4\x83^\xC5\x89\xD2\xA2\x16\xB4ZE\xD1\xCA\xC4\xD3\xC6\xBB\xAE\x9Du\x1CP\xB7\xEA\x7F\xDFq\x1A\x87\xD0\x8D\xF6\xCB\"\xA1\xDA\x9E\xF1{\xCF3o\xB2\xDB\x81aj\x8Dp\xFA\r\xB7\x17p\xFA\x05\xA2!\\>h^J,`\xBF\xFF[lrm,\\Q\xA2K\xA1\xA3\xEB`\xB7C\xC5\xF7\xFB \xB8\x99\xCF\xA7Pd\xBA\x94\xFC\x1E1_\x94J\t\xB5\x86!|\xFEo9\b\x82\x91P\x16\xCD\x8A\xA5\bwOO\x8Fc\xFD\xA6\xA4f|\x8C\x12\xD7\xCC\"D0[\xCE_\xBEbj\xAFf\xCB\xE7\xC5\xF4V+E\x1B\xA1\x95O\xB9\x86]\x00\xF47[>\x94\x96\xBDH\x1C3\xCB\xA0\x9Fj\x02V\xB6\x18\x04$bDb\x1C\xD7&\x97\xB8\xA1S\xE6\x00:\t\x83\xE0\x1F\b_\xB5\xE0\xBD\xB4a\x8A\xC2#j\xE8\xB7\xA2\xC0\x05_`\x8A\xE2\x15\x17X\xE4Z\x15X_\xF0[J7\xF52\xF0Z\x1D\xF7\x87\x94\xCC\xDA\xBC\xD9\r!\xECHiP\x065\xC8T\xAF\xC3\xD1\xC9\x92\x9ES\x16\x11\x9CI~r\x01m\x9C\xCB\xA2\n\xDDj\x8E=\x7Fg,*\xD5\xCCl\x89\x13\x19GS\x10\xDD\x87[L\xCA\xBB*2\x11(yq\xB8\xB9\xD2\x06B\xC1\xC15X(\xA8\xAF\xF6\xEA\xE2\xB7\xF5\x9C\x8DH\xCB\x88\xA4Tv\x89=\x89\xAE\xBA8\xD1\xE6\x1E\xB7\x11\x85\x92Z\xD2\xDE5\xE8\x0F\x8A\xEE\xDA\xED\x92\x0Fm\xEFq\xFA\xA9\xAB\x1C{\x0F\x00\xCBsr@\x95\xE9\xE2\xC9\xA0\x9Bs,\xF8D(QdSr\x04\xB9\xF4\xF7\x1A\x9A^\x1E\x9Em\x0Er\xF8I\xFD\xAE.\xCF\xCF\xE6\xEFv\xA4i\xB9\xFC\x97sQuC\x8E1\x95\xCC\x1C|IcCS\x01\x1B&T\xE8\x16\xCC\xAC\xD3\vH3f\xA0O\xEB\xD78\xF1e\x1F\xB1\xD2jC\xD6e\x05\xE6Z\xCBV7\x1C\xFC\xAD\xDEl\xB4\xFA_\x11\x07\x93\xE2\x07\x12\xB2;~4\x983\x837\x9A\xBBYm\xE6\xA6\xF2\xDA\xF7\x12\v\v}S/\x86\x10w\xC5\xEB\xF0'a3:\x8D\xE2\xAAL@\xFF\xEEdi\x8D\xAB\x9Dcz6\x92\x18\x12\xAA\xB7\xDB\xD1'C\xAC\xB6\x1E\x83^\xE9\xB5vN~\x9F\xFB\x15\x89\x88;S\xC8\xA8:M\xC8\x8E\xC2&\x83\x06\xADe\xC8\xA3\xE6\xB5\xFC\xE30\x8F\xE3-8\xF7\x8EZh\xE4k\xE1\xF5D~A\x9C\r\x97XA\xF8\xD7;~\xAF\xB1\xC5\x8A\t\x89\x1C\xAC\x86\xD4\xA0\x13\xFD\x9E\xE4\x9Dr$\x9A\xEC2\xD5:\x87\xBE\xCD\x90\xAAZ\xB5\xC0\x9F\xA5\xA51\xE4\xE8z\xDBz\xF4[F4\x10\xFEj\xBA\xF3s\x88\x0F@\xA6T\xD4\x01\x8ChTp\xC5J\xE9Q\xDC!\xBC \r\xB8\x9B%t\xDDt\xBF4b\xF4\xF9PvR\xDA\xD2`\xD2\x1E\xD7\x9F\x01\x00\x00\xFF\xFF$k\xCC\x1D\x12\x06\x00\x00"));
		_templatesObjc_nsurlsession_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF|Tko\x1A;\x10\xFD\xCE\xAF\x18\xE5&\xD1\x82P>_-\x97+\x9A\x07J\x15\xF2\x10\x10U\x15\"\xC8Y\x0F\xE0\xC6\xD8[?\xDAR\xB4\xFF\xBDc\xEFn\xB4P\xDA\x95`\xED\x19\xCF\x993\x9E3\xBB\xDB\x81aj\x85p\xFA\x86\xDB.\x9C. \xED\xC3\xC5\xBD\xE6^\xA2\x85\xA2\xF8Glrm\x1C\xFCG\x07\xC3\x112\xFD\xDF\xDA\xEDP\xF1\xA2h]>>\x8E\xC0\xAE\xB5\x97\xFC\x0E1\x1F{\xA5\x84ZA\x1F>\xDFLzt\n.>p.\x9C\xD0\x8A\xC9k\xCC$3,l\b\xA3%\x94\x83\r\x13*\t\vfVY\x17\xB253\xD0\xA1\xF5\xB7\xD9\xBC\r\xBB\x16\xD03`\xDEi\x83\x12\x99\xC5\\kY\x99\xC3\x13\xE0\xAF\xF4f\xA3\xD5GE9\x98\x14?\x91\x90\x83\xF9\xC9`\xCE\f^j\x1E\xF8>L\xEE\xBDc\xAF\x12\x9F\xC7\xA31~\xF5h\x1DtL\xB5\xE8\xC3\xEC\x98\xBFr\x7F\x12nM\xD6\x94\xCE\xD0\v\xE8\x17,\x13g\xA8\xCC4dz6\x922\xCC\xE7e\xB5tmb\xB9\xAD1\xA8\xCA\x9Ak\f\x9F\xA0\xB5\xA1\xFA\x8E\xAD\x161w\xC3a\xE9\x02\x90W;\x82<\x16}\xCD\x1C\x9B2\xFB\xD6\x01G\xFF\x01\xA2F\xE3\x95'0\xAC(\xA4u\x95\x99\xDE\xE4\x12\xC3\xDD\xDF2\xC5%\x9A\xF4%y\x98\x04,\xE8\x84\xB8n\x99c\x8C6\xD7\xCAb\xB8\x9Er\x15\x1C7\xC6hj\f\x86W\xBB\xD1\x80\x92\xDA\xEDt\xFA\xB4\x17\xBAv.\x7F\xDF\xF5!9r\xA4]\xC3\xF7\x0E\xC0Fz\x95\fN&\x8E9oS8\x93\xFC\xA4\vM\xBC\v\x1B]W\x9Ac\xFB0\xF6ZdQifK\x1C\x90q4\x96\xD2\xEFE3)o\xA3g(Pr\xBB\x8F\xB0\xA4\"\x13\xC1!\x88\\(\xA8 \x0E\vn\xF2<\x1B\x10\xC7\x01Q\x8C\xA33\xAB\x93\xEA\xD7/\x98\xB9\xA16w\xB8M\xC95?\xA0Z\xEC\xED\xC42\x897\v\xFD>(!\x8F\xE7+\x15\x07\xD4t\xFC\x115;{\xB7QM:\x9B\x13c\x11\xD5\x1Az\x9AF-\x00\xAA\x8C\xF4HB\r\xCD\x9D\x0E\xFF-\x03n*\xEB\xBC\xF7\xC7\xBA\xA2.\xFAei!\xE1_\xF9sas\xE6\xB2\xF5\xC2nU\x96\xBC\xEFV\xE8\x16a\xBE\x17$@\x8FI\xBB\v/I{w\xF4c\xF1\xF0\xD8\x83\xA2\x91\xA3hP\x9BE\x95\x93\\\xFC\x06\xC9\xDC\x18\t\x8A\x1Fi\x9DC\xC7\xAD\x91F3\xCERm\xCB\xBC1\xA8\\\xB5m\xC0}_\v\x89\x90\xFC\xCE\xE2\xFC\x9CRE \xE3\x15\x8D1\xA6$(\\2/k\x94`\x84W$\x95 \xDD\x0F\x86OBx\x87\xFA\x1DSn\xE8\x9D78\xAF{]\xB4\x8A\xD6\xAF\x00\x00\x00\xFF\xFF\xA5\xF2\x94\xDD[\x05\x00\x00"));
		_templatesPhp_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFFt\x8EOK\xC5@\f\xC4\xEF\xFD\x14ay\x87-\x14\xBF\x80V\xF1\xCF\xC1\x8B\xE0\xC5\x93<\x96\xB0\x9B\xDAB\xDB]\xD2(\x95\xC7\xFB\xEE&\xAD\n\x1E<\xFEf&\x93\xB9\xBA)}9\x9D\xE0\xE26\xA5A\x86<\xE3\xF8@qDF\x038\x9F\xCD{f*\xC8t\x97\xD3\xE7_\xE5\x910\x11\xABV\x1D\xA2\xAC\xD0\xC2\"L8\x85\x98g\xA1UBT\x12\xF2\xAF\x15\x80\xEBE\x8A\x83\xF6\x1A\x8C\x94'\x92>\xA7MqV\xF9\xB4\xB1vm\xF4\xDBlpou\xB3\xD8\x1F\x80cu\xAC/\xABCW\xF4]\x97\v\xCD\xDE\"/<\xAA\xDD\x80c\xD7@\x87\xE3B\r\xD8&\x8D\x0E\x1D\xF8-\xDE\xB6\xBBSk\v\xAD\x83x5?\x90Cz\x9F\x8A\xFF^\xFEF\x12t\x19\x86\x84\x82vV\xFF\x13\x8A\xFB\xA6\xE5'\xF3\x15\x00\x00\xFF\xFF\xB4\f\x94\x89I\x01\x00\x00"));
		_templatesPython_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\\\x91\xC1n\x830\f\x86\xEF<\x85\x85z\x00\t\xF1\x00\x958l\xDD\xA1\x97J{\x83\xC8#n\x89F\x13\x96\xB8\xD2&\x94w\x9FM\xBAN*\x17\xE2\x9F\xCF\xFF\xEF\x98u\x85\x88\xFEB\xB0\xFB\xA4\x9F\x0Ev\x06\xF6\x03\xF4\xA7`o3%\xC8\xD9]\x97\x10\x19\x04S@\x84j]\xC9\xDB\x9CE\xE9_\xACu\xEC\x82\xC7\xF9\x8D\xC6\x19#j\xA1\x8C\xA53\\\xD1\xF9\xA6\xDDW \xCF\x18\xBC\x87\x01&\xE6\xA5\x1FgG\x9E{\xED?\x88L\xA36\x1DfL\x1A\xD7\xD4\xAA\x1FCb)\xEAvkV\xE5=\x86oM/gZ0\xD2k\xB0O\xCA\x91\xD0R\xD4\xFC\xBF\xCC>\xD2\xD7\x8D\x12\x17\xDB\x13\xF1\x14\xAC\x1Aw\xC5\x14y\xDA\x1C\xDCY21\xA9c\xCE\x1D|\xC8{P\xE0\x11q\xBF\xF1\x9D+9JN\xDB)m\xF0#\xFD\x8E\x97\xE1\xA3lq(\xB3\\\x88\xA5Z\x82O\xD4\x94\x8FKt\x9E\x1B\x11\xFB\xC4\xC8\xB7\xD4).3c\n\xFE\x99\x10\xD56m\xFB\x7F\xB5q\x0E\x9BQ%S\x19\xE3\xF1J\xC6\xC00@m\x8C\xAE\xDE\x98\xBA\xEC\xBE\xFC\x87\xEA7\x00\x00\xFF\xFF\x90\xAD\x14\x9C\xE9\x01\x00\x00"));
		_templatesVim_script_fullTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFFT\x8F\xC1\x8E\xC2 \x14E\xF7\xFD\n&\xDD\xCCl\xFA\x01\x93\xCCb\xD4\x187&n\xFC\x80g\xB9\n\tB\x03\xAF1J\xF8wA\xAA\xD6\xE5;\xF7\xE6\xC0\x8DQt\xFFRj\xD6\xCE\x92Y\xA17\xE4\xA9\x1C\"\xA5\x92\xED<\x06\xF2X8y\xFD$\x1B\x90\x84\xCF\xCC\x80E\xF8\xF5\b\xE2O\\p\xA0A\xB7\x8AyhKw\vVN\xE6\xD2w\xB9\xF6\xDEL\x8E\xA2[:\xCB\xB0<\x91\x97\xEE\xA7A\xAF\\5v\x81\x89\xC70'g\x84@'\xCCQ_E\xCDh\xF3W\xBE*\x8CQ\x1F\xB3\x94B\xF5\xA6\xF4N\xD5\x83\xE4\x06\xAC\xACo\xAFu\x9E\xAEo\xCF\x91\xF7\x00\x00\x00\xFF\xFF^\x8DD\xDB\x13\x01\x00\x00"));
		_templatesXhr_external_fileTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x84TMo\xDB8\x10\xBD\xFBW\xCC\xEAb\x19\xEBH\t\xB0\x87E,\xEB\xB0\x9B\x149$H\x90\xB8@\x8A\xA2\x07Z\x1CIDe\x92%G\xFE@\xE0\xFF\xDE\xA1%\xDBj\x1B \xBCX\x9Cyo\xF0\xDE\f\xC7\xD9_7\x8F\xFF/\xBE<\xDDBM\xAB&\x1Fe\xC7\x1F\x142\x1F\x01\x9Fl\x85$\xA0\xA8\x85\xF3H\xF3\xA8\xA5\xF2\xE2\xDF\xA8O\x91\xA2\x06\xF3\xD7\xBBgX\xA0\xA7,\xED\xEE]\xCE\xD3\xEE\xF8-\xD5:\x91\xCEX\x12\xAEB\x82\xB7C0\x9C\xA5q\x12\x1D\\\x837\x8D\x92pe\xB7\xB0lD\xF1}vBX!\xA5\xD2\x15C\xAE.\xED\xF6\x1C_2\xAAr\xA6\xD5\xF2\xA20\x8D\t5,\x8A\xA2\xB6mYv\xA8}'#\xEDudig)[\x1A\xB9\xE3\x1F\xD6\x04J\xCE\xA3\xA0+\x82\xA2\x11\xDEw\x97Nd\x94\x87o(U\x83P\xA3\xC3,e\x02\xD3|\xE1\x94\xA5|4*[]\x902\x1A\x1C\xFEh\xD9|\x1C\xA0\x93\xDE\xDBZ8\xD8\xD6\x0E\xE6\xA0q\x03\xAF\x0F\xF7wD\xF6\xB9\x07Nfoo\x90<9\xB4\xC2\xE1\x7F\xAC\x06\xF6\x9DVf$\xC6\xA2\x8E\xA3\x00x@\xAA\x8D\xE4\\4\x85p\xFF\xEC\x1A\xBEL\x81\\\x8B\x93\xCE\xE2\xA0\xCE\xA3\rb\xFC/\xA5\xB4c\xC7;O\x82\x90\xC7\xA7+d=G\xD9\xF1Ik8\xAA\x84\x98j\xE5\x93\x03\xE3%0`>\x87\x7F\x86\x98\xC3 M\xD1\xAEPS\xB2q\x8A0\x8E2\x9B\x87v^G\xF07\xF4|oY\x06.pK\x1C\x8B\xB2\xD4\xE6\xD1d\xF6Q\x91\xA0\xB1\xF5\xE72\xDD\xFD\xBD\x02\x9D\xBD\xFD\xEC\xE4\xD2\xA3\x96qhD\xDFI\xC6\xEE\x07\xD3a\xDF\xB2\xC1\x1B'\xAA\xC75\xBA\xB3kL\xAC\xC35\xAB\xB8\xC1R\xB4M\x98\xCA\xBB<c\x87\x1CO\xC6>qLT\xE2\xD0\xC4^\xD8{\xC5\x8E\xCF\xE0\xF0\x82\xE6\f\x91\x82\xC4\xC2\t\xEDKtI\x88\xFA\xAF\x97\xDF:\xDC\xC1\xB3\xD2\x1A\xDD\xDD\xE2\xE1>L\x89\xD3\x89\x16+\xFCc\xCE\x9FB9\x1E2k\xDD(-\xCD\x86\xC7\xDC\x18!\x07\xA3\x85x\xF8\fIT\x9C;\xF5\x9C\x9F\xA0\xDB\xBD`\x83\x05\x19\x17\x8F\x07k9\xEEE3!\xE1\xA5\xBB\r~\xEE\x95'dY\xF1Xr\x07\rwp<\xFD\xAD\xA5S(E\xE3\xF1\x03\xB2\xB1\x03\xA2\xB1g\xD2\x9E\x17\xF3\xB8SY\xDA\xEFf\xDA\xFD\t\xFD\f\x00\x00\xFF\xFFV\xE0\xB4]\x9C\x04\x00\x00"));
		_templatesXhr_external_filesTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF\x8CTMo\xEB6\x10\xBC\xFBW\xEC\x13\x1E`\x19\xF1\x93\xF3\x80\x1E\n[\xD2\xA1M\x8A\x1C\x92&H\\ E`\x14\xB4\xB8\x92\x88\xC8$KR\xFE\x80\xA1\xFF\xDE\xA5$\xC7J\x10 \xD5\xC5\xA68;\x9C\x99]1\xFEvu\xFF\xFB\xF2\xEF\x87k(\xDD\xA6JG\xF1\xE9\x07\x19OG@O\xBCA\xC7 +\x99\xB1\xE8\x92\xA0v\xF9\x8F_\x83~\xCB\tWa\xFA|\xF3\bK\xB4.\x9Eu\xEBn\xCF\xBA\xC3\xE9?\x17\xDB\x88\x1B\xA5\x1D3\x05:8\xB6/\xFD\xB3V\x86\xA3\x819XU\t\x0E?\xF5\x1E\xD6\x15\xCB^\x17o\b\xCD8\x17\xB2 \xC8\xCFK\xBD?\xBF_\x13\xAA0\xAA\x96\xFCG\xA6*\xE594\xB2\xAC\xD4u\x9Ew\xA8\xA6\x931\xEBu\xC4\xB3\xCER\xBCV\xFC\x90\x1E\x8F`\x98,\x10\xBE\xFF3\x85\xEF\x92m\x10\xE6\tD\x7F\x88\n\xFF\xA4\x85\x85\xA6\x19\xC5$\x1B\x04O\x02/=\x80\xACb\xD6v\x8B\xCEG\xD0n\x12SW\xDF4A:X\xCC\xC1#!'F(\xD1`<#:\x02\xA0\xE4\x9E\xDBfFh\x97\x8EF[fZ\x90\x85\x04\x8E\xCDb4\xCAk\x999\xA1$\x18\xFC\xB7\xA6T\xC3I\x1F\x98G\n~+\xAC#\xE8\xCB\xFFp\xF0N\xDB\x14\xFA\xB3W]<9e\x16\xB6\x94\xC4v\xB9\xA0\x9F\xB8g\x8F*\x94\x85+\xE9\xD5\xC5\xC5d\xD0,\x91C\xF8\xAD\x95\xFA\xD2\x01_\xC4j5\x04\xF8\xC7\xA0\xAB\x8D<\xF7\xA9\x19\xF4\xC2\x9F\xB6/\r\x9D'q\x07\xCFw\xB77\xCE\xE9\xC7\x93\xCB\x05\xA9\x8D\x1E\fjf\xF07\xEA\x91o\x81\xAF\xA2\x8AHi\x94\xA1\xB7\x13\xDD\xA1+\x15?\x19\x82\xE8/S\xD1b\n\xCE\xD48\xE9\x8E\x1D\xF0\xDCk\x9F\xA4}G%\r\xCD\xC1\xC1:\xE6\x90\x86\xDA'\x98\xC0)\xF3\x10?\x1Av\xA5\xB0Q[\xF1\xE4+ I\xE0\x97\x8F\x9E\xB9\xCA\xEA\rJ\x17\xED\x8Cp\x18\x06\xB1N\xFD\x90\xCD\x03\xB8\x80\xBE\xDEj\x92\x81K\xDC;z\x17\xC43\x9D\x06\x93\xC5W$^cm\xCF4\xDD\xFA3\x82>\xE5\xC5\x9BKK\xAD\x0E}\x10}\x92\x84m\x06\xA3E\xBEy\x85W\x86\x15\xF7[4g\xD7\x18i\x83[Rq\x859\xAB+\xDF\x95O\xEB\x94\xF6VB\xC7\x8A)\f\x8A\xADS\xFA\x816Y\xC1\xDA4{\x85\x9F\xB1\x9E\xE6\xA1\xFD>\x12\x82p\xE6\xD8\x92&\xDA\xE6h\xA2n\xCA.\xFBQm\xCD\v)\xD1\xDC,\xEFn}\xBBh;\xF2\x83\xDD\x8Fr\x8B~\xC5\xC3\xAA\xDFkE\xEF\x84\xE4jG\xFD\xAE\x14\xE3\x83\x1E\xC3\xBB\x0F\x8A,\xD0\xDE[\xF84\x8B\xE6\xF0\x84\x15fN\x99p<\xB8\xB5\xC6\xBDh*\x88\xE8N\xBA\xF6~\xFCG\x80$+\x1Cs\x8ARQ\x94\xE3\xE9\x87l\xA7\x90\xB3\xCA\xE2\x17\xC5J\x0F\n\x95>\x17\xD1M1;]\x15\xF1\xAC\xBD\xBA\xFCM\xD6\xDE\xD1\xFF\x05\x00\x00\xFF\xFFj\xF1\x88W\xBB\x05\x00\x00"));
		_templatesXhr_simpleTpl = new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\tn\x88\x00\xFF|RMo\xA3@\f\xBD\xF3+\xBCs\"\xDA,\\\xF6\xB0Z\x06\x0E\xFD\x90rh\x94(M\xA5\xF4H\xC1)Hd\x98\xCE\x98\x92(\xE2\xBF\xD7\xC3G\x9AJU}\x19\x19\xBF\xF7\xF4\xEC\x87\xFCu\xB7\xBA\xDD>\xAF\xEF\xA1\xA0C\x95xrz0\xCD\x13\x0F\xB8\xE4\x01)\x85\xACH\x8DE\x8AEC\xFB?\xFF\xC48\xA2\x92*Lv\x8B\rl\xD1\x92\f\x87\xDE\x93\xE1@\x97/u~\xE2\xC7f\xA6\xD4\x94x\xFBFeT\xD6\n\f\xBE5L\xF0gp\xEE\x85\xDES\x03\xC7\xC2@\f\n[\xD8-\x1F\x16Dz3\x81\xA2\xF3\x19\x82\xB5A\x9D\x1A\xBCaE\xE8\xBA\x9E\xC5\x8C\xA0\xD6\xA8|\xE1\x00K\xA4\xA2\xCEy&\xE6\xE0\xFA'Sq3\x072\r\xCE\xA2\x9Ep\xA5\xB3\xD2\xCE\x88\xFD\"\xA5\f\xBB>YJ\ty]\xF5\x8A\xECg\xB2\xEC\xE3\xE4\xD5U\xB9\x07\x9F\x8A\xD2\x06=\xE3\xD11 \x8E\xE1\xEF5\xC6U^g\xCD\x01\x15\x05\xAD)\t}!u\xE2N\xF2_\xC0o\x18\xF9V\xB3\r\xDC\xE2\x91\xF8\x9B\x90\xA1N\xC4\xE8\xF6\x07\x11\xE7\xB1\xB1\x9F2C\xFF\x9D\xC0\xB0^\x17]\xB6\xB4\xA8r\xDF\x1Db\xBC$c;\xAF-U^\xB7|\x81\xAAN\xF3\xAB\xAD\xE1\x92\xD0%1\x86G\x1C\xF0\x14\xA9\f\xC7\x8C\xC3\xE1\xC7\xF9\b\x00\x00\xFF\xFF\xCC\xCD\x1AVP\x02\x00\x00"));
		_bindata = $makeMap($String.keyFor, [{ k: "templates/go_full.tpl", v: templatesGo_fullTpl }, { k: "templates/go_get_with_data_url.tpl", v: templatesGo_get_with_data_urlTpl }, { k: "templates/go_post_form.tpl", v: templatesGo_post_formTpl }, { k: "templates/go_post_single_file.tpl", v: templatesGo_post_single_fileTpl }, { k: "templates/go_post_text.tpl", v: templatesGo_post_textTpl }, { k: "templates/go_post_with_data_url.tpl", v: templatesGo_post_with_data_urlTpl }, { k: "templates/go_simple_get.tpl", v: templatesGo_simple_getTpl }, { k: "templates/go_simple_post.tpl", v: templatesGo_simple_postTpl }, { k: "templates/java_full.tpl", v: templatesJava_fullTpl }, { k: "templates/nodejs_external_file.tpl", v: templatesNodejs_external_fileTpl }, { k: "templates/nodejs_external_files.tpl", v: templatesNodejs_external_filesTpl }, { k: "templates/nodejs_full.tpl", v: templatesNodejs_fullTpl }, { k: "templates/nodejs_simple_get.tpl", v: templatesNodejs_simple_getTpl }, { k: "templates/objc_nsurlconnection_full.tpl", v: templatesObjc_nsurlconnection_fullTpl }, { k: "templates/objc_nsurlsession_full.tpl", v: templatesObjc_nsurlsession_fullTpl }, { k: "templates/php_full.tpl", v: templatesPhp_fullTpl }, { k: "templates/python_full.tpl", v: templatesPython_fullTpl }, { k: "templates/vim_script_full.tpl", v: templatesVim_script_fullTpl }, { k: "templates/xhr_external_file.tpl", v: templatesXhr_external_fileTpl }, { k: "templates/xhr_external_files.tpl", v: templatesXhr_external_filesTpl }, { k: "templates/xhr_simple.tpl", v: templatesXhr_simpleTpl }]);
		$pkg.LanguageMap = $makeMap($String.keyFor, [{ k: "go", v: "go" }, { k: "golang", v: "go" }, { k: "py", v: "python" }, { k: "python", v: "python" }, { k: "node", v: "node" }, { k: "nodejs", v: "node" }, { k: "js.node", v: "node" }, { k: "javascript.node", v: "node" }, { k: "xhr", v: "xhr" }, { k: "js.xhr", v: "xhr" }, { k: "javascript.xhr", v: "xhr" }, { k: "js.browser", v: "xhr" }, { k: "javascript.browser", v: "xhr" }, { k: "java", v: "java" }, { k: "objc", v: "objc_nsurlsession" }, { k: "objc.session", v: "objc_nsurlsession" }, { k: "objc.nsurlsession", v: "objc_nsurlsession" }, { k: "objc.connection", v: "objc_nsurlconnection" }, { k: "objc.urlconnection", v: "objc_nsurlconnection" }, { k: "php", v: "php" }, { k: "vim", v: "vim" }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/shibukawa/shell"] = (function() {
	var $pkg = {}, $init, bytes, fmt, unicode, sliceType, arrayType, arrayType$1, sliceType$2, Unescape, Parse;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	unicode = $packages["unicode"];
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$2 = $sliceType($String);
	Unescape = function(src) {
		var $ptr, _1, _i, _ref, _rune, bound, buffer, ch, escaped, i, src;
		if ((src.length === 0) || !((src.charCodeAt(0) === 34))) {
			return src;
		}
		buffer = new bytes.Buffer.ptr(sliceType.nil, 0, arrayType.zero(), arrayType$1.zero(), 0);
		bound = src.length - 1 >> 0;
		escaped = false;
		_ref = src.substring(1, bound);
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			ch = _rune[0];
			if (escaped) {
				_1 = ch;
				if (_1 === 116) {
					buffer.WriteByte(9);
				} else if (_1 === 114) {
					buffer.WriteByte(13);
				} else if (_1 === 110) {
					buffer.WriteByte(10);
				} else {
					buffer.WriteRune(ch);
				}
				escaped = false;
			} else if (ch === 92) {
				if (i < (bound - 1 >> 0)) {
					escaped = true;
				}
			} else {
				buffer.WriteRune(ch);
			}
			_i += _rune[1];
		}
		return buffer.String();
	};
	$pkg.Unescape = Unescape;
	Parse = function(src) {
		var $ptr, _1, _i, _ref, _rune, c, currentWordStart, i, result, src, status;
		result = sliceType$2.nil;
		status = 0;
		currentWordStart = 0;
		_ref = src;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_1 = status;
			if (_1 === 0) {
				if (!unicode.IsSpace(c)) {
					if (c === 34) {
						currentWordStart = i;
						status = 2;
					} else {
						currentWordStart = i;
						status = 1;
					}
				}
			} else if (_1 === 1) {
				if (unicode.IsSpace(c)) {
					result = $append(result, src.substring(currentWordStart, i));
					status = 0;
				}
			} else if (_1 === 2) {
				if (c === 92) {
					status = 3;
				} else if (c === 34) {
					result = $append(result, Unescape(src.substring(currentWordStart, (i + 1 >> 0))));
					status = 0;
				}
			} else if (_1 === 3) {
				status = 2;
			}
			_i += _rune[1];
		}
		if (!((status === 0))) {
			result = $append(result, src.substring(currentWordStart, src.length));
		}
		return result;
	};
	$pkg.Parse = Parse;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["honnef.co/go/js/console"] = (function() {
	var $pkg = {}, $init, bytes, js, sliceType, c, Error, Log;
	bytes = $packages["bytes"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sliceType = $sliceType($emptyInterface);
	Error = function(objs) {
		var $ptr, obj, objs;
		(obj = c, obj.error.apply(obj, $externalize(objs, sliceType)));
	};
	$pkg.Error = Error;
	Log = function(objs) {
		var $ptr, obj, objs;
		(obj = c, obj.log.apply(obj, $externalize(objs, sliceType)));
	};
	$pkg.Log = Log;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		c = $global.console;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["html"] = (function() {
	var $pkg = {}, $init, strings, utf8, sliceType, htmlEscaper, EscapeString;
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	sliceType = $sliceType($String);
	EscapeString = function(s) {
		var $ptr, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = htmlEscaper.Replace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ $s = 2; case 2:
		return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EscapeString }; } $f.$ptr = $ptr; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.EscapeString = EscapeString;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = strings.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		htmlEscaper = strings.NewReplacer(new sliceType(["&", "&amp;", "'", "&#39;", "<", "&lt;", ">", "&gt;", "\"", "&#34;"]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["."] = (function() {
	var $pkg = {}, $init, js, flags, common, generator, shell, console, html, strings, GlobalOptions, sliceType, sliceType$1, funcType, mapType, GenerateCode, main;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	flags = $packages["github.com/jessevdk/go-flags"];
	common = $packages["github.com/shibukawa/curl_as_dsl/common"];
	generator = $packages["github.com/shibukawa/curl_as_dsl/generator"];
	shell = $packages["github.com/shibukawa/shell"];
	console = $packages["honnef.co/go/js/console"];
	html = $packages["html"];
	strings = $packages["strings"];
	GlobalOptions = $pkg.GlobalOptions = $newType(0, $kindStruct, "main.GlobalOptions", "GlobalOptions", ".", function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($emptyInterface);
	funcType = $funcType([$String, $String], [$String, $String], false);
	mapType = $mapType($String, $emptyInterface);
	GenerateCode = function(target, options) {
		var $ptr, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, args, curlCommand, curlOptions, err, globalOptions, options, parser, sourceCode, target, urls, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $ptr = $f.$ptr; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; args = $f.args; curlCommand = $f.curlCommand; curlOptions = $f.curlOptions; err = $f.err; globalOptions = $f.globalOptions; options = $f.options; parser = $f.parser; sourceCode = $f.sourceCode; target = $f.target; urls = $f.urls; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		curlOptions = [curlOptions];
		globalOptions = [globalOptions];
		globalOptions[0] = new GlobalOptions.ptr();
		curlOptions[0] = new common.CurlOptions.ptr(false, $throwNilPointerError, sliceType.nil, "", $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, false, $throwNilPointerError, $throwNilPointerError, sliceType.nil, false, $throwNilPointerError, $throwNilPointerError, false, "", $throwNilPointerError, "", $throwNilPointerError, $throwNilPointerError, "", "", $throwNilPointerError, "", false, common.DataOptions.nil);
		curlOptions[0].Init();
		_r = flags.NewParser(globalOptions[0], 22); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		parser = _r;
		_r$1 = parser.Command.AddCommand("curl", "Generate code from curl options", "This command has almost same options of curl and generate code", curlOptions[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		curlCommand = _tuple[0];
		err = _tuple[1];
		if (!strings.HasPrefix(options, "curl ")) {
			options = "curl " + options;
		}
		args = shell.Parse(options);
		_r$2 = parser.ParseArgs(args); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		urls = _tuple$1[0];
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
			console.Log(new sliceType$1([err]));
			_r$3 = err.Error(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ $s = 7; case 7:
			return ["", _r$3];
		/* } */ case 5:
		if (urls.$length > 1) {
			return ["", "It accept only one url. Remained urls are ignored:" + strings.Join(urls, ", ")];
		}
		/* */ if (parser.Command.Active === curlCommand) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (parser.Command.Active === curlCommand) { */ case 8:
			if (curlOptions[0].Url === "") {
				if (urls.$length > 0) {
					curlOptions[0].Url = (0 >= urls.$length ? $throwRuntimeError("index out of range") : urls.$array[urls.$offset + 0]);
				} else {
					console.Error(new sliceType$1([new $String("Both --url option and url parameters are missing")]));
					return ["", "Both --url option and url parameters are missing"];
				}
			}
			_r$4 = generator.GenerateCode(target, curlOptions[0]); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			sourceCode = _tuple$2[0];
			_r$5 = html.EscapeString(sourceCode); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ $s = 12; case 12:
			return [_r$5, ""];
		/* } */ case 9:
		return ["", ""];
		/* */ } return; } if ($f === undefined) { $f = { $blk: GenerateCode }; } $f.$ptr = $ptr; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.args = args; $f.curlCommand = curlCommand; $f.curlOptions = curlOptions; $f.err = err; $f.globalOptions = globalOptions; $f.options = options; $f.parser = parser; $f.sourceCode = sourceCode; $f.target = target; $f.urls = urls; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenerateCode = GenerateCode;
	main = function() {
		var $ptr;
		$global.CurlAsDsl = $externalize($makeMap($String.keyFor, [{ k: "generate", v: new funcType(GenerateCode) }]), mapType);
	};
	GlobalOptions.init([]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flags.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = common.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = generator.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = shell.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = console.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = html.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($pkg === $mainPkg) {
			main();
			$mainFinished = true;
		}
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["."];
$packages["runtime"].$init();
$go($mainPkg.$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=webui.js.map
